### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.UploadBufferPool"
  id: "UploadBufferPool"
  parent: "com.azure.storage.blob"
  children:
  - "com.azure.storage.blob.UploadBufferPool.UploadBufferPool(int,int)"
  - "com.azure.storage.blob.UploadBufferPool.flush()"
  - "com.azure.storage.blob.UploadBufferPool.returnBuffer(java.nio.ByteBuffer)"
  - "com.azure.storage.blob.UploadBufferPool.write(java.nio.ByteBuffer)"
  langs:
  - "java"
  name: "UploadBufferPool"
  nameWithType: "UploadBufferPool"
  fullName: "com.azure.storage.blob.UploadBufferPool"
  type: "Class"
  package: "com.azure.storage.blob"
  summary: "This type is to support the implementation of buffered upload only. It is mandatory that the caller has broken the source into ByteBuffers that are no greater than the size of a chunk and therefore a buffer in the pool. This is necessary because it upper bounds the number of buffers we need for a given call to write() to 2. If the size of ByteBuffer passed into write() were unbounded, the pool could stall as it would run out of buffers before it is able to return a result, and if it is unable to return, no data can be uploaded and therefore no pools returned. It is incumbent upon the caller to return the buffers after an upload is completed. It is also the caller's responsibility to signal to the pool when the stream is empty and call flush to return any data still sitting in the pool. Broadly, the workflow of this operation is to chunk the source into reasonable sized pieces. On each piece, one thread will call write on the pool. The pool will grab a buffer from the queue to write to, possibly waiting for one to be available, and either store the incomplete buffer to be filled on the next write or return the filled buffer to be sent. Filled buffers can be uploaded in parallel and should return buffers to the pool after the upload completes. Once the source terminates, it should call flush."
  syntax:
    content: "final class UploadBufferPool"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.UploadBufferPool.UploadBufferPool(int,int)"
  id: "UploadBufferPool(int,int)"
  parent: "com.azure.storage.blob.UploadBufferPool"
  langs:
  - "java"
  name: "UploadBufferPool(int numBuffs, int buffSize)"
  nameWithType: "UploadBufferPool.UploadBufferPool(int numBuffs, int buffSize)"
  fullName: "com.azure.storage.blob.UploadBufferPool.UploadBufferPool(int numBuffs, int buffSize)"
  overload: "com.azure.storage.blob.UploadBufferPool.UploadBufferPool*"
  type: "Constructor"
  package: "com.azure.storage.blob"
  summary: "Creates a new instance of UploadBufferPool"
  syntax:
    content: " UploadBufferPool(int numBuffs, int buffSize)"
    parameters:
    - id: "numBuffs"
      type: "int"
      description: "The number of buffers in the buffer pool."
    - id: "buffSize"
      type: "int"
      description: "The size of the buffers"
- uid: "com.azure.storage.blob.UploadBufferPool.flush()"
  id: "flush()"
  parent: "com.azure.storage.blob.UploadBufferPool"
  langs:
  - "java"
  name: "flush()"
  nameWithType: "UploadBufferPool.flush()"
  fullName: "com.azure.storage.blob.UploadBufferPool.flush()"
  overload: "com.azure.storage.blob.UploadBufferPool.flush*"
  type: "Method"
  package: "com.azure.storage.blob"
  summary: "Flushes the current buffer"
  syntax:
    content: " Flux<ByteBuffer> flush()"
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "the flushed buffer"
- uid: "com.azure.storage.blob.UploadBufferPool.returnBuffer(java.nio.ByteBuffer)"
  id: "returnBuffer(java.nio.ByteBuffer)"
  parent: "com.azure.storage.blob.UploadBufferPool"
  langs:
  - "java"
  name: "returnBuffer(ByteBuffer b)"
  nameWithType: "UploadBufferPool.returnBuffer(ByteBuffer b)"
  fullName: "com.azure.storage.blob.UploadBufferPool.returnBuffer(ByteBuffer b)"
  overload: "com.azure.storage.blob.UploadBufferPool.returnBuffer*"
  type: "Method"
  package: "com.azure.storage.blob"
  summary: "Returns the ByteBuffer"
  syntax:
    content: " void returnBuffer(ByteBuffer b)"
    parameters:
    - id: "b"
      type: "java.nio.ByteBuffer"
      description: "The ByteBuffer to reset and return"
- uid: "com.azure.storage.blob.UploadBufferPool.write(java.nio.ByteBuffer)"
  id: "write(java.nio.ByteBuffer)"
  parent: "com.azure.storage.blob.UploadBufferPool"
  langs:
  - "java"
  name: "write(ByteBuffer buf)"
  nameWithType: "UploadBufferPool.write(ByteBuffer buf)"
  fullName: "com.azure.storage.blob.UploadBufferPool.write(ByteBuffer buf)"
  overload: "com.azure.storage.blob.UploadBufferPool.write*"
  type: "Method"
  package: "com.azure.storage.blob"
  summary: "Writes ByteBuffers to a `Flux`"
  syntax:
    content: "public Flux<ByteBuffer> write(ByteBuffer buf)"
    parameters:
    - id: "buf"
      type: "java.nio.ByteBuffer"
      description: "The buffer to write"
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The <code>Flux<ByteBuffer></code>"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.storage.blob.UploadBufferPool.UploadBufferPool*"
  name: "UploadBufferPool"
  nameWithType: "UploadBufferPool.UploadBufferPool"
  fullName: "com.azure.storage.blob.UploadBufferPool.UploadBufferPool"
  package: "com.azure.storage.blob"
- uid: "java.nio.ByteBuffer"
  spec.java:
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.UploadBufferPool.write*"
  name: "write"
  nameWithType: "UploadBufferPool.write"
  fullName: "com.azure.storage.blob.UploadBufferPool.write"
  package: "com.azure.storage.blob"
- uid: "com.azure.storage.blob.UploadBufferPool.flush*"
  name: "flush"
  nameWithType: "UploadBufferPool.flush"
  fullName: "com.azure.storage.blob.UploadBufferPool.flush"
  package: "com.azure.storage.blob"
- uid: "com.azure.storage.blob.UploadBufferPool.returnBuffer*"
  name: "returnBuffer"
  nameWithType: "UploadBufferPool.returnBuffer"
  fullName: "com.azure.storage.blob.UploadBufferPool.returnBuffer"
  package: "com.azure.storage.blob"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
