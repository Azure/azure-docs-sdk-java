### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  id: "EventHubConsumerAsyncClient"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor,com.azure.core.amqp.implementation.MessageSerializer,java.lang.String,int,reactor.core.scheduler.Scheduler,boolean)"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties(java.lang.String)"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive()"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean)"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  - "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  langs:
  - "java"
  name: "EventHubConsumerAsyncClient"
  nameWithType: "EventHubConsumerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "An **asynchronous** consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from either a specific Event Hub partition or all partitions in the context of a specific consumer group.\n\n**Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubConsumerAsyncClient</xref>**\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumerasyncclient.instantiation\\}\n\n**Consuming events a single partition from Event Hub**\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumerasyncclient.receive\\#string-eventposition\\}\n\n**Viewing latest partition information**\n\nLatest partition information as events are received can by setting <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean)\" data-throw-if-not-resolved=\"false\">setTrackLastEnqueuedEventProperties</xref> to `true`. As events come in, explore the <xref uid=\"com.azure.messaging.eventhubs.models.PartitionEvent\" data-throw-if-not-resolved=\"false\">PartitionEvent</xref> object. \\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumerasyncclient.receiveFromPartition\\#string-eventposition-receiveoptions\\}\n\n**Rate limiting consumption of events from Event Hub**\n\nFor event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"reactor.core.publisher.BaseSubscriber.request(long)\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumerasyncclient.receive\\#string-eventposition-basesubscriber\\}\n\n**Receiving from all partitions**\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumerasyncclient.receive\\#boolean\\}"
  syntax:
    content: "public class EventHubConsumerAsyncClient implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor,com.azure.core.amqp.implementation.MessageSerializer,java.lang.String,int,reactor.core.scheduler.Scheduler,boolean)"
  id: "EventHubConsumerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor,com.azure.core.amqp.implementation.MessageSerializer,java.lang.String,int,reactor.core.scheduler.Scheduler,boolean)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "EventHubConsumerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, MessageSerializer messageSerializer, String consumerGroup, int prefetchCount, Scheduler scheduler, boolean isSharedConnection)"
  nameWithType: "EventHubConsumerAsyncClient.EventHubConsumerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, MessageSerializer messageSerializer, String consumerGroup, int prefetchCount, Scheduler scheduler, boolean isSharedConnection)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, MessageSerializer messageSerializer, String consumerGroup, int prefetchCount, Scheduler scheduler, boolean isSharedConnection)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " EventHubConsumerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, MessageSerializer messageSerializer, String consumerGroup, int prefetchCount, Scheduler scheduler, boolean isSharedConnection)"
    parameters:
    - id: "fullyQualifiedNamespace"
      type: "java.lang.String"
    - id: "eventHubName"
      type: "java.lang.String"
    - id: "connectionProcessor"
      type: "com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor"
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "consumerGroup"
      type: "java.lang.String"
    - id: "prefetchCount"
      type: "int"
    - id: "scheduler"
      type: "reactor.core.scheduler.Scheduler"
    - id: "isSharedConnection"
      type: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubConsumerAsyncClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Disposes of the consumer by closing the underlying connection to the service."
  syntax:
    content: "public void close()"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup()"
  id: "getConsumerGroup()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getConsumerGroup()"
  nameWithType: "EventHubConsumerAsyncClient.getConsumerGroup()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the consumer group this consumer is reading events as a part of."
  syntax:
    content: "public String getConsumerGroup()"
    return:
      type: "java.lang.String"
      description: "The consumer group this consumer is reading events as a part of."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName()"
  id: "getEventHubName()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getEventHubName()"
  nameWithType: "EventHubConsumerAsyncClient.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the Event Hub name this client interacts with."
  syntax:
    content: "public String getEventHubName()"
    return:
      type: "java.lang.String"
      description: "The Event Hub name this client interacts with."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties()"
  id: "getEventHubProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getEventHubProperties()"
  nameWithType: "EventHubConsumerAsyncClient.getEventHubProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax:
    content: "public Mono<EventHubProperties> getEventHubProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
      description: "The set of information for the Event Hub that this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace()"
  id: "getFullyQualifiedNamespace()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "EventHubConsumerAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  syntax:
    content: "public String getFullyQualifiedNamespace()"
    return:
      type: "java.lang.String"
      description: "The fully qualified Event Hubs namespace that the connection is associated with"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds()"
  id: "getPartitionIds()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getPartitionIds()"
  nameWithType: "EventHubConsumerAsyncClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves the identifiers for the partitions of an Event Hub."
  syntax:
    content: "public Flux<String> getPartitionIds()"
    return:
      type: "reactor.core.publisher.Flux<java.lang.String>"
      description: "A Flux of identifiers for the partitions of an Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties(java.lang.String)"
  id: "getPartitionProperties(java.lang.String)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubConsumerAsyncClient.getPartitionProperties(String partitionId)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties(String partitionId)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  syntax:
    content: "public Mono<PartitionProperties> getPartitionProperties(String partitionId)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "The unique identifier of a partition associated with the Event Hub."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
      description: "The set of information for the requested partition under the Event Hub this client is associated with."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive()"
  id: "receive()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "receive()"
  nameWithType: "EventHubConsumerAsyncClient.receive()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Consumes events from all partitions starting from the beginning of each partition.\n\nThis method is **not** recommended for production use; the <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\">EventProcessorClient</xref> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput. It is important to note that this method does not guarantee fairness amongst the partitions. Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions."
  syntax:
    content: "public Flux<PartitionEvent> receive()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
      description: "A stream of events for every partition in the Event Hub starting from the beginning of each partition."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean)"
  id: "receive(boolean)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "receive(boolean startReadingAtEarliestEvent)"
  nameWithType: "EventHubConsumerAsyncClient.receive(boolean startReadingAtEarliestEvent)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean startReadingAtEarliestEvent)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Consumes events from all partitions.\n\nThis method is **not** recommended for production use; the <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\">EventProcessorClient</xref> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput. It is important to note that this method does not guarantee fairness amongst the partitions. Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions."
  syntax:
    content: "public Flux<PartitionEvent> receive(boolean startReadingAtEarliestEvent)"
    parameters:
    - id: "startReadingAtEarliestEvent"
      type: "boolean"
      description: "<code>true</code> to begin reading at the first events available in each\n     partition; otherwise, reading will begin at the end of each partition seeing only new events as they are\n     published."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
      description: "A stream of events for every partition in the Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  id: "receive(boolean,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "receive(boolean startReadingAtEarliestEvent, ReceiveOptions receiveOptions)"
  nameWithType: "EventHubConsumerAsyncClient.receive(boolean startReadingAtEarliestEvent, ReceiveOptions receiveOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive(boolean startReadingAtEarliestEvent, ReceiveOptions receiveOptions)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Consumes events from all partitions configured with a set of `receiveOptions`.\n\nThis method is **not** recommended for production use; the <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\">EventProcessorClient</xref> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput. It is important to note that this method does not guarantee fairness amongst the partitions. Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions.\n\n *  If receive is invoked where <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">ReceiveOptions#getOwnerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This receive operation is sometimes referred to as an \"Epoch Consumer\".\n *  Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">ReceiveOptions#getOwnerLevel()</xref> when invoking receive operations. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\""
  syntax:
    content: "public Flux<PartitionEvent> receive(boolean startReadingAtEarliestEvent, ReceiveOptions receiveOptions)"
    parameters:
    - id: "startReadingAtEarliestEvent"
      type: "boolean"
      description: "<code>true</code> to begin reading at the first events available in each\n     partition; otherwise, reading will begin at the end of each partition seeing only new events as they are\n     published."
    - id: "receiveOptions"
      type: "com.azure.messaging.eventhubs.models.ReceiveOptions"
      description: "Options when receiving events from each Event Hub partition."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
      description: "A stream of events for every partition in the Event Hub."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  id: "receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "receiveFromPartition(String partitionId, EventPosition startingPosition)"
  nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Consumes events from a single partition starting at `startingPosition`."
  syntax:
    content: "public Flux<PartitionEvent> receiveFromPartition(String partitionId, EventPosition startingPosition)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "Identifier of the partition to read events from."
    - id: "startingPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "Position within the Event Hub partition to begin consuming events."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
      description: "A stream of events for this partition starting from <code>startingPosition</code>."
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  id: "receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient"
  langs:
  - "java"
  name: "receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Consumes events from a single partition starting at `startingPosition` with a set of <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions\" data-throw-if-not-resolved=\"false\">receive options</xref>.\n\n *  If receive is invoked where <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">ReceiveOptions#getOwnerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This receive operation is sometimes referred to as an \"Epoch Consumer\".\n *  Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">ReceiveOptions#getOwnerLevel()</xref> when invoking receive operations. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\""
  syntax:
    content: "public Flux<PartitionEvent> receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
    parameters:
    - id: "partitionId"
      type: "java.lang.String"
      description: "Identifier of the partition to read events from."
    - id: "startingPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "Position within the Event Hub partition to begin consuming events."
    - id: "receiveOptions"
      type: "com.azure.messaging.eventhubs.models.ReceiveOptions"
      description: "Options when receiving events from the partition."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
      description: "A stream of events for this partition. If a stream for the events was opened before, the same position\n     within that partition is returned. Otherwise, events are read starting from <code>startingPosition</code>."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor"
  name: "EventHubConnectionProcessor"
  nameWithType: "EventHubConnectionProcessor"
  fullName: "com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.MessageSerializer"
    name: "MessageSerializer"
    fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "reactor.core.scheduler.Scheduler"
  spec.java:
  - uid: "reactor.core.scheduler.Scheduler"
    name: "Scheduler"
    fullName: "reactor.core.scheduler.Scheduler"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient*"
  name: "EventHubConsumerAsyncClient"
  nameWithType: "EventHubConsumerAsyncClient.EventHubConsumerAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.EventHubConsumerAsyncClient"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace*"
  name: "getFullyQualifiedNamespace"
  nameWithType: "EventHubConsumerAsyncClient.getFullyQualifiedNamespace"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getFullyQualifiedNamespace"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName*"
  name: "getEventHubName"
  nameWithType: "EventHubConsumerAsyncClient.getEventHubName"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubName"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup*"
  name: "getConsumerGroup"
  nameWithType: "EventHubConsumerAsyncClient.getConsumerGroup"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getConsumerGroup"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventHubProperties"
    name: "EventHubProperties"
    fullName: "com.azure.messaging.eventhubs.EventHubProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties*"
  name: "getEventHubProperties"
  nameWithType: "EventHubConsumerAsyncClient.getEventHubProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getEventHubProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Flux<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds*"
  name: "getPartitionIds"
  nameWithType: "EventHubConsumerAsyncClient.getPartitionIds"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionIds"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.PartitionProperties"
    name: "PartitionProperties"
    fullName: "com.azure.messaging.eventhubs.PartitionProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties*"
  name: "getPartitionProperties"
  nameWithType: "EventHubConsumerAsyncClient.getPartitionProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.getPartitionProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionEvent>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.models.PartitionEvent"
    name: "PartitionEvent"
    fullName: "com.azure.messaging.eventhubs.models.PartitionEvent"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition*"
  name: "receiveFromPartition"
  nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.ReceiveOptions"
  name: "ReceiveOptions"
  nameWithType: "ReceiveOptions"
  fullName: "com.azure.messaging.eventhubs.models.ReceiveOptions"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive*"
  name: "receive"
  nameWithType: "EventHubConsumerAsyncClient.receive"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receive"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close*"
  name: "close"
  nameWithType: "EventHubConsumerAsyncClient.close"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.messaging.eventhubs.EventHubProperties"
  name: "EventHubProperties"
  nameWithType: "EventHubProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubProperties"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.messaging.eventhubs.PartitionProperties"
  name: "PartitionProperties"
  nameWithType: "PartitionProperties"
  fullName: "com.azure.messaging.eventhubs.PartitionProperties"
- uid: "com.azure.messaging.eventhubs.models.PartitionEvent"
  name: "PartitionEvent"
  nameWithType: "PartitionEvent"
  fullName: "com.azure.messaging.eventhubs.models.PartitionEvent"
