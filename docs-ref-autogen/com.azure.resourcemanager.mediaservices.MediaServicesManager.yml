### YamlMime:JavaType
uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager"
fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager"
name: "MediaServicesManager"
nameWithType: "MediaServicesManager"
summary: "Entry point to MediaServicesManager. This Swagger was generated by the API Framework."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MediaServicesManager"
methods:
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.accountFilters()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.accountFilters()"
  name: "accountFilters()"
  nameWithType: "MediaServicesManager.accountFilters()"
  syntax: "public AccountFilters accountFilters()"
  returns:
    description: "Resource collection API of AccountFilters."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.AccountFilters?alt=com.azure.resourcemanager.mediaservices.models.AccountFilters&text=AccountFilters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.assetFilters()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.assetFilters()"
  name: "assetFilters()"
  nameWithType: "MediaServicesManager.assetFilters()"
  syntax: "public AssetFilters assetFilters()"
  returns:
    description: "Resource collection API of AssetFilters."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.AssetFilters?alt=com.azure.resourcemanager.mediaservices.models.AssetFilters&text=AssetFilters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.assets()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.assets()"
  name: "assets()"
  nameWithType: "MediaServicesManager.assets()"
  syntax: "public Assets assets()"
  returns:
    description: "Resource collection API of Assets."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Assets?alt=com.azure.resourcemanager.mediaservices.models.Assets&text=Assets\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.authenticate(com.azure.core.credential.TokenCredential,com.azure.core.management.profile.AzureProfile)"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.authenticate(TokenCredential credential, AzureProfile profile)"
  name: "authenticate(TokenCredential credential, AzureProfile profile)"
  nameWithType: "MediaServicesManager.authenticate(TokenCredential credential, AzureProfile profile)"
  summary: "Creates an instance of MediaServices service API entry point."
  modifiers:
  - "static"
  parameters:
  - description: "the credential to use."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Azure profile for client."
    name: "profile"
    type: "<xref href=\"com.azure.core.management.profile.AzureProfile?alt=com.azure.core.management.profile.AzureProfile&text=AzureProfile\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static MediaServicesManager authenticate(TokenCredential credential, AzureProfile profile)"
  returns:
    description: "the MediaServices service API instance."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.MediaServicesManager?alt=com.azure.resourcemanager.mediaservices.MediaServicesManager&text=MediaServicesManager\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.configure()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.configure()"
  name: "configure()"
  nameWithType: "MediaServicesManager.configure()"
  summary: "Gets a Configurable instance that can be used to create MediaServicesManager with optional configuration."
  modifiers:
  - "static"
  syntax: "public static MediaServicesManager.Configurable configure()"
  returns:
    description: "the Configurable instance allowing configurations."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.MediaServicesManager.Configurable?alt=com.azure.resourcemanager.mediaservices.MediaServicesManager.Configurable&text=Configurable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.contentKeyPolicies()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.contentKeyPolicies()"
  name: "contentKeyPolicies()"
  nameWithType: "MediaServicesManager.contentKeyPolicies()"
  syntax: "public ContentKeyPolicies contentKeyPolicies()"
  returns:
    description: "Resource collection API of ContentKeyPolicies."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.ContentKeyPolicies?alt=com.azure.resourcemanager.mediaservices.models.ContentKeyPolicies&text=ContentKeyPolicies\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.jobs()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.jobs()"
  name: "jobs()"
  nameWithType: "MediaServicesManager.jobs()"
  syntax: "public Jobs jobs()"
  returns:
    description: "Resource collection API of Jobs."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Jobs?alt=com.azure.resourcemanager.mediaservices.models.Jobs&text=Jobs\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.liveEvents()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.liveEvents()"
  name: "liveEvents()"
  nameWithType: "MediaServicesManager.liveEvents()"
  syntax: "public LiveEvents liveEvents()"
  returns:
    description: "Resource collection API of LiveEvents."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.LiveEvents?alt=com.azure.resourcemanager.mediaservices.models.LiveEvents&text=LiveEvents\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.liveOutputs()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.liveOutputs()"
  name: "liveOutputs()"
  nameWithType: "MediaServicesManager.liveOutputs()"
  syntax: "public LiveOutputs liveOutputs()"
  returns:
    description: "Resource collection API of LiveOutputs."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.LiveOutputs?alt=com.azure.resourcemanager.mediaservices.models.LiveOutputs&text=LiveOutputs\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.locations()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.locations()"
  name: "locations()"
  nameWithType: "MediaServicesManager.locations()"
  syntax: "public Locations locations()"
  returns:
    description: "Resource collection API of Locations."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Locations?alt=com.azure.resourcemanager.mediaservices.models.Locations&text=Locations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.mediaservices()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.mediaservices()"
  name: "mediaservices()"
  nameWithType: "MediaServicesManager.mediaservices()"
  syntax: "public Mediaservices mediaservices()"
  returns:
    description: "Resource collection API of Mediaservices."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Mediaservices?alt=com.azure.resourcemanager.mediaservices.models.Mediaservices&text=Mediaservices\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operationResults()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operationResults()"
  name: "operationResults()"
  nameWithType: "MediaServicesManager.operationResults()"
  syntax: "public OperationResults operationResults()"
  returns:
    description: "Resource collection API of OperationResults."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.OperationResults?alt=com.azure.resourcemanager.mediaservices.models.OperationResults&text=OperationResults\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operationStatuses()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operationStatuses()"
  name: "operationStatuses()"
  nameWithType: "MediaServicesManager.operationStatuses()"
  syntax: "public OperationStatuses operationStatuses()"
  returns:
    description: "Resource collection API of OperationStatuses."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.OperationStatuses?alt=com.azure.resourcemanager.mediaservices.models.OperationStatuses&text=OperationStatuses\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operations()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.operations()"
  name: "operations()"
  nameWithType: "MediaServicesManager.operations()"
  syntax: "public Operations operations()"
  returns:
    description: "Resource collection API of Operations."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Operations?alt=com.azure.resourcemanager.mediaservices.models.Operations&text=Operations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.privateEndpointConnections()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.privateEndpointConnections()"
  name: "privateEndpointConnections()"
  nameWithType: "MediaServicesManager.privateEndpointConnections()"
  syntax: "public PrivateEndpointConnections privateEndpointConnections()"
  returns:
    description: "Resource collection API of PrivateEndpointConnections."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.PrivateEndpointConnections?alt=com.azure.resourcemanager.mediaservices.models.PrivateEndpointConnections&text=PrivateEndpointConnections\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.privateLinkResources()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.privateLinkResources()"
  name: "privateLinkResources()"
  nameWithType: "MediaServicesManager.privateLinkResources()"
  syntax: "public PrivateLinkResources privateLinkResources()"
  returns:
    description: "Resource collection API of PrivateLinkResources."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.PrivateLinkResources?alt=com.azure.resourcemanager.mediaservices.models.PrivateLinkResources&text=PrivateLinkResources\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.serviceClient()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.serviceClient()"
  name: "serviceClient()"
  nameWithType: "MediaServicesManager.serviceClient()"
  syntax: "public AzureMediaServices serviceClient()"
  returns:
    description: "Wrapped service client AzureMediaServices providing direct access to the underlying auto-generated API\n     implementation, based on Azure REST API."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.fluent.AzureMediaServices?alt=com.azure.resourcemanager.mediaservices.fluent.AzureMediaServices&text=AzureMediaServices\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingEndpoints()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingEndpoints()"
  name: "streamingEndpoints()"
  nameWithType: "MediaServicesManager.streamingEndpoints()"
  syntax: "public StreamingEndpoints streamingEndpoints()"
  returns:
    description: "Resource collection API of StreamingEndpoints."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingEndpoints?alt=com.azure.resourcemanager.mediaservices.models.StreamingEndpoints&text=StreamingEndpoints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingLocators()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingLocators()"
  name: "streamingLocators()"
  nameWithType: "MediaServicesManager.streamingLocators()"
  syntax: "public StreamingLocators streamingLocators()"
  returns:
    description: "Resource collection API of StreamingLocators."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingLocators?alt=com.azure.resourcemanager.mediaservices.models.StreamingLocators&text=StreamingLocators\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingPolicies()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.streamingPolicies()"
  name: "streamingPolicies()"
  nameWithType: "MediaServicesManager.streamingPolicies()"
  syntax: "public StreamingPolicies streamingPolicies()"
  returns:
    description: "Resource collection API of StreamingPolicies."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPolicies?alt=com.azure.resourcemanager.mediaservices.models.StreamingPolicies&text=StreamingPolicies\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.tracks()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.tracks()"
  name: "tracks()"
  nameWithType: "MediaServicesManager.tracks()"
  syntax: "public Tracks tracks()"
  returns:
    description: "Resource collection API of Tracks."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Tracks?alt=com.azure.resourcemanager.mediaservices.models.Tracks&text=Tracks\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.MediaServicesManager.transforms()"
  fullName: "com.azure.resourcemanager.mediaservices.MediaServicesManager.transforms()"
  name: "transforms()"
  nameWithType: "MediaServicesManager.transforms()"
  syntax: "public Transforms transforms()"
  returns:
    description: "Resource collection API of Transforms."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.Transforms?alt=com.azure.resourcemanager.mediaservices.models.Transforms&text=Transforms\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.mediaservices"
artifact: com.azure.resourcemanager:azure-resourcemanager-mediaservices:2.0.0
