### YamlMime:JavaMember
nameWithType: Applications.listAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync()
  name: listAsync()
  nameWithType: Applications.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listAsync()
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync()
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions applicationListOptions)
  name: listAsync(final ApplicationListOptions applicationListOptions)
  nameWithType: Applications.listAsync(final ApplicationListOptions applicationListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listAsync(final ApplicationListOptions applicationListOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions,final ListOperationCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ListOperationCallback<ApplicationSummary>)
uid: com.microsoft.azure.batch.protocol.Applications.listAsync*
fullName: com.microsoft.azure.batch.protocol.Applications.listAsync()
name: listAsync()
package: com.microsoft.azure.batch.protocol
metadata: {}
