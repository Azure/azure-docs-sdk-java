### YamlMime:JavaMember
uid: "com.azure.core.http.rest.PagedFluxBase.byPage*"
fullName: "com.azure.core.http.rest.PagedFluxBase<T,P>.byPage"
name: "byPage"
nameWithType: "PagedFluxBase<T,P>.byPage"
members:
- uid: "com.azure.core.http.rest.PagedFluxBase.byPage()"
  fullName: "com.azure.core.http.rest.PagedFluxBase<T,P>.byPage()"
  name: "byPage()"
  nameWithType: "PagedFluxBase<T,P>.byPage()"
  summary: "Creates a Flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> starting from the first page.\n\n**Code sample**\n\n```java\n// Start processing the results from first page\n pagedFluxBase.byPage()\n     .log()\n     .doOnSubscribe(ignoredVal -> System.out.println(\n         \"Subscribed to paged flux processing pages starting from first page\"))\n     .subscribe(page -> System.out.printf(\"Processing page containing item values: %s%n\",\n         page.getElements().stream().map(String::valueOf).collect(Collectors.joining(\", \"))),\n         error -> System.err.println(\"An error occurred: \" + error),\n         () -> System.out.println(\"Processing complete.\"));\n```"
  overridden: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage()"
  syntax: "public Flux<P> byPage()"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFluxBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFluxBase\"></xref> starting from the first page"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.http.rest.PagedFluxBase.byPage(java.lang.String)"
  fullName: "com.azure.core.http.rest.PagedFluxBase<T,P>.byPage(String continuationToken)"
  name: "byPage(String continuationToken)"
  nameWithType: "PagedFluxBase<T,P>.byPage(String continuationToken)"
  summary: "Creates a Flux of <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.http.rest.PagedFluxBase.byPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#byPage()\"></xref> instead.\n\n**Code sample**\n\n```java\n// Start processing the results from a page associated with the continuation token\n String continuationToken = getContinuationToken();\n pagedFluxBase.byPage(continuationToken)\n     .log()\n     .doOnSubscribe(ignoredVal -> System.out.println(\n         \"Subscribed to paged flux processing page starting from \" + continuationToken))\n     .subscribe(page -> System.out.printf(\"Processing page containing item values: %s%n\",\n         page.getElements().stream().map(String::valueOf).collect(Collectors.joining(\", \"))),\n         error -> System.err.println(\"An error occurred: \" + error),\n         () -> System.out.println(\"Processing complete.\"));\n```"
  overridden: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(C)"
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<P> byPage(String continuationToken)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFluxBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFluxBase\"></xref> starting from the page associated with the continuation token"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.http.rest"
artifact: com.azure:azure-core:1.12.0
