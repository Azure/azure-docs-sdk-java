### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.listRelationships*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships"
name: "<T>listRelationships"
nameWithType: "DigitalTwinsAsyncClient.<T>listRelationships"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  summary: "Gets all the relationships on a digital twin by iterating through a collection.\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\"myDigitalTwinId\", BasicRelationship.class)\n     .doOnNext(basicRel -> System.out.println(\"Retrieved relationship with Id: \" + basicRel.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\"myDigitalTwinId\", String.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship: \" + rel));\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to convert the relationship to. Since a digital twin might have relationships conforming to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>listRelationships(String digitalTwinId, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of relationships belonging to the specified digital twin and the http response."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  summary: "Gets all the relationships on a digital twin filtered by the relationship name, by iterating through a collection.\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship with Id: \" + rel.getId()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\ndigitalTwinsAsyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     String.class)\n     .doOnNext(rel -> System.out.println(\"Retrieved relationship: \" + rel));\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of a relationship to filter to."
    name: "relationshipName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to convert the relationship to."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<T> <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of relationships belonging to the specified digital twin and the http response."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
