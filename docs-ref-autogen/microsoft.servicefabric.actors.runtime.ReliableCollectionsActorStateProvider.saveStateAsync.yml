### YamlMime:JavaMember
nameWithType: ReliableCollectionsActorStateProvider.saveStateAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: ReliableCollectionsActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the state changes. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Collection of state changes to save. </p>
    name: stateChanges
    type: List&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorStateChange?alt=microsoft.servicefabric.actors.runtime.ActorStateChange&text=ActorStateChange" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture<?>&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified set of actor state changes atomically.</p>

    <p>

      <b>Remarks:</b> The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
  syntax: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync*
fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
package: microsoft.servicefabric.actors.runtime
metadata: {}
