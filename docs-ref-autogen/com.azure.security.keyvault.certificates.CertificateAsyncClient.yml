### YamlMime:JavaType
uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient"
fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient"
name: "CertificateAsyncClient"
nameWithType: "CertificateAsyncClient"
summary: "The Certificate<wbr>Async<wbr>Client provides asynchronous methods to manage <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certifcates\"></xref> in the Azure Key Vault."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CertificateAsyncClient"
methods:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate(String certificateName)"
  name: "backupCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.backupCertificate(String certificateName)"
  summary: "Requests that a backup of the specified certificate be downloaded to the client."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<byte[]> backupCertificate(String certificateName)"
  desc: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n```java\ncertificateAsyncClient.backupCertificate(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateBackupResponse ->\n         System.out.printf(\"Certificate's Backup Byte array's length %s %n\", certificateBackupResponse.length));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the backed up certificate blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse(String certificateName)"
  name: "backupCertificateWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.backupCertificateWithResponse(String certificateName)"
  summary: "Requests that a backup of the specified certificate be downloaded to the client."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<byte[]>> backupCertificateWithResponse(String certificateName)"
  desc: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n```java\ncertificateAsyncClient.backupCertificateWithResponse(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateBackupResponse ->\n         System.out.printf(\"Certificate's Backup Byte array's length %s %n\",\n             certificateBackupResponse.getValue().length));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the backed up certificate blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  summary: "Creates a new certificate."
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  desc: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\nCertificatePolicy certPolicy = new CertificatePolicy(\"Self\", \"CN=SelfSignedJavaPkcs12\");\n certificateAsyncClient.beginCreateCertificate(\"certificateName\", certPolicy)\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  nameWithType: "CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  summary: "Creates a new certificate."
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "The enabled status for the certificate."
    name: "isEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application specific metadata to set."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  desc: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\nCertificatePolicy policy = new CertificatePolicy(\"Self\", \"CN=SelfSignedJavaPkcs12\");\n Map<String, String> tags = new HashMap<>();\n tags.put(\"foo\", \"bar\");\n certificateAsyncClient.beginCreateCertificate(\"certificateName\", policy, true, tags)\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate(String certificateName)"
  name: "beginDeleteCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.beginDeleteCertificate(String certificateName)"
  summary: "Deletes a certificate from a specified key vault."
  parameters:
  - description: "The name of the certificate to be deleted."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<DeletedCertificate,Void> beginDeleteCertificate(String certificateName)"
  desc: "Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.\n\n**Code Samples**\n\nDeletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.beginDeleteCertificate(\"certificateName\")\n     .subscribe(pollResponse -> {\n         System.out.println(\"Delete Status: \" + pollResponse.getStatus().toString());\n         System.out.println(\"Delete Certificate Name: \" + pollResponse.getValue().getName());\n         System.out.println(\"Certificate Delete Date: \" + pollResponse.getValue().getDeletedOn().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> to poll on the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate(String certificateName)"
  name: "beginRecoverDeletedCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.beginRecoverDeletedCertificate(String certificateName)"
  summary: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault."
  parameters:
  - description: "The name of the deleted certificate to be recovered."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<KeyVaultCertificateWithPolicy,Void> beginRecoverDeletedCertificate(String certificateName)"
  desc: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.\n\n**Code Samples**\n\nRecovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.beginRecoverDeletedCertificate(\"deletedCertificateName\")\n     .subscribe(pollResponse -> {\n         System.out.println(\"Recovery Status: \" + pollResponse.getStatus().toString());\n         System.out.println(\"Recover Certificate Name: \" + pollResponse.getValue().getName());\n         System.out.println(\"Recover Certificate Id: \" + pollResponse.getValue().getId());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> to poll on the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recovered certificate\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation(String certificateName)"
  name: "cancelCertificateOperation(String certificateName)"
  nameWithType: "CertificateAsyncClient.cancelCertificateOperation(String certificateName)"
  summary: "Cancels a certificate creation operation that is already in progress."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateOperation> cancelCertificateOperation(String certificateName)"
  desc: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Prints out the updated certificate operation details when a response has been received.\n\n```java\ncertificateAsyncClient.cancelCertificateOperation(\"certificateName\")\n     .subscribe(certificateOperation -> System.out.printf(\"Certificate operation status %s\",\n         certificateOperation.getStatus()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cancelled certificate operation\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse(String certificateName)"
  name: "cancelCertificateOperationWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.cancelCertificateOperationWithResponse(String certificateName)"
  summary: "Cancels a certificate creation operation that is already in progress."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateOperation>> cancelCertificateOperationWithResponse(String certificateName)"
  desc: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Prints out the updated certificate operation details when a response has been received.\n\n```java\ncertificateAsyncClient.cancelCertificateOperationWithResponse(\"certificateName\")\n     .subscribe(certificateOperationResponse -> System.out.printf(\"Certificate operation status %s\",\n         certificateOperationResponse.getValue().getStatus()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"cancelled certificate operation\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer(CertificateIssuer issuer)"
  name: "createIssuer(CertificateIssuer issuer)"
  nameWithType: "CertificateAsyncClient.createIssuer(CertificateIssuer issuer)"
  summary: "Creates the specified certificate issuer."
  parameters:
  - description: "The configuration of the certificate issuer to be created."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateIssuer> createIssuer(CertificateIssuer issuer)"
  desc: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer issuer = new CertificateIssuer(\"issuerName\", \"providerName\")\n     .setAccountId(\"keyvaultuser\")\n     .setPassword(\"temp2\");\n certificateAsyncClient.createIssuer(issuer)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerResponse -> {\n         System.out.printf(\"Issuer created with %s and %s\", issuerResponse.getName(),\n             issuerResponse.getProvider());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)"
  name: "createIssuerWithResponse(CertificateIssuer issuer)"
  nameWithType: "CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)"
  summary: "Creates the specified certificate issuer."
  parameters:
  - description: "The configuration of the certificate issuer to be created. Use\n <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer.CertificateIssuer(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateIssuer#CertificateIssuer(String, String)\"></xref> to initialize the issuer object"
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateIssuer>> createIssuerWithResponse(CertificateIssuer issuer)"
  desc: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n```java\nCertificateIssuer newIssuer = new CertificateIssuer(\"issuerName\", \"providerName\")\n     .setAccountId(\"keyvaultuser\")\n     .setPassword(\"temp2\");\n certificateAsyncClient.createIssuerWithResponse(newIssuer)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerResponse -> {\n         System.out.printf(\"Issuer created with %s and %s\", issuerResponse.getValue().getName(),\n             issuerResponse.getValue().getProvider());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing  a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the created <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation(String certificateName)"
  name: "deleteCertificateOperation(String certificateName)"
  nameWithType: "CertificateAsyncClient.deleteCertificateOperation(String certificateName)"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateOperation> deleteCertificateOperation(String certificateName)"
  desc: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Prints out the deleted certificate operation details when a response has been received.\n\n```java\ncertificateAsyncClient.deleteCertificateOperation(\"certificateName\")\n     .subscribe(certificateOperation -> System.out.printf(\"Deleted Certificate operation last status %s\",\n         certificateOperation.getStatus()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate operation\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse(String certificateName)"
  name: "deleteCertificateOperationWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.deleteCertificateOperationWithResponse(String certificateName)"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created."
  parameters:
  - description: "The name of the certificate which is in the process of being created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateOperation>> deleteCertificateOperationWithResponse(String certificateName)"
  desc: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Prints out the deleted certificate operation details when a response has been received.\n\n```java\ncertificateAsyncClient.deleteCertificateOperationWithResponse(\"certificateName\")\n     .subscribe(certificateOperationResponse -> System.out.printf(\"Deleted Certificate operation's last\"\n         + \" status %s\", certificateOperationResponse.getValue().getStatus()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate operation\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts()"
  name: "deleteContacts()"
  nameWithType: "CertificateAsyncClient.deleteContacts()"
  summary: "Deletes the certificate contacts in the key vault."
  syntax: "public PagedFlux<CertificateContact> deleteContacts()"
  desc: "Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.\n\n**Code Samples**\n\nDeletes the certificate contacts in the Azure Key Vault. Prints out the deleted contacts details.\n\n```java\ncertificateAsyncClient.deleteContacts().subscribe(contact ->\n     System.out.printf(\"Deleted Contact name %s and email %s\", contact.getName(), contact.getEmail())\n );\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer(String issuerName)"
  name: "deleteIssuer(String issuerName)"
  nameWithType: "CertificateAsyncClient.deleteIssuer(String issuerName)"
  summary: "Deletes the specified certificate issuer."
  parameters:
  - description: "The name of the certificate issuer to be deleted."
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateIssuer> deleteIssuer(String issuerName)"
  desc: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.deleteIssuer(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedIssuerResponse ->\n         System.out.printf(\"Deleted issuer with name %s %n\", deletedIssuerResponse.getName()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse(String issuerName)"
  name: "deleteIssuerWithResponse(String issuerName)"
  nameWithType: "CertificateAsyncClient.deleteIssuerWithResponse(String issuerName)"
  summary: "Deletes the specified certificate issuer."
  parameters:
  - description: "The name of the certificate issuer to be deleted."
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateIssuer>> deleteIssuerWithResponse(String issuerName)"
  desc: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.deleteIssuerWithResponse(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedIssuerResponse ->\n         System.out.printf(\"Deleted issuer with name %s %n\", deletedIssuerResponse.getValue().getName()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate(String certificateName)"
  name: "getCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificate(String certificateName)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultCertificateWithPolicy> getCertificate(String certificateName)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificate(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponse ->\n         System.out.printf(\"Certificate is returned with name %s and secretId %s %n\",\n             certificateResponse.getProperties().getName(), certificateResponse.getSecretId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(String certificateName)"
  name: "getCertificateOperation(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificateOperation(String certificateName)"
  summary: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName)"
  desc: "Gets a pending <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateOperation\"></xref> from the key vault. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGet a pending certificate operation. The <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"poller\"></xref> allows users to automatically poll on the certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.\n\n```java\ncertificateAsyncClient.getCertificateOperation(\"certificateName\")\n     .subscribe(pollResponse -> {\n         System.out.println(\"---------------------------------------------------------------------------------\");\n         System.out.println(pollResponse.getStatus());\n         System.out.println(pollResponse.getValue().getStatus());\n         System.out.println(pollResponse.getValue().getStatusDetails());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polling on the certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy(String certificateName)"
  name: "getCertificatePolicy(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificatePolicy(String certificateName)"
  summary: "Retrieves the policy of the specified certificate in the key vault."
  parameters:
  - description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificatePolicy> getCertificatePolicy(String certificateName)"
  desc: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificatePolicy(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(policy ->\n         System.out.printf(\"Certificate policy is returned with issuer name %s and subject name %s %n\",\n             policy.getIssuerName(), policy.getSubject()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse(String certificateName)"
  name: "getCertificatePolicyWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificatePolicyWithResponse(String certificateName)"
  summary: "Retrieves the policy of the specified certificate in the key vault."
  parameters:
  - description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificatePolicy>> getCertificatePolicyWithResponse(String certificateName)"
  desc: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificatePolicyWithResponse(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(policyResponse ->\n         System.out.printf(\"Certificate policy is returned with issuer name %s and subject name %s %n\",\n             policyResponse.getValue().getIssuerName(), policyResponse.getValue().getSubject()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(String certificateName, String version)"
  name: "getCertificateVersion(String certificateName, String version)"
  nameWithType: "CertificateAsyncClient.getCertificateVersion(String certificateName, String version)"
  summary: "Gets information about the specified version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultCertificate> getCertificateVersion(String certificateName, String version)"
  desc: "Gets information about the specified version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificateVersion(\"certificateName\", certificateVersion)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateWithVersion ->\n         System.out.printf(\"Certificate is returned with name %s and secretId %s %n\",\n             certificateWithVersion.getProperties().getName(), certificateWithVersion.getSecretId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse(String certificateName, String version)"
  name: "getCertificateVersionWithResponse(String certificateName, String version)"
  nameWithType: "CertificateAsyncClient.getCertificateVersionWithResponse(String certificateName, String version)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificate>> getCertificateVersionWithResponse(String certificateName, String version)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\nString certificateVersion = \"6A385B124DEF4096AF1361A85B16C204\";\n certificateAsyncClient.getCertificateVersionWithResponse(\"certificateName\", certificateVersion)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateWithVersion ->\n         System.out.printf(\"Certificate is returned with name %s and secretId %s %n\",\n             certificateWithVersion.getValue().getProperties().getName(),\n             certificateWithVersion.getValue().getSecretId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse(String certificateName)"
  name: "getCertificateWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.getCertificateWithResponse(String certificateName)"
  summary: "Gets information about the latest version of the specified certificate."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificateWithPolicy>> getCertificateWithResponse(String certificateName)"
  desc: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificateWithResponse(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponse ->\n         System.out.printf(\"Certificate is returned with name %s and secretId %s %n\",\n             certificateResponse.getValue().getProperties().getName(),\n             certificateResponse.getValue().getSecretId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate(String certificateName)"
  name: "getDeletedCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.getDeletedCertificate(String certificateName)"
  summary: "Retrieves information about the specified deleted certificate."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DeletedCertificate> getDeletedCertificate(String certificateName)"
  desc: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getDeletedCertificate(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedSecretResponse ->\n         System.out.printf(\"Deleted Certificate's Recovery Id %s %n\", deletedSecretResponse.getRecoveryId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse(String certificateName)"
  name: "getDeletedCertificateWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.getDeletedCertificateWithResponse(String certificateName)"
  summary: "Retrieves information about the specified deleted certificate."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DeletedCertificate>> getDeletedCertificateWithResponse(String certificateName)"
  desc: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getDeletedCertificateWithResponse(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedSecretResponse ->\n         System.out.printf(\"Deleted Certificate's Recovery Id %s %n\",\n             deletedSecretResponse.getValue().getRecoveryId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(String issuerName)"
  name: "getIssuer(String issuerName)"
  nameWithType: "CertificateAsyncClient.getIssuer(String issuerName)"
  summary: "Retrieves the specified certificate issuer from the key vault."
  parameters:
  - description: "The name of the certificate to retrieve, cannot be null"
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateIssuer> getIssuer(String issuerName)"
  desc: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specified certificate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\ncertificateAsyncClient.getIssuer(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuer -> {\n         System.out.printf(\"Issuer returned with %s and %s\", issuer.getName(),\n             issuer.getProvider());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse(String issuerName)"
  name: "getIssuerWithResponse(String issuerName)"
  nameWithType: "CertificateAsyncClient.getIssuerWithResponse(String issuerName)"
  summary: "Retrieves the specified certificate issuer from the key vault."
  parameters:
  - description: "The name of the certificate issuer to retrieve, cannot be null"
    name: "issuerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateIssuer>> getIssuerWithResponse(String issuerName)"
  desc: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specificed certifcate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\ncertificateAsyncClient.getIssuerWithResponse(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerResponse -> {\n         System.out.printf(\"Issuer returned with %s and %s\", issuerResponse.getValue().getName(),\n             issuerResponse.getValue().getProvider());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl()"
  name: "getVaultUrl()"
  nameWithType: "CertificateAsyncClient.getVaultUrl()"
  summary: "Get the vault endpoint url to which service requests are sent to."
  syntax: "public String getVaultUrl()"
  desc: "Get the vault endpoint url to which service requests are sent to."
  returns:
    description: "the vault endpoint url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate(ImportCertificateOptions importCertificateOptions)"
  name: "importCertificate(ImportCertificateOptions importCertificateOptions)"
  nameWithType: "CertificateAsyncClient.importCertificate(ImportCertificateOptions importCertificateOptions)"
  summary: "Imports an existing valid certificate, containing a private key, into Azure Key Vault."
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultCertificateWithPolicy> importCertificate(ImportCertificateOptions importCertificateOptions)"
  desc: "Imports an existing valid certificate, containing a private key, into Azure Key Vault. This operation requires the `certificates/import` permission. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. Key Vault will only accept a key in PKCS\\#8 format.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certificateToImport = new byte[100];\n ImportCertificateOptions config =\n     new ImportCertificateOptions(\"certificateName\", certificateToImport).setEnabled(false);\n certificateAsyncClient.importCertificate(config)\n     .subscribe(certificate -> System.out.printf(\"Received Certificate with name %s and key id %s\",\n         certificate.getProperties().getName(), certificate.getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  name: "importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  nameWithType: "CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  summary: "Imports a pre-existing certificate to the key vault."
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificateWithPolicy>> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  desc: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certToImport = new byte[100];\n ImportCertificateOptions importCertificateOptions  =\n     new ImportCertificateOptions(\"certificateName\", certToImport).setEnabled(false);\n certificateAsyncClient.importCertificateWithResponse(importCertificateOptions)\n     .subscribe(certificateResponse -> System.out.printf(\"Received Certificate with name %s and key id %s\",\n         certificateResponse.getValue().getProperties().getName(), certificateResponse.getValue().getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts()"
  name: "listContacts()"
  nameWithType: "CertificateAsyncClient.listContacts()"
  summary: "Lists the certificate contacts in the key vault."
  syntax: "public PagedFlux<CertificateContact> listContacts()"
  desc: "Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.\n\n**Code Samples**\n\nLists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n```java\ncertificateAsyncClient.listContacts().subscribe(contact ->\n     System.out.printf(\"Contact name %s and email %s\", contact.getName(), contact.getEmail())\n );\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates()"
  name: "listDeletedCertificates()"
  nameWithType: "CertificateAsyncClient.listDeletedCertificates()"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery."
  syntax: "public PagedFlux<DeletedCertificate> listDeletedCertificates()"
  desc: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n```java\ncertificateAsyncClient.listDeletedCertificates()\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedCertificateResponse ->  System.out.printf(\"Deleted Certificate's Recovery Id %s %n\",\n         deletedCertificateResponse.getRecoveryId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates(boolean)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates(boolean includePending)"
  name: "listDeletedCertificates(boolean includePending)"
  nameWithType: "CertificateAsyncClient.listDeletedCertificates(boolean includePending)"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery."
  parameters:
  - description: "indicate if pending deleted certificates should be included in the results."
    name: "includePending"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DeletedCertificate> listDeletedCertificates(boolean includePending)"
  desc: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n```java\ncertificateAsyncClient.listDeletedCertificates()\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(deletedCertificateResponse ->  System.out.printf(\"Deleted Certificate's Recovery Id %s %n\",\n         deletedCertificateResponse.getRecoveryId()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.DeletedCertificate?alt=com.azure.security.keyvault.certificates.models.DeletedCertificate&text=DeletedCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)"
  name: "listPropertiesOfCertificateVersions(String certificateName)"
  nameWithType: "CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)"
  summary: "List all versions of the specified certificate."
  parameters:
  - description: "The name of the certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)"
  desc: "List all versions of the specified certificate. The individual certificate response in the flux is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get the certificates with properties excluding the policy for all the versions from this information. Convert the <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> to <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> using <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateAsyncClient#getCertificateVersion(String, String)\"></xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#flatMap(Function)\"></xref>.\n\n```java\ncertificateAsyncClient.listPropertiesOfCertificateVersions(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),\n         certificate.getVersion())\n         .subscribe(certificateResponse -> System.out.printf(\"Received certificate with name %s and key id %s\",\n             certificateResponse.getProperties().getName(), certificateResponse.getKeyId())));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> of all the versions of the specified certificate in the vault. Flux is empty if certificate with <code>certificateName</code> does not exist in key vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates()"
  name: "listPropertiesOfCertificates()"
  nameWithType: "CertificateAsyncClient.listPropertiesOfCertificates()"
  summary: "List certificates in a the key vault."
  syntax: "public PagedFlux<CertificateProperties> listPropertiesOfCertificates()"
  desc: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the flux is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Convert the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> using <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateAsyncClient#getCertificateVersion(String, String)\"></xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#flatMap(Function)\"></xref>.\n\n```java\ncertificateAsyncClient.listPropertiesOfCertificates()\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),\n         certificate.getVersion())\n         .subscribe(certificateResponse -> System.out.printf(\"Received certificate with name %s and key id %s\",\n             certificateResponse.getName(), certificateResponse.getKeyId())));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates(boolean)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates(boolean includePending)"
  name: "listPropertiesOfCertificates(boolean includePending)"
  nameWithType: "CertificateAsyncClient.listPropertiesOfCertificates(boolean includePending)"
  summary: "List certificates in a the key vault."
  parameters:
  - description: "indicate if pending certificates should be included in the results."
    name: "includePending"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<CertificateProperties> listPropertiesOfCertificates(boolean includePending)"
  desc: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the flux is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Convert the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> using <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateAsyncClient#getCertificateVersion(String, String)\"></xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#flatMap(Function)\"></xref>.\n\n```java\ncertificateAsyncClient.listPropertiesOfCertificates()\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),\n         certificate.getVersion())\n         .subscribe(certificateResponse -> System.out.printf(\"Received certificate with name %s and key id %s\",\n             certificateResponse.getName(), certificateResponse.getKeyId())));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers()"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers()"
  name: "listPropertiesOfIssuers()"
  nameWithType: "CertificateAsyncClient.listPropertiesOfIssuers()"
  summary: "List all the certificate issuers resources in the key vault."
  syntax: "public PagedFlux<IssuerProperties> listPropertiesOfIssuers()"
  desc: "List all the certificate issuers resources in the key vault. The individual certificate issuer response in the flux is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IssuerProperties\"></xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.\n\nIt is possible to get the certificate issuer with all of its properties from this information. Convert the <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuerProperties\"></xref> to <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> using <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateAsyncClient#getIssuer(String)\"></xref>\n\n```java\ncertificateAsyncClient.listPropertiesOfIssuers()\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerProperties -> certificateAsyncClient.getIssuer(issuerProperties.getName())\n         .subscribe(issuerResponse -> System.out.printf(\"Received issuer with name %s and provider %s\",\n             issuerResponse.getName(), issuerResponse.getProvider())));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuers\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.IssuerProperties?alt=com.azure.security.keyvault.certificates.models.IssuerProperties&text=IssuerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  name: "mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  nameWithType: "CertificateAsyncClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service."
  parameters:
  - description: "the merge certificate options holding the x509 certificates."
    name: "mergeCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.MergeCertificateOptions?alt=com.azure.security.keyvault.certificates.models.MergeCertificateOptions&text=MergeCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultCertificate> mergeCertificate(MergeCertificateOptions mergeCertificateOptions)"
  desc: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n```java\nList<byte[]> x509CertificatesToMerge = new ArrayList<>();\n MergeCertificateOptions config =\n     new MergeCertificateOptions(\"certificateName\", x509CertificatesToMerge).setEnabled(false);\n certificateAsyncClient.mergeCertificate(config)\n     .subscribe(certificate -> System.out.printf(\"Received Certificate with name %s and key id %s\",\n         certificate.getProperties().getName(), certificate.getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the merged certificate."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)"
  name: "mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)"
  nameWithType: "CertificateAsyncClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service."
  parameters:
  - description: "the merge certificate options holding the x509 certificates."
    name: "mergeCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.MergeCertificateOptions?alt=com.azure.security.keyvault.certificates.models.MergeCertificateOptions&text=MergeCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificateWithPolicy>> mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)"
  desc: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n```java\nList<byte[]> x509CertsToMerge = new ArrayList<>();\n MergeCertificateOptions mergeConfig =\n     new MergeCertificateOptions(\"certificateName\", x509CertsToMerge).setEnabled(false);\n certificateAsyncClient.mergeCertificateWithResponse(mergeConfig)\n     .subscribe(certificateResponse -> System.out.printf(\"Received Certificate with name %s and key id %s\",\n         certificateResponse.getValue().getProperties().getName(), certificateResponse.getValue().getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the merged certificate."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate(String certificateName)"
  name: "purgeDeletedCertificate(String certificateName)"
  nameWithType: "CertificateAsyncClient.purgeDeletedCertificate(String certificateName)"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> purgeDeletedCertificate(String certificateName)"
  desc: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n```java\ncertificateAsyncClient.purgeDeletedCertificateWithResponse(\"deletedCertificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(purgeResponse ->\n         System.out.printf(\"Purge Status response %d %n\", purgeResponse.getStatusCode()));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse(String certificateName)"
  name: "purgeDeletedCertificateWithResponse(String certificateName)"
  nameWithType: "CertificateAsyncClient.purgeDeletedCertificateWithResponse(String certificateName)"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery."
  parameters:
  - description: "The name of the deleted certificate."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> purgeDeletedCertificateWithResponse(String certificateName)"
  desc: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n```java\ncertificateAsyncClient.purgeDeletedCertificateWithResponse(\"deletedCertificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(purgeResponse ->\n         System.out.printf(\"Purge Status response %d %n\", purgeResponse.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a Void Response}."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup(byte[])"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup(byte[] backup)"
  name: "restoreCertificateBackup(byte[] backup)"
  nameWithType: "CertificateAsyncClient.restoreCertificateBackup(byte[] backup)"
  summary: "Restores a backed up certificate to the vault."
  parameters:
  - description: "The backup blob associated with the certificate."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<KeyVaultCertificateWithPolicy> restoreCertificateBackup(byte[] backup)"
  desc: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n```java\nbyte[] certificateBackupByteArray = {};\n certificateAsyncClient.restoreCertificateBackup(certificateBackupByteArray)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponse -> System.out.printf(\"Restored Certificate with name %s and key id %s %n\",\n         certificateResponse.getProperties().getName(), certificateResponse.getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[])"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[] backup)"
  name: "restoreCertificateBackupWithResponse(byte[] backup)"
  nameWithType: "CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[] backup)"
  summary: "Restores a backed up certificate to the vault."
  parameters:
  - description: "The backup blob associated with the certificate."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<Response<KeyVaultCertificateWithPolicy>> restoreCertificateBackupWithResponse(byte[] backup)"
  desc: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n```java\nbyte[] certificateBackup = {};\n certificateAsyncClient.restoreCertificateBackup(certificateBackup)\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponse -> System.out.printf(\"Restored Certificate with name %s and key id %s %n\",\n         certificateResponse.getProperties().getName(), certificateResponse.getKeyId()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts(List<CertificateContact> contacts)"
  name: "setContacts(List<CertificateContact> contacts)"
  nameWithType: "CertificateAsyncClient.setContacts(List<CertificateContact> contacts)"
  summary: "Sets the certificate contacts on the key vault."
  parameters:
  - description: "The list of contacts to set on the vault."
    name: "contacts"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedFlux<CertificateContact> setContacts(List<CertificateContact> contacts)"
  desc: "Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LifetimeAction\"></xref> of type <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicyAction#EMAIL_CONTACTS\"></xref> set on a <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificatePolicy\"></xref> emails the contacts set on the vault when triggered.\n\n**Code Samples**\n\nSets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n```java\nCertificateContact contactToAdd = new CertificateContact().setName(\"user\").setEmail(\"useremail@example.com\");\n certificateAsyncClient.setContacts(Collections.singletonList(contactToAdd)).subscribe(contact ->\n     System.out.printf(\"Contact name %s and email %s\", contact.getName(), contact.getEmail())\n );\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateContact?alt=com.azure.security.keyvault.certificates.models.CertificateContact&text=CertificateContact\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  name: "updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateAsyncClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  summary: "Updates the policy for a certificate."
  parameters:
  - description: "The name of the certificate whose policy is to be updated."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The certificate policy to be updated."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificatePolicy> updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  desc: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificatePolicy(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificatePolicyResponseValue -> {\n         CertificatePolicy certificatePolicy = certificatePolicyResponseValue;\n         // Update transparency\n         certificatePolicy.setCertificateTransparent(true);\n         certificateAsyncClient.updateCertificatePolicy(\"certificateName\", certificatePolicy)\n             .subscribe(updatedPolicy ->\n                 System.out.printf(\"Certificate policy's updated transparency status %s %n\",\n                     updatedPolicy.isCertificateTransparent()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  name: "updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  summary: "Updates the policy for a certificate."
  parameters:
  - description: "The name of the certificate whose policy is to be updated."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The certificate policy is to be updated."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificatePolicy>> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)"
  desc: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificatePolicy(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificatePolicyResponseValue -> {\n         CertificatePolicy certificatePolicy = certificatePolicyResponseValue;\n         // Update transparency\n         certificatePolicy.setCertificateTransparent(true);\n         certificateAsyncClient.updateCertificatePolicyWithResponse(\"certificateName\",\n             certificatePolicy)\n             .subscribe(updatedPolicyResponse ->\n                 System.out.printf(\"Certificate policy's updated transparency status %s %n\",\n                     updatedPolicyResponse.getValue().isCertificateTransparent()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate policy\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties(CertificateProperties properties)"
  name: "updateCertificateProperties(CertificateProperties properties)"
  nameWithType: "CertificateAsyncClient.updateCertificateProperties(CertificateProperties properties)"
  summary: "Updates the specified attributes associated with the specified certificate."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> object with updated properties."
    name: "properties"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultCertificate> updateCertificateProperties(CertificateProperties properties)"
  desc: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificate(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponseValue -> {\n         KeyVaultCertificate certificate = certificateResponseValue;\n         //Update enabled status of the certificate\n         certificate.getProperties().setEnabled(false);\n         certificateAsyncClient.updateCertificateProperties(certificate.getProperties())\n             .subscribe(certificateResponse ->\n                 System.out.printf(\"Certificate's enabled status %s %n\",\n                     certificateResponse.getProperties().isEnabled().toString()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse(CertificateProperties properties)"
  name: "updateCertificatePropertiesWithResponse(CertificateProperties properties)"
  nameWithType: "CertificateAsyncClient.updateCertificatePropertiesWithResponse(CertificateProperties properties)"
  summary: "Updates the specified attributes associated with the specified certificate."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> object with updated properties."
    name: "properties"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificate>> updateCertificatePropertiesWithResponse(CertificateProperties properties)"
  desc: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n```java\ncertificateAsyncClient.getCertificate(\"certificateName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(certificateResponseValue -> {\n         KeyVaultCertificate certificate = certificateResponseValue;\n         //Update the enabled status of the certificate.\n         certificate.getProperties().setEnabled(false);\n         certificateAsyncClient.updateCertificatePropertiesWithResponse(certificate.getProperties())\n             .subscribe(certificateResponse ->\n                 System.out.printf(\"Certificate's enabled status %s %n\",\n                     certificateResponse.getValue().getProperties().isEnabled().toString()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificate&text=KeyVaultCertificate\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer(CertificateIssuer issuer)"
  name: "updateIssuer(CertificateIssuer issuer)"
  nameWithType: "CertificateAsyncClient.updateIssuer(CertificateIssuer issuer)"
  summary: "Updates the specified certificate issuer."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with updated properties. Use\n <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer.CertificateIssuer(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateIssuer#CertificateIssuer(String)\"></xref> to initialize the issuer object"
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CertificateIssuer> updateIssuer(CertificateIssuer issuer)"
  desc: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\ncertificateAsyncClient.getIssuer(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerResponseValue -> {\n         CertificateIssuer issuer = issuerResponseValue;\n         //Update the enabled status of the issuer.\n         issuer.setEnabled(false);\n         certificateAsyncClient.updateIssuer(issuer)\n             .subscribe(issuerResponse ->\n                 System.out.printf(\"Issuer's enabled status %s %n\",\n                     issuerResponse.isEnabled().toString()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse(CertificateIssuer issuer)"
  name: "updateIssuerWithResponse(CertificateIssuer issuer)"
  nameWithType: "CertificateAsyncClient.updateIssuerWithResponse(CertificateIssuer issuer)"
  summary: "Updates the specified certificate issuer."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"issuer\"></xref> with updated properties."
    name: "issuer"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CertificateIssuer>> updateIssuerWithResponse(CertificateIssuer issuer)"
  desc: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n```java\ncertificateAsyncClient.getIssuer(\"issuerName\")\n     .contextWrite(Context.of(key1, value1, key2, value2))\n     .subscribe(issuerResponseValue -> {\n         CertificateIssuer issuer = issuerResponseValue;\n         //Update the enabled status of the issuer.\n         issuer.setEnabled(false);\n         certificateAsyncClient.updateIssuer(issuer)\n             .subscribe(issuerResponse ->\n                 System.out.printf(\"Issuer's enabled status %s %n\",\n                     issuerResponse.isEnabled().toString()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated issuer\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "The CertificateAsyncClient provides asynchronous methods to manage <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certifcates\"></xref> in the Azure Key Vault. The client supports creating, retrieving, updating, merging, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificates\"></xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted certificates\"></xref> for a soft-delete enabled Azure Key Vault.\n\nThe client further allows creating, retrieving, updating, deleting and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateIssuer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate issuers\"></xref>. The client also supports creating, listing and deleting <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateContact\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate contacts\"></xref>\n\n**Samples to construct the async client**\n\n```java\nCertificateAsyncClient certificateAsyncClient = new CertificateClientBuilder()\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .vaultUrl(\"<your-key-vault-url>\")\n     .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.3.5
