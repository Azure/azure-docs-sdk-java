### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  name: createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  nameWithType: ServiceRemotingProvider.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  parameters:
  - name: callbackClient
    type: <xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient&text=ServiceRemotingCallbackClient" data-throw-if-not-resolved="False"/>
  returns:
    type: abstract <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory&text=ServiceRemotingClientFactory" data-throw-if-not-resolved="False"/>
  syntax: public abstract ServiceRemotingClientFactory createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.createServiceRemotingListener(ServiceContext serviceContext, Service serviceImplementation)
  name: createServiceRemotingListener(ServiceContext serviceContext, Service serviceImplementation)
  nameWithType: ServiceRemotingProvider.createServiceRemotingListener(ServiceContext serviceContext, Service serviceImplementation)
  parameters:
  - name: serviceContext
    type: <xref href="system.fabric.ServiceContext?alt=system.fabric.ServiceContext&text=ServiceContext" data-throw-if-not-resolved="False"/>
  - name: serviceImplementation
    type: <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>
  returns:
    type: abstract <xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener&text=ServiceRemotingListener" data-throw-if-not-resolved="False"/>
  syntax: public abstract ServiceRemotingListener createServiceRemotingListener(ServiceContext serviceContext, Service serviceImplementation)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.createServiceRemotingListener(ServiceContext,Service)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.getProvider(Class<?> type)
  name: getProvider(Class<?> type)
  nameWithType: ServiceRemotingProvider.getProvider(Class<?> type)
  parameters:
  - name: type
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingProvider?alt=microsoft.servicefabric.services.remoting.ServiceRemotingProvider&text=ServiceRemotingProvider" data-throw-if-not-resolved="False"/>
  syntax: public static ServiceRemotingProvider getProvider(Class<?> type)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingProvider.getProvider(Class<?>)
nameWithType: ServiceRemotingProvider
syntax: public class ServiceRemotingProvider
type: class
uid: microsoft.servicefabric.services.remoting.ServiceRemotingProvider
fullName: microsoft.servicefabric.services.remoting.ServiceRemotingProvider
name: ServiceRemotingProvider
package: microsoft.servicefabric.services.remoting
summary: <p>This is a base type that sets the default service remoting provider to use for remoting the service interfaces. </p>
metadata: {}
