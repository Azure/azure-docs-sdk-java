### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base
  id: _service_proxy_base
  parent: microsoft.servicefabric.services.remoting.client
  children:
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.create(Class<T>,URI)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.create(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.createRequestMessageBody(Object)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.deserializeMessage(byte [])
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.getResponseMessageBodyValue(Object)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.getServiceInterfaceType()
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.getServicePartitionClient()
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.initialize(ServiceProxyGenerator,ServiceRemotingPartitionClientImpl)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.invoke(int,int,byte [])
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.invokeAsync(int,int,byte [],CancellationToken)
  - microsoft.servicefabric.services.remoting.client._service_proxy_base.serializeMessage(Object)
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: ServiceProxyBase
  nameWithType: ServiceProxyBase
  fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyBase
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 16
  package: microsoft.servicefabric.services.remoting.client
  summary: <p>Provides the base implementation for the proxy to the remoted IService interfaces. </p>
  syntax:
    content: public class ServiceProxyBase extends ProxyBase implements ServiceProxy
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.services.remoting.builder._proxy_base
  inheritedMembers:
  - microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
  - microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)
  - microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)
  - microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)
  - microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.create(Class<T>,URI)
  id: create(Class<T>,URI)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri)
  nameWithType: ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri)
  fullName: static <T extends Service> T microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 23
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
    - id: serviceUri
      type: "62304784"
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.create(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
  id: create(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  nameWithType: ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  fullName: static <T extends Service> T microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 75
  package: microsoft.servicefabric.services.remoting.client
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that the service implements.</p>

    <p></p>
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>Interface type that is being remoted </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the <xref uid="microsoft.servicefabric.services.remoting._service" data-throw-if-not-resolved="false">Service</xref>. </p>
    - id: partitionKey
      type: microsoft.servicefabric.services.client._service_partition_key
      description: <p>The Partition key that determines which service partition is responsible for handling requests from this service proxy </p>
    - id: targetReplicaSelector
      type: microsoft.servicefabric.services.communication.client._target_replica_selector
      description: <p>Determines which replica or instance of the service partition the client should connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>This parameter is Optional if the service has a single communication listener. The endpoints from the service are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter identifies which of those endpoints to use for the remoting communication.</p>
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
      description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> interface. </p>
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.createRequestMessageBody(Object)
  id: createRequestMessageBody(Object)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: createRequestMessageBody(Object requestMessageBodyValue)
  nameWithType: ServiceProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.createRequestMessageBody(Object requestMessageBodyValue)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.createRequestMessageBody*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 101
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected Object createRequestMessageBody(Object requestMessageBodyValue)
    parameters:
    - id: requestMessageBodyValue
      type: "79317049"
    return:
      type: "79317049"
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.deserializeMessage(byte [])
  id: deserializeMessage(byte [])
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: deserializeMessage(byte[] msgBodyValue)
  nameWithType: ServiceProxyBase.deserializeMessage(byte[] msgBodyValue)
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.deserializeMessage(byte[] msgBodyValue)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.deserializeMessage*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 96
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected Object deserializeMessage(byte[] msgBodyValue)
    parameters:
    - id: msgBodyValue
      type: ccd9418d
    return:
      type: "79317049"
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getResponseMessageBodyValue(Object)
  id: getResponseMessageBodyValue(Object)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: getResponseMessageBodyValue(Object responseMessageBody)
  nameWithType: ServiceProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getResponseMessageBodyValue(Object responseMessageBody)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.getResponseMessageBodyValue*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 122
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected Object getResponseMessageBodyValue(Object responseMessageBody)
    parameters:
    - id: responseMessageBody
      type: "79317049"
    return:
      type: "79317049"
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServiceInterfaceType()
  id: getServiceInterfaceType()
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: getServiceInterfaceType()
  nameWithType: ServiceProxyBase.getServiceInterfaceType()
  fullName: Class<?> microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServiceInterfaceType()
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServiceInterfaceType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 33
  package: microsoft.servicefabric.services.remoting.client
  summary: >-
    <p>The interface type that is being remoted.</p>

    <p></p>
  syntax:
    content: public Class<?> getServiceInterfaceType()
    return:
      type: a19781f8
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.services.remoting._service" data-throw-if-not-resolved="false">Service</xref> interface type. </p>
  overridden: microsoft.servicefabric.services.remoting.client._service_proxy.getServiceInterfaceType()
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServicePartitionClient()
  id: getServicePartitionClient()
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: getServicePartitionClient()
  nameWithType: ServiceProxyBase.getServicePartitionClient()
  fullName: ServiceRemotingPartitionClient microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServicePartitionClient()
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServicePartitionClient*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 43
  package: microsoft.servicefabric.services.remoting.client
  summary: >-
    <p>The service partition client used to send requests to the service.</p>

    <p></p>
  syntax:
    content: public ServiceRemotingPartitionClient getServicePartitionClient()
    return:
      type: microsoft.servicefabric.services.remoting.client._service_remoting_partition_client
      description: <p>ServicePartitionClient used by the <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">ServiceProxy</xref>. </p>
  overridden: microsoft.servicefabric.services.remoting.client._service_proxy.getServicePartitionClient()
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.initialize(ServiceProxyGenerator,ServiceRemotingPartitionClientImpl)
  id: initialize(ServiceProxyGenerator,ServiceRemotingPartitionClientImpl)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: initialize(ServiceProxyGenerator serviceProxyGenerator, ServiceRemotingPartitionClientImpl remotingPartitionClient)
  nameWithType: ServiceProxyBase.initialize(ServiceProxyGenerator serviceProxyGenerator, ServiceRemotingPartitionClientImpl remotingPartitionClient)
  fullName: void microsoft.servicefabric.services.remoting.client.ServiceProxyBase.initialize(ServiceProxyGenerator serviceProxyGenerator, ServiceRemotingPartitionClientImpl remotingPartitionClient)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.initialize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 126
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: public void initialize(ServiceProxyGenerator serviceProxyGenerator, ServiceRemotingPartitionClientImpl remotingPartitionClient)
    parameters:
    - id: serviceProxyGenerator
      type: microsoft.servicefabric.services.remoting.builder._service_proxy_generator
    - id: remotingPartitionClient
      type: 2d260c2d
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.invoke(int,int,byte [])
  id: invoke(int,int,byte [])
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  nameWithType: ServiceProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  fullName: void microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.invoke*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 108
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected void invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
    parameters:
    - id: interfaceId
      type: f75371fa
    - id: methodId
      type: f75371fa
    - id: requestMsgBodyBytes
      type: ccd9418d
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.invokeAsync(int,int,byte [],CancellationToken)
  id: invokeAsync(int,int,byte [],CancellationToken)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  nameWithType: ServiceProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.invokeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 113
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes, CancellationToken cancellationToken)
    parameters:
    - id: interfaceId
      type: f75371fa
    - id: methodId
      type: f75371fa
    - id: requestMsgBodyBytes
      type: ccd9418d
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 5fe2dfa4
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.serializeMessage(Object)
  id: serializeMessage(Object)
  parent: microsoft.servicefabric.services.remoting.client._service_proxy_base
  href: microsoft.servicefabric.services.remoting.client._service_proxy_base.yml
  langs:
  - java
  name: serializeMessage(Object msgBodyValue)
  nameWithType: ServiceProxyBase.serializeMessage(Object msgBodyValue)
  fullName: byte [] microsoft.servicefabric.services.remoting.client.ServiceProxyBase.serializeMessage(Object msgBodyValue)
  overload: microsoft.servicefabric.services.remoting.client._service_proxy_base.serializeMessage*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/client/ServiceProxyBase.java
    startLine: 91
  package: microsoft.servicefabric.services.remoting.client
  syntax:
    content: protected byte [] serializeMessage(Object msgBodyValue)
    parameters:
    - id: msgBodyValue
      type: "79317049"
    return:
      type: ccd9418d
references:
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 1e2c6103microsoft.servicefabric.services.remoting._service21353812
  spec.java:
  - name: 'static<T extends '
    fullName: 'static<T extends '
  - uid: microsoft.servicefabric.services.remoting._service
    name: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    href: microsoft.servicefabric.services.remoting._service.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.create*
  name: create
  nameWithType: ServiceProxyBase.create
  fullName: static <T extends Service> T microsoft.servicefabric.services.remoting.client.ServiceProxyBase.create
  package: microsoft.servicefabric.services.remoting.client
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServiceInterfaceType*
  name: getServiceInterfaceType
  nameWithType: ServiceProxyBase.getServiceInterfaceType
  fullName: Class<?> microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServiceInterfaceType
  package: microsoft.servicefabric.services.remoting.client
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getServicePartitionClient*
  name: getServicePartitionClient
  nameWithType: ServiceProxyBase.getServicePartitionClient
  fullName: ServiceRemotingPartitionClient microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getServicePartitionClient
  package: microsoft.servicefabric.services.remoting.client
- uid: 2d260c2d
  spec.java:
  - name: ServiceRemotingPartitionClientImpl
    fullName: ServiceRemotingPartitionClientImpl
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.initialize*
  name: initialize
  nameWithType: ServiceProxyBase.initialize
  fullName: void microsoft.servicefabric.services.remoting.client.ServiceProxyBase.initialize
  package: microsoft.servicefabric.services.remoting.client
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.serializeMessage*
  name: serializeMessage
  nameWithType: ServiceProxyBase.serializeMessage
  fullName: byte [] microsoft.servicefabric.services.remoting.client.ServiceProxyBase.serializeMessage
  package: microsoft.servicefabric.services.remoting.client
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.deserializeMessage*
  name: deserializeMessage
  nameWithType: ServiceProxyBase.deserializeMessage
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.deserializeMessage
  package: microsoft.servicefabric.services.remoting.client
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.createRequestMessageBody*
  name: createRequestMessageBody
  nameWithType: ServiceProxyBase.createRequestMessageBody
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.createRequestMessageBody
  package: microsoft.servicefabric.services.remoting.client
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.invoke*
  name: invoke
  nameWithType: ServiceProxyBase.invoke
  fullName: void microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invoke
  package: microsoft.servicefabric.services.remoting.client
- uid: 5fe2dfa4
  spec.java:
  - name: CompletableFuture<byte[]>
    fullName: CompletableFuture<byte[]>
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.invokeAsync*
  name: invokeAsync
  nameWithType: ServiceProxyBase.invokeAsync
  fullName: CompletableFuture<byte[]> microsoft.servicefabric.services.remoting.client.ServiceProxyBase.invokeAsync
  package: microsoft.servicefabric.services.remoting.client
- uid: microsoft.servicefabric.services.remoting.client._service_proxy_base.getResponseMessageBodyValue*
  name: getResponseMessageBodyValue
  nameWithType: ServiceProxyBase.getResponseMessageBodyValue
  fullName: Object microsoft.servicefabric.services.remoting.client.ServiceProxyBase.getResponseMessageBodyValue
  package: microsoft.servicefabric.services.remoting.client
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base.continueWith(CompletableFuture<Object>)
  parent: microsoft.servicefabric.services.remoting.builder._proxy_base
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: continueWith(CompletableFuture<Object> future)
  nameWithType: ProxyBase.continueWith(CompletableFuture<Object> future)
  fullName: CompletableFuture<?> microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object> future)
  type: Method
  summary: <p>Called by the generated proxy class to continue after getting the response body that does not have value. </p>
  syntax:
    content: protected CompletableFuture<?> continueWith(CompletableFuture<Object> future)
    parameters:
    - id: future
      type: 55aa5245
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call. </p>
    return:
      type: 16409f84
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call. </p>
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base.getReturnValue(int,int,Object)
  parent: microsoft.servicefabric.services.remoting.builder._proxy_base
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: getReturnValue(int interfaceId, int methodId, Object responseBody)
  nameWithType: ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)
  fullName: abstract Object microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)
  type: Method
  summary: <p>Implemented by the derived class to type cast the response body and extract the value from it. </p>
  syntax:
    content: protected abstract Object getReturnValue(int interfaceId, int methodId, Object responseBody)
    parameters:
    - id: interfaceId
      type: f75371fa
      description: <p>Interface Id for the actor interface. </p>
    - id: methodId
      type: f75371fa
      description: <p>Method Id for the actor method. </p>
    - id: responseBody
      type: "79317049"
      description: <p>Response body. </p>
    return:
      type: 1377799a
      description: <p>Return value of method call as <xref uid="" data-throw-if-not-resolved="false">Object</xref>. </p>
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base.invoke(int,int,Object)
  parent: microsoft.servicefabric.services.remoting.builder._proxy_base
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: invoke(int interfaceId, int methodId, Object requestMsgBodyValue)
  nameWithType: ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)
  fullName: void microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int interfaceId, int methodId, Object requestMsgBodyValue)
  type: Method
  summary: <p>Called by the generated proxy class to send the message to the remote object. </p>
  syntax:
    content: protected void invoke(int interfaceId, int methodId, Object requestMsgBodyValue)
    parameters:
    - id: interfaceId
      type: f75371fa
      description: <p>Id of the remote interface. </p>
    - id: methodId
      type: f75371fa
      description: <p>Id of the remote method to be invokved. </p>
    - id: requestMsgBodyValue
      type: "79317049"
      description: <p>Message body to be sent to remote object. </p>
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base.invokeAsync(int,int,Object,CancellationToken)
  parent: microsoft.servicefabric.services.remoting.builder._proxy_base
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)
  nameWithType: ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)
  fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)
  type: Method
  summary: <p>Called by the generated proxy class to send the request to the remote object and get the response back. </p>
  syntax:
    content: protected CompletableFuture<Object> invokeAsync(int interfaceId, int methodId, Object requestMsgBodyValue, CancellationToken cancellationToken)
    parameters:
    - id: interfaceId
      type: f75371fa
      description: <p>Id of the remote interface. </p>
    - id: methodId
      type: f75371fa
      description: <p>Id of the remote method to be invoked. </p>
    - id: requestMsgBodyValue
      type: "79317049"
      description: <p>Request body. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 55aa5245
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation async call to remote object. </p>
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base.ProxyBase()
  parent: microsoft.servicefabric.services.remoting.builder._proxy_base
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: ProxyBase()
  nameWithType: ProxyBase.ProxyBase()
  fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
  type: Constructor
  summary: <p>Initializes a new instance of the <xref uid="microsoft.servicefabric.services.remoting.builder._proxy_base" data-throw-if-not-resolved="false">ProxyBase</xref> class. </p>
  syntax:
    content: protected ProxyBase()
- uid: microsoft.servicefabric.services.remoting.builder._proxy_base
  parent: microsoft.servicefabric.services.remoting.builder
  href: microsoft.servicefabric.services.remoting.builder._proxy_base.yml
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase
  type: Class
  summary: <p>The base class used by remoting code generator to generate the proxy for the remoted interfaces. </p>
  syntax:
    content: public class ProxyBase
- uid: microsoft.servicefabric.services.remoting.client._service_proxy
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._service_proxy.yml
  name: ServiceProxy
  nameWithType: ServiceProxy
  fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy
  type: Interface
  summary: <p>This is the base Client side interface for Remoting. The framework provides the Remoting infrastructure for all the service contracts inheriting from IService through <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref> and <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">ServiceProxy</xref>. </p>
  syntax:
    content: public interface ServiceProxy
- uid: microsoft.servicefabric.services.remoting.client._fabric_service_proxy_factory
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._fabric_service_proxy_factory.yml
  name: FabricServiceProxyFactory
  nameWithType: FabricServiceProxyFactory
  fullName: microsoft.servicefabric.services.remoting.client.FabricServiceProxyFactory
  type: Class
  summary: <p>Specifies the factory that creates proxies for remote communication to the specified service. </p>
  syntax:
    content: public class FabricServiceProxyFactory implements ServiceProxyFactory
- uid: microsoft.servicefabric.services.remoting.builder._service_proxy_generator
  parent: microsoft.servicefabric.services.remoting.builder
  href: microsoft.servicefabric.services.remoting.builder._service_proxy_generator.yml
  name: ServiceProxyGenerator
  nameWithType: ServiceProxyGenerator
  fullName: microsoft.servicefabric.services.remoting.builder.ServiceProxyGenerator
  type: Class
  syntax:
    content: public class ServiceProxyGenerator
- uid: microsoft.servicefabric.services.remoting._service
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting._service.yml
  name: Service
  nameWithType: Service
  fullName: microsoft.servicefabric.services.remoting.Service
  type: Interface
  summary: <p>This is the marker interface for enabling interface Remoting for services. An <xref uid="microsoft.servicefabric.services.remoting._service_remoting_listener" data-throw-if-not-resolved="false">ServiceRemotingListener</xref> provides remoting for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be accessed via Proxy on the client side. </p>
  syntax:
    content: public interface Service
- uid: microsoft.servicefabric.services.client._service_partition_key
  parent: microsoft.servicefabric.services.client
  href: microsoft.servicefabric.services.client._service_partition_key.yml
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: microsoft.servicefabric.services.client.ServicePartitionKey
  type: Class
  summary: <p>Defines a key to address a service partition. </p>
  syntax:
    content: public class ServicePartitionKey
- uid: microsoft.servicefabric.services.communication.client._target_replica_selector
  parent: microsoft.servicefabric.services.communication.client
  href: microsoft.servicefabric.services.communication.client._target_replica_selector.yml
  name: TargetReplicaSelector
  nameWithType: TargetReplicaSelector
  fullName: microsoft.servicefabric.services.communication.client.TargetReplicaSelector
  type: Enum
  summary: <p>This enumeration specifies how the target replica or instance should be chosen when creating a communication channel for a particular partition. </p>
  syntax:
    content: public enum TargetReplicaSelector
- uid: microsoft.servicefabric.services.remoting.client._service_proxy.getServiceInterfaceType()
  parent: microsoft.servicefabric.services.remoting.client._service_proxy
  href: microsoft.servicefabric.services.remoting.client._service_proxy.yml
  name: getServiceInterfaceType()
  nameWithType: ServiceProxy.getServiceInterfaceType()
  fullName: Class<?> microsoft.servicefabric.services.remoting.client.ServiceProxy.getServiceInterfaceType()
  type: Method
  summary: >-
    <p>The interface type that is being remoted.</p>

    <p></p>
  syntax:
    content: public Class<?> getServiceInterfaceType()
    return:
      type: a19781f8
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.services.remoting._service" data-throw-if-not-resolved="false">Service</xref> interface type </p>
- uid: microsoft.servicefabric.services.remoting.client._service_remoting_partition_client
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client._service_remoting_partition_client.yml
  name: ServiceRemotingPartitionClient
  nameWithType: ServiceRemotingPartitionClient
  fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingPartitionClient
  type: Interface
  summary: <p>Defines the interface for the client that communicate over remoting to a particular replica of a service partition. </p>
  syntax:
    content: public interface ServiceRemotingPartitionClient
- uid: microsoft.servicefabric.services.remoting.client._service_proxy.getServicePartitionClient()
  parent: microsoft.servicefabric.services.remoting.client._service_proxy
  href: microsoft.servicefabric.services.remoting.client._service_proxy.yml
  name: getServicePartitionClient()
  nameWithType: ServiceProxy.getServicePartitionClient()
  fullName: ServiceRemotingPartitionClient microsoft.servicefabric.services.remoting.client.ServiceProxy.getServicePartitionClient()
  type: Method
  summary: >-
    <p>The service partition client used to send requests to the service.</p>

    <p></p>
  syntax:
    content: public ServiceRemotingPartitionClient getServicePartitionClient()
    return:
      type: microsoft.servicefabric.services.remoting.client._service_remoting_partition_client
      description: <p>ServicePartitionClient used by the <xref uid="microsoft.servicefabric.services.remoting.client._service_proxy" data-throw-if-not-resolved="false">ServiceProxy</xref></p>
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
