### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse"
name: "updateComponentWithResponse"
nameWithType: "DigitalTwinsAsyncClient.updateComponentWithResponse"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(java.lang.String,java.lang.String,com.azure.core.models.JsonPatchDocument,com.azure.digitaltwins.core.models.UpdateComponentOptions)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  name: "updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  nameWithType: "DigitalTwinsAsyncClient.updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  summary: "Patch a component on a digital twin.\n\n**Code Samples**\n\n```java\nJsonPatchDocument jsonPatchDocument = new JsonPatchDocument();\n jsonPatchDocument.appendReplace(\"/ComponentProp1\", \"Some new value\");\n \n digitalTwinsAsyncClient.updateComponentWithResponse(\n     \"myDigitalTwinId\",\n     \"myComponentName\",\n     jsonPatchDocument,\n     new UpdateComponentOptions().setIfMatch(\"*\"))\n .subscribe(updateResponse ->\n     System.out.println(\n         \"Received update operation response with HTTP status code: \" +\n         updateResponse.getStatusCode()));\n```"
  parameters:
  - description: "The Id of the digital twin that has the component to patch."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the component on the digital twin."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin's relationship.\n                                  This argument can be created using <xref uid=\"com.azure.core.models.JsonPatchDocument\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPatchDocument\"></xref>."
    name: "jsonPatch"
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.UpdateComponentOptions?alt=com.azure.digitaltwins.core.models.UpdateComponentOptions&text=UpdateComponentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DigitalTwinsResponse<Void>> updateComponentWithResponse(String digitalTwinId, String componentName, JsonPatchDocument jsonPatch, UpdateComponentOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsResponse\"></xref> containing an empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
