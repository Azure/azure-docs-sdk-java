### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.BlockBlobClient
  id: BlockBlobClient
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized
  children:
  - com.azure.storage.blob.specialized.BlockBlobClient.MAX_BLOCKS
  - com.azure.storage.blob.specialized.BlockBlobClient.MAX_STAGE_BLOCK_BYTES
  - com.azure.storage.blob.specialized.BlockBlobClient.MAX_UPLOAD_BLOB_BYTES
  - com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(java.util.List<java.lang.String>)
  - com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(java.util.List<java.lang.String>,boolean)
  - com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream()
  - com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(boolean)
  - com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlockBlobClient.listBlocks(com.azure.storage.blob.models.BlockListType)
  - com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlockBlobClient.stageBlock(java.lang.String,java.io.InputStream,long)
  - com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  - com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse(java.lang.String,java.io.InputStream,long,byte[],java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlockBlobClient.upload(java.io.InputStream,long)
  - com.azure.storage.blob.specialized.BlockBlobClient.upload(java.io.InputStream,long,boolean)
  - com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: BlockBlobClient
  nameWithType: BlockBlobClient
  fullName: com.azure.storage.blob.specialized.BlockBlobClient
  type: Class
  package: com.azure.storage.blob.specialized
  summary: >-
    Client to a block blob. It may only be instantiated through a <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref> or via the method <xref uid="com.azure.storage.blob.BlobClient.getBlockBlobClient()" data-throw-if-not-resolved="false">BlobClient#getBlockBlobClient()</xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.


    Please refer to the [Azure Docs][] for more information.



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs
  syntax:
    content: public final class BlockBlobClient extends BlobClientBase
  inheritance:
  - java.lang.Object
  - com.azure.storage.blob.specialized.BlobClientBase
  inheritedMembers:
  - com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
  - com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.delete()
  - com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.exists()
  - com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  - com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
  - com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
  - com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
  - com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
  - com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
  - com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
  - com.azure.storage.blob.specialized.BlobClientBase.getProperties()
  - com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
  - com.azure.storage.blob.specialized.BlobClientBase.getSnapshotClient(java.lang.String)
  - com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
  - com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
  - com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
  - com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  - com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.specialized.BlobClientBase.undelete()
  - com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlockBlobClient.BlockBlobClient(com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  id: BlockBlobClient(com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: BlockBlobClient(BlockBlobAsyncClient client)
  nameWithType: BlockBlobClient.BlockBlobClient(BlockBlobAsyncClient client)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.BlockBlobClient(BlockBlobAsyncClient client)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.BlockBlobClient*
  type: Constructor
  package: com.azure.storage.blob.specialized
  summary: Package-private constructor for use by <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref>.
  syntax:
    content: " BlockBlobClient(BlockBlobAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.storage.blob.specialized.BlockBlobAsyncClient
      description: the async block blob client
- uid: com.azure.storage.blob.specialized.BlockBlobClient.MAX_BLOCKS
  id: MAX_BLOCKS
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: MAX_BLOCKS
  nameWithType: BlockBlobClient.MAX_BLOCKS
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.MAX_BLOCKS
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of blocks allowed in a block blob.
  syntax:
    content: public static final int MAX_BLOCKS
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobClient.MAX_STAGE_BLOCK_BYTES
  id: MAX_STAGE_BLOCK_BYTES
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: MAX_STAGE_BLOCK_BYTES
  nameWithType: BlockBlobClient.MAX_STAGE_BLOCK_BYTES
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.MAX_STAGE_BLOCK_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to stageBlock.
  syntax:
    content: public static final int MAX_STAGE_BLOCK_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobClient.MAX_UPLOAD_BLOB_BYTES
  id: MAX_UPLOAD_BLOB_BYTES
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: MAX_UPLOAD_BLOB_BYTES
  nameWithType: BlockBlobClient.MAX_UPLOAD_BLOB_BYTES
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.MAX_UPLOAD_BLOB_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to upload.
  syntax:
    content: public static final int MAX_UPLOAD_BLOB_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(java.util.List<java.lang.String>)
  id: commitBlockList(java.util.List<java.lang.String>)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: commitBlockList(List<String> base64BlockIds)
  nameWithType: BlockBlobClient.commitBlockList(List<String> base64BlockIds)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(List<String> base64BlockIds)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    System.out.printf("Committing block list completed. Last modified: %s%n",
         client.commitBlockList(Collections.singletonList(base64BlockId)).getLastModified());
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list
  syntax:
    content: public BlockBlobItem commitBlockList(List<String> base64BlockIds)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    return:
      type: com.azure.storage.blob.models.BlockBlobItem
      description: The information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(java.util.List<java.lang.String>,boolean)
  id: commitBlockList(java.util.List<java.lang.String>,boolean)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: commitBlockList(List<String> base64BlockIds, boolean overwrite)
  nameWithType: BlockBlobClient.commitBlockList(List<String> base64BlockIds, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList(List<String> base64BlockIds, boolean overwrite)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; // Default behavior
     System.out.printf("Committing block list completed. Last modified: %s%n",
         client.commitBlockList(Collections.singletonList(base64BlockId), overwrite).getLastModified());
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list
  syntax:
    content: public BlockBlobItem commitBlockList(List<String> base64BlockIds, boolean overwrite)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: com.azure.storage.blob.models.BlockBlobItem
      description: The information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlockBlobClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n \n System.out.printf(\"Committing block list completed with status %d%n\",\n     client.commitBlockListWithResponse(Collections.singletonList(base64BlockId), headers, metadata,\n         AccessTier.HOT, requestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  syntax:
    content: public Response<BlockBlobItem> commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>
      description: The information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream()
  id: getBlobOutputStream()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: getBlobOutputStream()
  nameWithType: BlockBlobClient.getBlobOutputStream()
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream()
  overload: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Creates and opens an output stream to write data to the block blob.
  syntax:
    content: public BlobOutputStream getBlobOutputStream()
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(boolean)
  id: getBlobOutputStream(boolean)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: getBlobOutputStream(boolean overwrite)
  nameWithType: BlockBlobClient.getBlobOutputStream(boolean overwrite)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(boolean overwrite)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Creates and opens an output stream to write data to the block blob.
  syntax:
    content: public BlobOutputStream getBlobOutputStream(boolean overwrite)
    parameters:
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(com.azure.storage.blob.models.BlobRequestConditions)
  id: getBlobOutputStream(com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: getBlobOutputStream(BlobRequestConditions requestConditions)
  nameWithType: BlockBlobClient.getBlobOutputStream(BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it will be overwritten.


    To avoid overwriting, pass "\*" to <xref uid="com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)" data-throw-if-not-resolved="false">BlobRequestConditions#setIfNoneMatch(String)</xref>.
  syntax:
    content: public BlobOutputStream getBlobOutputStream(BlobRequestConditions requestConditions)
    parameters:
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: >-
        A <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref> object that represents the access conditions for the
         blob.
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  id: getBlobOutputStream(com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  nameWithType: BlockBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it will be overwritten.


    To avoid overwriting, pass "\*" to <xref uid="com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)" data-throw-if-not-resolved="false">BlobRequestConditions#setIfNoneMatch(String)</xref>.
  syntax:
    content: public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
    parameters:
    - id: parallelTransferOptions
      type: com.azure.storage.blob.models.ParallelTransferOptions
      description: <xref uid="com.azure.storage.blob.models.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> used to configure buffered uploading.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: com.azure.storage.blob.specialized.BlobOutputStream
      description: A <xref uid="com.azure.storage.blob.specialized.BlobOutputStream" data-throw-if-not-resolved="false">BlobOutputStream</xref> object used to write data to the blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.listBlocks(com.azure.storage.blob.models.BlockListType)
  id: listBlocks(com.azure.storage.blob.models.BlockListType)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: listBlocks(BlockListType listType)
  nameWithType: BlockBlobClient.listBlocks(BlockListType listType)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.listBlocks(BlockListType listType)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.listBlocks*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of blocks that have been uploaded as part of a block blob using the specified block list filter. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlockList block = client.listBlocks(BlockListType.ALL);\n \n System.out.println(\"Committed Blocks:\");\n block.getCommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n \n System.out.println(\"Uncommitted Blocks:\");\n block.getUncommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-block-list"
  syntax:
    content: public BlockList listBlocks(BlockListType listType)
    parameters:
    - id: listType
      type: com.azure.storage.blob.models.BlockListType
      description: Specifies which type of blocks to return.
    return:
      type: com.azure.storage.blob.models.BlockList
      description: The list of blocks.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: listBlocksWithResponse(BlockListType listType, String leaseId, Duration timeout, Context context)
  nameWithType: BlockBlobClient.listBlocksWithResponse(BlockListType listType, String leaseId, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse(BlockListType listType, String leaseId, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of blocks that have been uploaded as part of a block blob using the specified block list filter. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"key\", \"value\");\n BlockList block = client.listBlocksWithResponse(BlockListType.ALL, leaseId, timeout, context).getValue();\n \n System.out.println(\"Committed Blocks:\");\n block.getCommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n \n System.out.println(\"Uncommitted Blocks:\");\n block.getUncommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-block-list"
  syntax:
    content: public Response<BlockList> listBlocksWithResponse(BlockListType listType, String leaseId, Duration timeout, Context context)
    parameters:
    - id: listType
      type: com.azure.storage.blob.models.BlockListType
      description: Specifies which type of blocks to return.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockList>
      description: The list of blocks.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlock(java.lang.String,java.io.InputStream,long)
  id: stageBlock(java.lang.String,java.io.InputStream,long)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: stageBlock(String base64BlockId, InputStream data, long length)
  nameWithType: BlockBlobClient.stageBlock(String base64BlockId, InputStream data, long length)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlock(String base64BlockId, InputStream data, long length)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.stageBlock*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.stageBlock(base64BlockId, data, length);

    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block
  syntax:
    content: public void stageBlock(String base64BlockId, InputStream data, long length)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: data
      type: java.io.InputStream
      description: The data to write to the block.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  id: stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  nameWithType: BlockBlobClient.stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block to be committed as part of a blob where the contents are read from a URL. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.stageBlockFromUrl(base64BlockId, sourceUrl, new BlobRange(offset, count));

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
  syntax:
    content: public void stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)
  nameWithType: BlockBlobClient.stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a new block to be committed as part of a blob where the contents are read from a URL. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n \n System.out.printf(\"Staging block from URL completed with status %d%n\",\n     client.stageBlockFromUrlWithResponse(base64BlockId, sourceUrl, new BlobRange(offset, count), null,\n         leaseId, sourceRequestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url"
  syntax:
    content: public Response<Void> stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions, Duration timeout, Context context)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: sourceContentMd5
      type: byte[]
      description: >-
        An MD5 hash of the block content. This hash is used to verify the integrity of the block
         during transport. When this header is specified, the storage service compares the hash of the content that has
         arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not
         match, the operation will fail.
    - id: leaseId
      type: java.lang.String
      description: The lease ID that the active lease on the blob must match.
    - id: sourceRequestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse(java.lang.String,java.io.InputStream,long,byte[],java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: stageBlockWithResponse(java.lang.String,java.io.InputStream,long,byte[],java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5, String leaseId, Duration timeout, Context context)
  nameWithType: BlockBlobClient.stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5, String leaseId, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5, String leaseId, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Context context = new Context("key", "value");
     System.out.printf("Staging block completed with status %d%n",
         client.stageBlockWithResponse(base64BlockId, data, length, md5, leaseId, timeout, context).getStatusCode());
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block
  syntax:
    content: public Response<Void> stageBlockWithResponse(String base64BlockId, InputStream data, long length, byte[] contentMd5, String leaseId, Duration timeout, Context context)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: data
      type: java.io.InputStream
      description: The data to write to the block.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
    - id: contentMd5
      type: byte[]
      description: >-
        An MD5 hash of the block content. This hash is used to verify the integrity of the block during
         transport. When this header is specified, the storage service compares the hash of the content that has arrived
         with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
         operation will fail.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.blob.specialized.BlockBlobClient.upload(java.io.InputStream,long)
  id: upload(java.io.InputStream,long)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: upload(InputStream data, long length)
  nameWithType: BlockBlobClient.upload(InputStream data, long length)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.upload(InputStream data, long length)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.upload*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block blob. By default this method will not overwrite an existing blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    System.out.printf("Uploaded BlockBlob MD5 is %s%n",
         Base64.getEncoder().encodeToString(client.upload(data, length).getContentMd5()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public BlockBlobItem upload(InputStream data, long length)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data to write to the blob.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
    return:
      type: com.azure.storage.blob.models.BlockBlobItem
      description: The information of the uploaded block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.upload(java.io.InputStream,long,boolean)
  id: upload(java.io.InputStream,long,boolean)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: upload(InputStream data, long length, boolean overwrite)
  nameWithType: BlockBlobClient.upload(InputStream data, long length, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.upload(InputStream data, long length, boolean overwrite)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.upload*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false;
     System.out.printf("Uploaded BlockBlob MD5 is %s%n",
         Base64.getEncoder().encodeToString(client.upload(data, length, overwrite).getContentMd5()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public BlockBlobItem upload(InputStream data, long length, boolean overwrite)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data to write to the blob.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: com.azure.storage.blob.models.BlockBlobItem
      description: The information of the uploaded block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.specialized.BlockBlobClient
  langs:
  - java
  name: uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlockBlobClient.uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n \n byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n \n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"key\", \"value\");\n \n System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\", Base64.getEncoder()\n     .encodeToString(client.uploadWithResponse(data, length, headers, metadata, AccessTier.HOT, md5,\n         requestConditions, timeout, context)\n         .getValue()\n         .getContentMd5()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  syntax:
    content: public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data to write to the blob.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data provided in the <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: contentMd5
      type: byte[]
      description: >-
        An MD5 hash of the block content. This hash is used to verify the integrity of the block during
         transport. When this header is specified, the storage service compares the hash of the content that has arrived
         with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
         operation will fail.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>
      description: The information of the uploaded block blob.
references:
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  name: BlockBlobAsyncClient
  nameWithType: BlockBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient
- uid: com.azure.storage.blob.specialized.BlockBlobClient.BlockBlobClient*
  name: BlockBlobClient
  nameWithType: BlockBlobClient.BlockBlobClient
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.BlockBlobClient
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobOutputStream
  name: BlobOutputStream
  nameWithType: BlobOutputStream
  fullName: com.azure.storage.blob.specialized.BlobOutputStream
- uid: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream*
  name: getBlobOutputStream
  nameWithType: BlockBlobClient.getBlobOutputStream
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.getBlobOutputStream
  package: com.azure.storage.blob.specialized
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.models.BlobRequestConditions
  name: BlobRequestConditions
  nameWithType: BlobRequestConditions
  fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: com.azure.storage.blob.models.ParallelTransferOptions
  name: ParallelTransferOptions
  nameWithType: ParallelTransferOptions
  fullName: com.azure.storage.blob.models.ParallelTransferOptions
- uid: com.azure.storage.blob.models.BlobHttpHeaders
  name: BlobHttpHeaders
  nameWithType: BlobHttpHeaders
  fullName: com.azure.storage.blob.models.BlobHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.AccessTier
  name: AccessTier
  nameWithType: AccessTier
  fullName: com.azure.storage.blob.models.AccessTier
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.blob.models.BlockBlobItem
  name: BlockBlobItem
  nameWithType: BlockBlobItem
  fullName: com.azure.storage.blob.models.BlockBlobItem
- uid: com.azure.storage.blob.specialized.BlockBlobClient.upload*
  name: upload
  nameWithType: BlockBlobClient.upload
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.upload
  package: com.azure.storage.blob.specialized
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockBlobItem
    name: BlockBlobItem
    fullName: com.azure.storage.blob.models.BlockBlobItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse*
  name: uploadWithResponse
  nameWithType: BlockBlobClient.uploadWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse
  package: com.azure.storage.blob.specialized
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlock*
  name: stageBlock
  nameWithType: BlockBlobClient.stageBlock
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlock
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse*
  name: stageBlockWithResponse
  nameWithType: BlockBlobClient.stageBlockWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.BlobRange
  name: BlobRange
  nameWithType: BlobRange
  fullName: com.azure.storage.blob.models.BlobRange
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl*
  name: stageBlockFromUrl
  nameWithType: BlockBlobClient.stageBlockFromUrl
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrl
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse*
  name: stageBlockFromUrlWithResponse
  nameWithType: BlockBlobClient.stageBlockFromUrlWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.stageBlockFromUrlWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.BlockListType
  name: BlockListType
  nameWithType: BlockListType
  fullName: com.azure.storage.blob.models.BlockListType
- uid: com.azure.storage.blob.models.BlockList
  name: BlockList
  nameWithType: BlockList
  fullName: com.azure.storage.blob.models.BlockList
- uid: com.azure.storage.blob.specialized.BlockBlobClient.listBlocks*
  name: listBlocks
  nameWithType: BlockBlobClient.listBlocks
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.listBlocks
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockList>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockList
    name: BlockList
    fullName: com.azure.storage.blob.models.BlockList
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse*
  name: listBlocksWithResponse
  nameWithType: BlockBlobClient.listBlocksWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.listBlocksWithResponse
  package: com.azure.storage.blob.specialized
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList*
  name: commitBlockList
  nameWithType: BlockBlobClient.commitBlockList
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockList
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse*
  name: commitBlockListWithResponse
  nameWithType: BlockBlobClient.commitBlockListWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.commitBlockListWithResponse
  package: com.azure.storage.blob.specialized
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.specialized.BlobClientBase
  name: BlobClientBase
  nameWithType: BlobClientBase
  fullName: com.azure.storage.blob.specialized.BlobClientBase
- uid: com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  name: BlobClientBase.generateSas(BlobServiceSasSignatureValues)
  nameWithType: BlobClientBase.generateSas(BlobServiceSasSignatureValues)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.storage.blob.specialized.BlobClientBase.exists()
  name: BlobClientBase.exists()
  nameWithType: BlobClientBase.exists()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.exists()
- uid: com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  name: BlobClientBase.setAccessTier(AccessTier)
  nameWithType: BlobClientBase.setAccessTier(AccessTier)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  name: BlobClientBase.setHttpHeaders(BlobHttpHeaders)
  nameWithType: BlobClientBase.setHttpHeaders(BlobHttpHeaders)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
- uid: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.abortCopyFromUrlWithResponse(String,String,Duration,Context)
  nameWithType: BlobClientBase.abortCopyFromUrlWithResponse(String,String,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
  name: BlobClientBase.download(OutputStream)
  nameWithType: BlobClientBase.download(OutputStream)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.download(java.io.OutputStream)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.undeleteWithResponse(Duration,Context)
  nameWithType: BlobClientBase.undeleteWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.undeleteWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
  name: BlobClientBase.getBlobUrl()
  nameWithType: BlobClientBase.getBlobUrl()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getBlobUrl()
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadWithResponse(OutputStream,BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  nameWithType: BlobClientBase.downloadWithResponse(OutputStream,BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadWithResponse(java.io.OutputStream,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
  name: BlobClientBase.getBlobName()
  nameWithType: BlobClientBase.getBlobName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getBlobName()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.getAccountInfoWithResponse(Duration,Context)
  nameWithType: BlobClientBase.getAccountInfoWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
  name: BlobClientBase.copyFromUrl(String)
  nameWithType: BlobClientBase.copyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
  name: BlobClientBase.getHttpPipeline()
  nameWithType: BlobClientBase.getHttpPipeline()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getHttpPipeline()
- uid: com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
  name: BlobClientBase.openInputStream()
  nameWithType: BlobClientBase.openInputStream()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.openInputStream()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
  name: BlobClientBase.getSnapshotId()
  nameWithType: BlobClientBase.getSnapshotId()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotId()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String,Duration,Context)
  nameWithType: BlobClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>,Duration,Context)
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getProperties()
  name: BlobClientBase.getProperties()
  nameWithType: BlobClientBase.getProperties()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getProperties()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
  name: BlobClientBase.abortCopyFromUrl(String)
  nameWithType: BlobClientBase.abortCopyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.abortCopyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
  name: BlobClientBase.getCustomerProvidedKey()
  nameWithType: BlobClientBase.getCustomerProvidedKey()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getCustomerProvidedKey()
- uid: com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  name: BlobClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  nameWithType: BlobClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobClientBase.setMetadata(Map<String,String>)
  nameWithType: BlobClientBase.setMetadata(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.undelete()
  name: BlobClientBase.undelete()
  nameWithType: BlobClientBase.undelete()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.undelete()
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: BlobClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: BlobClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotClient(java.lang.String)
  name: BlobClientBase.getSnapshotClient(String)
  nameWithType: BlobClientBase.getSnapshotClient(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getSnapshotClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.getPropertiesWithResponse(BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.getPropertiesWithResponse(BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
  name: BlobClientBase.downloadToFile(String,boolean)
  nameWithType: BlobClientBase.downloadToFile(String,boolean)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String,boolean)
- uid: com.azure.storage.blob.specialized.BlobClientBase.delete()
  name: BlobClientBase.delete()
  nameWithType: BlobClientBase.delete()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.delete()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
  name: BlobClientBase.getAccountName()
  nameWithType: BlobClientBase.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountName()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
  name: BlobClientBase.getServiceVersion()
  nameWithType: BlobClientBase.getServiceVersion()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getServiceVersion()
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
  name: BlobClientBase.createSnapshot()
  nameWithType: BlobClientBase.createSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshot()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
  name: BlobClientBase.getContainerName()
  nameWithType: BlobClientBase.getContainerName()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getContainerName()
- uid: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
  name: BlobClientBase.getAccountInfo()
  nameWithType: BlobClientBase.getAccountInfo()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.getAccountInfo()
- uid: com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
  name: BlobClientBase.isSnapshot()
  nameWithType: BlobClientBase.isSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobClientBase.isSnapshot()
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
  name: BlobClientBase.beginCopy(String,Duration)
  nameWithType: BlobClientBase.beginCopy(String,Duration)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: BlobClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions,Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobClientBase.openInputStream(BlobRange,BlobRequestConditions)
  nameWithType: BlobClientBase.openInputStream(BlobRange,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.openInputStream(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
  name: BlobClientBase.downloadToFile(String)
  nameWithType: BlobClientBase.downloadToFile(String)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFile(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  name: BlobClientBase.existsWithResponse(Duration,Context)
  nameWithType: BlobClientBase.existsWithResponse(Duration,Context)
  fullName: com.azure.storage.blob.specialized.BlobClientBase.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: String,String>,BlobRequestConditions,Duration,Context)
  nameWithType: String,String>,BlobRequestConditions,Duration,Context)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map
  name: BlobClientBase.createSnapshotWithResponse(Map
  nameWithType: BlobClientBase.createSnapshotWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.createSnapshotWithResponse(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
  name: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  nameWithType: BlobClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  fullName: com.azure.storage.blob.specialized.BlobClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
- uid: java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
  name: OpenOption>,Duration,Context)
  nameWithType: OpenOption>,Duration,Context)
  fullName: java.nio.file.OpenOption>,java.time.Duration,com.azure.core.util.Context)
- uid: java.lang.String,java.lang.String>)
  name: String,String>)
  nameWithType: String,String>)
  fullName: java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map
  name: BlobClientBase.setMetadata(Map
  nameWithType: BlobClientBase.setMetadata(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadata(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map
  name: BlobClientBase.beginCopy(String,Map
  nameWithType: BlobClientBase.beginCopy(String,Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.beginCopy(java.lang.String,java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  name: String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  nameWithType: String,String>,AccessTier,RequestConditions,BlobRequestConditions,Duration,Context)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
- uid: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
  name: BlobClientBase.copyFromUrlWithResponse(String,Map
  nameWithType: BlobClientBase.copyFromUrlWithResponse(String,Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
- uid: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map
  name: BlobClientBase.setMetadataWithResponse(Map
  nameWithType: BlobClientBase.setMetadataWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobClientBase.setMetadataWithResponse(java.util.Map
