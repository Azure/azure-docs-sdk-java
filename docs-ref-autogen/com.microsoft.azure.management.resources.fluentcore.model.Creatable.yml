### YamlMime:JavaType
uid: "com.microsoft.azure.management.resources.fluentcore.model.Creatable"
fullName: "com.microsoft.azure.management.resources.fluentcore.model.Creatable<T>"
name: "Creatable<T>"
nameWithType: "Creatable<T>"
summary: "The final stage of the resource definition, at which it can be created using create()."
syntax: "public interface Creatable<T> extends Indexable, HasName"
methods:
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Creatable<T>.create()"
  name: "create()"
  nameWithType: "Creatable<T>.create()"
  summary: "Execute the create request."
  modifiers:
  - "abstract"
  syntax: "public abstract T create()"
  desc: "Execute the create request."
  returns:
    description: "the create resource"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Creatable<T>.createAsync()"
  name: "createAsync()"
  nameWithType: "Creatable<T>.createAsync()"
  summary: "Puts the request into the queue and allow the HTTP client to execute it when system resources are available."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<Indexable> createAsync()"
  desc: "Puts the request into the queue and allow the HTTP client to execute it when system resources are available."
  returns:
    description: "an observable of the request"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync(com.microsoft.rest.ServiceCallback<T>)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Creatable<T>.createAsync(ServiceCallback<T> callback)"
  name: "createAsync(ServiceCallback<T> callback)"
  nameWithType: "Creatable<T>.createAsync(ServiceCallback<T> callback)"
  summary: "Puts the request into the queue and allow the HTTP client to execute it when system resources are available."
  modifiers:
  - "abstract"
  parameters:
  - description: "the callback to handle success and failure"
    name: "callback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<T> createAsync(ServiceCallback<T> callback)"
  desc: "Puts the request into the queue and allow the HTTP client to execute it when system resources are available."
  returns:
    description: "a handle to cancel the request"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
typeParameters:
- description: "the fluent type of the resource to be created"
  name: "T"
desc: "The final stage of the resource definition, at which it can be created using create()."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasName?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.management.resources.fluentcore.model"
artifact: com.microsoft.azure:azure-mgmt-resources:1.41.4
