### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.toObject*"
fullName: "com.azure.core.util.BinaryData.<T>toObject"
name: "<T>toObject"
nameWithType: "BinaryData.<T>toObject"
members:
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference)"
  name: "<T>toObject(TypeReference<T> typeReference)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference)"
  summary: "Deserialize the bytes into the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type by using json serializer which is available in classpath. The type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a regular class or a generic class that retains the type information. This method assumes the data to be in JSON format and will use a default implementation of <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\n**Code sample to demonstrate serializing and deserializing a regular class**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n BinaryData binaryData = BinaryData.fromObject(data);\n \n Person person = binaryData.toObject(TypeReference.createInstance(Person.class));\n System.out.println(person.getName());\n```\n\n**Code sample to demonstrate serializing and deserializing generic types**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n \n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n \n BinaryData binaryData = BinaryData.fromObject(personList);\n \n List<Person> persons = binaryData.toObject(new TypeReference<List<Person>>() { });\n persons.forEach(person -> System.out.println(person.getName()));\n```"
  parameters:
  - description: "representing the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"type\"></xref> of the Object."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(TypeReference<T> typeReference)"
  returns:
    description: "The <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type after deserializing the bytes."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  name: "<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  summary: "Deserialize the bytes into the <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type by applying the provided <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> on the data. The type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a regular class or a generic class that retains the type information.\n\nYou can provide your custom implementation of <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> interface or use one provided in zure SDK by adding them as dependency.\n\n *  [Jackson serializer][]\n *  [Gson serializer][].\n\n**Code sample to demonstrate serializing and deserializing a regular class**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n \n Person person = binaryData.toObject(TypeReference.createInstance(Person.class), serializer);\n System.out.println(\"Name : \" + person.getName());\n```\n\n**Code sample to demonstrate serializing and deserializing generic types**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n \n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(personList, serializer);\n \n // Retains the type of the list when deserializing\n List<Person> persons = binaryData.toObject(new TypeReference<List<Person>>() { }, serializer);\n persons.forEach(person -> System.out.println(\"Name : \" + person.getName()));\n```\n\n\n[Jackson serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[Gson serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "representing the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"type\"></xref> of the Object."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "to use deserialize data into type."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  returns:
    description: "The <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> of given type after deserializing the bytes."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.12.0
