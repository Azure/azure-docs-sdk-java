### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.toObject*"
fullName: "com.azure.core.util.BinaryData.<T>toObject"
name: "<T>toObject"
nameWithType: "BinaryData.<T>toObject"
members:
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference)"
  name: "<T>toObject(TypeReference<T> typeReference)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.&lt;T&gt;createInstance(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#TypeReference\\}\n\n**Get a generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#TypeReference-generic\\}"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(TypeReference<T> typeReference)"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  name: "<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.&lt;T&gt;createInstance(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#TypeReference-ObjectSerializer\\}\n\n**Get a generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#TypeReference-ObjectSerializer-generic\\}\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(TypeReference<T> typeReference, ObjectSerializer serializer)"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(Class<T> clazz)"
  name: "<T>toObject(Class<T> clazz)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.&lt;T&gt;toObject(com.azure.core.util.serializer.TypeReference&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#Class\\}"
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>toObject(Class<T> clazz)"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.BinaryData.<T>toObject(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.&lt;T&gt;toObject(com.azure.core.util.serializer.TypeReference&lt;T&gt;,com.azure.core.util.serializer.ObjectSerializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference, ObjectSerializer)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n\\{@codesnippet com.azure.core.util.BinaryData.toObject\\#Class-ObjectSerializer\\}\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>toObject(Class<T> clazz, ObjectSerializer serializer)"
  returns:
    description: "An <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.17.0
