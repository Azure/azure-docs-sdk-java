### YamlMime:JavaPackage
uid: "com.azure.core.http.okhttp"
fullName: "com.azure.core.http.okhttp"
name: "com.azure.core.http.okhttp"
summary: "[ Azure Core Http OkHttp][Azure Core Http OkHttp] client library is a plugin for the azure-core HTTP client API.\n\n\n[Azure Core Http OkHttp]: https://learn.microsoft.com/en-us/java/api/overview/azure/core-http-okhttp-readme?view=azure-java-stable"
classes:
- "com.azure.core.http.okhttp.OkHttpAsyncClientProvider"
- "com.azure.core.http.okhttp.OkHttpAsyncHttpClientBuilder"
desc: "[ Azure Core Http OkHttp][Azure Core Http OkHttp] client library is a plugin for the azure-core HTTP client API. It allows you to use OkHttp as the underlying HTTP client for communicating with Azure services. OkHttp is a popular and efficient HTTP client that supports features such as HTTP/2, connection pooling, compression, and caching. To use the OkHttp client library, you need to include the dependency in your project and configure it when creating a service client. For more details refer to our [conceptual documentation][].\n\n**Sample: Construct OkHttpAsyncHttpClient with Default Configuration**\n\nThe following code sample demonstrates the creation of a OkHttp HttpClient that uses port 80 and has no proxy.\n\n```java\nHttpClient client = new OkHttpAsyncHttpClientBuilder().build();\n```\n\n--------------------\n\n## **Using OkHttpAsyncHttpClient with Http Proxy** ##\n\nConfiguring the OkHttp client with a proxy in the context of Azure Java SDK is relevant when your application needs to communicate with Azure services through a proxy server. For more details refer to our [conceptual documentation][conceptual documentation 1].\n\nThe following code sample demonstrates the creation of a OkHttp HttpClient that is using a proxy.\n\n```java\nfinal String proxyHost = \"<proxy-host>\"; // e.g. localhost\n final int proxyPort = 9999; // Proxy port\n ProxyOptions proxyOptions = new ProxyOptions(ProxyOptions.Type.HTTP,\n         new InetSocketAddress(proxyHost, proxyPort));\n HttpClient client = new OkHttpAsyncHttpClientBuilder()\n         .proxy(proxyOptions)\n         .build();\n```\n\n--------------------\n\n## **Using OkHttpAsyncHttpClient with HTTP/2 Support** ##\n\nThe following code sample demonstrates the creation of a OkHttp HttpClient that supports both the HTTP/1.1 and HTTP/2 protocols, with HTTP/2 being the preferred protocol.\n\n```java\n// Constructs an HttpClient that supports both HTTP/1.1 and HTTP/2 with HTTP/2 being the preferred protocol.\n // This is the default handling for OkHttp.\n HttpClient client = new OkHttpAsyncHttpClientBuilder(new OkHttpClient.Builder()\n     .protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))\n     .build())\n     .build();\n```\n\nIt is also possible to create a OkHttp HttpClient that only supports HTTP/2.\n\n```java\n// Constructs an HttpClient that only supports HTTP/2.\n HttpClient client = new OkHttpAsyncHttpClientBuilder(new OkHttpClient.Builder()\n     .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE))\n     .build())\n     .build();\n```\n\n\n[Azure Core Http OkHttp]: https://learn.microsoft.com/en-us/java/api/overview/azure/core-http-okhttp-readme?view=azure-java-stable\n[conceptual documentation]: https://learn.microsoft.com/azure/developer/java/sdk/http-client-pipeline#http-clients\n[conceptual documentation 1]: https://learn.microsoft.com/azure/developer/java/sdk/proxying#http-proxy-configuration"
metadata: {}
package: "com.azure.core.http.okhttp"
artifact: com.azure:azure-core-http-okhttp:1.12.6
