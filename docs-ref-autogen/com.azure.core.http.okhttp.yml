### YamlMime:JavaPackage
uid: "com.azure.core.http.okhttp"
fullName: "com.azure.core.http.okhttp"
name: "com.azure.core.http.okhttp"
summary: "<p>\n <a href=\"https://learn.microsoft.com/en-us/java/api/overview/azure/core-http-okhttp-readme?view=azure-java-stable\">\n Azure Core Http OkHttp</a> client library is a plugin for the azure-core HTTP client API."
classes:
- "com.azure.core.http.okhttp.OkHttpAsyncClientProvider"
- "com.azure.core.http.okhttp.OkHttpAsyncHttpClientBuilder"
desc: "<p>\n <a href=\"https://learn.microsoft.com/en-us/java/api/overview/azure/core-http-okhttp-readme?view=azure-java-stable\">\n Azure Core Http OkHttp</a> client library is a plugin for the azure-core HTTP client API. It allows you to use OkHttp\n as the underlying HTTP client for communicating with Azure services. OkHttp is a popular and efficient HTTP client\n that supports features such as HTTP/2, connection pooling, compression, and caching. To use the OkHttp client\n library,\n you need to include the dependency in your project and configure it when creating a service client.\n For more details refer to our\n <a href=\"https://learn.microsoft.com/azure/developer/java/sdk/http-client-pipeline#http-clients\">conceptual\n documentation</a>.\n </p>\n\n <p>\n <strong>Sample: Construct OkHttpAsyncHttpClient with Default Configuration</strong>\n </p>\n\n <p>\n The following code sample demonstrates the creation of a OkHttp HttpClient that uses port 80 and has no proxy.\n </p>\n\n <!-- src_embed readme-sample-createBasicClient -->\n <pre>\n HttpClient client = new OkHttpAsyncHttpClientBuilder&#40;&#41;.build&#40;&#41;;\n </pre>\n <!-- end readme-sample-createBasicClient -->\n\n <hr>\n\n <h2><strong>Using OkHttpAsyncHttpClient with Http Proxy</strong></h2>\n\n <p>\n Configuring the OkHttp client with a proxy in the context of Azure Java SDK is relevant when your application needs\n to communicate with Azure services through a proxy server. For more details refer to our\n <a href=\"https://learn.microsoft.com/azure/developer/java/sdk/proxying#http-proxy-configuration\">conceptual\n documentation</a>.\n </p>\n\n <p>\n The following code sample demonstrates the creation of a OkHttp HttpClient that is using a proxy.\n </p>\n\n <!-- src_embed com.azure.core.http.okhttp.OkHttpAsyncHttpClientBuilder.proxy#ProxyOptions -->\n <pre>\n final String proxyHost = &quot;&lt;proxy-host&gt;&quot;; &#47;&#47; e.g. localhost\n final int proxyPort = 9999; &#47;&#47; Proxy port\n ProxyOptions proxyOptions = new ProxyOptions&#40;ProxyOptions.Type.HTTP,\n         new InetSocketAddress&#40;proxyHost, proxyPort&#41;&#41;;\n HttpClient client = new OkHttpAsyncHttpClientBuilder&#40;&#41;\n         .proxy&#40;proxyOptions&#41;\n         .build&#40;&#41;;\n </pre>\n <!-- end com.azure.core.http.okhttp.OkHttpAsyncHttpClientBuilder.proxy#ProxyOptions -->\n\n <hr>\n\n <h2><strong>Using OkHttpAsyncHttpClient with HTTP/2 Support</strong></h2>\n\n <p>\n The following code sample demonstrates the creation of a OkHttp HttpClient that supports both the HTTP/1.1 and\n HTTP/2 protocols, with HTTP/2 being the preferred protocol.\n </p>\n\n <!-- src_embed readme-sample-useHttp2WithConfiguredOkHttpClient -->\n <pre>\n &#47;&#47; Constructs an HttpClient that supports both HTTP&#47;1.1 and HTTP&#47;2 with HTTP&#47;2 being the preferred protocol.\n &#47;&#47; This is the default handling for OkHttp.\n HttpClient client = new OkHttpAsyncHttpClientBuilder&#40;new OkHttpClient.Builder&#40;&#41;\n     .protocols&#40;Arrays.asList&#40;Protocol.HTTP_2, Protocol.HTTP_1_1&#41;&#41;\n     .build&#40;&#41;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end readme-sample-useHttp2WithConfiguredOkHttpClient -->\n\n <p>\n It is also possible to create a OkHttp HttpClient that only supports HTTP/2.\n </p>\n\n <!-- src_embed readme-sample-useHttp2OnlyWithConfiguredOkHttpClient -->\n <pre>\n &#47;&#47; Constructs an HttpClient that only supports HTTP&#47;2.\n HttpClient client = new OkHttpAsyncHttpClientBuilder&#40;new OkHttpClient.Builder&#40;&#41;\n     .protocols&#40;Collections.singletonList&#40;Protocol.H2_PRIOR_KNOWLEDGE&#41;&#41;\n     .build&#40;&#41;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end readme-sample-useHttp2OnlyWithConfiguredOkHttpClient -->"
metadata: {}
package: "com.azure.core.http.okhttp"
artifact: com.azure:azure-core-http-okhttp:1.11.19
