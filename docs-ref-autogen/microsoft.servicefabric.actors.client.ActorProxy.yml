### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.client.ActorProxy
  id: ActorProxy
  parent: microsoft.servicefabric.actors.client
  children:
  - microsoft.servicefabric.actors.client.ActorProxy.getActorId()
  - microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient()
  href: microsoft.servicefabric.actors.client.ActorProxy.yml
  langs:
  - java
  name: ActorProxy
  nameWithType: ActorProxy
  fullName: microsoft.servicefabric.actors.client.ActorProxy
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxy.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxy.java
    startLine: 8
  package: microsoft.servicefabric.actors.client
  summary: "<p>Provides the interface for implementation of proxy access for actor service. </p>"
  syntax:
    content: public interface ActorProxy
- uid: microsoft.servicefabric.actors.client.ActorProxy.getActorId()
  id: getActorId()
  parent: microsoft.servicefabric.actors.client.ActorProxy
  href: microsoft.servicefabric.actors.client.ActorProxy.yml
  langs:
  - java
  name: getActorId()
  nameWithType: ActorProxy.getActorId()
  fullName: microsoft.servicefabric.actors.client.ActorProxy.getActorId()
  overload: microsoft.servicefabric.actors.client.ActorProxy.getActorId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxy.java
    startLine: 15
  package: microsoft.servicefabric.actors.client
  summary: "<p>Gets <xref uid=\"microsoft.servicefabric.actors.ActorId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.ActorId\"></xref> associated with the proxy object.</p>\r\n<p></p>"
  syntax:
    content: public ActorId getActorId()
    return:
      type: microsoft.servicefabric.actors.ActorId
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.ActorId"></xref> associated with the proxy object. </p>
- uid: microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient()
  id: getActorServicePartitionClient()
  parent: microsoft.servicefabric.actors.client.ActorProxy
  href: microsoft.servicefabric.actors.client.ActorProxy.yml
  langs:
  - java
  name: getActorServicePartitionClient()
  nameWithType: ActorProxy.getActorServicePartitionClient()
  fullName: microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient()
  overload: microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/client/ActorProxy.java
    startLine: 24
  package: microsoft.servicefabric.actors.client
  summary: "<p>Gets <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.remoting.client.internal.ActorServicePartitionClientImpl\"></xref> that this proxy is using to communicate with the actor.</p>\r\n<p></p>"
  syntax:
    content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
    return:
      type: ef7224bd
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.remoting.client.internal.ActorServicePartitionClientImpl"></xref> that this proxy is using to communicate with the actor. </p>
references:
- uid: microsoft.servicefabric.actors.client.ActorProxy.getActorId*
  name: getActorId
  nameWithType: ActorProxy.getActorId
  fullName: microsoft.servicefabric.actors.client.ActorProxy.getActorId
  package: microsoft.servicefabric.actors.client
- uid: ef7224bd
  spec.java:
  - name: ActorServicePartitionClientImpl
    fullName: ActorServicePartitionClientImpl
- uid: microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient*
  name: getActorServicePartitionClient
  nameWithType: ActorProxy.getActorServicePartitionClient
  fullName: microsoft.servicefabric.actors.client.ActorProxy.getActorServicePartitionClient
  package: microsoft.servicefabric.actors.client
- uid: microsoft.servicefabric.actors.client.ActorProxyBase
  parent: microsoft.servicefabric.actors.client
  href: microsoft.servicefabric.actors.client.ActorProxyBase.yml
  name: ActorProxyBase
  nameWithType: ActorProxyBase
  fullName: microsoft.servicefabric.actors.client.ActorProxyBase
  type: Class
  summary: "<p>Provides the base implementation for the proxy to the remote actor objects implementing IActor interfaces. </p>"
  syntax:
    content: public class ActorProxyBase
- uid: microsoft.servicefabric.actors.ActorId
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorId.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: "<p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.UUID\"></xref> or long. </p>"
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors.client.ActorProxyBase.getActorId()
  parent: microsoft.servicefabric.actors.client.ActorProxyBase
  href: microsoft.servicefabric.actors.client.ActorProxyBase.yml
  name: getActorId()
  nameWithType: ActorProxyBase.getActorId()
  fullName: microsoft.servicefabric.actors.client.ActorProxyBase.getActorId()
  type: Method
  summary: "<p>Gets <xref uid=\"microsoft.servicefabric.actors.ActorId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.ActorId\"></xref> associated with the proxy object.</p>\r\n<p></p>"
  syntax:
    content: public ActorId getActorId()
    return:
      type: microsoft.servicefabric.actors.ActorId
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.ActorId"></xref> associated with the proxy object. </p>
- uid: microsoft.servicefabric.actors.client.ActorProxyBase.getActorServicePartitionClient()
  parent: microsoft.servicefabric.actors.client.ActorProxyBase
  href: microsoft.servicefabric.actors.client.ActorProxyBase.yml
  name: getActorServicePartitionClient()
  nameWithType: ActorProxyBase.getActorServicePartitionClient()
  fullName: microsoft.servicefabric.actors.client.ActorProxyBase.getActorServicePartitionClient()
  type: Method
  summary: "<p>Gets <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.remoting.client.internal.ActorServicePartitionClientImpl\"></xref> that this proxy is using to communicate with the actor.</p>\r\n<p></p>"
  syntax:
    content: public ActorServicePartitionClientImpl getActorServicePartitionClient()
    return:
      type: ef7224bd
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.remoting.client.internal.ActorServicePartitionClientImpl"></xref> that this proxy is using to communicate with the actor. </p>
