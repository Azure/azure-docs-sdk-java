### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign*"
fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign"
name: "sign"
nameWithType: "CryptographyAsyncClient.sign"
members:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "CryptographyAsyncClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and symmetric keys. This operation requires the keys/sign permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature algorithm\"></xref> indicates the type of algorithm to use to create the signature from the digest. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"E384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.ES256K\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ES246K\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.PS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS256\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS256\"></xref>, <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS384\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS384\"></xref> and <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm.RS512\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RS512\"></xref>\n\n**Code Samples**\n\nSings the digest. Subscribes to the call asynchronously and prints out the signature details when a response has been received.\n\n```java\nbyte[] data = new byte[100];\n new Random(0x1234567L).nextBytes(data);\n MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n md.update(data);\n byte[] digest = md.digest();\n cryptographyAsyncClient.sign(SignatureAlgorithm.ES256, digest)\n     .subscriberContext(reactor.util.context.Context.of(key1, value1, key2, value2))\n     .subscribe(signResult ->\n         System.out.printf(\"Received signature of length %d with algorithm %s\", signResult.getSignature().length));\n```"
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<SignResult> sign(SignatureAlgorithm algorithm, byte[] digest)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SignResult\"></xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"signature\"></xref> contains\n     the created signature."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys.cryptography"
artifact: com.azure:azure-security-keyvault-keys:4.2.3
