### YamlMime:JavaType
uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath"
fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath"
name: "StreamingPath"
nameWithType: "StreamingPath"
summary: "Class of paths for streaming."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class StreamingPath"
constructors:
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.StreamingPath()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.StreamingPath()"
  name: "StreamingPath()"
  nameWithType: "StreamingPath.StreamingPath()"
  syntax: "public StreamingPath()"
methods:
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.encryptionScheme()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.encryptionScheme()"
  name: "encryptionScheme()"
  nameWithType: "StreamingPath.encryptionScheme()"
  summary: "Get encryption scheme."
  syntax: "public EncryptionScheme encryptionScheme()"
  desc: "Get encryption scheme. Possible values include: 'NoEncryption', 'EnvelopeEncryption', 'CommonEncryptionCenc', 'CommonEncryptionCbcs'."
  returns:
    description: "the encryptionScheme value"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.EncryptionScheme?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.EncryptionScheme&text=EncryptionScheme\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.paths()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.paths()"
  name: "paths()"
  nameWithType: "StreamingPath.paths()"
  summary: "Get streaming paths for each protocol and encryption<wbr>Scheme pair."
  syntax: "public List<String> paths()"
  desc: "Get streaming paths for each protocol and encryptionScheme pair."
  returns:
    description: "the paths value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.streamingProtocol()"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.streamingProtocol()"
  name: "streamingProtocol()"
  nameWithType: "StreamingPath.streamingProtocol()"
  summary: "Get streaming protocol."
  syntax: "public StreamingPolicyStreamingProtocol streamingProtocol()"
  desc: "Get streaming protocol. Possible values include: 'Hls', 'Dash', 'SmoothStreaming', 'Download'."
  returns:
    description: "the streamingProtocol value"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPolicyStreamingProtocol?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPolicyStreamingProtocol&text=StreamingPolicyStreamingProtocol\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withEncryptionScheme(com.microsoft.azure.management.mediaservices.v2020_05_01.EncryptionScheme)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withEncryptionScheme(EncryptionScheme encryptionScheme)"
  name: "withEncryptionScheme(EncryptionScheme encryptionScheme)"
  nameWithType: "StreamingPath.withEncryptionScheme(EncryptionScheme encryptionScheme)"
  summary: "Set encryption scheme."
  parameters:
  - description: "the encryptionScheme value to set"
    name: "encryptionScheme"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.EncryptionScheme?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.EncryptionScheme&text=EncryptionScheme\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPath withEncryptionScheme(EncryptionScheme encryptionScheme)"
  desc: "Set encryption scheme. Possible values include: 'NoEncryption', 'EnvelopeEncryption', 'CommonEncryptionCenc', 'CommonEncryptionCbcs'."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withPaths(java.util.List<java.lang.String>)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withPaths(List<String> paths)"
  name: "withPaths(List<String> paths)"
  nameWithType: "StreamingPath.withPaths(List<String> paths)"
  summary: "Set streaming paths for each protocol and encryption<wbr>Scheme pair."
  parameters:
  - description: "the paths value to set"
    name: "paths"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StreamingPath withPaths(List<String> paths)"
  desc: "Set streaming paths for each protocol and encryptionScheme pair."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withStreamingProtocol(com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPolicyStreamingProtocol)"
  fullName: "com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath.withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  name: "withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  nameWithType: "StreamingPath.withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  summary: "Set streaming protocol."
  parameters:
  - description: "the streamingProtocol value to set"
    name: "streamingProtocol"
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPolicyStreamingProtocol?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPolicyStreamingProtocol&text=StreamingPolicyStreamingProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPath withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  desc: "Set streaming protocol. Possible values include: 'Hls', 'Dash', 'SmoothStreaming', 'Download'."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath?alt=com.microsoft.azure.management.mediaservices.v2020_05_01.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Class of paths for streaming."
metadata: {}
package: "com.microsoft.azure.management.mediaservices.v2020_05_01"
artifact: com.microsoft.azure.mediaservices.v2020_05_01:azure-mgmt-media:1.0.0-beta
