### YamlMime:JavaMember
uid: "com.microsoft.azure.eventhubs.EventData.create*"
fullName: "com.microsoft.azure.eventhubs.EventData.create"
name: "create"
nameWithType: "EventData.create"
members:
- uid: "com.microsoft.azure.eventhubs.EventData.create(byte[])"
  fullName: "com.microsoft.azure.eventhubs.EventData.create(byte[] data)"
  name: "create(byte[] data)"
  nameWithType: "EventData.create(byte[] data)"
  summary: "Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is:\n\n```java\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\n ii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the  for the Consumer.\n```\n\nSample Code:\n\n```java\nEventData eventData = EventData.create(telemetryEventBytes);\n eventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\n partitionSender.Send(eventData);\n```"
  parameters:
  - description: "the actual payload of data in bytes to be Sent to EventHubs."
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static EventData create(byte[] data)"
  returns:
    description: "EventData the created <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to send to EventHubs."
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventhubs.EventData.create(byte[],int,int)"
  fullName: "com.microsoft.azure.eventhubs.EventData.create(byte[] data, int offset, int length)"
  name: "create(byte[] data, int offset, int length)"
  nameWithType: "EventData.create(byte[] data, int offset, int length)"
  summary: "Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is:\n\n```java\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\n ii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the  for the Consumer.\n```\n\nIllustration:\n\n```java\nEventData eventData = EventData.create(telemetryEventBytes, offset, length);\n  eventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\n  partitionSender.Send(eventData);\n```"
  parameters:
  - description: "the byte[] where the payload of the Event to be sent to EventHubs is present"
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset in the byte[] to read from ; inclusive index"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "length of the byte[] to be read, starting from offset"
    name: "length"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static EventData create(byte[] data, int offset, int length)"
  returns:
    description: "EventData the created <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to send to EventHubs."
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.eventhubs.EventData.create(java.nio.ByteBuffer)"
  fullName: "com.microsoft.azure.eventhubs.EventData.create(ByteBuffer buffer)"
  name: "create(ByteBuffer buffer)"
  nameWithType: "EventData.create(ByteBuffer buffer)"
  summary: "Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is:\n\n```java\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\n ii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the  for the Consumer.\n```\n\nIllustration:\n\n```java\nEventData eventData = EventData.create(telemetryEventByteBuffer);\n  eventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\n  partitionSender.Send(eventData);\n```"
  parameters:
  - description: "ByteBuffer which references the payload of the Event to be sent to EventHubs"
    name: "buffer"
    type: "<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static EventData create(ByteBuffer buffer)"
  returns:
    description: "EventData the created <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to send to EventHubs."
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.microsoft.azure.eventhubs"
artifact: com.microsoft.azure:azure-eventhubs:3.2.2
