### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationClient.attestSgxEnclaveWithResponse*"
fullName: "com.azure.security.attestation.AttestationClient.attestSgxEnclaveWithResponse"
name: "attestSgxEnclaveWithResponse"
nameWithType: "AttestationClient.attestSgxEnclaveWithResponse"
members:
- uid: "com.azure.security.attestation.AttestationClient.attestSgxEnclaveWithResponse(com.azure.security.attestation.models.AttestationOptions,com.azure.core.util.Context)"
  fullName: "com.azure.security.attestation.AttestationClient.attestSgxEnclaveWithResponse(AttestationOptions request, Context context)"
  name: "attestSgxEnclaveWithResponse(AttestationOptions request, Context context)"
  nameWithType: "AttestationClient.attestSgxEnclaveWithResponse(AttestationOptions request, Context context)"
  summary: "Attest an SGX enclave report, specifying RunTimeData and InitTimeData. The <xref uid=\"com.azure.security.attestation.models.AttestationOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions\"></xref> parameter allows the caller to specify the OpenEnclave `report` which contains evidence from the enclave, and runtime data which allows the enclave to specify additional data from within the enclave. When calling the <xref uid=\"com.azure.security.attestation.models.AttestationOptions.setRunTimeData(com.azure.security.attestation.models.AttestationData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions#setRunTimeData(AttestationData)\"></xref> API, the caller can specify whether the attestation service should treat the runtime data as binary or as JSON when it is included in the response attestation token.\n\n**Attest an OpenEnclave enclave with attestation options.**\n\n```java\nResponse<AttestationResult> openEnclaveResponse = client.attestSgxEnclaveWithResponse(\n     new AttestationOptions(sgxQuote)\n         .setRunTimeData(new AttestationData(runtimeData, AttestationDataInterpretation.JSON)), Context.NONE);\n```"
  parameters:
  - description: "Attestation request for Intel SGX enclaves."
    name: "request"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationOptions?alt=com.azure.security.attestation.models.AttestationOptions&text=AttestationOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for the operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationResponse<AttestationResult> attestSgxEnclaveWithResponse(AttestationOptions request, Context context)"
  returns:
    description: "the result of an attestation operation."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationResponse?alt=com.azure.security.attestation.models.AttestationResponse&text=AttestationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.AttestationResult?alt=com.azure.security.attestation.models.AttestationResult&text=AttestationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
