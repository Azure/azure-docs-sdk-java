### YamlMime:JavaMember
nameWithType: FabricRuntime.createAsync
type: method
members:
- fullName: system.fabric.FabricRuntime.createAsync(Duration timeout)
  name: createAsync(Duration timeout)
  nameWithType: FabricRuntime.createAsync(Duration timeout)
  parameters:
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.FabricRuntime?alt=system.fabric.FabricRuntime&text=FabricRuntime" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> object asynchronously with the specified timeout parameter.</p>

    <p></p>
  syntax: public static CompletableFuture<FabricRuntime> createAsync(Duration timeout)
  uid: system.fabric.FabricRuntime.createAsync(Duration)
- fullName: system.fabric.FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  name: createAsync(Runnable fabricExitCallback, Duration timeout)
  nameWithType: FabricRuntime.createAsync(Runnable fabricExitCallback, Duration timeout)
  parameters:
  - description: <p>The Action to be executed when the runtime exits or terminates. </p>
    name: fabricExitCallback
    type: <xref href="Runnable?alt=Runnable&text=Runnable" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.FabricRuntime?alt=system.fabric.FabricRuntime&text=FabricRuntime" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricRuntime</xref> object asynchronously with the specified callback function which will be executed if the underlying runtime terminates or exits for any reason.</p>

    <p></p>
  syntax: public static CompletableFuture<FabricRuntime> createAsync(Runnable fabricExitCallback, Duration timeout)
  uid: system.fabric.FabricRuntime.createAsync(Runnable,Duration)
uid: system.fabric.FabricRuntime.createAsync*
fullName: system.fabric.FabricRuntime.createAsync(Duration timeout)
name: createAsync(Duration timeout)
package: system.fabric
metadata: {}
