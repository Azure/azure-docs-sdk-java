### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync*"
fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync"
name: "appendDataWithRestResponseAsync"
nameWithType: "PathsImpl.appendDataWithRestResponseAsync"
members:
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  name: "appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  nameWithType: "PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  summary: "Append data to the file."
  parameters:
  - description: "Initial data."
    name: "body"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathsAppendDataResponse> appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Context context)"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse?alt=com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse&text=PathsAppendDataResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.lang.Long,java.lang.Integer,java.lang.Long,byte[],java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.implementation.PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, byte[] transactionalContentCrc64, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  name: "appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, byte[] transactionalContentCrc64, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  nameWithType: "PathsImpl.appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, byte[] transactionalContentCrc64, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  summary: "Append data to the file."
  parameters:
  - description: "Initial data."
    name: "body"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request."
    name: "position"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    name: "timeout"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Required for \"Append Data\" and \"Flush Data\".  Must be 0 for \"Flush Data\".  Must be the length of the request content in bytes for \"Append Data\"."
    name: "contentLength"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specify the transactional crc64 for the body, to be validated by the service."
    name: "transactionalContentCrc64"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    name: "requestId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation."
    name: "pathHttpHeaders"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation."
    name: "leaseAccessConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions?alt=com.azure.storage.file.datalake.implementation.models.LeaseAccessConditions&text=LeaseAccessConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathsAppendDataResponse> appendDataWithRestResponseAsync(Flux<ByteBuffer> body, Long position, Integer timeout, Long contentLength, byte[] transactionalContentCrc64, String requestId, PathHttpHeaders pathHttpHeaders, LeaseAccessConditions leaseAccessConditions, Context context)"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse?alt=com.azure.storage.file.datalake.implementation.models.PathsAppendDataResponse&text=PathsAppendDataResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake.implementation"
artifact: com.azure:azure-storage-file-datalake:12.4.1
