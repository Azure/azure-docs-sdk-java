### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.keyvault.models.Key
  id: Key
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models
  children:
  - com.azure.resourcemanager.keyvault.models.Key.Definition
  - com.azure.resourcemanager.keyvault.models.Key.DefinitionStages
  - com.azure.resourcemanager.keyvault.models.Key.Update
  - com.azure.resourcemanager.keyvault.models.Key.UpdateStages
  - com.azure.resourcemanager.keyvault.models.Key.UpdateWithCreate
  - com.azure.resourcemanager.keyvault.models.Key.UpdateWithImport
  - com.azure.resourcemanager.keyvault.models.Key.attributes()
  - com.azure.resourcemanager.keyvault.models.Key.backup()
  - com.azure.resourcemanager.keyvault.models.Key.backupAsync()
  - com.azure.resourcemanager.keyvault.models.Key.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey()
  - com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync()
  - com.azure.resourcemanager.keyvault.models.Key.listVersions()
  - com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync()
  - com.azure.resourcemanager.keyvault.models.Key.managed()
  - com.azure.resourcemanager.keyvault.models.Key.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.tags()
  - com.azure.resourcemanager.keyvault.models.Key.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  - com.azure.resourcemanager.keyvault.models.Key.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  - com.azure.resourcemanager.keyvault.models.Key.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  - com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  langs:
  - java
  name: Key
  nameWithType: Key
  fullName: com.azure.resourcemanager.keyvault.models.Key
  type: Interface
  package: com.azure.resourcemanager.keyvault.models
  summary: An immutable client-side representation of an Azure Key Vault key.
  syntax:
    content: public interface Key extends Indexable, HasInnerModel<KeyProperties>, HasId, HasName, Updatable<Key.Update>
  implements:
  - com.azure.resourcemanager.resources.fluentcore.model.Indexable
  - com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel<com.azure.security.keyvault.keys.models.KeyProperties>
  - com.azure.resourcemanager.resources.fluentcore.arm.models.HasId
  - com.azure.resourcemanager.resources.fluentcore.arm.models.HasName
  - com.azure.resourcemanager.resources.fluentcore.model.Updatable<com.azure.resourcemanager.keyvault.models.Key.Update>
- uid: com.azure.resourcemanager.keyvault.models.Key.attributes()
  id: attributes()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: attributes()
  nameWithType: Key.attributes()
  fullName: com.azure.resourcemanager.keyvault.models.Key.attributes()
  overload: com.azure.resourcemanager.keyvault.models.Key.attributes*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract KeyProperties attributes()
    return:
      type: com.azure.security.keyvault.keys.models.KeyProperties
      description: the key management attributes.
- uid: com.azure.resourcemanager.keyvault.models.Key.backup()
  id: backup()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: backup()
  nameWithType: Key.backup()
  fullName: com.azure.resourcemanager.keyvault.models.Key.backup()
  overload: com.azure.resourcemanager.keyvault.models.Key.backup*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract byte[] backup()
    return:
      type: byte[]
      description: a backup of the specified key be downloaded to the client
- uid: com.azure.resourcemanager.keyvault.models.Key.backupAsync()
  id: backupAsync()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: backupAsync()
  nameWithType: Key.backupAsync()
  fullName: com.azure.resourcemanager.keyvault.models.Key.backupAsync()
  overload: com.azure.resourcemanager.keyvault.models.Key.backupAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract Mono<byte[]> backupAsync()
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: a backup of the specified key be downloaded to the client
- uid: com.azure.resourcemanager.keyvault.models.Key.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  id: decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: decrypt(EncryptionAlgorithm algorithm, byte[] content)
  nameWithType: Key.decrypt(EncryptionAlgorithm algorithm, byte[] content)
  fullName: com.azure.resourcemanager.keyvault.models.Key.decrypt(EncryptionAlgorithm algorithm, byte[] content)
  overload: com.azure.resourcemanager.keyvault.models.Key.decrypt*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Decrypts a single block of encrypted data.
  syntax:
    content: public abstract byte[] decrypt(EncryptionAlgorithm algorithm, byte[] content)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
      description: the JWK encryption algorithm
    - id: content
      type: byte[]
      description: the content to be decrypted
    return:
      type: byte[]
      description: the decrypted value
- uid: com.azure.resourcemanager.keyvault.models.Key.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  id: decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: decryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  nameWithType: Key.decryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  fullName: com.azure.resourcemanager.keyvault.models.Key.decryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  overload: com.azure.resourcemanager.keyvault.models.Key.decryptAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Decrypts a single block of encrypted data.
  syntax:
    content: public abstract Mono<byte[]> decryptAsync(EncryptionAlgorithm algorithm, byte[] content)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
      description: the JWK encryption algorithm
    - id: content
      type: byte[]
      description: the content to be decrypted
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: the decrypted value
- uid: com.azure.resourcemanager.keyvault.models.Key.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  id: encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: encrypt(EncryptionAlgorithm algorithm, byte[] content)
  nameWithType: Key.encrypt(EncryptionAlgorithm algorithm, byte[] content)
  fullName: com.azure.resourcemanager.keyvault.models.Key.encrypt(EncryptionAlgorithm algorithm, byte[] content)
  overload: com.azure.resourcemanager.keyvault.models.Key.encrypt*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
  syntax:
    content: public abstract byte[] encrypt(EncryptionAlgorithm algorithm, byte[] content)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
      description: the JWK encryption algorithm
    - id: content
      type: byte[]
      description: the content to be encrypted
    return:
      type: byte[]
      description: the encrypted value
- uid: com.azure.resourcemanager.keyvault.models.Key.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  id: encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: encryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  nameWithType: Key.encryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  fullName: com.azure.resourcemanager.keyvault.models.Key.encryptAsync(EncryptionAlgorithm algorithm, byte[] content)
  overload: com.azure.resourcemanager.keyvault.models.Key.encryptAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
  syntax:
    content: public abstract Mono<byte[]> encryptAsync(EncryptionAlgorithm algorithm, byte[] content)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
      description: the JWK encryption algorithm
    - id: content
      type: byte[]
      description: the content to be encrypted
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: the encrypted value
- uid: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey()
  id: getJsonWebKey()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: getJsonWebKey()
  nameWithType: Key.getJsonWebKey()
  fullName: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey()
  overload: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract JsonWebKey getJsonWebKey()
    return:
      type: com.azure.security.keyvault.keys.models.JsonWebKey
      description: the Json web key.
- uid: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync()
  id: getJsonWebKeyAsync()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: getJsonWebKeyAsync()
  nameWithType: Key.getJsonWebKeyAsync()
  fullName: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync()
  overload: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract Mono<JsonWebKey> getJsonWebKeyAsync()
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.JsonWebKey>
      description: the Json web key.
- uid: com.azure.resourcemanager.keyvault.models.Key.listVersions()
  id: listVersions()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: listVersions()
  nameWithType: Key.listVersions()
  fullName: com.azure.resourcemanager.keyvault.models.Key.listVersions()
  overload: com.azure.resourcemanager.keyvault.models.Key.listVersions*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract PagedIterable<Key> listVersions()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.resourcemanager.keyvault.models.Key>
      description: a list of individual key versions with the same key name
- uid: com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync()
  id: listVersionsAsync()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: listVersionsAsync()
  nameWithType: Key.listVersionsAsync()
  fullName: com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync()
  overload: com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract PagedFlux<Key> listVersionsAsync()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.resourcemanager.keyvault.models.Key>
      description: a list of individual key versions with the same key name
- uid: com.azure.resourcemanager.keyvault.models.Key.managed()
  id: managed()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: managed()
  nameWithType: Key.managed()
  fullName: com.azure.resourcemanager.keyvault.models.Key.managed()
  overload: com.azure.resourcemanager.keyvault.models.Key.managed*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract boolean managed()
    return:
      type: boolean
      description: >-
        true if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed
             will be true.
- uid: com.azure.resourcemanager.keyvault.models.Key.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  id: sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: sign(SignatureAlgorithm algorithm, byte[] digest)
  nameWithType: Key.sign(SignatureAlgorithm algorithm, byte[] digest)
  fullName: com.azure.resourcemanager.keyvault.models.Key.sign(SignatureAlgorithm algorithm, byte[] digest)
  overload: com.azure.resourcemanager.keyvault.models.Key.sign*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Creates a signature from a digest.
  syntax:
    content: public abstract byte[] sign(SignatureAlgorithm algorithm, byte[] digest)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
      description: the JWK signing algorithm
    - id: digest
      type: byte[]
      description: the content to be signed
    return:
      type: byte[]
      description: the signature in a byte array
- uid: com.azure.resourcemanager.keyvault.models.Key.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  id: signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: signAsync(SignatureAlgorithm algorithm, byte[] digest)
  nameWithType: Key.signAsync(SignatureAlgorithm algorithm, byte[] digest)
  fullName: com.azure.resourcemanager.keyvault.models.Key.signAsync(SignatureAlgorithm algorithm, byte[] digest)
  overload: com.azure.resourcemanager.keyvault.models.Key.signAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Creates a signature from a digest.
  syntax:
    content: public abstract Mono<byte[]> signAsync(SignatureAlgorithm algorithm, byte[] digest)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
      description: the JWK signing algorithm
    - id: digest
      type: byte[]
      description: the content to be signed
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: the signature in a byte array
- uid: com.azure.resourcemanager.keyvault.models.Key.tags()
  id: tags()
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: tags()
  nameWithType: Key.tags()
  fullName: com.azure.resourcemanager.keyvault.models.Key.tags()
  overload: com.azure.resourcemanager.keyvault.models.Key.tags*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  syntax:
    content: public abstract Map<String,String> tags()
    return:
      type: java.util.Map<java.lang.String,java.lang.String>
      description: application specific metadata in the form of key-value pairs.
- uid: com.azure.resourcemanager.keyvault.models.Key.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  id: unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  nameWithType: Key.unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  fullName: com.azure.resourcemanager.keyvault.models.Key.unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  overload: com.azure.resourcemanager.keyvault.models.Key.unwrapKey*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Unwraps a symmetric key wrapped originally by this Key Vault key.
  syntax:
    content: public abstract byte[] unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
      description: the JWK encryption algorithm
    - id: key
      type: byte[]
      description: the key to unwrap
    return:
      type: byte[]
      description: the unwrapped symmetric key
- uid: com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  id: unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  nameWithType: Key.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  fullName: com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  overload: com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Unwraps a symmetric key wrapped originally by this Key Vault key.
  syntax:
    content: public abstract Mono<byte[]> unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
      description: the JWK encryption algorithm
    - id: key
      type: byte[]
      description: the key to unwrap
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: the unwrapped symmetric key
- uid: com.azure.resourcemanager.keyvault.models.Key.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  id: verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  nameWithType: Key.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  fullName: com.azure.resourcemanager.keyvault.models.Key.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  overload: com.azure.resourcemanager.keyvault.models.Key.verify*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Verifies a signature from a digest.
  syntax:
    content: public abstract boolean verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
      description: the JWK signing algorithm
    - id: digest
      type: byte[]
      description: the content to be signed
    - id: signature
      type: byte[]
      description: the signature to verify
    return:
      type: boolean
      description: true if the signature is valid
- uid: com.azure.resourcemanager.keyvault.models.Key.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  id: verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  nameWithType: Key.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  fullName: com.azure.resourcemanager.keyvault.models.Key.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  overload: com.azure.resourcemanager.keyvault.models.Key.verifyAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Verifies a signature from a digest.
  syntax:
    content: public abstract Mono<Boolean> verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
      description: the JWK signing algorithm
    - id: digest
      type: byte[]
      description: the content to be signed
    - id: signature
      type: byte[]
      description: the signature to verify
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if the signature is valid
- uid: com.azure.resourcemanager.keyvault.models.Key.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  id: wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  nameWithType: Key.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  fullName: com.azure.resourcemanager.keyvault.models.Key.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  overload: com.azure.resourcemanager.keyvault.models.Key.wrapKey*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Wraps a symmetric key using the specified algorithm.
  syntax:
    content: public abstract byte[] wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
      description: the JWK encryption algorithm
    - id: key
      type: byte[]
      description: the symmetric key to wrap
    return:
      type: byte[]
      description: the wrapped key
- uid: com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  id: wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.0.0
  parent: com.azure.resourcemanager.keyvault.models.Key
  langs:
  - java
  name: wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  nameWithType: Key.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  fullName: com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
  overload: com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync*
  type: Method
  package: com.azure.resourcemanager.keyvault.models
  summary: Wraps a symmetric key using the specified algorithm.
  syntax:
    content: public abstract Mono<byte[]> wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)
    parameters:
    - id: algorithm
      type: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
      description: the JWK encryption algorithm
    - id: key
      type: byte[]
      description: the symmetric key to wrap
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: the wrapped key
references:
- uid: com.azure.security.keyvault.keys.models.JsonWebKey
  spec.java:
  - uid: com.azure.security.keyvault.keys.models.JsonWebKey
    name: JsonWebKey
    fullName: com.azure.security.keyvault.keys.models.JsonWebKey
- uid: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey*
  name: getJsonWebKey
  nameWithType: Key.getJsonWebKey
  fullName: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey
  package: com.azure.resourcemanager.keyvault.models
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.keys.models.JsonWebKey>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.keys.models.JsonWebKey
    name: JsonWebKey
    fullName: com.azure.security.keyvault.keys.models.JsonWebKey
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync*
  name: getJsonWebKeyAsync
  nameWithType: Key.getJsonWebKeyAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.security.keyvault.keys.models.KeyProperties
  spec.java:
  - uid: com.azure.security.keyvault.keys.models.KeyProperties
    name: KeyProperties
    fullName: com.azure.security.keyvault.keys.models.KeyProperties
- uid: com.azure.resourcemanager.keyvault.models.Key.attributes*
  name: attributes
  nameWithType: Key.attributes
  fullName: com.azure.resourcemanager.keyvault.models.Key.attributes
  package: com.azure.resourcemanager.keyvault.models
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.tags*
  name: tags
  nameWithType: Key.tags
  fullName: com.azure.resourcemanager.keyvault.models.Key.tags
  package: com.azure.resourcemanager.keyvault.models
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.resourcemanager.keyvault.models.Key.managed*
  name: managed
  nameWithType: Key.managed
  fullName: com.azure.resourcemanager.keyvault.models.Key.managed
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.core.http.rest.PagedIterable<com.azure.resourcemanager.keyvault.models.Key>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.keyvault.models.Key
    name: Key
    fullName: com.azure.resourcemanager.keyvault.models.Key
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.listVersions*
  name: listVersions
  nameWithType: Key.listVersions
  fullName: com.azure.resourcemanager.keyvault.models.Key.listVersions
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.core.http.rest.PagedFlux<com.azure.resourcemanager.keyvault.models.Key>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.keyvault.models.Key
    name: Key
    fullName: com.azure.resourcemanager.keyvault.models.Key
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync*
  name: listVersionsAsync
  nameWithType: Key.listVersionsAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.resourcemanager.keyvault.models.Key.backup*
  name: backup
  nameWithType: Key.backup
  fullName: com.azure.resourcemanager.keyvault.models.Key.backup
  package: com.azure.resourcemanager.keyvault.models
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.backupAsync*
  name: backupAsync
  nameWithType: Key.backupAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.backupAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
  spec.java:
  - uid: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
    name: EncryptionAlgorithm
    fullName: com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm
- uid: com.azure.resourcemanager.keyvault.models.Key.encrypt*
  name: encrypt
  nameWithType: Key.encrypt
  fullName: com.azure.resourcemanager.keyvault.models.Key.encrypt
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.encryptAsync*
  name: encryptAsync
  nameWithType: Key.encryptAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.encryptAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.decrypt*
  name: decrypt
  nameWithType: Key.decrypt
  fullName: com.azure.resourcemanager.keyvault.models.Key.decrypt
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.decryptAsync*
  name: decryptAsync
  nameWithType: Key.decryptAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.decryptAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
  spec.java:
  - uid: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
    name: SignatureAlgorithm
    fullName: com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm
- uid: com.azure.resourcemanager.keyvault.models.Key.sign*
  name: sign
  nameWithType: Key.sign
  fullName: com.azure.resourcemanager.keyvault.models.Key.sign
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.signAsync*
  name: signAsync
  nameWithType: Key.signAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.signAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.verify*
  name: verify
  nameWithType: Key.verify
  fullName: com.azure.resourcemanager.keyvault.models.Key.verify
  package: com.azure.resourcemanager.keyvault.models
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.keyvault.models.Key.verifyAsync*
  name: verifyAsync
  nameWithType: Key.verifyAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.verifyAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
  spec.java:
  - uid: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
    name: KeyWrapAlgorithm
    fullName: com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm
- uid: com.azure.resourcemanager.keyvault.models.Key.wrapKey*
  name: wrapKey
  nameWithType: Key.wrapKey
  fullName: com.azure.resourcemanager.keyvault.models.Key.wrapKey
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync*
  name: wrapKeyAsync
  nameWithType: Key.wrapKeyAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.unwrapKey*
  name: unwrapKey
  nameWithType: Key.unwrapKey
  fullName: com.azure.resourcemanager.keyvault.models.Key.unwrapKey
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync*
  name: unwrapKeyAsync
  nameWithType: Key.unwrapKeyAsync
  fullName: com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync
  package: com.azure.resourcemanager.keyvault.models
- uid: com.azure.resourcemanager.resources.fluentcore.arm.models.HasId
  name: HasId
  nameWithType: HasId
  fullName: com.azure.resourcemanager.resources.fluentcore.arm.models.HasId
- uid: com.azure.resourcemanager.resources.fluentcore.arm.models.HasName
  name: HasName
  nameWithType: HasName
  fullName: com.azure.resourcemanager.resources.fluentcore.arm.models.HasName
- uid: com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel<com.azure.security.keyvault.keys.models.KeyProperties>
  name: HasInnerModel<KeyProperties>
  nameWithType: HasInnerModel<KeyProperties>
  fullName: com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel<com.azure.security.keyvault.keys.models.KeyProperties>
- uid: com.azure.resourcemanager.resources.fluentcore.model.Indexable
  name: Indexable
  nameWithType: Indexable
  fullName: com.azure.resourcemanager.resources.fluentcore.model.Indexable
- uid: com.azure.resourcemanager.resources.fluentcore.model.Updatable<com.azure.resourcemanager.keyvault.models.Key.Update>
  name: Updatable<Key.Update>
  nameWithType: Updatable<Key.Update>
  fullName: com.azure.resourcemanager.resources.fluentcore.model.Updatable<com.azure.resourcemanager.keyvault.models.Key.Update>
- uid: com.azure.resourcemanager.keyvault.models.Key.Definition
  name: Key.Definition
  nameWithType: Key.Definition
  fullName: com.azure.resourcemanager.keyvault.models.Key.Definition
- uid: com.azure.resourcemanager.keyvault.models.Key.DefinitionStages
  name: Key.DefinitionStages
  nameWithType: Key.DefinitionStages
  fullName: com.azure.resourcemanager.keyvault.models.Key.DefinitionStages
- uid: com.azure.resourcemanager.keyvault.models.Key.Update
  name: Key.Update
  nameWithType: Key.Update
  fullName: com.azure.resourcemanager.keyvault.models.Key.Update
- uid: com.azure.resourcemanager.keyvault.models.Key.UpdateStages
  name: Key.UpdateStages
  nameWithType: Key.UpdateStages
  fullName: com.azure.resourcemanager.keyvault.models.Key.UpdateStages
- uid: com.azure.resourcemanager.keyvault.models.Key.UpdateWithCreate
  name: Key.UpdateWithCreate
  nameWithType: Key.UpdateWithCreate
  fullName: com.azure.resourcemanager.keyvault.models.Key.UpdateWithCreate
- uid: com.azure.resourcemanager.keyvault.models.Key.UpdateWithImport
  name: Key.UpdateWithImport
  nameWithType: Key.UpdateWithImport
  fullName: com.azure.resourcemanager.keyvault.models.Key.UpdateWithImport
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel
  name: HasInnerModel
  nameWithType: HasInnerModel
  fullName: com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel
- uid: com.azure.resourcemanager.resources.fluentcore.model.Updatable
  name: Updatable
  nameWithType: Updatable
  fullName: com.azure.resourcemanager.resources.fluentcore.model.Updatable
