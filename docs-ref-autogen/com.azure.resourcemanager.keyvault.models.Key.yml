### YamlMime:JavaType
uid: "com.azure.resourcemanager.keyvault.models.Key"
fullName: "com.azure.resourcemanager.keyvault.models.Key"
name: "Key"
nameWithType: "Key"
summary: "An immutable client-side representation of an Azure Key Vault key."
syntax: "public interface Key extends Indexable, HasInnerModel<KeyProperties>, HasId, HasName, Updatable<Key.Update>"
methods:
- uid: "com.azure.resourcemanager.keyvault.models.Key.attributes()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.attributes()"
  name: "attributes()"
  nameWithType: "Key.attributes()"
  modifiers:
  - "abstract"
  syntax: "public abstract KeyProperties attributes()"
  returns:
    description: "the key management attributes."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Key.backup()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.backup()"
  name: "backup()"
  nameWithType: "Key.backup()"
  modifiers:
  - "abstract"
  syntax: "public abstract byte[] backup()"
  returns:
    description: "a backup of the specified key be downloaded to the client"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.backupAsync()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.backupAsync()"
  name: "backupAsync()"
  nameWithType: "Key.backupAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<byte[]> backupAsync()"
  returns:
    description: "a backup of the specified key be downloaded to the client"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.decrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.decrypt(EncryptionAlgorithm algorithm, byte[] content)"
  name: "decrypt(EncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.decrypt(EncryptionAlgorithm algorithm, byte[] content)"
  summary: "Decrypts a single block of encrypted data."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be decrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] decrypt(EncryptionAlgorithm algorithm, byte[] content)"
  desc: "Decrypts a single block of encrypted data."
  returns:
    description: "the decrypted value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.decryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  name: "decryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.decryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  summary: "Decrypts a single block of encrypted data."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be decrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> decryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  desc: "Decrypts a single block of encrypted data."
  returns:
    description: "the decrypted value"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.encrypt(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.encrypt(EncryptionAlgorithm algorithm, byte[] content)"
  name: "encrypt(EncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.encrypt(EncryptionAlgorithm algorithm, byte[] content)"
  summary: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be encrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] encrypt(EncryptionAlgorithm algorithm, byte[] content)"
  desc: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  returns:
    description: "the encrypted value"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.encryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  name: "encryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  nameWithType: "Key.encryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  summary: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm&text=EncryptionAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be encrypted"
    name: "content"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> encryptAsync(EncryptionAlgorithm algorithm, byte[] content)"
  desc: "Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault."
  returns:
    description: "the encrypted value"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.getJsonWebKey()"
  name: "getJsonWebKey()"
  nameWithType: "Key.getJsonWebKey()"
  modifiers:
  - "abstract"
  syntax: "public abstract JsonWebKey getJsonWebKey()"
  returns:
    description: "the Json web key."
    type: "<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.getJsonWebKeyAsync()"
  name: "getJsonWebKeyAsync()"
  nameWithType: "Key.getJsonWebKeyAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<JsonWebKey> getJsonWebKeyAsync()"
  returns:
    description: "the Json web key."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.security.keyvault.keys.models.JsonWebKey?alt=com.azure.security.keyvault.keys.models.JsonWebKey&text=JsonWebKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.listVersions()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.listVersions()"
  name: "listVersions()"
  nameWithType: "Key.listVersions()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<Key> listVersions()"
  returns:
    description: "a list of individual key versions with the same key name"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Key?alt=com.azure.resourcemanager.keyvault.models.Key&text=Key\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.listVersionsAsync()"
  name: "listVersionsAsync()"
  nameWithType: "Key.listVersionsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<Key> listVersionsAsync()"
  returns:
    description: "a list of individual key versions with the same key name"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Key?alt=com.azure.resourcemanager.keyvault.models.Key&text=Key\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.managed()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.managed()"
  name: "managed()"
  nameWithType: "Key.managed()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean managed()"
  returns:
    description: "true if the key's lifetime is managed by key vault. If this is a key backing a certificate, then managed\n     will be true."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Key.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.sign(SignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "Key.sign(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] sign(SignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest."
  returns:
    description: "the signature in a byte array"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.signAsync(SignatureAlgorithm algorithm, byte[] digest)"
  name: "signAsync(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "Key.signAsync(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> signAsync(SignatureAlgorithm algorithm, byte[] digest)"
  desc: "Creates a signature from a digest."
  returns:
    description: "the signature in a byte array"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.tags()"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.tags()"
  name: "tags()"
  nameWithType: "Key.tags()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> tags()"
  returns:
    description: "application specific metadata in the form of key-value pairs."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.unwrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the key to unwrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] unwrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  returns:
    description: "the unwrapped symmetric key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the key to unwrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Unwraps a symmetric key wrapped originally by this Key Vault key."
  returns:
    description: "the unwrapped symmetric key"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.verify(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "Key.verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the signature to verify"
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract boolean verify(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature from a digest."
  returns:
    description: "true if the signature is valid"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Key.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  name: "verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  nameWithType: "Key.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  summary: "Verifies a signature from a digest."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK signing algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the content to be signed"
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the signature to verify"
    name: "signature"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<Boolean> verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature)"
  desc: "Verifies a signature from a digest."
  returns:
    description: "true if the signature is valid"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Key.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the symmetric key to wrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract byte[] wrapKey(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the specified algorithm."
  returns:
    description: "the wrapped key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])"
  fullName: "com.azure.resourcemanager.keyvault.models.Key.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  name: "wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  nameWithType: "Key.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  summary: "Wraps a symmetric key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "the JWK encryption algorithm"
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "the symmetric key to wrap"
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key)"
  desc: "Wraps a symmetric key using the specified algorithm."
  returns:
    description: "the wrapped key"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
type: "interface"
desc: "An immutable client-side representation of an Azure Key Vault key."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.HasId?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.HasId&text=HasId\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.HasName?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel?alt=com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel&text=HasInnerModel\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Updatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Key.Update?alt=com.azure.resourcemanager.keyvault.models.Key.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.keyvault.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.19.0
