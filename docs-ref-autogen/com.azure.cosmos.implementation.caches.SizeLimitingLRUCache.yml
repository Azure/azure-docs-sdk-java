### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache"
fullName: "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache"
name: "SizeLimitingLRUCache"
nameWithType: "SizeLimitingLRUCache"
summary: "LRU Cache using LinkedHashMap that limits the number of entries"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractMap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.HashMap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.LinkedHashMap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.AbstractMap.equals(java.lang.Object)"
- "java.util.AbstractMap.hashCode()"
- "java.util.AbstractMap.toString()"
- "java.util.HashMap.clone()"
- "java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.HashMap.containsKey(java.lang.Object)"
- "java.util.HashMap.isEmpty()"
- "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "java.util.HashMap.put(K,V)"
- "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
- "java.util.HashMap.putIfAbsent(K,V)"
- "java.util.HashMap.remove(java.lang.Object)"
- "java.util.HashMap.remove(java.lang.Object,java.lang.Object)"
- "java.util.HashMap.replace(K,V)"
- "java.util.HashMap.replace(K,V,V)"
- "java.util.HashMap.size()"
- "java.util.LinkedHashMap.clear()"
- "java.util.LinkedHashMap.containsValue(java.lang.Object)"
- "java.util.LinkedHashMap.entrySet()"
- "java.util.LinkedHashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "java.util.LinkedHashMap.get(java.lang.Object)"
- "java.util.LinkedHashMap.getOrDefault(java.lang.Object,V)"
- "java.util.LinkedHashMap.keySet()"
- "java.util.LinkedHashMap.removeEldestEntry(java.util.Map.Entry<K,V>)"
- "java.util.LinkedHashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.LinkedHashMap.values()"
syntax: "public class SizeLimitingLRUCache extends LinkedHashMap<String,PartitionedQueryExecutionInfo>"
constructors:
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.SizeLimitingLRUCache(int)"
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.SizeLimitingLRUCache(int,float,boolean,int)"
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.SizeLimitingLRUCache(int,float,int)"
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.SizeLimitingLRUCache(int,int)"
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.SizeLimitingLRUCache(java.util.Map<? extends java.lang.String,? extends com.azure.cosmos.implementation.query.PartitionedQueryExecutionInfo>,int)"
methods:
- "com.azure.cosmos.implementation.caches.SizeLimitingLRUCache.removeEldestEntry(java.util.Map.Entry<java.lang.String,com.azure.cosmos.implementation.query.PartitionedQueryExecutionInfo>)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.caches"
artifact: com.azure:azure-cosmos:4.20.1
