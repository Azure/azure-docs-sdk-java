### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent"
name: "beginRecognizeContent"
nameWithType: "FormRecognizerAsyncClient.beginRecognizeContent"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  name: "beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  summary: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  parameters:
  - description: "The data of the form to recognize content information from."
    name: "form"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polls the recognize content operation until it has completed, has failed, or has\n been cancelled. The completed operation returns a List of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  name: "beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  summary: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length(),\n     new RecognizeContentOptions()\n         .setContentType(FormContentType.APPLICATION_PDF)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->\n             System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  parameters:
  - description: "The data of the form to recognize content information from."
    name: "form"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when recognizing content/layout on a form."
    name: "recognizeContentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeContentOptions&text=RecognizeContentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polls the recognize content operation until it has completed, has failed, or has\n been cancelled. The completed operation returns a List of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.0.4
