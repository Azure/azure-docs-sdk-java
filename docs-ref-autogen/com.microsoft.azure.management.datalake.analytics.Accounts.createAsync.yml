### YamlMime:JavaMember
nameWithType: Accounts.createAsync
type: method
members:
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String,String,DataLakeAnalyticsAccount,final ServiceCallback<DataLakeAnalyticsAccount>)
uid: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync*
fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
name: createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
package: com.microsoft.azure.management.datalake.analytics
metadata: {}
