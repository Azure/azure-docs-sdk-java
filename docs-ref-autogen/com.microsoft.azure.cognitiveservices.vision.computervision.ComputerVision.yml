### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImage()
  name: analyzeImage()
  nameWithType: ComputerVision.analyzeImage()
  returns:
    description: <p>the first stage of the analyzeImage call </p>
    type: <xref href="ComputerVisionAnalyzeImageDefinitionStages.WithUrl?alt=ComputerVisionAnalyzeImageDefinitionStages.WithUrl&text=ComputerVisionAnalyzeImageDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionAnalyzeImageDefinitionStages.WithUrl analyzeImage()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  name: analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  nameWithType: ComputerVision.analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageAnalysis object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ImageAnalysis analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImage(String,AnalyzeImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  name: analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  nameWithType: ComputerVision.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageAnalysis object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<ImageAnalysis> analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageAsync(String,AnalyzeImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomain()
  name: analyzeImageByDomain()
  nameWithType: ComputerVision.analyzeImageByDomain()
  returns:
    description: <p>the first stage of the analyzeImageByDomain call </p>
    type: <xref href="ComputerVisionAnalyzeImageByDomainDefinitionStages.WithModel?alt=ComputerVisionAnalyzeImageByDomainDefinitionStages.WithModel&text=ComputerVisionAnalyzeImageByDomainDefinitionStages.WithModel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionAnalyzeImageByDomainDefinitionStages.WithModel analyzeImageByDomain()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomain()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  name: analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  nameWithType: ComputerVision.analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  parameters:
  - description: <p>The domain-specific content to recognize. </p>
    name: model
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageByDomainOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DomainModelResults object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public DomainModelResults analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomain(String,String,AnalyzeImageByDomainOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  name: analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  nameWithType: ComputerVision.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  parameters:
  - description: <p>The domain-specific content to recognize. </p>
    name: model
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageByDomainOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DomainModelResults object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<DomainModelResults> analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainAsync(String,String,AnalyzeImageByDomainOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStream()
  name: analyzeImageByDomainInStream()
  nameWithType: ComputerVision.analyzeImageByDomainInStream()
  returns:
    description: <p>the first stage of the analyzeImageByDomainInStream call </p>
    type: <xref href="ComputerVisionAnalyzeImageByDomainInStreamDefinitionStages.WithModel?alt=ComputerVisionAnalyzeImageByDomainInStreamDefinitionStages.WithModel&text=ComputerVisionAnalyzeImageByDomainInStreamDefinitionStages.WithModel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionAnalyzeImageByDomainInStreamDefinitionStages.WithModel analyzeImageByDomainInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  name: analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  nameWithType: ComputerVision.analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  parameters:
  - description: <p>The domain-specific content to recognize. </p>
    name: model
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageByDomainInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DomainModelResults object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public DomainModelResults analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStream(String,byte [],AnalyzeImageByDomainInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  name: analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  nameWithType: ComputerVision.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  parameters:
  - description: <p>The domain-specific content to recognize. </p>
    name: model
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageByDomainInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DomainModelResults object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageByDomainInStreamAsync(String,byte [],AnalyzeImageByDomainInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStream()
  name: analyzeImageInStream()
  nameWithType: ComputerVision.analyzeImageInStream()
  returns:
    description: <p>the first stage of the analyzeImageInStream call </p>
    type: <xref href="ComputerVisionAnalyzeImageInStreamDefinitionStages.WithImage?alt=ComputerVisionAnalyzeImageInStreamDefinitionStages.WithImage&text=ComputerVisionAnalyzeImageInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionAnalyzeImageInStreamDefinitionStages.WithImage analyzeImageInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  name: analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  nameWithType: ComputerVision.analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageAnalysis object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ImageAnalysis analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStream(byte [],AnalyzeImageInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  name: analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  nameWithType: ComputerVision.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: analyzeImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageAnalysis object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation extracts a rich set of visual features based on the image content. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<ImageAnalysis> analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.analyzeImageInStreamAsync(byte [],AnalyzeImageInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImage()
  name: describeImage()
  nameWithType: ComputerVision.describeImage()
  returns:
    description: <p>the first stage of the describeImage call </p>
    type: <xref href="ComputerVisionDescribeImageDefinitionStages.WithUrl?alt=ComputerVisionDescribeImageDefinitionStages.WithUrl&text=ComputerVisionDescribeImageDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionDescribeImageDefinitionStages.WithUrl describeImage()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  name: describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  nameWithType: ComputerVision.describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: describeImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageDescription object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ImageDescription describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImage(String,DescribeImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  name: describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  nameWithType: ComputerVision.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: describeImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageDescription object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<ImageDescription> describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageAsync(String,DescribeImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStream()
  name: describeImageInStream()
  nameWithType: ComputerVision.describeImageInStream()
  returns:
    description: <p>the first stage of the describeImageInStream call </p>
    type: <xref href="ComputerVisionDescribeImageInStreamDefinitionStages.WithImage?alt=ComputerVisionDescribeImageInStreamDefinitionStages.WithImage&text=ComputerVisionDescribeImageInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionDescribeImageInStreamDefinitionStages.WithImage describeImageInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  name: describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  nameWithType: ComputerVision.describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: describeImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageDescription object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ImageDescription describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStream(byte [],DescribeImageInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  name: describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  nameWithType: ComputerVision.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: describeImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageDescription object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<ImageDescription> describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.describeImageInStreamAsync(byte [],DescribeImageInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjects()
  name: detectObjects()
  nameWithType: ComputerVision.detectObjects()
  returns:
    description: <p>the first stage of the detectObjects call </p>
    type: <xref href="ComputerVisionDetectObjectsDefinitionStages.WithUrl?alt=ComputerVisionDetectObjectsDefinitionStages.WithUrl&text=ComputerVisionDetectObjectsDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionDetectObjectsDefinitionStages.WithUrl detectObjects()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjects()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  name: detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  nameWithType: ComputerVision.detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectObjectsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DetectResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public DetectResult detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjects(String,DetectObjectsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  name: detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  nameWithType: ComputerVision.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectObjectsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DetectResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<DetectResult> detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsAsync(String,DetectObjectsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStream()
  name: detectObjectsInStream()
  nameWithType: ComputerVision.detectObjectsInStream()
  returns:
    description: <p>the first stage of the detectObjectsInStream call </p>
    type: <xref href="ComputerVisionDetectObjectsInStreamDefinitionStages.WithImage?alt=ComputerVisionDetectObjectsInStreamDefinitionStages.WithImage&text=ComputerVisionDetectObjectsInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionDetectObjectsInStreamDefinitionStages.WithImage detectObjectsInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  name: detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  nameWithType: ComputerVision.detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectObjectsInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DetectResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public DetectResult detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStream(byte [],DetectObjectsInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  name: detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  nameWithType: ComputerVision.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectObjectsInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DetectResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<DetectResult> detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync(byte [],DetectObjectsInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnail()
  name: generateThumbnail()
  nameWithType: ComputerVision.generateThumbnail()
  returns:
    description: <p>the first stage of the generateThumbnail call </p>
    type: <xref href="ComputerVisionGenerateThumbnailDefinitionStages.WithWidth?alt=ComputerVisionGenerateThumbnailDefinitionStages.WithWidth&text=ComputerVisionGenerateThumbnailDefinitionStages.WithWidth" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionGenerateThumbnailDefinitionStages.WithWidth generateThumbnail()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnail()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  name: generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  nameWithType: ComputerVision.generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  parameters:
  - description: <p>Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: width
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: height
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: generateThumbnailOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public InputStream generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnail(int,int,String,GenerateThumbnailOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  name: generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  nameWithType: ComputerVision.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  parameters:
  - description: <p>Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: width
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: height
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: generateThumbnailOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<InputStream> generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailAsync(int,int,String,GenerateThumbnailOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStream()
  name: generateThumbnailInStream()
  nameWithType: ComputerVision.generateThumbnailInStream()
  returns:
    description: <p>the first stage of the generateThumbnailInStream call </p>
    type: <xref href="ComputerVisionGenerateThumbnailInStreamDefinitionStages.WithWidth?alt=ComputerVisionGenerateThumbnailInStreamDefinitionStages.WithWidth&text=ComputerVisionGenerateThumbnailInStreamDefinitionStages.WithWidth" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionGenerateThumbnailInStreamDefinitionStages.WithWidth generateThumbnailInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  name: generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  nameWithType: ComputerVision.generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  parameters:
  - description: <p>Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: width
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: height
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: generateThumbnailInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public InputStream generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStream(int,int,byte [],GenerateThumbnailInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  name: generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  nameWithType: ComputerVision.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  parameters:
  - description: <p>Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: width
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50. </p>
    name: height
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: generateThumbnailInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<InputStream> generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.generateThumbnailInStreamAsync(int,int,byte [],GenerateThumbnailInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterest()
  name: getAreaOfInterest()
  nameWithType: ComputerVision.getAreaOfInterest()
  returns:
    description: <p>the first stage of the getAreaOfInterest call </p>
    type: <xref href="ComputerVisionGetAreaOfInterestDefinitionStages.WithUrl?alt=ComputerVisionGetAreaOfInterestDefinitionStages.WithUrl&text=ComputerVisionGetAreaOfInterestDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionGetAreaOfInterestDefinitionStages.WithUrl getAreaOfInterest()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterest()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  name: getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  nameWithType: ComputerVision.getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAreaOfInterestOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AreaOfInterestResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public AreaOfInterestResult getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterest(String,GetAreaOfInterestOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  name: getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  nameWithType: ComputerVision.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAreaOfInterestOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AreaOfInterestResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<AreaOfInterestResult> getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestAsync(String,GetAreaOfInterestOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStream()
  name: getAreaOfInterestInStream()
  nameWithType: ComputerVision.getAreaOfInterestInStream()
  returns:
    description: <p>the first stage of the getAreaOfInterestInStream call </p>
    type: <xref href="ComputerVisionGetAreaOfInterestInStreamDefinitionStages.WithImage?alt=ComputerVisionGetAreaOfInterestInStreamDefinitionStages.WithImage&text=ComputerVisionGetAreaOfInterestInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionGetAreaOfInterestInStreamDefinitionStages.WithImage getAreaOfInterestInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  name: getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  nameWithType: ComputerVision.getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAreaOfInterestInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AreaOfInterestResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public AreaOfInterestResult getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStream(byte [],GetAreaOfInterestInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  name: getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  nameWithType: ComputerVision.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAreaOfInterestInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AreaOfInterestResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<AreaOfInterestResult> getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getAreaOfInterestInStreamAsync(byte [],GetAreaOfInterestInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getReadResult(UUID operationId)
  name: getReadResult(UUID operationId)
  nameWithType: ComputerVision.getReadResult(UUID operationId)
  parameters:
  - description: <p>Id of read operation returned in the response of the 'Read' interface. </p>
    name: operationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionOcrErrorException?alt=ComputerVisionOcrErrorException&text=ComputerVisionOcrErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReadOperationResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface.</p>

    <p></p>
  syntax: public ReadOperationResult getReadResult(UUID operationId)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getReadResult(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getReadResultAsync(UUID operationId)
  name: getReadResultAsync(UUID operationId)
  nameWithType: ComputerVision.getReadResultAsync(UUID operationId)
  parameters:
  - description: <p>Id of read operation returned in the response of the 'Read' interface. </p>
    name: operationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReadOperationResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface.</p>

    <p></p>
  syntax: public Observable<ReadOperationResult> getReadResultAsync(UUID operationId)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.getReadResultAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.listModels()
  name: listModels()
  nameWithType: ComputerVision.listModels()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ListModelsResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ListModelsResult listModels()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.listModels()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.listModelsAsync()
  name: listModelsAsync()
  nameWithType: ComputerVision.listModelsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ListModelsResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<ListModelsResult> listModelsAsync()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.listModelsAsync()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.read()
  name: read()
  nameWithType: ComputerVision.read()
  returns:
    description: <p>the first stage of the read call </p>
    type: <xref href="ComputerVisionReadDefinitionStages.WithUrl?alt=ComputerVisionReadDefinitionStages.WithUrl&text=ComputerVisionReadDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public ComputerVisionReadDefinitionStages.WithUrl read()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.read()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.read(String url, ReadOptionalParameter readOptionalParameter)
  name: read(String url, ReadOptionalParameter readOptionalParameter)
  nameWithType: ComputerVision.read(String url, ReadOptionalParameter readOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: readOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionOcrErrorException?alt=ComputerVisionOcrErrorException&text=ComputerVisionOcrErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public void read(String url, ReadOptionalParameter readOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.read(String,ReadOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readAsync(String url, ReadOptionalParameter readOptionalParameter)
  name: readAsync(String url, ReadOptionalParameter readOptionalParameter)
  nameWithType: ComputerVision.readAsync(String url, ReadOptionalParameter readOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: readOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public Observable<Void> readAsync(String url, ReadOptionalParameter readOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readAsync(String,ReadOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStream()
  name: readInStream()
  nameWithType: ComputerVision.readInStream()
  returns:
    description: <p>the first stage of the readInStream call </p>
    type: <xref href="ComputerVisionReadInStreamDefinitionStages.WithImage?alt=ComputerVisionReadInStreamDefinitionStages.WithImage&text=ComputerVisionReadInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public ComputerVisionReadInStreamDefinitionStages.WithImage readInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  name: readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  nameWithType: ComputerVision.readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: readInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionOcrErrorException?alt=ComputerVisionOcrErrorException&text=ComputerVisionOcrErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public void readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStream(byte [],ReadInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  name: readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  nameWithType: ComputerVision.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: readInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.​.</p>

    <p></p>
  syntax: public Observable<Void> readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.readInStreamAsync(byte [],ReadInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedText()
  name: recognizePrintedText()
  nameWithType: ComputerVision.recognizePrintedText()
  returns:
    description: <p>the first stage of the recognizePrintedText call </p>
    type: <xref href="ComputerVisionRecognizePrintedTextDefinitionStages.WithDetectOrientation?alt=ComputerVisionRecognizePrintedTextDefinitionStages.WithDetectOrientation&text=ComputerVisionRecognizePrintedTextDefinitionStages.WithDetectOrientation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionRecognizePrintedTextDefinitionStages.WithDetectOrientation recognizePrintedText()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedText()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  name: recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  nameWithType: ComputerVision.recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  parameters:
  - description: <p>Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down). </p>
    name: detectOrientation
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: recognizePrintedTextOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OcrResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public OcrResult recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedText(boolean,String,RecognizePrintedTextOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  name: recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  nameWithType: ComputerVision.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  parameters:
  - description: <p>Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down). </p>
    name: detectOrientation
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: recognizePrintedTextOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OcrResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextAsync(boolean,String,RecognizePrintedTextOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStream()
  name: recognizePrintedTextInStream()
  nameWithType: ComputerVision.recognizePrintedTextInStream()
  returns:
    description: <p>the first stage of the recognizePrintedTextInStream call </p>
    type: <xref href="ComputerVisionRecognizePrintedTextInStreamDefinitionStages.WithDetectOrientation?alt=ComputerVisionRecognizePrintedTextInStreamDefinitionStages.WithDetectOrientation&text=ComputerVisionRecognizePrintedTextInStreamDefinitionStages.WithDetectOrientation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public ComputerVisionRecognizePrintedTextInStreamDefinitionStages.WithDetectOrientation recognizePrintedTextInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  name: recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  nameWithType: ComputerVision.recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  parameters:
  - description: <p>Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down). </p>
    name: detectOrientation
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: recognizePrintedTextInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OcrResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public OcrResult recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStream(boolean,byte [],RecognizePrintedTextInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  name: recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  nameWithType: ComputerVision.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  parameters:
  - description: <p>Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down). </p>
    name: detectOrientation
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: recognizePrintedTextInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OcrResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.</p>

    <p></p>
  syntax: public Observable<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.recognizePrintedTextInStreamAsync(boolean,byte [],RecognizePrintedTextInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImage()
  name: tagImage()
  nameWithType: ComputerVision.tagImage()
  returns:
    description: <p>the first stage of the tagImage call </p>
    type: <xref href="ComputerVisionTagImageDefinitionStages.WithUrl?alt=ComputerVisionTagImageDefinitionStages.WithUrl&text=ComputerVisionTagImageDefinitionStages.WithUrl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionTagImageDefinitionStages.WithUrl tagImage()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)
  name: tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)
  nameWithType: ComputerVision.tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: tagImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TagResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public TagResult tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImage(String,TagImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)
  name: tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)
  nameWithType: ComputerVision.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)
  parameters:
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: tagImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TagResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<TagResult> tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageAsync(String,TagImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStream()
  name: tagImageInStream()
  nameWithType: ComputerVision.tagImageInStream()
  returns:
    description: <p>the first stage of the tagImageInStream call </p>
    type: <xref href="ComputerVisionTagImageInStreamDefinitionStages.WithImage?alt=ComputerVisionTagImageInStreamDefinitionStages.WithImage&text=ComputerVisionTagImageInStreamDefinitionStages.WithImage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public ComputerVisionTagImageInStreamDefinitionStages.WithImage tagImageInStream()
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  name: tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  nameWithType: ComputerVision.tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: tagImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ComputerVisionErrorResponseException?alt=ComputerVisionErrorResponseException&text=ComputerVisionErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TagResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public TagResult tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStream(byte [],TagImageInStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  name: tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  nameWithType: ComputerVision.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: tagImageInStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TagResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus". Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<TagResult> tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.tagImageInStreamAsync(byte [],TagImageInStreamOptionalParameter)
nameWithType: ComputerVision
syntax: public interface ComputerVision
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision
fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision
name: ComputerVision
package: com.microsoft.azure.cognitiveservices.vision.computervision
summary: <p>An instance of this class provides access to all the operations defined in ComputerVision. </p>
metadata: {}
