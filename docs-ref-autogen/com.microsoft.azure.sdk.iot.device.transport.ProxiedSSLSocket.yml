### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket"
fullName: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket"
name: "ProxiedSSLSocket"
nameWithType: "ProxiedSSLSocket"
summary: "Extension of an SSLSocket that sends an HTTP CONNECT packet to the proxy socket before sending the SSL handshake upstream."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.net.Socket?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"javax.net.ssl.SSLSocket?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.net.Socket.<T>getOption(java.net.SocketOption<T>)"
- "java.net.Socket.<T>setOption(java.net.SocketOption<T>,T)"
- "java.net.Socket.bind(java.net.SocketAddress)"
- "java.net.Socket.close()"
- "java.net.Socket.connect(java.net.SocketAddress)"
- "java.net.Socket.connect(java.net.SocketAddress,int)"
- "java.net.Socket.getChannel()"
- "java.net.Socket.getInetAddress()"
- "java.net.Socket.getInputStream()"
- "java.net.Socket.getKeepAlive()"
- "java.net.Socket.getLocalAddress()"
- "java.net.Socket.getLocalPort()"
- "java.net.Socket.getLocalSocketAddress()"
- "java.net.Socket.getOOBInline()"
- "java.net.Socket.getOutputStream()"
- "java.net.Socket.getPort()"
- "java.net.Socket.getReceiveBufferSize()"
- "java.net.Socket.getRemoteSocketAddress()"
- "java.net.Socket.getReuseAddress()"
- "java.net.Socket.getSendBufferSize()"
- "java.net.Socket.getSoLinger()"
- "java.net.Socket.getSoTimeout()"
- "java.net.Socket.getTcpNoDelay()"
- "java.net.Socket.getTrafficClass()"
- "java.net.Socket.isBound()"
- "java.net.Socket.isClosed()"
- "java.net.Socket.isConnected()"
- "java.net.Socket.isInputShutdown()"
- "java.net.Socket.isOutputShutdown()"
- "java.net.Socket.sendUrgentData(int)"
- "java.net.Socket.setKeepAlive(boolean)"
- "java.net.Socket.setOOBInline(boolean)"
- "java.net.Socket.setPerformancePreferences(int,int,int)"
- "java.net.Socket.setReceiveBufferSize(int)"
- "java.net.Socket.setReuseAddress(boolean)"
- "java.net.Socket.setSendBufferSize(int)"
- "java.net.Socket.setSoLinger(boolean,int)"
- "java.net.Socket.setSoTimeout(int)"
- "java.net.Socket.setSocketImplFactory(java.net.SocketImplFactory)"
- "java.net.Socket.setTcpNoDelay(boolean)"
- "java.net.Socket.setTrafficClass(int)"
- "java.net.Socket.shutdownInput()"
- "java.net.Socket.shutdownOutput()"
- "java.net.Socket.supportedOptions()"
- "java.net.Socket.toString()"
- "javax.net.ssl.SSLSocket.addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)"
- "javax.net.ssl.SSLSocket.getApplicationProtocol()"
- "javax.net.ssl.SSLSocket.getEnableSessionCreation()"
- "javax.net.ssl.SSLSocket.getEnabledCipherSuites()"
- "javax.net.ssl.SSLSocket.getEnabledProtocols()"
- "javax.net.ssl.SSLSocket.getHandshakeApplicationProtocol()"
- "javax.net.ssl.SSLSocket.getHandshakeApplicationProtocolSelector()"
- "javax.net.ssl.SSLSocket.getHandshakeSession()"
- "javax.net.ssl.SSLSocket.getNeedClientAuth()"
- "javax.net.ssl.SSLSocket.getSSLParameters()"
- "javax.net.ssl.SSLSocket.getSession()"
- "javax.net.ssl.SSLSocket.getSupportedCipherSuites()"
- "javax.net.ssl.SSLSocket.getSupportedProtocols()"
- "javax.net.ssl.SSLSocket.getUseClientMode()"
- "javax.net.ssl.SSLSocket.getWantClientAuth()"
- "javax.net.ssl.SSLSocket.removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)"
- "javax.net.ssl.SSLSocket.setEnableSessionCreation(boolean)"
- "javax.net.ssl.SSLSocket.setEnabledCipherSuites(java.lang.String[])"
- "javax.net.ssl.SSLSocket.setEnabledProtocols(java.lang.String[])"
- "javax.net.ssl.SSLSocket.setHandshakeApplicationProtocolSelector(java.util.function.BiFunction<javax.net.ssl.SSLSocket,java.util.List<java.lang.String>,java.lang.String>)"
- "javax.net.ssl.SSLSocket.setNeedClientAuth(boolean)"
- "javax.net.ssl.SSLSocket.setSSLParameters(javax.net.ssl.SSLParameters)"
- "javax.net.ssl.SSLSocket.setUseClientMode(boolean)"
- "javax.net.ssl.SSLSocket.setWantClientAuth(boolean)"
- "javax.net.ssl.SSLSocket.startHandshake()"
syntax: "public class ProxiedSSLSocket extends SSLSocket"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.ProxiedSSLSocket(javax.net.ssl.SSLSocketFactory,java.net.Socket,java.lang.String,char[])"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.ProxiedSSLSocket(SSLSocketFactory socketFactory, Socket proxySocket, String proxyUsername, char[] proxyPassword)"
  name: "ProxiedSSLSocket(SSLSocketFactory socketFactory, Socket proxySocket, String proxyUsername, char[] proxyPassword)"
  nameWithType: "ProxiedSSLSocket.ProxiedSSLSocket(SSLSocketFactory socketFactory, Socket proxySocket, String proxyUsername, char[] proxyPassword)"
  modifiers:
  - "protected"
  parameters:
  - name: "socketFactory"
    type: "<xref href=\"javax.net.ssl.SSLSocketFactory?alt=javax.net.ssl.SSLSocketFactory&text=SSLSocketFactory\" data-throw-if-not-resolved=\"False\" />"
  - name: "proxySocket"
    type: "<xref href=\"java.net.Socket?alt=java.net.Socket&text=Socket\" data-throw-if-not-resolved=\"False\" />"
  - name: "proxyUsername"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "proxyPassword"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "protected ProxiedSSLSocket(SSLSocketFactory socketFactory, Socket proxySocket, String proxyUsername, char[] proxyPassword)"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.close()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.close()"
  name: "close()"
  nameWithType: "ProxiedSSLSocket.close()"
  overridden: "java.net.Socket.close()"
  syntax: "public void close()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.connect(java.net.SocketAddress)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.connect(SocketAddress socketAddress)"
  name: "connect(SocketAddress socketAddress)"
  nameWithType: "ProxiedSSLSocket.connect(SocketAddress socketAddress)"
  overridden: "java.net.Socket.connect(java.net.SocketAddress)"
  parameters:
  - name: "socketAddress"
    type: "<xref href=\"java.net.SocketAddress?alt=java.net.SocketAddress&text=SocketAddress\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void connect(SocketAddress socketAddress)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.connect(java.net.SocketAddress,int)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.ProxiedSSLSocket.connect(SocketAddress socketAddress, int timeout)"
  name: "connect(SocketAddress socketAddress, int timeout)"
  nameWithType: "ProxiedSSLSocket.connect(SocketAddress socketAddress, int timeout)"
  overridden: "java.net.Socket.connect(java.net.SocketAddress,int)"
  parameters:
  - name: "socketAddress"
    type: "<xref href=\"java.net.SocketAddress?alt=java.net.SocketAddress&text=SocketAddress\" data-throw-if-not-resolved=\"False\" />"
  - name: "timeout"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void connect(SocketAddress socketAddress, int timeout)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Extension of an SSLSocket that sends an HTTP CONNECT packet to the proxy socket before sending the SSL handshake upstream."
metadata: {}
package: "com.microsoft.azure.sdk.iot.device.transport"
artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.30.1
