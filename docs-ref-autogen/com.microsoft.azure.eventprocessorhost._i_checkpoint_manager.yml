### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  id: _i_checkpoint_manager
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists()
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists(String)
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists()
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint(String)
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore()
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint(String)
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Checkpoint)
  - com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: ICheckpointManager
  nameWithType: ICheckpointManager
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 20
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public interface ICheckpointManager
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists()
  id: checkpointStoreExists()
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: checkpointStoreExists()
  nameWithType: ICheckpointManager.checkpointStoreExists()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 27
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Boolean> checkpointStoreExists()
    return:
      type: ec0e250a
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists(String)
  id: createCheckpointIfNotExists(String)
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: createCheckpointIfNotExists(String partitionId)
  nameWithType: ICheckpointManager.createCheckpointIfNotExists(String partitionId)
  fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointIfNotExists(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 66
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Checkpoint> createCheckpointIfNotExists(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists()
  id: createCheckpointStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: createCheckpointStoreIfNotExists()
  nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 34
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Boolean> createCheckpointStoreIfNotExists()
    return:
      type: ec0e250a
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint(String)
  id: deleteCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: deleteCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.deleteCheckpoint(String partitionId)
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 93
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Void> deleteCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: 075d0a89
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore()
  id: deleteCheckpointStore()
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: deleteCheckpointStore()
  nameWithType: ICheckpointManager.deleteCheckpointStore()
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 41
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Not used by <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>, but a convenient function to have for testing.</p>

    <p></p>
  syntax:
    content: public Future<Boolean> deleteCheckpointStore()
    return:
      type: ec0e250a
      description: <p>true if the checkpoint store was deleted successfully, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint(String)
  id: getCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: getCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.getCheckpoint(String partitionId)
  fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 51
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Checkpoint> getCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Checkpoint)
  id: updateCheckpoint(Checkpoint)
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: updateCheckpoint(Checkpoint checkpoint)
  nameWithType: ICheckpointManager.updateCheckpoint(Checkpoint checkpoint)
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(Checkpoint checkpoint)
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 84
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Void> updateCheckpoint(Checkpoint checkpoint)
    parameters:
    - id: checkpoint
      type: com.microsoft.azure.eventprocessorhost._checkpoint
    return:
      type: 075d0a89
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint(Lease,Checkpoint)
  id: updateCheckpoint(Lease,Checkpoint)
  parent: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager
  href: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.yml
  langs:
  - java
  name: updateCheckpoint(Lease lease, Checkpoint checkpoint)
  nameWithType: ICheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(Lease lease, Checkpoint checkpoint)
  overload: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 81
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public Future<Void> updateCheckpoint(Lease lease, Checkpoint checkpoint)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
    - id: checkpoint
      type: com.microsoft.azure.eventprocessorhost._checkpoint
    return:
      type: 075d0a89
references:
- uid: ec0e250a
  spec.java:
  - name: Future<Boolean>
    fullName: Future<Boolean>
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.checkpointStoreExists*
  name: checkpointStoreExists
  nameWithType: ICheckpointManager.checkpointStoreExists
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointStoreIfNotExists*
  name: createCheckpointStoreIfNotExists
  nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpointStore*
  name: deleteCheckpointStore
  nameWithType: ICheckpointManager.deleteCheckpointStore
  fullName: Future<Boolean> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9b3030f6com.microsoft.azure.eventprocessorhost._checkpointa08ddfce
  spec.java:
  - name: Future<
    fullName: Future<
  - uid: com.microsoft.azure.eventprocessorhost._checkpoint
    name: Checkpoint
    fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
    href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.getCheckpoint*
  name: getCheckpoint
  nameWithType: ICheckpointManager.getCheckpoint
  fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.createCheckpointIfNotExists*
  name: createCheckpointIfNotExists
  nameWithType: ICheckpointManager.createCheckpointIfNotExists
  fullName: Future<Checkpoint> com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: 075d0a89
  spec.java:
  - name: Future<Void>
    fullName: Future<Void>
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.updateCheckpoint*
  name: updateCheckpoint
  nameWithType: ICheckpointManager.updateCheckpoint
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_checkpoint_manager.deleteCheckpoint*
  name: deleteCheckpoint
  nameWithType: ICheckpointManager.deleteCheckpoint
  fullName: Future<Void> com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._azure_storage_checkpoint_lease_manager
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._checkpoint
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._checkpoint.yml
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false">Checkpoint</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false">ICheckpointManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_checkpoint_manager" data-throw-if-not-resolved="false">ICheckpointManager</xref> you should not have to deal with objects of this class directly. </p>

    <p>A <xref uid="com.microsoft.azure.eventprocessorhost._checkpoint" data-throw-if-not-resolved="false">Checkpoint</xref> is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the messages in that partition. </p>
  syntax:
    content: public class Checkpoint
- uid: com.microsoft.azure.eventprocessorhost._lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease.yml
  name: Lease
  nameWithType: Lease
  fullName: com.microsoft.azure.eventprocessorhost.Lease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>When implementing an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired. The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access. When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide. </p>

    <p>Note that a <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> object just carries information about a partition lease. The functionality to acquire/renew/release a lease is all on the <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax:
    content: public class Lease
