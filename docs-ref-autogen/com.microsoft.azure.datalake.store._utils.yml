### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.datalake.store._utils
  id: _utils
  parent: com.microsoft.azure.datalake.store
  children:
  - com.microsoft.azure.datalake.store._utils.upload(String,byte [],IfExists)
  - com.microsoft.azure.datalake.store._utils.upload(String,InputStream,IfExists)
  - com.microsoft.azure.datalake.store._utils.upload(String,String,IfExists)
  href: com.microsoft.azure.datalake.store._utils.yml
  langs:
  - java
  name: Utils
  nameWithType: Utils
  fullName: com.microsoft.azure.datalake.store.Utils
  type: Class
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/datalake/store/Utils.java
      branch: master
      repo: https://github.com/azure/azure-data-lake-store-java
    path: src/main/java/com/microsoft/azure/datalake/store/Utils.java
    startLine: 19
  package: com.microsoft.azure.datalake.store
  summary: "<p>Utility methods to enable one-liners for simple functionality.</p>\r\n<p>The methods are all based on calls to the SDK methods, these are just convenience methods for common tasks. </p>"
  syntax:
    content: public class Utils
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.datalake.store._utils.upload(String,byte [],IfExists)
  id: upload(String,byte [],IfExists)
  parent: com.microsoft.azure.datalake.store._utils
  href: com.microsoft.azure.datalake.store._utils.yml
  langs:
  - java
  name: upload(String filename, byte[] contents, IfExists mode)
  nameWithType: Utils.upload(String filename, byte[] contents, IfExists mode)
  fullName: com.microsoft.azure.datalake.store.Utils.upload(String filename, byte[] contents, IfExists mode)
  overload: com.microsoft.azure.datalake.store._utils.upload*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/Utils.java
    startLine: 81
  package: com.microsoft.azure.datalake.store
  summary: "<p>Uploads the contents of byte array to an Azure Data Lake file.</p>\r\n<p></p>"
  syntax:
    content: public void upload(String filename, byte[] contents, IfExists mode)
    parameters:
    - id: filename
      type: "26831127"
      description: <p>path of file to upload to </p>
    - id: contents
      type: ccd9418d
      description: <p>byte array containing the bytes to upload </p>
    - id: mode
      type: com.microsoft.azure.datalake.store._if_exists
      description: >-
        <p>

          <xref uid="com.microsoft.azure.datalake.store._if_exists" data-throw-if-not-resolved="false">IfExists</xref>

          <code>enum 

            </code> specifying whether to overwite or throw an exception if the file already exists </p>
  exceptions:
  - type: cbf33bbe
    description: <p>thrown on error </p>
- uid: com.microsoft.azure.datalake.store._utils.upload(String,InputStream,IfExists)
  id: upload(String,InputStream,IfExists)
  parent: com.microsoft.azure.datalake.store._utils
  href: com.microsoft.azure.datalake.store._utils.yml
  langs:
  - java
  name: upload(String filename, InputStream in, IfExists mode)
  nameWithType: Utils.upload(String filename, InputStream in, IfExists mode)
  fullName: com.microsoft.azure.datalake.store.Utils.upload(String filename, InputStream in, IfExists mode)
  overload: com.microsoft.azure.datalake.store._utils.upload*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/Utils.java
    startLine: 54
  package: com.microsoft.azure.datalake.store
  summary: "<p>Uploads an <xref uid=\"\" data-throw-if-not-resolved=\"false\">InputStream</xref> to an Azure Data Lake file.</p>\r\n<p></p>"
  syntax:
    content: public void upload(String filename, InputStream in, IfExists mode)
    parameters:
    - id: filename
      type: "26831127"
      description: <p>path of file to upload to </p>
    - id: in
      type: 76fcb9b7
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">InputStream</xref> whose contents will be uploaded </p>
    - id: mode
      type: com.microsoft.azure.datalake.store._if_exists
      description: >-
        <p>

          <xref uid="com.microsoft.azure.datalake.store._if_exists" data-throw-if-not-resolved="false">IfExists</xref>

          <code>enum 

            </code> specifying whether to overwite or throw an exception if the file already exists </p>
  exceptions:
  - type: cbf33bbe
    description: <p>thrown on error </p>
- uid: com.microsoft.azure.datalake.store._utils.upload(String,String,IfExists)
  id: upload(String,String,IfExists)
  parent: com.microsoft.azure.datalake.store._utils
  href: com.microsoft.azure.datalake.store._utils.yml
  langs:
  - java
  name: upload(String filename, String localFilename, IfExists mode)
  nameWithType: Utils.upload(String filename, String localFilename, IfExists mode)
  fullName: com.microsoft.azure.datalake.store.Utils.upload(String filename, String localFilename, IfExists mode)
  overload: com.microsoft.azure.datalake.store._utils.upload*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/datalake/store/Utils.java
    startLine: 36
  package: com.microsoft.azure.datalake.store
  summary: "<p>Uploads the contents of a local file to an Azure Data Lake file.</p>\r\n<p></p>"
  syntax:
    content: public void upload(String filename, String localFilename, IfExists mode)
    parameters:
    - id: filename
      type: "26831127"
      description: <p>path of file to upload to </p>
    - id: localFilename
      type: "26831127"
      description: <p>path to local file </p>
    - id: mode
      type: com.microsoft.azure.datalake.store._if_exists
      description: >-
        <p>

          <xref uid="com.microsoft.azure.datalake.store._if_exists" data-throw-if-not-resolved="false">IfExists</xref>

          <code>enum 

            </code> specifying whether to overwite or throw an exception if the file already exists </p>
  exceptions:
  - type: cbf33bbe
    description: <p>thrown on error </p>
references:
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.datalake.store._utils.upload*
  name: upload
  nameWithType: Utils.upload
  fullName: com.microsoft.azure.datalake.store.Utils.upload
  package: com.microsoft.azure.datalake.store
- uid: 76fcb9b7
  spec.java:
  - name: InputStream
    fullName: InputStream
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.microsoft.azure.datalake.store._a_d_l_store_client
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._a_d_l_store_client.yml
  name: ADLStoreClient
  nameWithType: ADLStoreClient
  fullName: com.microsoft.azure.datalake.store.ADLStoreClient
  type: Class
  summary: >-
    <p>

      <code>ADLStoreClient 

        </code> class represents a client to Azure Data Lake. It can be used to perform operations on files and directories. </p>
  syntax:
    content: public class ADLStoreClient
- uid: com.microsoft.azure.datalake.store._if_exists
  parent: com.microsoft.azure.datalake.store
  href: com.microsoft.azure.datalake.store._if_exists.yml
  name: IfExists
  nameWithType: IfExists
  fullName: com.microsoft.azure.datalake.store.IfExists
  type: Enum
  summary: <p>Enum specifying actions to take if attempting to create a file that already exists. </p>
  syntax:
    content: public enum IfExists
