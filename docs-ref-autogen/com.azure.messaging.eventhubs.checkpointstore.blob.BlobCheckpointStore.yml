### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  id: BlobCheckpointStore
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob
  children:
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore(com.azure.storage.blob.BlobContainerAsyncClient)
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.EMPTY_STRING
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  langs:
  - java
  name: BlobCheckpointStore
  nameWithType: BlobCheckpointStore
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  type: Class
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  summary: >-
    Implementation of <xref uid="com.azure.messaging.eventhubs.CheckpointStore" data-throw-if-not-resolved="false">CheckpointStore</xref> that uses [Storage Blobs][] for persisting partition ownership and checkpoint information. <xref uid="" data-throw-if-not-resolved="false">EventProcessors</xref> can use this implementation to load balance and update checkpoints.



    [Storage Blobs]: https://docs.microsoft.com/en-us/azure/storage/common/storage-introduction#blob-storage
  syntax:
    content: public class BlobCheckpointStore implements CheckpointStore
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.messaging.eventhubs.CheckpointStore
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore(com.azure.storage.blob.BlobContainerAsyncClient)
  id: BlobCheckpointStore(com.azure.storage.blob.BlobContainerAsyncClient)
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: BlobCheckpointStore(BlobContainerAsyncClient blobContainerAsyncClient)
  nameWithType: BlobCheckpointStore.BlobCheckpointStore(BlobContainerAsyncClient blobContainerAsyncClient)
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore(BlobContainerAsyncClient blobContainerAsyncClient)
  overload: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore*
  type: Constructor
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  summary: Creates an instance of BlobCheckpointStore.
  syntax:
    content: public BlobCheckpointStore(BlobContainerAsyncClient blobContainerAsyncClient)
    parameters:
    - id: blobContainerAsyncClient
      type: com.azure.storage.blob.BlobContainerAsyncClient
      description: >-
        The <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> this instance will use to read and update
         blobs in the storage container.
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.EMPTY_STRING
  id: EMPTY_STRING
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: EMPTY_STRING
  nameWithType: BlobCheckpointStore.EMPTY_STRING
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.EMPTY_STRING
  type: Field
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  syntax:
    content: public static final String EMPTY_STRING
    return:
      type: java.lang.String
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  id: claimOwnership(java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>)
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  nameWithType: BlobCheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
  overload: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership*
  type: Method
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  summary: This method is called by the <xref uid="" data-throw-if-not-resolved="false">EventProcessorClient</xref> to claim ownership of a list of partitions. This will return the list of partitions that were owned successfully.
  syntax:
    content: public Flux<PartitionOwnership> claimOwnership(List<PartitionOwnership> requestedPartitionOwnerships)
    parameters:
    - id: requestedPartitionOwnerships
      type: java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: List of partition ownerships this instance is requesting to own.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: A flux of partitions this instance successfully claimed ownership.
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  id: listCheckpoints(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  nameWithType: BlobCheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  overload: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints*
  type: Method
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  syntax:
    content: public Flux<Checkpoint> listCheckpoints(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
    parameters:
    - id: fullyQualifiedNamespace
      type: java.lang.String
    - id: eventHubName
      type: java.lang.String
    - id: consumerGroup
      type: java.lang.String
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.Checkpoint>
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)
  id: listOwnership(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  nameWithType: BlobCheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
  overload: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership*
  type: Method
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  summary: This method is called by the <xref uid="" data-throw-if-not-resolved="false">EventProcessorClient</xref> to get the list of all existing partition ownership from the Storage Blobs. Could return empty results if there are is no existing ownership information.
  syntax:
    content: public Flux<PartitionOwnership> listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroup)
    parameters:
    - id: fullyQualifiedNamespace
      type: java.lang.String
    - id: eventHubName
      type: java.lang.String
      description: The Event Hub name to get ownership information.
    - id: consumerGroup
      type: java.lang.String
      description: The consumer group name.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
      description: A flux of partition ownership details of all the partitions that have/had an owner.
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  id: updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)
  artifact: com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.1.1
  parent: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore
  langs:
  - java
  name: updateCheckpoint(Checkpoint checkpoint)
  nameWithType: BlobCheckpointStore.updateCheckpoint(Checkpoint checkpoint)
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint(Checkpoint checkpoint)
  overload: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint*
  type: Method
  package: com.azure.messaging.eventhubs.checkpointstore.blob
  summary: Updates the checkpoint in Storage Blobs for a partition.
  syntax:
    content: public Mono<Void> updateCheckpoint(Checkpoint checkpoint)
    parameters:
    - id: checkpoint
      type: com.azure.messaging.eventhubs.models.Checkpoint
      description: Checkpoint information containing sequence number and offset to be stored for this partition.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: The new ETag on successful update.
references:
- uid: com.azure.storage.blob.BlobContainerAsyncClient
  spec.java:
  - uid: com.azure.storage.blob.BlobContainerAsyncClient
    name: BlobContainerAsyncClient
    fullName: com.azure.storage.blob.BlobContainerAsyncClient
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore*
  name: BlobCheckpointStore
  nameWithType: BlobCheckpointStore.BlobCheckpointStore
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.BlobCheckpointStore
  package: com.azure.messaging.eventhubs.checkpointstore.blob
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.PartitionOwnership
    name: PartitionOwnership
    fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership*
  name: listOwnership
  nameWithType: BlobCheckpointStore.listOwnership
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listOwnership
  package: com.azure.messaging.eventhubs.checkpointstore.blob
- uid: reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.Checkpoint>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.Checkpoint
    name: Checkpoint
    fullName: com.azure.messaging.eventhubs.models.Checkpoint
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints*
  name: listCheckpoints
  nameWithType: BlobCheckpointStore.listCheckpoints
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.listCheckpoints
  package: com.azure.messaging.eventhubs.checkpointstore.blob
- uid: java.util.List<com.azure.messaging.eventhubs.models.PartitionOwnership>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.PartitionOwnership
    name: PartitionOwnership
    fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership*
  name: claimOwnership
  nameWithType: BlobCheckpointStore.claimOwnership
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.claimOwnership
  package: com.azure.messaging.eventhubs.checkpointstore.blob
- uid: com.azure.messaging.eventhubs.models.Checkpoint
  spec.java:
  - uid: com.azure.messaging.eventhubs.models.Checkpoint
    name: Checkpoint
    fullName: com.azure.messaging.eventhubs.models.Checkpoint
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint*
  name: updateCheckpoint
  nameWithType: BlobCheckpointStore.updateCheckpoint
  fullName: com.azure.messaging.eventhubs.checkpointstore.blob.BlobCheckpointStore.updateCheckpoint
  package: com.azure.messaging.eventhubs.checkpointstore.blob
- uid: com.azure.messaging.eventhubs.CheckpointStore
  name: CheckpointStore
  nameWithType: CheckpointStore
  fullName: com.azure.messaging.eventhubs.CheckpointStore
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: com.azure.messaging.eventhubs.models.PartitionOwnership
  name: PartitionOwnership
  nameWithType: PartitionOwnership
  fullName: com.azure.messaging.eventhubs.models.PartitionOwnership
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
