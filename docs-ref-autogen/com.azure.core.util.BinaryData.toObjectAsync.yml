### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.toObjectAsync*"
fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync"
name: "<T>toObjectAsync"
nameWithType: "BinaryData.<T>toObjectAsync"
members:
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(TypeReference<T> typeReference)"
  name: "<T>toObjectAsync(TypeReference<T> typeReference)"
  nameWithType: "BinaryData.<T>toObjectAsync(TypeReference<T> typeReference)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.&lt;T&gt;createInstance(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n BinaryData binaryData = BinaryData.fromObject(data);\n \n Disposable subscriber = binaryData.toObjectAsync(TypeReference.createInstance(Person.class))\n     .subscribe(person -> System.out.println(person.getName()));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n \n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n \n BinaryData binaryData = BinaryData.fromObject(personList);\n \n Disposable subscriber = binaryData.toObjectAsync(new TypeReference<List<Person>>() { })\n     .subscribe(persons -> persons.forEach(person -> System.out.println(person.getName())));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>toObjectAsync(TypeReference<T> typeReference)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(com.azure.core.util.serializer.TypeReference<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  name: "<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, can either be a generic or non-generic type. If the type is generic create a sub-type of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>, if the type is non-generic use <xref uid=\"com.azure.core.util.serializer.TypeReference.&lt;T&gt;createInstance(java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference#createInstance(Class)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n \n Disposable subscriber = binaryData\n     .toObjectAsync(TypeReference.createInstance(Person.class), serializer)\n     .subscribe(person -> System.out.println(person.getName()));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n**Get a generic Object from the BinaryData**\n\n```java\nfinal Person person1 = new Person().setName(\"John\");\n final Person person2 = new Person().setName(\"Jack\");\n \n List<Person> personList = new ArrayList<>();\n personList.add(person1);\n personList.add(person2);\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(personList, serializer);\n \n Disposable subscriber = binaryData\n     .toObjectAsync(new TypeReference<List<Person>>() { }, serializer) // retains the generic type information\n     .subscribe(persons -> persons.forEach(person -> System.out.println(person.getName())));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> representing the Object's type."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>toObjectAsync(TypeReference<T> typeReference, ObjectSerializer serializer)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(Class<T> clazz)"
  name: "<T>toObjectAsync(Class<T> clazz)"
  nameWithType: "BinaryData.<T>toObjectAsync(Class<T> clazz)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the default <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.&lt;T&gt;toObject(com.azure.core.util.serializer.TypeReference&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference)\"></xref>.\n\n**Note:** This method first looks for a <xref uid=\"com.azure.core.util.serializer.JsonSerializerProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializerProvider\"></xref> implementation on the classpath. If no implementation is found, a default Jackson-based implementation will be used to deserialize the object.\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Ensure your classpath have the Serializer to serialize the object which implement implement\n // com.azure.core.util.serializer.JsonSerializer interface.\n // Or use Azure provided libraries for this.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n BinaryData binaryData = BinaryData.fromObject(data);\n \n Disposable subscriber = binaryData.toObjectAsync(Person.class)\n     .subscribe(person -> System.out.println(person.getName()));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>toObjectAsync(Class<T> clazz)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the JSON deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.<T>toObjectAsync(java.lang.Class<T>,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  name: "<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  nameWithType: "BinaryData.<T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  summary: "Returns an <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representation of this <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> by deserializing its data using the passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>.\n\nThe type, represented by <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, should be a non-generic class, for generic classes use <xref uid=\"com.azure.core.util.BinaryData.&lt;T&gt;toObject(com.azure.core.util.serializer.TypeReference&lt;T&gt;,com.azure.core.util.serializer.ObjectSerializer)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#toObject(TypeReference, ObjectSerializer)\"></xref>.\n\nThe passed <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> can either be one of the implementations offered by the Azure SDKs or your own implementation.\n\n**Azure SDK implementations**\n\n *  [Jackson JSON serializer][]\n *  [GSON JSON serializer][]\n\n**Get a non-generic Object from the BinaryData**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n \n final ObjectSerializer serializer =\n     new MyJsonSerializer(); // Replace this with your Serializer\n BinaryData binaryData = BinaryData.fromObject(data, serializer);\n \n Disposable subscriber = binaryData.toObjectAsync(Person.class, serializer)\n     .subscribe(person -> System.out.println(person.getName()));\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```\n\n\n[Jackson JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[GSON JSON serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "The <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> representing the Object's type."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> used to deserialize object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> <T>toObjectAsync(Class<T> clazz, ObjectSerializer serializer)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> representing the deserialized <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.15.0
