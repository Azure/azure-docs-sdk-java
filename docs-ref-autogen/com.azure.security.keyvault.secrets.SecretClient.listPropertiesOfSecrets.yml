### YamlMime:JavaMember
uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets*"
fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets"
name: "listPropertiesOfSecrets"
nameWithType: "SecretClient.listPropertiesOfSecrets"
members:
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()"
  name: "listPropertiesOfSecrets()"
  nameWithType: "SecretClient.listPropertiesOfSecrets()"
  summary: "Lists secrets in the key vault. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Iterate through secrets and fetch their latest value**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecrets()) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```\n\n**Iterate over secrets by page**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> by page and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nsecretClient.listPropertiesOfSecrets().iterableByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());\n         System.out.printf(\"Received secret with name %s and value %s\",\n             secretWithValue.getName(), secretWithValue.getValue());\n     });\n });\n```"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecrets()"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the secrets in the vault. The\n     <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> contains all the information about the secret, except its value."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(Context context)"
  name: "listPropertiesOfSecrets(Context context)"
  nameWithType: "SecretClient.listPropertiesOfSecrets(Context context)"
  summary: "Lists secrets in the key vault. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Iterate over secrets and fetch their latest value**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecrets(new Context(key1, value2))) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```"
  parameters:
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecrets(Context context)"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the secrets in the vault. <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref>\n     contains all the information about the secret, except its value."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.secrets"
artifact: com.azure:azure-security-keyvault-secrets:4.2.4
