### YamlMime:JavaMember
uid: "com.microsoft.azure.eventhubs.PartitionSender.send*"
fullName: "com.microsoft.azure.eventhubs.PartitionSender.send"
name: "send"
nameWithType: "PartitionSender.send"
members:
- uid: "com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)"
  fullName: "com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)"
  name: "send(EventData data)"
  nameWithType: "PartitionSender.send(EventData data)"
  summary: "Send <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency.\n\nThere are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):\n\n```java\ni.   , , \n ii.   or \n iii. , , or\n```\n\nUse this type of Send, if:\n\n```java\ni. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.\n ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.\n```"
  parameters:
  - description: "the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to be sent."
    name: "data"
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(EventData data)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)"
  fullName: "com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)"
  name: "send(EventDataBatch eventDatas)"
  nameWithType: "PartitionSender.send(EventDataBatch eventDatas)"
  summary: "Send <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender.\n\nThere are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref>, which is the same type of Send and is used to send single <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>.\n\nSending a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s is useful in the following cases:\n\n```java\ni.   Efficient send - sending a batch of  maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.\n ii.  Send multiple 's in a Transaction. To achieve ACID properties, the Gateway Service will forward all 's in the batch to a single EventHubs' partition.\n```"
  parameters:
  - description: "EventDataBatch to send to EventHub"
    name: "eventDatas"
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(EventDataBatch eventDatas)"
  returns:
    description: "a CompletableFuture that can be completed when the send operation is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)"
  fullName: "com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)"
  name: "send(Iterable<EventData> eventDatas)"
  nameWithType: "PartitionSender.send(Iterable<EventData> eventDatas)"
  summary: "Send <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created.\n\nThere are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref>, which is the same type of Send and is used to send single <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>.\n\nSending a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s is useful in the following cases:\n\n```java\ni.   Efficient send - sending a batch of  maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.\n ii.  Send multiple 's in a Transaction. To achieve ACID properties, the Gateway Service will forward all 's in the batch to a single EventHubs' partition.\n```\n\nSample code (sample uses sync version of the api but concept are identical):\n\n```java\nGson gson = new GsonBuilder().create();\n EventHubClient client = EventHubClient.createSync(\"__connection__\");\n PartitionSender senderToPartitionOne = client.createPartitionSenderSync(\"1\");\n\n while (true)\n {\n     LinkedList events = new LinkedList();\n     for (int count = 1; count < 11; count++)\n     {\n         PayloadEvent payload = new PayloadEvent(count);\n         byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());\n         EventData sendEvent = EventData.create(payloadBytes);\n         sendEvent.getProperties().put(\"from\", \"javaClient\");\n         events.add(sendEvent);\n     }\n\n     senderToPartitionOne.sendSync(events);\n     System.out.println(String.format(\"Sent Batch... Size: %s\", events.size()));\n }\n```"
  parameters:
  - description: "batch of events to send to EventHub"
    name: "eventDatas"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.microsoft.azure.eventhubs"
artifact: com.microsoft.azure:azure-eventhubs:3.2.2
