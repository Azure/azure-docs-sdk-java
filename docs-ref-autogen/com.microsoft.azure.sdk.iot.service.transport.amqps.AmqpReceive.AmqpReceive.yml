### YamlMime:JavaMember
nameWithType: AmqpReceive.AmqpReceive
type: constructor
members:
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  name: AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  nameWithType: AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  parameters:
  - description: '<p>The address string of the service (example: AAA.BBB.CCC) </p>'
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The username string to use SASL authentication (example: <a href="mailto:user@sas.service">user@sas.service</a>) </p>'
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token string </p>
    name: sasToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>protocol to use </p>
    name: iotHubServiceClientProtocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor to set up connection parameters </p>
  syntax: public AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String,String,String,IotHubServiceClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  name: AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  nameWithType: AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  parameters:
  - description: '<p>The address string of the service (example: AAA.BBB.CCC) </p>'
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The username string to use SASL authentication (example: <a href="mailto:user@sas.service">user@sas.service</a>) </p>'
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token string </p>
    name: sasToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>protocol to use </p>
    name: iotHubServiceClientProtocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>the proxy options to tunnel through, if a proxy should be used. </p>
    name: proxyOptions
    type: <xref href="com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor to set up connection parameters </p>
  syntax: public AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String,String,String,IotHubServiceClientProtocol,ProxyOptions)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions, SSLContext sslContext)
  name: AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions, SSLContext sslContext)
  nameWithType: AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions, SSLContext sslContext)
  parameters:
  - description: '<p>The address string of the service (example: AAA.BBB.CCC) </p>'
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The username string to use SASL authentication (example: <a href="mailto:user@sas.service">user@sas.service</a>) </p>'
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token string </p>
    name: sasToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>protocol to use </p>
    name: iotHubServiceClientProtocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>the proxy options to tunnel through, if a proxy should be used. </p>
    name: proxyOptions
    type: <xref href="com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the SSL context to use during the TLS handshake when opening the connection. If null, a default SSL context will be generated. This default SSLContext trusts the IoT Hub public certificates. </p>
    name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor to set up connection parameters </p>
  syntax: public AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions, SSLContext sslContext)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String,String,String,IotHubServiceClientProtocol,ProxyOptions,SSLContext)
uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive*
fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive
name: AmqpReceive
package: com.microsoft.azure.sdk.iot.service.transport.amqps
metadata: {}
