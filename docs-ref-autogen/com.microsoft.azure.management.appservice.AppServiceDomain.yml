### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.adminContact()
  name: adminContact()
  nameWithType: AppServiceDomain.adminContact()
  returns:
    description: <p>admin contact information </p>
    type: <xref href="com.microsoft.azure.management.appservice.Contact?alt=com.microsoft.azure.management.appservice.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  syntax: public Contact adminContact()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.adminContact()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.autoRenew()
  name: autoRenew()
  nameWithType: AppServiceDomain.autoRenew()
  returns:
    description: <p>true if domain will renewed automatically </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean autoRenew()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.autoRenew()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.billingContact()
  name: billingContact()
  nameWithType: AppServiceDomain.billingContact()
  returns:
    description: <p>billing contact information </p>
    type: <xref href="com.microsoft.azure.management.appservice.Contact?alt=com.microsoft.azure.management.appservice.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  syntax: public Contact billingContact()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.billingContact()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.consent()
  name: consent()
  nameWithType: AppServiceDomain.consent()
  returns:
    description: <p>legal agreement consent. </p>
    type: <xref href="com.microsoft.azure.management.appservice.DomainPurchaseConsent?alt=com.microsoft.azure.management.appservice.DomainPurchaseConsent&text=DomainPurchaseConsent" data-throw-if-not-resolved="False"/>
  syntax: public DomainPurchaseConsent consent()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.consent()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.createdTime()
  name: createdTime()
  nameWithType: AppServiceDomain.createdTime()
  returns:
    description: <p>domain creation timestamp. </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime createdTime()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.createdTime()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.expirationTime()
  name: expirationTime()
  nameWithType: AppServiceDomain.expirationTime()
  returns:
    description: <p>domain expiration timestamp. </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime expirationTime()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.expirationTime()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.lastRenewedTime()
  name: lastRenewedTime()
  nameWithType: AppServiceDomain.lastRenewedTime()
  returns:
    description: <p>timestamp when the domain was renewed last time </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime lastRenewedTime()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.lastRenewedTime()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.managedHostNames()
  name: managedHostNames()
  nameWithType: AppServiceDomain.managedHostNames()
  returns:
    description: <p>all hostnames derived from the domain and assigned to Azure resources </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.appservice.HostName?alt=com.microsoft.azure.management.appservice.HostName&text=HostName" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, HostName> managedHostNames()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.managedHostNames()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.nameServers()
  name: nameServers()
  nameWithType: AppServiceDomain.nameServers()
  returns:
    description: <p>name servers </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public List<String> nameServers()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.nameServers()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.privacy()
  name: privacy()
  nameWithType: AppServiceDomain.privacy()
  returns:
    description: <p>true if domain privacy is enabled for this domain </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean privacy()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.privacy()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.readyForDnsRecordManagement()
  name: readyForDnsRecordManagement()
  nameWithType: AppServiceDomain.readyForDnsRecordManagement()
  returns:
    description: <p>true if Azure can assign this domain to Web Apps. This value will be true if domain registration status is active and it is hosted on name servers Azure has programmatic access to. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean readyForDnsRecordManagement()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.readyForDnsRecordManagement()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.registrantContact()
  name: registrantContact()
  nameWithType: AppServiceDomain.registrantContact()
  returns:
    description: <p>registrant contact information </p>
    type: <xref href="com.microsoft.azure.management.appservice.Contact?alt=com.microsoft.azure.management.appservice.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  syntax: public Contact registrantContact()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.registrantContact()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.registrationStatus()
  name: registrationStatus()
  nameWithType: AppServiceDomain.registrationStatus()
  returns:
    description: <p>domain registration status </p>
    type: <xref href="com.microsoft.azure.management.appservice.DomainStatus?alt=com.microsoft.azure.management.appservice.DomainStatus&text=DomainStatus" data-throw-if-not-resolved="False"/>
  syntax: public DomainStatus registrationStatus()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.registrationStatus()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.techContact()
  name: techContact()
  nameWithType: AppServiceDomain.techContact()
  returns:
    description: <p>technical contact information </p>
    type: <xref href="com.microsoft.azure.management.appservice.Contact?alt=com.microsoft.azure.management.appservice.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  syntax: public Contact techContact()
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.techContact()
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  name: verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  nameWithType: AppServiceDomain.verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  parameters:
  - description: <p>the name of the certificate order </p>
    name: certificateOrderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the domain verification token for the certificate order </p>
    name: domainVerificationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain for a certificate order bound to this domain. </p>
  syntax: public void verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.verifyDomainOwnership(String,String)
- fullName: com.microsoft.azure.management.appservice.AppServiceDomain.verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  name: verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  nameWithType: AppServiceDomain.verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  parameters:
  - description: <p>the name of the certificate order </p>
    name: certificateOrderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the domain verification token for the certificate order </p>
    name: domainVerificationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain for a certificate order bound to this domain. </p>
  syntax: public Completable verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  uid: com.microsoft.azure.management.appservice.AppServiceDomain.verifyDomainOwnershipAsync(String,String)
nameWithType: AppServiceDomain
syntax: public interface AppServiceDomain extends GroupableResource<AppServiceManager, DomainInner>,HasName,Refreshable<AppServiceDomain>,Updatable<AppServiceDomain.Update>
type: interface
uid: com.microsoft.azure.management.appservice.AppServiceDomain
fullName: com.microsoft.azure.management.appservice.AppServiceDomain
name: AppServiceDomain
package: com.microsoft.azure.management.appservice
summary: >-
  <p>An immutable client-side representation of a domain.</p>

  <p>Domains in Azure are purchased from 3rd party domain providers. By calling <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()" data-throw-if-not-resolved="false" data-raw-source="Creatable#create()"></xref> or <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()" data-throw-if-not-resolved="false" data-raw-source="Creatable#createAsync()"></xref> you agree to the agreements listed in <xref uid="com.microsoft.azure.management.appservice.AppServiceDomains.listAgreements(String)" data-throw-if-not-resolved="false" data-raw-source="AppServiceDomains#listAgreements(String)"></xref>. </p>
metadata: {}
