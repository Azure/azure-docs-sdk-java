### YamlMime:JavaType
uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient"
fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient"
name: "KeyVaultSettingsAsyncClient"
nameWithType: "KeyVaultSettingsAsyncClient"
summary: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref> provides asynchronous methods to create, update, get and list <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings\"></xref> for an Azure Key Vault account."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **KeyVaultSettingsAsyncClient**"
methods:
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSetting(java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSetting(String name)"
  name: "getSetting(String name)"
  nameWithType: "KeyVaultSettingsAsyncClient.getSetting(String name)"
  summary: "Get the value of a specific account setting."
  parameters:
  - description: "The name of setting to retrieve the value of."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<KeyVaultSetting> getSetting(String name)"
  desc: "Get the value of a specific account setting.\n\n**Code Samples**\n\nRetrieves a specific <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>. Prints out the details of the retrieved <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRoleDefinition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>.\n\n```java\nkeyVaultSettingsAsyncClient.getSetting(settingName)\n     .subscribe(setting ->\n         System.out.printf(\"Retrieved setting '%s' with value '%s'.%n\", setting.getName(), setting.asBoolean()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettingWithResponse(java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettingWithResponse(String name)"
  name: "getSettingWithResponse(String name)"
  nameWithType: "KeyVaultSettingsAsyncClient.getSettingWithResponse(String name)"
  summary: "Get the value of a specific account setting."
  parameters:
  - description: "The name of setting to retrieve the value of."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<KeyVaultSetting>> getSettingWithResponse(String name)"
  desc: "Get the value of a specific account setting.\n\n**Code Samples**\n\nRetrieves a specific <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the retrieved <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>.\n\n```java\nkeyVaultSettingsAsyncClient.getSettingWithResponse(settingName)\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Retrieved setting '%s' with value '%s'.%n\",\n             response.getStatusCode(), response.getValue().getName(), response.getValue().asBoolean()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the\n <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettings()"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettings()"
  name: "getSettings()"
  nameWithType: "KeyVaultSettingsAsyncClient.getSettings()"
  summary: "Get the account's settings."
  syntax: "public Mono<KeyVaultGetSettingsResult> getSettings()"
  desc: "Get the account's settings.\n\n**Code Samples**\n\nRetrieves all the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings\"></xref> for an account. Prints out the details of the retrieved <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRoleDefinition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings\"></xref>.\n\n```java\nkeyVaultSettingsAsyncClient.getSettings().subscribe(getSettingsResult ->\n     getSettingsResult.getSettings().forEach(setting ->\n         System.out.printf(\"Retrieved setting with name '%s' and value %s'.%n\", setting.getName(),\n             setting.asBoolean())));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"result object\"></xref> wrapping the list of\n <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account settings\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult?alt=com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult&text=KeyVaultGetSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettingsWithResponse()"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettingsWithResponse()"
  name: "getSettingsWithResponse()"
  nameWithType: "KeyVaultSettingsAsyncClient.getSettingsWithResponse()"
  summary: "Get the account's settings."
  syntax: "public Mono<Response<KeyVaultGetSettingsResult>> getSettingsWithResponse()"
  desc: "Get the account's settings.\n\n**Code Samples**\n\nRetrieves all <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings for an account\"></xref>. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the retrieved <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings\"></xref>.\n\n```java\nkeyVaultSettingsAsyncClient.getSettingsWithResponse()\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d.\", response.getStatusCode());\n\n         KeyVaultGetSettingsResult getSettingsResult = response.getValue();\n         List<KeyVaultSetting> settings = getSettingsResult.getSettings();\n\n         settings.forEach(setting ->\n             System.out.printf(\"Retrieved setting with name '%s' and value %s'.%n\", setting.getName(),\n                 setting.asBoolean()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"result object\"></xref> wrapping the list of <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account settings\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult?alt=com.azure.security.keyvault.administration.models.KeyVaultGetSettingsResult&text=KeyVaultGetSettingsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.updateSetting(com.azure.security.keyvault.administration.models.KeyVaultSetting)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.updateSetting(KeyVaultSetting setting)"
  name: "updateSetting(KeyVaultSetting setting)"
  nameWithType: "KeyVaultSettingsAsyncClient.updateSetting(KeyVaultSetting setting)"
  summary: "Updates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref> to update."
    name: "setting"
    type: "<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<KeyVaultSetting> updateSetting(KeyVaultSetting setting)"
  desc: "Updates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>.\n\n**Code Samples**\n\nUpdates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>. Prints out the details of the updated <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRoleDefinition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>.\n\n```java\nKeyVaultSetting settingToUpdate = new KeyVaultSetting(settingName, true);\n\n keyVaultSettingsAsyncClient.updateSetting(settingToUpdate)\n     .subscribe(updatedSetting ->\n         System.out.printf(\"Updated setting '%s' to '%s'.%n\", updatedSetting.getName(),\n             updatedSetting.asBoolean()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.updateSettingWithResponse(com.azure.security.keyvault.administration.models.KeyVaultSetting)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.updateSettingWithResponse(KeyVaultSetting setting)"
  name: "updateSettingWithResponse(KeyVaultSetting setting)"
  nameWithType: "KeyVaultSettingsAsyncClient.updateSettingWithResponse(KeyVaultSetting setting)"
  summary: "Updates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref> to update."
    name: "setting"
    type: "<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultSetting>> updateSettingWithResponse(KeyVaultSetting setting)"
  desc: "Updates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>.\n\n**Code Samples**\n\nUpdates a given <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the updated <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"setting\"></xref>.\n\n```java\nKeyVaultSetting mySettingToUpdate = new KeyVaultSetting(settingName, true);\n\n keyVaultSettingsAsyncClient.updateSettingWithResponse(mySettingToUpdate)\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Updated setting '%s' to '%s'.%n\",\n             response.getStatusCode(), response.getValue().getName(), response.getValue().asBoolean()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the updated\n <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"account setting\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSetting?alt=com.azure.security.keyvault.administration.models.KeyVaultSetting&text=KeyVaultSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref> provides asynchronous methods to create, update, get and list <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"settings\"></xref> for an Azure Key Vault account.\n\n## Getting Started ##\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref> class, a vault url and a credential object.\n\nThe examples shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [ managed identity][managed identity] for authentication in production environments. You can find more information on different ways of authenticating and their corresponding credential types in the [ Azure Identity documentation\"][Azure Identity documentation].\n\n**Sample: Construct Asynchronous Backup Client**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref>, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClientBuilder\"></xref> to configure it.\n\n```java\nKeyVaultSettingsAsyncClient keyVaultSettingsAsyncClient = new KeyVaultSettingsClientBuilder()\n     .vaultUrl(\"<your-managed-hsm-url>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\n\n--------------------\n\n## Get All Settings ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref> can be used to list all the settings for an Azure Key Vault account.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously back up an entire collection of keys using, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.getSettings()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient#getSettings()\"></xref> API.\n\n```java\nkeyVaultSettingsAsyncClient.getSettings().subscribe(getSettingsResult ->\n     getSettingsResult.getSettings().forEach(setting ->\n         System.out.printf(\"Retrieved setting with name '%s' and value %s'.%n\", setting.getName(),\n             setting.asBoolean())));\n```\n\n**Note:** For the synchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient\"></xref>.\n\n\n--------------------\n\n## Retrieve a Specific Setting ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient\"></xref> can be used to retrieve a specific setting.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously restore an entire collection of keys from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSetting(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient#getSetting(String)\"></xref> (String, String)\\} API.\n\n```java\nkeyVaultSettingsAsyncClient.getSetting(settingName)\n     .subscribe(setting ->\n         System.out.printf(\"Retrieved setting '%s' with value '%s'.%n\", setting.getName(), setting.asBoolean()));\n```\n\n**Note:** For the synchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient\"></xref>.\n\n\n--------------------\n\n## Update a Specific Setting ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient\"></xref> can be used to restore a specific key from a backup.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously restore a specific key from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient.updateSetting(com.azure.security.keyvault.administration.models.KeyVaultSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsAsyncClient#updateSetting(KeyVaultSetting)\"></xref> API.\n\n```java\nKeyVaultSetting settingToUpdate = new KeyVaultSetting(settingName, true);\n\n keyVaultSettingsAsyncClient.updateSetting(settingToUpdate)\n     .subscribe(updatedSetting ->\n         System.out.printf(\"Updated setting '%s' to '%s'.%n\", updatedSetting.getName(),\n             updatedSetting.asBoolean()));\n```\n\n**Note:** For the synchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient\"></xref>.\n\n\n--------------------\n\n\n[managed identity]: https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\n[Azure Identity documentation]: https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable"
metadata: {}
package: "com.azure.security.keyvault.administration"
artifact: com.azure:azure-security-keyvault-administration:4.5.5
