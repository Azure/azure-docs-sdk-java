### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse"
name: "publishTelemetryWithResponse"
nameWithType: "DigitalTwinsClient.publishTelemetryWithResponse"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse(java.lang.String,java.lang.String,java.lang.Object,com.azure.digitaltwins.core.models.PublishTelemetryOptions,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  name: "publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  nameWithType: "DigitalTwinsClient.publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  summary: "Publishes telemetry from a digital twin\n\n**Code Samples**\n\nA strongly typed object such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Hashtable\"></xref> can be provided as the input parameter for the telemetry payload.\n\n```java\nDictionary<String, Integer> telemetryPayload = new Hashtable<>();\n telemetryPayload.put(\"Telemetry1\", 5);\n \n Response<Void> responseObject = digitalTwinsSyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     telemetryPayload,\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n \n System.out.println(\n     \"Received publish telemetry operation response with HTTP status code: \" +\n     responseObject.getStatusCode());\n```\n\nOr alternatively String can be used as input type to construct the json string telemetry payload:\n\n```java\nResponse<Void> responseString = digitalTwinsSyncClient.publishTelemetryWithResponse(\n     \"myDigitalTwinId\",\n     UUID.randomUUID().toString(),\n     \"{\\\"Telemetry1\\\": 5}\",\n     new PublishTelemetryOptions().setTimestamp(OffsetDateTime.now(ZoneId.systemDefault())),\n     new Context(\"key\", \"value\"));\n \n System.out.println(\n     \"Received publish telemetry operation response with HTTP status code: \" +\n     responseString.getStatusCode());\n```\n\nThe result is then consumed by one or many destination endpoints (subscribers) defined under <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsEventRoute\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinsEventRoute\"></xref> These event routes need to be set before publishing a telemetry message, in order for the telemetry message to be consumed."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A unique message identifier (within the scope of the digital twin id) that is commonly used for de-duplicating messages. Defaults to a random UUID if argument is null."
    name: "messageId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application/json telemetry payload to be sent. payload can be a raw json string or a strongly typed object like a Dictionary."
    name: "payload"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional parameters for this request. If null, the default option values will be used."
    name: "options"
    type: "<xref href=\"com.azure.digitaltwins.core.models.PublishTelemetryOptions?alt=com.azure.digitaltwins.core.models.PublishTelemetryOptions&text=PublishTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> publishTelemetryWithResponse(String digitalTwinId, String messageId, Object payload, PublishTelemetryOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
