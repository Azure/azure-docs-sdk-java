### YamlMime:JavaType
uid: "com.azure.spring.integration.eventhub.inbound.EventHubInboundChannelAdapter"
fullName: "com.azure.spring.integration.eventhub.inbound.EventHubInboundChannelAdapter"
name: "EventHubInboundChannelAdapter"
nameWithType: "EventHubInboundChannelAdapter"
summary: "Inbound channel adapter for Event Hubs."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.context.IntegrationObjectSupport\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.endpoint.AbstractEndpoint\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.integration.endpoint.MessageProducerSupport\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.spring.integration.core.AbstractInboundChannelAdapter\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.buildPropertiesMap()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.doStart()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.doStop()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.getConsumerGroup()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.getSubscribeByGroupOperation()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.getSubscribeOperation()"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.receiveMessage(org.springframework.messaging.Message<?>)"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.setConsumerGroup(java.lang.String)"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.setSubscribeByGroupOperation(com.azure.spring.integration.core.api.SubscribeByGroupOperation)"
- "com.azure.spring.integration.core.AbstractInboundChannelAdapter.setSubscribeOperation(com.azure.spring.integration.core.api.SubscribeOperation)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "org.springframework.integration.context.IntegrationObjectSupport.<T>extractTypeIfPossible(java.lang.Object,java.lang.Class<T>)"
- "org.springframework.integration.context.IntegrationObjectSupport.<T>getIntegrationProperty(java.lang.String,java.lang.Class<T>)"
- "org.springframework.integration.context.IntegrationObjectSupport.afterPropertiesSet()"
- "org.springframework.integration.context.IntegrationObjectSupport.generateId()"
- "org.springframework.integration.context.IntegrationObjectSupport.getApplicationContext()"
- "org.springframework.integration.context.IntegrationObjectSupport.getApplicationContextId()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanDescription()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanFactory()"
- "org.springframework.integration.context.IntegrationObjectSupport.getBeanName()"
- "org.springframework.integration.context.IntegrationObjectSupport.getChannelResolver()"
- "org.springframework.integration.context.IntegrationObjectSupport.getComponentName()"
- "org.springframework.integration.context.IntegrationObjectSupport.getComponentType()"
- "org.springframework.integration.context.IntegrationObjectSupport.getConversionService()"
- "org.springframework.integration.context.IntegrationObjectSupport.getExpression()"
- "org.springframework.integration.context.IntegrationObjectSupport.getIntegrationProperties()"
- "org.springframework.integration.context.IntegrationObjectSupport.getMessageBuilderFactory()"
- "org.springframework.integration.context.IntegrationObjectSupport.getTaskScheduler()"
- "org.springframework.integration.context.IntegrationObjectSupport.isInitialized()"
- "org.springframework.integration.context.IntegrationObjectSupport.setApplicationContext(org.springframework.context.ApplicationContext)"
- "org.springframework.integration.context.IntegrationObjectSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)"
- "org.springframework.integration.context.IntegrationObjectSupport.setBeanName(java.lang.String)"
- "org.springframework.integration.context.IntegrationObjectSupport.setChannelResolver(org.springframework.messaging.core.DestinationResolver<org.springframework.messaging.MessageChannel>)"
- "org.springframework.integration.context.IntegrationObjectSupport.setComponentName(java.lang.String)"
- "org.springframework.integration.context.IntegrationObjectSupport.setConversionService(org.springframework.core.convert.ConversionService)"
- "org.springframework.integration.context.IntegrationObjectSupport.setMessageBuilderFactory(org.springframework.integration.support.MessageBuilderFactory)"
- "org.springframework.integration.context.IntegrationObjectSupport.setPrimaryExpression(org.springframework.expression.Expression)"
- "org.springframework.integration.context.IntegrationObjectSupport.setTaskScheduler(org.springframework.scheduling.TaskScheduler)"
- "org.springframework.integration.context.IntegrationObjectSupport.toString()"
- "org.springframework.integration.endpoint.AbstractEndpoint.destroy()"
- "org.springframework.integration.endpoint.AbstractEndpoint.doStop(java.lang.Runnable)"
- "org.springframework.integration.endpoint.AbstractEndpoint.getPhase()"
- "org.springframework.integration.endpoint.AbstractEndpoint.getRole()"
- "org.springframework.integration.endpoint.AbstractEndpoint.isAutoStartup()"
- "org.springframework.integration.endpoint.AbstractEndpoint.isRunning()"
- "org.springframework.integration.endpoint.AbstractEndpoint.setAutoStartup(boolean)"
- "org.springframework.integration.endpoint.AbstractEndpoint.setPhase(int)"
- "org.springframework.integration.endpoint.AbstractEndpoint.setRole(java.lang.String)"
- "org.springframework.integration.endpoint.AbstractEndpoint.start()"
- "org.springframework.integration.endpoint.AbstractEndpoint.stop()"
- "org.springframework.integration.endpoint.AbstractEndpoint.stop(java.lang.Runnable)"
- "org.springframework.integration.endpoint.MessageProducerSupport.afterSingletonsInstantiated()"
- "org.springframework.integration.endpoint.MessageProducerSupport.buildErrorMessage(org.springframework.messaging.Message<?>,java.lang.Exception)"
- "org.springframework.integration.endpoint.MessageProducerSupport.getErrorChannel()"
- "org.springframework.integration.endpoint.MessageProducerSupport.getErrorMessageAttributes(org.springframework.messaging.Message<?>)"
- "org.springframework.integration.endpoint.MessageProducerSupport.getIntegrationPatternType()"
- "org.springframework.integration.endpoint.MessageProducerSupport.getMessagingTemplate()"
- "org.springframework.integration.endpoint.MessageProducerSupport.getOutputChannel()"
- "org.springframework.integration.endpoint.MessageProducerSupport.onInit()"
- "org.springframework.integration.endpoint.MessageProducerSupport.sendErrorMessageIfNecessary(org.springframework.messaging.Message<?>,java.lang.Exception)"
- "org.springframework.integration.endpoint.MessageProducerSupport.sendMessage(org.springframework.messaging.Message<?>)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setErrorChannel(org.springframework.messaging.MessageChannel)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setErrorChannelName(java.lang.String)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setErrorMessageStrategy(org.springframework.integration.support.ErrorMessageStrategy)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setOutputChannel(org.springframework.messaging.MessageChannel)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setOutputChannelName(java.lang.String)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setSendTimeout(long)"
- "org.springframework.integration.endpoint.MessageProducerSupport.setShouldTrack(boolean)"
- "org.springframework.integration.endpoint.MessageProducerSupport.subscribeToPublisher(org.reactivestreams.Publisher<? extends org.springframework.messaging.Message<?>>)"
syntax: "public class EventHubInboundChannelAdapter extends AbstractInboundChannelAdapter"
constructors:
- "com.azure.spring.integration.eventhub.inbound.EventHubInboundChannelAdapter.EventHubInboundChannelAdapter(java.lang.String,com.azure.spring.integration.core.api.SubscribeByGroupOperation,java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.spring.integration.eventhub.inbound"
artifact: com.azure.spring:azure-spring-integration-eventhubs:2.0.0
