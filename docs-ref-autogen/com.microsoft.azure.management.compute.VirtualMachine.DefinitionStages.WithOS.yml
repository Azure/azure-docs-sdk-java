### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLatestLinuxImage(String publisher, String offer, String sku)
  name: withLatestLinuxImage(String publisher, String offer, String sku)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withLatestLinuxImage(String publisher, String offer, String sku)
  parameters:
  - description: <p>specifies the publisher of an image </p>
    name: publisher
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>specifies an offer of the image </p>
    name: offer
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>specifies a SKU of the image </p>
    name: sku
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies that the latest version of a marketplace Linux image is to be used as the virtual machine's OS.</p>

    <p></p>
  syntax: public WithLinuxRootUsernameManagedOrUnmanaged withLatestLinuxImage(String publisher, String offer, String sku)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLatestLinuxImage(String,String,String)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLatestWindowsImage(String publisher, String offer, String sku)
  name: withLatestWindowsImage(String publisher, String offer, String sku)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withLatestWindowsImage(String publisher, String offer, String sku)
  parameters:
  - description: <p>specifies the publisher of the image </p>
    name: publisher
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>specifies the offer of the image </p>
    name: offer
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>specifies the SKU of the image </p>
    name: sku
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies that the latest version of a marketplace Windows image should to be used as the virtual machine's OS.</p>

    <p></p>
  syntax: public WithWindowsAdminUsernameManagedOrUnmanaged withLatestWindowsImage(String publisher, String offer, String sku)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLatestWindowsImage(String,String,String)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLinuxCustomImage(String customImageId)
  name: withLinuxCustomImage(String customImageId)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withLinuxCustomImage(String customImageId)
  parameters:
  - description: <p>the resource ID of a custom image </p>
    name: customImageId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManaged&text=VirtualMachine.DefinitionStages.WithLinuxRootUsernameManaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the resource ID of a Linux custom image to be used as the virtual machines' OS.</p>

    <p></p>
  syntax: public WithLinuxRootUsernameManaged withLinuxCustomImage(String customImageId)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withLinuxCustomImage(String)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withPopularLinuxImage(KnownLinuxVirtualMachineImage knownImage)
  name: withPopularLinuxImage(KnownLinuxVirtualMachineImage knownImage)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withPopularLinuxImage(KnownLinuxVirtualMachineImage knownImage)
  parameters:
  - description: <p>a known market-place image </p>
    name: knownImage
    type: <xref href="com.microsoft.azure.management.compute.KnownLinuxVirtualMachineImage?alt=com.microsoft.azure.management.compute.KnownLinuxVirtualMachineImage&text=KnownLinuxVirtualMachineImage" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a known marketplace Linux image to be used for the virtual machine's OS.</p>

    <p></p>
  syntax: public WithLinuxRootUsernameManagedOrUnmanaged withPopularLinuxImage(KnownLinuxVirtualMachineImage knownImage)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withPopularLinuxImage(KnownLinuxVirtualMachineImage)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withPopularWindowsImage(KnownWindowsVirtualMachineImage knownImage)
  name: withPopularWindowsImage(KnownWindowsVirtualMachineImage knownImage)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withPopularWindowsImage(KnownWindowsVirtualMachineImage knownImage)
  parameters:
  - description: <p>a known market-place image </p>
    name: knownImage
    type: <xref href="com.microsoft.azure.management.compute.KnownWindowsVirtualMachineImage?alt=com.microsoft.azure.management.compute.KnownWindowsVirtualMachineImage&text=KnownWindowsVirtualMachineImage" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a known marketplace Windows image to be used for the virtual machine's OS.</p>

    <p></p>
  syntax: public WithWindowsAdminUsernameManagedOrUnmanaged withPopularWindowsImage(KnownWindowsVirtualMachineImage knownImage)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withPopularWindowsImage(KnownWindowsVirtualMachineImage)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecializedOSDisk(Disk disk, OperatingSystemTypes osType)
  name: withSpecializedOSDisk(Disk disk, OperatingSystemTypes osType)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withSpecializedOSDisk(Disk disk, OperatingSystemTypes osType)
  parameters:
  - description: <p>the managed disk to attach </p>
    name: disk
    type: <xref href="com.microsoft.azure.management.compute.Disk?alt=com.microsoft.azure.management.compute.Disk&text=Disk" data-throw-if-not-resolved="False"/>
  - description: <p>the OS type </p>
    name: osType
    type: <xref href="com.microsoft.azure.management.compute.OperatingSystemTypes?alt=com.microsoft.azure.management.compute.OperatingSystemTypes&text=OperatingSystemTypes" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithManagedCreate?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithManagedCreate&text=VirtualMachine.DefinitionStages.WithManagedCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a specialized operating system managed disk to be attached to the virtual machine.</p>

    <p></p>
  syntax: public WithManagedCreate withSpecializedOSDisk(Disk disk, OperatingSystemTypes osType)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecializedOSDisk(Disk,OperatingSystemTypes)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecializedOSUnmanagedDisk(String osDiskUrl, OperatingSystemTypes osType)
  name: withSpecializedOSUnmanagedDisk(String osDiskUrl, OperatingSystemTypes osType)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withSpecializedOSUnmanagedDisk(String osDiskUrl, OperatingSystemTypes osType)
  parameters:
  - description: <p>osDiskUrl the URL to the OS disk in the Azure Storage account </p>
    name: osDiskUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the OS type </p>
    name: osType
    type: <xref href="com.microsoft.azure.management.compute.OperatingSystemTypes?alt=com.microsoft.azure.management.compute.OperatingSystemTypes&text=OperatingSystemTypes" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithUnmanagedCreate?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithUnmanagedCreate&text=VirtualMachine.DefinitionStages.WithUnmanagedCreate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a specialized operating system unmanaged disk to be attached to the virtual machine.</p>

    <p></p>
  syntax: public WithUnmanagedCreate withSpecializedOSUnmanagedDisk(String osDiskUrl, OperatingSystemTypes osType)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecializedOSUnmanagedDisk(String,OperatingSystemTypes)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecificLinuxImageVersion(ImageReference imageReference)
  name: withSpecificLinuxImageVersion(ImageReference imageReference)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withSpecificLinuxImageVersion(ImageReference imageReference)
  parameters:
  - description: <p>describes the publisher, offer, SKU and version of the market-place image </p>
    name: imageReference
    type: <xref href="com.microsoft.azure.management.compute.ImageReference?alt=com.microsoft.azure.management.compute.ImageReference&text=ImageReference" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithLinuxRootUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a version of a market-place Linux image to be used as the virtual machine's OS.</p>

    <p></p>
  syntax: public WithLinuxRootUsernameManagedOrUnmanaged withSpecificLinuxImageVersion(ImageReference imageReference)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecificLinuxImageVersion(ImageReference)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecificWindowsImageVersion(ImageReference imageReference)
  name: withSpecificWindowsImageVersion(ImageReference imageReference)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withSpecificWindowsImageVersion(ImageReference imageReference)
  parameters:
  - description: <p>describes publisher, offer, SKU and version of the market-place image </p>
    name: imageReference
    type: <xref href="com.microsoft.azure.management.compute.ImageReference?alt=com.microsoft.azure.management.compute.ImageReference&text=ImageReference" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged&text=VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManagedOrUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a version of a marketplace Windows image to be used as the virtual machine's OS.</p>

    <p></p>
  syntax: public WithWindowsAdminUsernameManagedOrUnmanaged withSpecificWindowsImageVersion(ImageReference imageReference)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withSpecificWindowsImageVersion(ImageReference)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withStoredLinuxImage(String imageUrl)
  name: withStoredLinuxImage(String imageUrl)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withStoredLinuxImage(String imageUrl)
  parameters:
  - description: <p>the URL of a VHD </p>
    name: imageUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithLinuxRootUsernameUnmanaged&text=VirtualMachine.DefinitionStages.WithLinuxRootUsernameUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a user (generalized) Linux image to be used for the virtual machine's OS.</p>

    <p></p>
  syntax: public WithLinuxRootUsernameUnmanaged withStoredLinuxImage(String imageUrl)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withStoredLinuxImage(String)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withStoredWindowsImage(String imageUrl)
  name: withStoredWindowsImage(String imageUrl)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withStoredWindowsImage(String imageUrl)
  parameters:
  - description: <p>the URL of a VHD </p>
    name: imageUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameUnmanaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameUnmanaged&text=VirtualMachine.DefinitionStages.WithWindowsAdminUsernameUnmanaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the user (generalized) Windows image to be used for the virtual machine's OS.</p>

    <p></p>
  syntax: public WithWindowsAdminUsernameUnmanaged withStoredWindowsImage(String imageUrl)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withStoredWindowsImage(String)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withWindowsCustomImage(String customImageId)
  name: withWindowsCustomImage(String customImageId)
  nameWithType: VirtualMachine.DefinitionStages.WithOS.withWindowsCustomImage(String customImageId)
  parameters:
  - description: <p>the resource ID of the custom image </p>
    name: customImageId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManaged?alt=com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManaged&text=VirtualMachine.DefinitionStages.WithWindowsAdminUsernameManaged" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the resource ID of a Windows custom image to be used as the virtual machine's OS.</p>

    <p></p>
  syntax: public WithWindowsAdminUsernameManaged withWindowsCustomImage(String customImageId)
  uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS.withWindowsCustomImage(String)
nameWithType: VirtualMachine.DefinitionStages.WithOS
syntax: public interface WithOS
type: interface
uid: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS
fullName: com.microsoft.azure.management.compute.VirtualMachine.DefinitionStages.WithOS
name: VirtualMachine.DefinitionStages.WithOS
package: com.microsoft.azure.management.compute
summary: <p>The stage of a virtual machine definition allowing to specify the operating system image. </p>
metadata: {}
