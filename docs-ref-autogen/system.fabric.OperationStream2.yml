### YamlMime:ManagedReference
items:
- uid: system.fabric.OperationStream2
  id: OperationStream2
  parent: system.fabric
  children:
  - system.fabric.OperationStream2.reportFault(FaultType)
  href: system.fabric.OperationStream2.yml
  langs:
  - java
  name: OperationStream2
  nameWithType: OperationStream2
  fullName: system.fabric.OperationStream2
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream2.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream2.java
    startLine: 7
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public interface OperationStream2 extends OperationStream
  inheritedMembers:
  - system.fabric.OperationStream.getOperationAsync(CancellationToken)
- uid: system.fabric.OperationStream2.reportFault(FaultType)
  id: reportFault(FaultType)
  parent: system.fabric.OperationStream2
  href: system.fabric.OperationStream2.yml
  langs:
  - java
  name: reportFault(FaultType faultType)
  nameWithType: OperationStream2.reportFault(FaultType faultType)
  fullName: system.fabric.OperationStream2.reportFault(FaultType faultType)
  overload: system.fabric.OperationStream2.reportFault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationStream2.java
    startLine: 14
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric.FaultType
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
references:
- uid: system.fabric.OperationStream2.reportFault*
  name: reportFault
  nameWithType: OperationStream2.reportFault
  fullName: system.fabric.OperationStream2.reportFault
  package: system.fabric
- uid: system.fabric.OperationStream.getOperationAsync(CancellationToken)
  parent: system.fabric.OperationStream
  href: system.fabric.OperationStream.yml
  name: getOperationAsync(CancellationToken cancellationToken)
  nameWithType: OperationStream.getOperationAsync(CancellationToken cancellationToken)
  fullName: system.fabric.OperationStream.getOperationAsync(CancellationToken cancellationToken)
  type: Method
  summary: "<p>Gets the next object that implements <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> from the underlying <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationStream\"></xref>. </p>"
  syntax:
    content: public CompletableFuture<Operation> getOperationAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric.Operationa08ddfce
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> of type <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.OperationStream
  parent: system.fabric
  href: system.fabric.OperationStream.yml
  name: OperationStream
  nameWithType: OperationStream
  fullName: system.fabric.OperationStream
  type: Interface
  summary: "<p>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica. </p>\r\n<p>\r\n  <b> Remarks:</b> The streams returned from <xref uid=\"system.fabric.StateReplicator.getCopyStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#getCopyStream()\"></xref> and <xref uid=\"system.fabric.StateReplicator.getReplicationStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#getReplicationStream()\"></xref> are objects that implement <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationStream\"></xref>. </p>"
  syntax:
    content: public interface OperationStream
- uid: system.fabric.interop.JOperationStream
- uid: system.fabric.FaultType
  parent: system.fabric
  href: system.fabric.FaultType.yml
  name: FaultType
  nameWithType: FaultType
  fullName: system.fabric.FaultType
  type: Enum
  summary: "<p>Indicates the type of fault that a service reports: invalid, transient or permanent. </p>\r\n<p>\r\n  <b>Remarks : </b> Services can report faults during runtime by using the <xref uid=\"system.fabric.ServicePartition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ServicePartition#reportFault(FaultType)\"></xref> method to indicate the type of fault. </p>"
  syntax:
    content: public enum FaultType
