### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosAsyncScripts"
fullName: "com.azure.cosmos.CosmosAsyncScripts"
name: "CosmosAsyncScripts"
nameWithType: "CosmosAsyncScripts"
summary: "The type Cosmos async scripts."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosAsyncScripts"
methods:
- uid: "com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties)"
  name: "createStoredProcedure(CosmosStoredProcedureProperties properties)"
  nameWithType: "CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties)"
  summary: "Creates a cosmos stored procedure."
  parameters:
  - description: "the cosmos stored procedure properties."
    name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureProperties?alt=com.azure.cosmos.models.CosmosStoredProcedureProperties&text=CosmosStoredProcedureProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosStoredProcedureResponse> createStoredProcedure(CosmosStoredProcedureProperties properties)"
  desc: "Creates a cosmos stored procedure.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos stored procedure response with the created cosmos stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos stored procedure resource response or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureResponse?alt=com.azure.cosmos.models.CosmosStoredProcedureResponse&text=CosmosStoredProcedureResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties,com.azure.cosmos.models.CosmosStoredProcedureRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)"
  name: "createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)"
  summary: "Creates a cosmos stored procedure."
  parameters:
  - description: "the cosmos stored procedure properties."
    name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureProperties?alt=com.azure.cosmos.models.CosmosStoredProcedureProperties&text=CosmosStoredProcedureProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the stored procedure request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureRequestOptions?alt=com.azure.cosmos.models.CosmosStoredProcedureRequestOptions&text=CosmosStoredProcedureRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosStoredProcedureResponse> createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)"
  desc: "Creates a cosmos stored procedure.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos stored procedure response with the created cosmos stored procedure. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos stored procedure resource response or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureResponse?alt=com.azure.cosmos.models.CosmosStoredProcedureResponse&text=CosmosStoredProcedureResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.createTrigger(com.azure.cosmos.models.CosmosTriggerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.createTrigger(CosmosTriggerProperties properties)"
  name: "createTrigger(CosmosTriggerProperties properties)"
  nameWithType: "CosmosAsyncScripts.createTrigger(CosmosTriggerProperties properties)"
  summary: "Creates a Cosmos trigger."
  parameters:
  - description: "the cosmos trigger properties"
    name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosTriggerProperties?alt=com.azure.cosmos.models.CosmosTriggerProperties&text=CosmosTriggerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosTriggerResponse> createTrigger(CosmosTriggerProperties properties)"
  desc: "Creates a Cosmos trigger.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos trigger response In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created trigger or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosTriggerResponse?alt=com.azure.cosmos.models.CosmosTriggerResponse&text=CosmosTriggerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)"
  name: "createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)"
  nameWithType: "CosmosAsyncScripts.createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)"
  summary: "Creates a cosmos user defined function."
  parameters:
  - description: "the cosmos user defined function properties"
    name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosUserDefinedFunctionProperties?alt=com.azure.cosmos.models.CosmosUserDefinedFunctionProperties&text=CosmosUserDefinedFunctionProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosUserDefinedFunctionResponse> createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)"
  desc: "Creates a cosmos user defined function.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos user defined function response. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the created user defined function or an\n error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserDefinedFunctionResponse?alt=com.azure.cosmos.models.CosmosUserDefinedFunctionResponse&text=CosmosUserDefinedFunctionResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure(String id)"
  name: "getStoredProcedure(String id)"
  nameWithType: "CosmosAsyncScripts.getStoredProcedure(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>Stored<wbr>Procedure object without making a service call"
  parameters:
  - description: "id of the stored procedure"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncStoredProcedure getStoredProcedure(String id)"
  desc: "Gets a CosmosAsyncStoredProcedure object without making a service call"
  returns:
    description: "a cosmos stored procedure"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncStoredProcedure?alt=com.azure.cosmos.CosmosAsyncStoredProcedure&text=CosmosAsyncStoredProcedure\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncScripts.getTrigger(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.getTrigger(String id)"
  name: "getTrigger(String id)"
  nameWithType: "CosmosAsyncScripts.getTrigger(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>Trigger object without making a service call"
  parameters:
  - description: "id of the cosmos trigger"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncTrigger getTrigger(String id)"
  desc: "Gets a CosmosAsyncTrigger object without making a service call"
  returns:
    description: "a cosmos trigger"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncTrigger?alt=com.azure.cosmos.CosmosAsyncTrigger&text=CosmosAsyncTrigger\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction(String id)"
  name: "getUserDefinedFunction(String id)"
  nameWithType: "CosmosAsyncScripts.getUserDefinedFunction(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>User<wbr>Defined<wbr>Function object without making a service call"
  parameters:
  - description: "id of the user defined function"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncUserDefinedFunction getUserDefinedFunction(String id)"
  desc: "Gets a CosmosAsyncUserDefinedFunction object without making a service call"
  returns:
    description: "a cosmos user defined function"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncUserDefinedFunction?alt=com.azure.cosmos.CosmosAsyncUserDefinedFunction&text=CosmosAsyncUserDefinedFunction\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for stored procedures in a container."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosStoredProcedureProperties> queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for stored procedures in a container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained stored\n procedures or\n an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureProperties?alt=com.azure.cosmos.models.CosmosStoredProcedureProperties&text=CosmosStoredProcedureProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(String query, CosmosQueryRequestOptions options)"
  name: "queryStoredProcedures(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryStoredProcedures(String query, CosmosQueryRequestOptions options)"
  summary: "Query for stored procedures in a container."
  parameters:
  - description: "the the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosStoredProcedureProperties> queryStoredProcedures(String query, CosmosQueryRequestOptions options)"
  desc: "Query for stored procedures in a container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained stored\n procedures or\n an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureProperties?alt=com.azure.cosmos.models.CosmosStoredProcedureProperties&text=CosmosStoredProcedureProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryTriggers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for triggers in the container"
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosTriggerProperties> queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for triggers in the container\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained triggers or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosTriggerProperties?alt=com.azure.cosmos.models.CosmosTriggerProperties&text=CosmosTriggerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryTriggers(String query, CosmosQueryRequestOptions options)"
  name: "queryTriggers(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryTriggers(String query, CosmosQueryRequestOptions options)"
  summary: "Query for triggers in the container"
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosTriggerProperties> queryTriggers(String query, CosmosQueryRequestOptions options)"
  desc: "Query for triggers in the container\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained triggers or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosTriggerProperties?alt=com.azure.cosmos.models.CosmosTriggerProperties&text=CosmosTriggerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for user defined functions in the container."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for user defined functions in the container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained user defined\n functions\n or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserDefinedFunctionProperties?alt=com.azure.cosmos.models.CosmosUserDefinedFunctionProperties&text=CosmosUserDefinedFunctionProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)"
  name: "queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncScripts.queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)"
  summary: "Query for user defined functions in the container."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)"
  desc: "Query for user defined functions in the container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the obtained user defined\n functions\n or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserDefinedFunctionProperties?alt=com.azure.cosmos.models.CosmosUserDefinedFunctionProperties&text=CosmosUserDefinedFunctionProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures()"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures()"
  name: "readAllStoredProcedures()"
  nameWithType: "CosmosAsyncScripts.readAllStoredProcedures()"
  summary: "Reads all cosmos stored procedures in a container."
  syntax: "public CosmosPagedFlux<CosmosStoredProcedureProperties> readAllStoredProcedures()"
  desc: "Reads all cosmos stored procedures in a container.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the read cosmos stored procedure properties. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the read cosmos stored\n procedures\n properties or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosStoredProcedureProperties?alt=com.azure.cosmos.models.CosmosStoredProcedureProperties&text=CosmosStoredProcedureProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.readAllTriggers()"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.readAllTriggers()"
  name: "readAllTriggers()"
  nameWithType: "CosmosAsyncScripts.readAllTriggers()"
  summary: "Reads all triggers in a container"
  syntax: "public CosmosPagedFlux<CosmosTriggerProperties> readAllTriggers()"
  desc: "Reads all triggers in a container\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the read cosmos trigger properties. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the read cosmos rigger\n properties or\n an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosTriggerProperties?alt=com.azure.cosmos.models.CosmosTriggerProperties&text=CosmosTriggerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions()"
  fullName: "com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions()"
  name: "readAllUserDefinedFunctions()"
  nameWithType: "CosmosAsyncScripts.readAllUserDefinedFunctions()"
  summary: "Reads all cosmos user defined functions in the container"
  syntax: "public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> readAllUserDefinedFunctions()"
  desc: "Reads all cosmos user defined functions in the container\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response pages of the read user defined functions. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the read user defined\n functions or an\n error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserDefinedFunctionProperties?alt=com.azure.cosmos.models.CosmosUserDefinedFunctionProperties&text=CosmosUserDefinedFunctionProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "The type Cosmos async scripts. This contains async methods to operate on cosmos scripts like UDFs, StoredProcedures and Triggers"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.35.0
