### YamlMime:JavaMember
uid: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues*"
fullName: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues"
name: "listQueues"
nameWithType: "QueueServiceAsyncClient.listQueues"
members:
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues()"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues()"
  name: "listQueues()"
  nameWithType: "QueueServiceAsyncClient.listQueues()"
  summary: "Lists all queues in the storage account without their metadata.\n\n**Code Samples**\n\nList all queues in the account\n\n```java\nclient.listQueues().subscribe(\n     queueItem -> System.out.printf(\"Queue %s exists in the account\", queueItem.getName()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the queues!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1"
  syntax: "public PagedFlux<QueueItem> listQueues()"
  returns:
    description: "<xref uid=\"com.azure.storage.queue.models.QueueItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queues\"></xref> in the storage account"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues(com.azure.storage.queue.models.QueuesSegmentOptions)"
  fullName: "com.azure.storage.queue.QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)"
  name: "listQueues(QueuesSegmentOptions options)"
  nameWithType: "QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)"
  summary: "Lists the queues in the storage account that pass the filter. Pass true to <xref uid=\"com.azure.storage.queue.models.QueuesSegmentOptions.setIncludeMetadata(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"includeMetadata\"></xref> to have metadata returned for the queues.\n\n**Code Samples**\n\nList all queues that begin with \"azure\"\n\n```java\nclient.listQueues(new QueuesSegmentOptions().setPrefix(\"azure\")).subscribe(\n     queueItem -> System.out.printf(\"Queue %s exists in the account and has metadata %s\",\n         queueItem.getName(), queueItem.getMetadata()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the queues!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1"
  parameters:
  - description: "Options for listing queues"
    name: "options"
    type: "<xref href=\"com.azure.storage.queue.models.QueuesSegmentOptions?alt=com.azure.storage.queue.models.QueuesSegmentOptions&text=QueuesSegmentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<QueueItem> listQueues(QueuesSegmentOptions options)"
  returns:
    description: "<xref uid=\"com.azure.storage.queue.models.QueueItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Queues\"></xref> in the storage account that satisfy the filter requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.queue"
artifact: com.azure:azure-storage-queue:12.6.0
