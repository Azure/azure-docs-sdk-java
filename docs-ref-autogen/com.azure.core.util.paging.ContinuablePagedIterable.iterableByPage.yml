### YamlMime:JavaMember
uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*"
fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage"
name: "iterableByPage"
nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage"
members:
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage()"
  name: "iterableByPage()"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage()"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time. It will provide same <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of T values from starting if called multiple times."
  syntax: "public Iterable<P> iterableByPage()"
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)"
  name: "iterableByPage(C continuationToken)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage()\"></xref> instead."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(C continuationToken)"
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)"
  name: "iterableByPage(C continuationToken, int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage()\"></xref> or <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage(int)\"></xref> instead."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(C continuationToken, int preferredPageSize)"
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)"
  name: "iterableByPage(int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items. It will provide same <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of T values from starting if called multiple times."
  parameters:
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(int preferredPageSize)"
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util.paging"
artifact: com.azure:azure-core:1.12.0
