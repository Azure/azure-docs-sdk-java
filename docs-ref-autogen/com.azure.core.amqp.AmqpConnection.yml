### YamlMime:JavaType
uid: "com.azure.core.amqp.AmqpConnection"
fullName: "com.azure.core.amqp.AmqpConnection"
name: "AmqpConnection"
nameWithType: "AmqpConnection"
summary: "Represents a TCP connection between the client and a service that uses the AMQP protocol."
syntax: "public interface AmqpConnection extends Disposable, AsyncCloseable"
methods:
- uid: "com.azure.core.amqp.AmqpConnection.closeAsync()"
  fullName: "com.azure.core.amqp.AmqpConnection.closeAsync()"
  name: "closeAsync()"
  nameWithType: "AmqpConnection.closeAsync()"
  summary: "Disposes of the AMQP connection."
  modifiers:
  - "default"
  syntax: "public default Mono<Void> closeAsync()"
  desc: "Disposes of the AMQP connection."
  returns:
    description: "Mono that completes when the close operation is complete."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.createSession(java.lang.String)"
  fullName: "com.azure.core.amqp.AmqpConnection.createSession(String sessionName)"
  name: "createSession(String sessionName)"
  nameWithType: "AmqpConnection.createSession(String sessionName)"
  summary: "Creates a new session with the given session name."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the session."
    name: "sessionName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<AmqpSession> createSession(String sessionName)"
  desc: "Creates a new session with the given session name."
  returns:
    description: "The AMQP session that was created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.amqp.AmqpSession?alt=com.azure.core.amqp.AmqpSession&text=AmqpSession\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.getClaimsBasedSecurityNode()"
  fullName: "com.azure.core.amqp.AmqpConnection.getClaimsBasedSecurityNode()"
  name: "getClaimsBasedSecurityNode()"
  nameWithType: "AmqpConnection.getClaimsBasedSecurityNode()"
  summary: "Gets the claims-based security (CBS) node that authorizes access to resources."
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<ClaimsBasedSecurityNode> getClaimsBasedSecurityNode()"
  desc: "Gets the claims-based security (CBS) node that authorizes access to resources."
  returns:
    description: "Provider that authorizes access to AMQP resources."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.amqp.ClaimsBasedSecurityNode?alt=com.azure.core.amqp.ClaimsBasedSecurityNode&text=ClaimsBasedSecurityNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.getConnectionProperties()"
  fullName: "com.azure.core.amqp.AmqpConnection.getConnectionProperties()"
  name: "getConnectionProperties()"
  nameWithType: "AmqpConnection.getConnectionProperties()"
  summary: "Gets the connection properties."
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,Object> getConnectionProperties()"
  desc: "Gets the connection properties."
  returns:
    description: "Properties associated with this connection."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.getEndpointStates()"
  fullName: "com.azure.core.amqp.AmqpConnection.getEndpointStates()"
  name: "getEndpointStates()"
  nameWithType: "AmqpConnection.getEndpointStates()"
  summary: "Gets the endpoint states for the AMQP connection."
  modifiers:
  - "abstract"
  syntax: "public abstract Flux<AmqpEndpointState> getEndpointStates()"
  desc: "Gets the endpoint states for the AMQP connection. <xref uid=\"com.azure.core.amqp.exception.AmqpException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AmqpExceptions\"></xref> that occur on the link are reported in the connection state. When the stream terminates, the connection is closed."
  returns:
    description: "A stream of endpoint states for the AMQP connection."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.amqp.AmqpEndpointState?alt=com.azure.core.amqp.AmqpEndpointState&text=AmqpEndpointState\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.getFullyQualifiedNamespace()"
  fullName: "com.azure.core.amqp.AmqpConnection.getFullyQualifiedNamespace()"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "AmqpConnection.getFullyQualifiedNamespace()"
  summary: "Gets the fully qualified namespace for the AMQP connection."
  modifiers:
  - "abstract"
  syntax: "public abstract String getFullyQualifiedNamespace()"
  desc: "Gets the fully qualified namespace for the AMQP connection."
  returns:
    description: "The hostname for the AMQP connection."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.amqp.AmqpConnection.getId()"
  fullName: "com.azure.core.amqp.AmqpConnection.getId()"
  name: "getId()"
  nameWithType: "AmqpConnection.getId()"
  summary: "Gets the connection identifier."
  modifiers:
  - "abstract"
  syntax: "public abstract String getId()"
  desc: "Gets the connection identifier."
  returns:
    description: "The connection identifier."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.amqp.AmqpConnection.getManagementNode(java.lang.String)"
  fullName: "com.azure.core.amqp.AmqpConnection.getManagementNode(String entityPath)"
  name: "getManagementNode(String entityPath)"
  nameWithType: "AmqpConnection.getManagementNode(String entityPath)"
  summary: "Gets or creates the management node."
  modifiers:
  - "default"
  parameters:
  - description: "Entity for which to get the management node of."
    name: "entityPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public default Mono<AmqpManagementNode> getManagementNode(String entityPath)"
  desc: "Gets or creates the management node."
  returns:
    description: "A Mono that completes with the management node."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.amqp.AmqpManagementNode?alt=com.azure.core.amqp.AmqpManagementNode&text=AmqpManagementNode\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.getMaxFrameSize()"
  fullName: "com.azure.core.amqp.AmqpConnection.getMaxFrameSize()"
  name: "getMaxFrameSize()"
  nameWithType: "AmqpConnection.getMaxFrameSize()"
  summary: "Gets the maximum frame size for the connection."
  modifiers:
  - "abstract"
  syntax: "public abstract int getMaxFrameSize()"
  desc: "Gets the maximum frame size for the connection."
  returns:
    description: "The maximum frame size for the connection."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.amqp.AmqpConnection.getShutdownSignals()"
  fullName: "com.azure.core.amqp.AmqpConnection.getShutdownSignals()"
  name: "getShutdownSignals()"
  nameWithType: "AmqpConnection.getShutdownSignals()"
  summary: "Gets any shutdown signals that occur in the AMQP endpoint."
  modifiers:
  - "abstract"
  syntax: "public abstract Flux<AmqpShutdownSignal> getShutdownSignals()"
  desc: "Gets any shutdown signals that occur in the AMQP endpoint."
  returns:
    description: "A stream of shutdown signals that occur in the AMQP endpoint."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.amqp.AmqpShutdownSignal?alt=com.azure.core.amqp.AmqpShutdownSignal&text=AmqpShutdownSignal\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.amqp.AmqpConnection.removeSession(java.lang.String)"
  fullName: "com.azure.core.amqp.AmqpConnection.removeSession(String sessionName)"
  name: "removeSession(String sessionName)"
  nameWithType: "AmqpConnection.removeSession(String sessionName)"
  summary: "Removes a session with the `sessionName` from the AMQP connection."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the session to remove."
    name: "sessionName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract boolean removeSession(String sessionName)"
  desc: "Removes a session with the `sessionName` from the AMQP connection."
  returns:
    description: "<code>true</code> if a session with the name was removed; <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Represents a TCP connection between the client and a service that uses the AMQP protocol."
implements:
- "<xref href=\"com.azure.core.util.AsyncCloseable?alt=com.azure.core.util.AsyncCloseable&text=AsyncCloseable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"reactor.core.Disposable?alt=reactor.core.Disposable&text=Disposable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.amqp"
artifact: com.azure:azure-core-amqp:2.7.0
