### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
  id: ReactiveCosmosRepository
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository
  children:
  - com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)
  langs:
  - java
  name: ReactiveCosmosRepository<T,K>
  nameWithType: ReactiveCosmosRepository<T,K>
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>
  type: Interface
  package: com.azure.spring.data.cosmos.repository
  summary: Repository interface with search and delete operation
  syntax:
    content: public interface ReactiveCosmosRepository<T,K> extends ReactiveSortingRepository<T,K>
    typeParameters:
    - id: T
    - id: K
  implements:
  - org.springframework.data.repository.reactive.ReactiveSortingRepository<T,K>
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)
  id: deleteById(K,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
  langs:
  - java
  name: deleteById(K id, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository
  summary: Deletes an entity by its id and partition key.
  syntax:
    content: public abstract Mono<Void> deleteById(K id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: K
      description: must not be null.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partition key value of the entity, must not be null.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> emitting the void Mono.
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  id: findAll(com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
  langs:
  - java
  name: findAll(PartitionKey partitionKey)
  nameWithType: ReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository
  summary: Returns Flux of items in a specific partition
  syntax:
    content: public abstract Flux<T> findAll(PartitionKey partitionKey)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partition key value
    return:
      type: reactor.core.publisher.Flux<T>
      description: <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> of items with partition key value
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)
  id: findById(K,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
  langs:
  - java
  name: findById(K id, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository
  summary: Retrieves an entity by its id and partition key.
  syntax:
    content: public abstract Mono<T> findById(K id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: K
      description: must not be null.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partition key value of the entity, must not be null.
    return:
      type: reactor.core.publisher.Mono<T>
      description: <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> emitting the entity with the given id or <xref uid="reactor.core.publisher.Mono.empty*" data-throw-if-not-resolved="false">Mono#empty()</xref> if none found.
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findById*
  name: findById
  nameWithType: ReactiveCosmosRepository<T,K>.findById
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findById
  package: com.azure.spring.data.cosmos.repository
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.deleteById*
  name: deleteById
  nameWithType: ReactiveCosmosRepository<T,K>.deleteById
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.deleteById
  package: com.azure.spring.data.cosmos.repository
- uid: reactor.core.publisher.Flux<T>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findAll*
  name: findAll
  nameWithType: ReactiveCosmosRepository<T,K>.findAll
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findAll
  package: com.azure.spring.data.cosmos.repository
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: org.springframework.data.repository.reactive.ReactiveSortingRepository<T,K>
  name: ReactiveSortingRepository<T,K>
  nameWithType: ReactiveSortingRepository<T,K>
  fullName: org.springframework.data.repository.reactive.ReactiveSortingRepository<T,K>
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: T,K
  name: T,K
  nameWithType: T,K
  fullName: T,K
- uid: org.springframework.data.repository.reactive.ReactiveSortingRepository
  name: ReactiveSortingRepository
  nameWithType: ReactiveSortingRepository
  fullName: org.springframework.data.repository.reactive.ReactiveSortingRepository
