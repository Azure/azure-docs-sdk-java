### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository"
fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>"
name: "ReactiveCosmosRepository<T,K>"
nameWithType: "ReactiveCosmosRepository<T,K>"
summary: "Repository interface with search and delete operation"
syntax: "public interface **ReactiveCosmosRepository<T,K>**</br> extends <xref href=\"org.springframework.data.repository.reactive.ReactiveSortingRepository?alt=org.springframework.data.repository.reactive.ReactiveSortingRepository&text=ReactiveSortingRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;, <xref href=\"org.springframework.data.repository.reactive.ReactiveCrudRepository?alt=org.springframework.data.repository.reactive.ReactiveCrudRepository&text=ReactiveCrudRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
methods:
- uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.<S>save(K,com.azure.cosmos.models.PartitionKey,java.lang.Class<S>,com.azure.cosmos.models.CosmosPatchOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  name: "save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  nameWithType: "ReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  summary: "Patches an entity by its id and partition key with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  modifiers:
  - "abstract"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null, max operations is 10"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<S> <S>save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  desc: "Patches an entity by its id and partition key with CosmosPatchItemRequestOptions"
  returns:
    description: "the patched entity"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.<S>save(K,com.azure.cosmos.models.PartitionKey,java.lang.Class<S>,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions)"
  fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  name: "save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  nameWithType: "ReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  summary: "Patches an entity by its id and partition key with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  modifiers:
  - "abstract"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null, max operations is 10"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional CosmosPatchItemRequestOptions, e.g. options.setFilterPredicate(\"FROM products p WHERE p.used = false\");"
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<S> <S>save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  desc: "Patches an entity by its id and partition key with CosmosPatchItemRequestOptions"
  returns:
    description: "the patched entity"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)"
  name: "deleteById(K id, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)"
  summary: "Deletes an entity by its id and partition key."
  modifiers:
  - "abstract"
  parameters:
  - description: "must not be null."
    name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - description: "partition key value of the entity, must not be null."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Void> deleteById(K id, PartitionKey partitionKey)"
  desc: "Deletes an entity by its id and partition key."
  returns:
    description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> emitting the void Mono."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)"
  name: "findAll(PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)"
  summary: "Returns Flux of items in a specific partition"
  modifiers:
  - "abstract"
  parameters:
  - description: "partition key value"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<T> findAll(PartitionKey partitionKey)"
  desc: "Returns Flux of items in a specific partition"
  returns:
    description: "<xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of items with partition key value"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)"
  name: "findById(K id, PartitionKey partitionKey)"
  nameWithType: "ReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)"
  summary: "Retrieves an entity by its id and partition key."
  modifiers:
  - "abstract"
  parameters:
  - description: "must not be null."
    name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - description: "partition key value of the entity, must not be null."
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<T> findById(K id, PartitionKey partitionKey)"
  desc: "Retrieves an entity by its id and partition key."
  returns:
    description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> emitting the entity with the given id or <xref uid=\"reactor.core.publisher.Mono.empty*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono#empty()\"></xref> if none found."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
typeParameters:
- description: "the type of the domain class."
  name: "T"
- description: "the type of the id of the entity the repository manages."
  name: "K"
desc: "Repository interface with search and delete operation"
implements:
- "<xref href=\"org.springframework.data.repository.reactive.ReactiveCrudRepository?alt=org.springframework.data.repository.reactive.ReactiveCrudRepository&text=ReactiveCrudRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"org.springframework.data.repository.reactive.ReactiveSortingRepository?alt=org.springframework.data.repository.reactive.ReactiveSortingRepository&text=ReactiveSortingRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.spring.data.cosmos.repository"
artifact: com.azure:azure-spring-data-cosmos:5.20.0
