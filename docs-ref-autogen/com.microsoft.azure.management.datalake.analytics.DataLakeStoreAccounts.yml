### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.add(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: add(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.add(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public void add(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.add(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.add(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  name: add(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  nameWithType: DataLakeStoreAccounts.add(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The details of the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters&text=AddDataLakeStoreParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public void add(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.add(String,String,String,AddDataLakeStoreParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  name: addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  nameWithType: DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The details of the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters&text=AddDataLakeStoreParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String,String,String,AddDataLakeStoreParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The details of the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters&text=AddDataLakeStoreParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String,String,String,AddDataLakeStoreParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  name: addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: DataLakeStoreAccounts.addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  name: addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  nameWithType: DataLakeStoreAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add. </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The details of the Data Lake Store account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddDataLakeStoreParameters&text=AddDataLakeStoreParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.addWithServiceResponseAsync(String,String,String,AddDataLakeStoreParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.delete(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: delete(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.delete(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to remove </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.delete(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to remove </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: DataLakeStoreAccounts.deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to remove </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Data Lake Store account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to remove </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.get(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: get(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.get(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve the Data Lake Store account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeStoreAccountInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public DataLakeStoreAccountInfo get(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.get(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve the Data Lake Store account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccountInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<DataLakeStoreAccountInfo> getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<DataLakeStoreAccountInfo> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<DataLakeStoreAccountInfo> serviceCallback)
  nameWithType: DataLakeStoreAccounts.getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<DataLakeStoreAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve the Data Lake Store account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeStoreAccountInfo> getAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName, final ServiceCallback<DataLakeStoreAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getAsync(String,String,String,final ServiceCallback<DataLakeStoreAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  nameWithType: DataLakeStoreAccounts.getWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve the Data Lake Store account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to retrieve </p>
    name: dataLakeStoreAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeStoreAccountInfo object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeStoreAccountInfo>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String dataLakeStoreAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccount(final String resourceGroupName, final String accountName)
  name: listByAccount(final String resourceGroupName, final String accountName)
  nameWithType: DataLakeStoreAccounts.listByAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountInfo> listByAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccount(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: DataLakeStoreAccounts.listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountInfo> listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccount(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName)
  name: listByAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  nameWithType: DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String,final String,final ListOperationCallback<DataLakeStoreAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  nameWithType: DataLakeStoreAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<DataLakeStoreAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNext(final String nextPageLink)
  name: listByAccountNext(final String nextPageLink)
  nameWithType: DataLakeStoreAccounts.listByAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeStoreAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeStoreAccountInfo> listByAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextAsync(final String nextPageLink)
  name: listByAccountNextAsync(final String nextPageLink)
  nameWithType: DataLakeStoreAccounts.listByAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeStoreAccountInfo>> listByAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountInfo>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  name: listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountInfo>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  nameWithType: DataLakeStoreAccounts.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountInfo>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeStoreAccountInfo>> listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeStoreAccountInfo>> serviceFuture, final ListOperationCallback<DataLakeStoreAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextAsync(final String,final ServiceFuture<List<DataLakeStoreAccountInfo>>,final ListOperationCallback<DataLakeStoreAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: DataLakeStoreAccounts.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountInfo>>> listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountInfo>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Data Lake Store accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeStoreAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeStoreAccountInfo&text=DataLakeStoreAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeStoreAccountInfo>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts.listByAccountWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
nameWithType: DataLakeStoreAccounts
syntax: public interface DataLakeStoreAccounts
type: interface
uid: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts
fullName: com.microsoft.azure.management.datalake.analytics.DataLakeStoreAccounts
name: DataLakeStoreAccounts
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in DataLakeStoreAccounts. </p>
metadata: {}
