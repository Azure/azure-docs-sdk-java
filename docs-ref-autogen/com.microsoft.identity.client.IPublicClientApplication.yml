### YamlMime:JavaType
methods:
- fullName: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  name: acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  nameWithType: IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  parameters:
  - name: acquireTokenParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenParameters?alt=com.microsoft.identity.client.AcquireTokenParameters&text=AcquireTokenParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>. </p>

    <p>Convey parameters via the AquireTokenParameters object</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  uid: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- fullName: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: IPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onCancel()"></xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>.</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  name: acquireTokenWithDeviceCode(@NonNull String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  nameWithType: IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  parameters:
  - description: <p>the desired access scopes </p>
    name: scopes
    type: <xref href="%40NonNull+String+%5B%5D?alt=%40NonNull+String+%5B%5D&text=%40NonNull+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>callback object used to communicate with the API throughout the protocol </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.DeviceCodeFlowCallback?alt=com.microsoft.identity.client.IPublicClientApplication.DeviceCodeFlowCallback&text=IPublicClientApplication.DeviceCodeFlowCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform the Device Code Flow (DCF) protocol to allow a device without input capability to authenticate and get a new access token. Currently, flow is only supported in local MSAL. No Broker support.</p>

    <p></p>
  syntax: public void acquireTokenWithDeviceCode(@NonNull String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  uid: com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String [],@NonNull final DeviceCodeFlowCallback)
- fullName: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  name: generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  nameWithType: IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  parameters:
  - description: <p>The account for whom signing shall occur. </p>
    name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>The input parameters. </p>
    name: popParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.PoPAuthenticationScheme?alt=com.microsoft.identity.client.PoPAuthenticationScheme&text=PoPAuthenticationScheme" data-throw-if-not-resolved="False"/>'
  returns:
    description: <p>The resulting SHR. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs the provided <xref uid="com.microsoft.identity.client.PoPAuthenticationScheme" data-throw-if-not-resolved="false" data-raw-source="PoPAuthenticationScheme"></xref> parameters into a JWT on behalf of the provided <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref>. </p>

    <p>Important: Use of this API requires setting the minimum_required_broker_protocol_version to "6.0" or higher.</p>

    <p></p>
  syntax: public String generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  uid: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
- fullName: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  name: generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  nameWithType: IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  parameters:
  - description: <p>The account for whom signing shall occur. </p>
    name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>The input parameters. </p>
    name: popParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.PoPAuthenticationScheme?alt=com.microsoft.identity.client.PoPAuthenticationScheme&text=PoPAuthenticationScheme" data-throw-if-not-resolved="False"/>'
  - description: <p>The callback object to receive the result (or error). </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.SignedHttpRequestRequestCallback?alt=com.microsoft.identity.client.IPublicClientApplication.SignedHttpRequestRequestCallback&text=IPublicClientApplication.SignedHttpRequestRequestCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Signs the provided <xref uid="com.microsoft.identity.client.PoPAuthenticationScheme" data-throw-if-not-resolved="false" data-raw-source="PoPAuthenticationScheme"></xref> parameters into a JWT on behalf of the provided <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref>. </p>

    <p>Important: Use of this API requires setting the minimum_required_broker_protocol_version to "6.0" or higher.</p>

    <p></p>
  syntax: public void generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  uid: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
- fullName: com.microsoft.identity.client.IPublicClientApplication.getConfiguration()
  name: getConfiguration()
  nameWithType: IPublicClientApplication.getConfiguration()
  returns:
    description: <p>The PublicClientApplicationConfiguration. </p>
    type: <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the PublicClientConfiguration for this instance of PublicClientApplication.</p>

    <p></p>
  syntax: public PublicClientApplicationConfiguration getConfiguration()
  uid: com.microsoft.identity.client.IPublicClientApplication.getConfiguration()
- fullName: com.microsoft.identity.client.IPublicClientApplication.isSharedDevice()
  name: isSharedDevice()
  nameWithType: IPublicClientApplication.isSharedDevice()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns whether the application is being run on a device that is marked as a shared. Only SingleAccountPublicClientApplications may be used on shared devices</p>

    <p></p>
  syntax: public boolean isSharedDevice()
  uid: com.microsoft.identity.client.IPublicClientApplication.isSharedDevice()
nameWithType: IPublicClientApplication
syntax: public interface IPublicClientApplication
type: interface
uid: com.microsoft.identity.client.IPublicClientApplication
fullName: com.microsoft.identity.client.IPublicClientApplication
name: IPublicClientApplication
package: com.microsoft.identity.client
metadata: {}
