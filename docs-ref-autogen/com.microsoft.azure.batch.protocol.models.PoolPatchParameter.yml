### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter"
fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter"
name: "PoolPatchParameter"
nameWithType: "PoolPatchParameter"
summary: "The set of changes to be made to a Pool."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PoolPatchParameter"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.PoolPatchParameter()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.PoolPatchParameter()"
  name: "PoolPatchParameter()"
  nameWithType: "PoolPatchParameter.PoolPatchParameter()"
  syntax: "public PoolPatchParameter()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.applicationPackageReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.applicationPackageReferences()"
  name: "applicationPackageReferences()"
  nameWithType: "PoolPatchParameter.applicationPackageReferences()"
  summary: "Get changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged."
  syntax: "public List<ApplicationPackageReference> applicationPackageReferences()"
  desc: "Get changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged."
  returns:
    description: "the applicationPackageReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.certificateReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.certificateReferences()"
  name: "certificateReferences()"
  nameWithType: "PoolPatchParameter.certificateReferences()"
  summary: "Get if this element is present, it replaces any existing Certificate references configured on the Pool."
  syntax: "public List<CertificateReference> certificateReferences()"
  desc: "Get if this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the certificateReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.metadata()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.metadata()"
  name: "metadata()"
  nameWithType: "PoolPatchParameter.metadata()"
  summary: "Get if this element is present, it replaces any existing metadata configured on the Pool."
  syntax: "public List<MetadataItem> metadata()"
  desc: "Get if this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged."
  returns:
    description: "the metadata value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.startTask()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.startTask()"
  name: "startTask()"
  nameWithType: "PoolPatchParameter.startTask()"
  summary: "Get if this element is present, it overwrites any existing Start<wbr>Task."
  syntax: "public StartTask startTask()"
  desc: "Get if this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged."
  returns:
    description: "the startTask value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withApplicationPackageReferences(java.util.List<com.microsoft.azure.batch.protocol.models.ApplicationPackageReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  name: "withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  nameWithType: "PoolPatchParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  summary: "Set changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged."
  parameters:
  - description: "the applicationPackageReferences value to set"
    name: "applicationPackageReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolPatchParameter withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  desc: "Set changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. If this element is present, it replaces any existing Package references. If you specify an empty collection, then all Package references are removed from the Pool. If omitted, any existing Package references are left unchanged."
  returns:
    description: "the PoolPatchParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withCertificateReferences(java.util.List<com.microsoft.azure.batch.protocol.models.CertificateReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withCertificateReferences(List<CertificateReference> certificateReferences)"
  name: "withCertificateReferences(List<CertificateReference> certificateReferences)"
  nameWithType: "PoolPatchParameter.withCertificateReferences(List<CertificateReference> certificateReferences)"
  summary: "Set if this element is present, it replaces any existing Certificate references configured on the Pool."
  parameters:
  - description: "the certificateReferences value to set"
    name: "certificateReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolPatchParameter withCertificateReferences(List<CertificateReference> certificateReferences)"
  desc: "Set if this element is present, it replaces any existing Certificate references configured on the Pool. If omitted, any existing Certificate references are left unchanged. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the PoolPatchParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withMetadata(java.util.List<com.microsoft.azure.batch.protocol.models.MetadataItem>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withMetadata(List<MetadataItem> metadata)"
  name: "withMetadata(List<MetadataItem> metadata)"
  nameWithType: "PoolPatchParameter.withMetadata(List<MetadataItem> metadata)"
  summary: "Set if this element is present, it replaces any existing metadata configured on the Pool."
  parameters:
  - description: "the metadata value to set"
    name: "metadata"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolPatchParameter withMetadata(List<MetadataItem> metadata)"
  desc: "Set if this element is present, it replaces any existing metadata configured on the Pool. If you specify an empty collection, any metadata is removed from the Pool. If omitted, any existing metadata is left unchanged."
  returns:
    description: "the PoolPatchParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withStartTask(com.microsoft.azure.batch.protocol.models.StartTask)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolPatchParameter.withStartTask(StartTask startTask)"
  name: "withStartTask(StartTask startTask)"
  nameWithType: "PoolPatchParameter.withStartTask(StartTask startTask)"
  summary: "Set if this element is present, it overwrites any existing Start<wbr>Task."
  parameters:
  - description: "the startTask value to set"
    name: "startTask"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PoolPatchParameter withStartTask(StartTask startTask)"
  desc: "Set if this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is left unchanged."
  returns:
    description: "the PoolPatchParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolPatchParameter?alt=com.microsoft.azure.batch.protocol.models.PoolPatchParameter&text=PoolPatchParameter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The set of changes to be made to a Pool."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
