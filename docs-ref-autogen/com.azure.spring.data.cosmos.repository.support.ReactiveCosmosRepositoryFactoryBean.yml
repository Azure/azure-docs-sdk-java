### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean"
fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>"
name: "ReactiveCosmosRepositoryFactoryBean<T,S,K>"
nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>"
summary: "Adapter for Springs <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FactoryBean\"></xref> interface to allow easy setup of reactive cosmos repository factories via Spring configuration."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
- classRef: "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport&text=RepositoryFactoryBeanSupport\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.addRepositoryFactoryCustomizer(org.springframework.data.repository.core.support.RepositoryFactoryCustomizer)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.addRepositoryFactoryCustomizer&text=addRepositoryFactoryCustomizer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet&text=afterPropertiesSet\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createDefaultEvaluationContextProvider(org.springframework.beans.factory.ListableBeanFactory)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createDefaultEvaluationContextProvider&text=createDefaultEvaluationContextProvider\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createDefaultQueryMethodEvaluationContextProvider(org.springframework.beans.factory.ListableBeanFactory)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createDefaultQueryMethodEvaluationContextProvider&text=createDefaultQueryMethodEvaluationContextProvider\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory&text=createRepositoryFactory\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation&text=getEntityInformation\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject&text=getObject\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObjectType()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObjectType&text=getObjectType\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getPersistentEntity()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getPersistentEntity&text=getPersistentEntity\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getQueryMethods()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getQueryMethods&text=getQueryMethods\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getRepositoryInformation()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getRepositoryInformation&text=getRepositoryInformation\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.isSingleton()?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.isSingleton&text=isSingleton\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setApplicationEventPublisher&text=setApplicationEventPublisher\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanClassLoader(java.lang.ClassLoader)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanClassLoader&text=setBeanClassLoader\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanFactory&text=setBeanFactory\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setCustomImplementation(java.lang.Object)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setCustomImplementation&text=setCustomImplementation\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEnvironment(org.springframework.core.env.Environment)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEnvironment&text=setEnvironment\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider&text=setEvaluationContextProvider\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider(org.springframework.data.spel.EvaluationContextProvider)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider&text=setEvaluationContextProvider\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setExposeMetadata(boolean)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setExposeMetadata&text=setExposeMetadata\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setLazyInit(boolean)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setLazyInit&text=setLazyInit\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext&text=setMappingContext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setNamedQueries&text=setNamedQueries\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setQueryLookupStrategyKey&text=setQueryLookupStrategyKey\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class<?>)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass&text=setRepositoryBaseClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryFragments(org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryFragments&text=setRepositoryFragments\" data-throw-if-not-resolved=\"False\" />"
syntax: "public class **ReactiveCosmosRepositoryFactoryBean<T,S,K>**</br> extends <xref href=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport?alt=org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport&text=RepositoryFactoryBeanSupport\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.ReactiveCosmosRepositoryFactoryBean(java.lang.Class<? extends T>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.ReactiveCosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)"
  name: "ReactiveCosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.ReactiveCosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)"
  summary: "Creates a new <xref uid=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RepositoryFactoryBeanSupport\"></xref> for the given repository interface."
  parameters:
  - description: "must not be null."
    name: "repositoryInterface"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ReactiveCosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)"
  desc: "Creates a new <xref uid=\"org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RepositoryFactoryBeanSupport\"></xref> for the given repository interface."
methods:
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.afterPropertiesSet()"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.afterPropertiesSet()"
  name: "afterPropertiesSet()"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.afterPropertiesSet()"
  overridden: "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet()"
  syntax: "public void afterPropertiesSet()"
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.createRepositoryFactory()"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.createRepositoryFactory()"
  name: "createRepositoryFactory()"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.createRepositoryFactory()"
  modifiers:
  - "protected"
  - "final"
  overridden: "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory()"
  syntax: "protected final RepositoryFactorySupport createRepositoryFactory()"
  returns:
    type: "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactorySupport?alt=org.springframework.data.repository.core.support.RepositoryFactorySupport&text=RepositoryFactorySupport\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.getFactoryInstance()"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.getFactoryInstance()"
  name: "getFactoryInstance()"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.getFactoryInstance()"
  summary: "Return the factory instance."
  modifiers:
  - "protected"
  syntax: "protected RepositoryFactorySupport getFactoryInstance()"
  desc: "Return the factory instance."
  returns:
    description: "the factory instance"
    type: "<xref href=\"org.springframework.data.repository.core.support.RepositoryFactorySupport?alt=org.springframework.data.repository.core.support.RepositoryFactorySupport&text=RepositoryFactorySupport\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.setMappingContext(MappingContext<?,?> mappingContext)"
  name: "setMappingContext(MappingContext<?,?> mappingContext)"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.setMappingContext(MappingContext<?,?> mappingContext)"
  modifiers:
  - "protected"
  overridden: "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)"
  parameters:
  - name: "mappingContext"
    type: "<xref href=\"org.springframework.data.mapping.context.MappingContext?alt=org.springframework.data.mapping.context.MappingContext&text=MappingContext\" data-throw-if-not-resolved=\"False\" />&lt;?,?&gt;"
  syntax: "protected void setMappingContext(MappingContext<?,?> mappingContext)"
- uid: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean.setReactiveCosmosOperations(com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.support.ReactiveCosmosRepositoryFactoryBean<T,S,K>.setReactiveCosmosOperations(ReactiveCosmosOperations operations)"
  name: "setReactiveCosmosOperations(ReactiveCosmosOperations operations)"
  nameWithType: "ReactiveCosmosRepositoryFactoryBean<T,S,K>.setReactiveCosmosOperations(ReactiveCosmosOperations operations)"
  summary: "Set reactive CosmosDB operations"
  parameters:
  - description: "contains cosmos operations"
    name: "operations"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setReactiveCosmosOperations(ReactiveCosmosOperations operations)"
  desc: "Set reactive CosmosDB operations"
type: "class"
typeParameters:
- description: "the type of the repository."
  name: "T"
- description: "the domain type the repository manages."
  name: "S"
- description: "the type of the id of the entity the repository manages."
  name: "K"
desc: "Adapter for Springs <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FactoryBean\"></xref> interface to allow easy setup of reactive cosmos repository factories via Spring configuration."
metadata: {}
package: "com.azure.spring.data.cosmos.repository.support"
artifact: com.azure:azure-spring-data-cosmos:5.20.0
