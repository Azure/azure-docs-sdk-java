### YamlMime:ManagedReference
items:
- uid: system.fabric.ReplicatorSettings
  id: ReplicatorSettings
  parent: system.fabric
  children:
  - system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval()
  - system.fabric.ReplicatorSettings.getInitialCopyQueueSize()
  - system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getInitialReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getMaxCopyQueueSize()
  - system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  - system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getMaxReplicationMessageSize()
  - system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize()
  - system.fabric.ReplicatorSettings.getMaxReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  - system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  - system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  - system.fabric.ReplicatorSettings.getReplicatorAddress()
  - system.fabric.ReplicatorSettings.getRetryInterval()
  - system.fabric.ReplicatorSettings.getSecurityCredentials()
  - system.fabric.ReplicatorSettings.isRequireServiceAck()
  - system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  - system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  - system.fabric.ReplicatorSettings.loadFrom(FabricCodePackageActivationContext,String,String)
  - system.fabric.ReplicatorSettings.ReplicatorSettings()
  - system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval(Duration)
  - system.fabric.ReplicatorSettings.setInitialCopyQueueSize(long)
  - system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setInitialReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setMaxCopyQueueSize(long)
  - system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long)
  - system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setMaxReplicationMessageSize(long)
  - system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize(long)
  - system.fabric.ReplicatorSettings.setMaxReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long)
  - system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long)
  - system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration)
  - system.fabric.ReplicatorSettings.setReplicatorAddress(String)
  - system.fabric.ReplicatorSettings.setRequireServiceAck(boolean)
  - system.fabric.ReplicatorSettings.setRetryInterval(Duration)
  - system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean)
  - system.fabric.ReplicatorSettings.setSecurityCredentials(SecurityCredentials)
  - system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean)
  - system.fabric.ReplicatorSettings.toNative(PinCollection)
  - system.fabric.ReplicatorSettings.toString()
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 15
  package: system.fabric
  summary: "<p>Allows a stateful replica to configure the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> when creating it <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)\"></xref></p>"
  syntax: &o1
    content: public class ReplicatorSettings
  inheritance:
  - java.lang.Object
- uid: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval()
  id: getBatchAcknowledgementInterval()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getBatchAcknowledgementInterval()
  nameWithType: ReplicatorSettings.getBatchAcknowledgementInterval()
  fullName: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval()
  overload: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 221
  package: system.fabric
  summary: "<p>Gets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</p>\r\n<p>\r\n  <b>Remarks:</b>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message. Increasing the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ReplicatorSettings#batchAcknowledgementInterval\"></xref> value decreases latency of individual replication operations but increases throughput of the replicator. Default value is 0.05 Seconds (50 milliseconds) </p>"
  syntax:
    content: public Duration getBatchAcknowledgementInterval()
    return:
      type: e02a2de0
      description: <p>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </p>
- uid: system.fabric.ReplicatorSettings.getInitialCopyQueueSize()
  id: getInitialCopyQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getInitialCopyQueueSize()
  nameWithType: ReplicatorSettings.getInitialCopyQueueSize()
  fullName: system.fabric.ReplicatorSettings.getInitialCopyQueueSize()
  overload: system.fabric.ReplicatorSettings.getInitialCopyQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 347
  package: system.fabric
  summary: "<p>Gets the initial size of the copy operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains copy <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s not yet pumped and processed by the service.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public long getInitialCopyQueueSize()
    return:
      type: 0364520f
      description: <p>The initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
- uid: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  id: getInitialPrimaryReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getInitialPrimaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 568
  package: system.fabric
  summary: "<p>Defines the initial size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s.The unit here is the number of operations in the queue.</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public long getInitialPrimaryReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>The initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref></p>
- uid: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize()
  id: getInitialReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getInitialReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 301
  package: system.fabric
  summary: "<p>Gets the initial size of the replication queue size.</p>\r\n<p></p>"
  syntax:
    content: public long getInitialReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>The initial size of the replication queue size. </p>
- uid: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  id: getInitialSecondaryReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getInitialSecondaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 683
  package: system.fabric
  summary: "<p>Defines the initial size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public long getInitialSecondaryReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>The initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
- uid: system.fabric.ReplicatorSettings.getMaxCopyQueueSize()
  id: getMaxCopyQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxCopyQueueSize()
  nameWithType: ReplicatorSettings.getMaxCopyQueueSize()
  fullName: system.fabric.ReplicatorSettings.getMaxCopyQueueSize()
  overload: system.fabric.ReplicatorSettings.getMaxCopyQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 384
  package: system.fabric
  summary: "<p>Gets the maximum size of the copy operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains copy <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s not yet pumped and processed by the service.</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached at the secondary, operations will be buffered in the Primary’s copy queue. If that queue also fills, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 1024 </p>"
  syntax:
    content: public long getMaxCopyQueueSize()
    return:
      type: 0364520f
      description: <p>The maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
- uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  id: getMaxPrimaryReplicationQueueMemorySize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxPrimaryReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  overload: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 645
  package: system.fabric
  summary: "<p>Defines the maximum size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public long getMaxPrimaryReplicationQueueMemorySize()
    return:
      type: 0364520f
      description: <p>. Returns the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s The unit here is the virtual memory consumption of the queue .Returns long. </p>
- uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  id: getMaxPrimaryReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxPrimaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 606
  package: system.fabric
  summary: "<p>Defines the maximum size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 1024 Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Primary </p>"
  syntax:
    content: public long getMaxPrimaryReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>The maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the number of operations in the queue. </p>
- uid: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize()
  id: getMaxReplicationMessageSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxReplicationMessageSize()
  nameWithType: ReplicatorSettings.getMaxReplicationMessageSize()
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize()
  overload: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 511
  package: system.fabric
  summary: "<p>Gets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages and copy context messages. The unit of representation is bytes.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 50MB </p>"
  syntax:
    content: public Long getMaxReplicationMessageSize()
    return:
      type: 34f09483
      description: <p>The maximum size of a message that can be transmitted via the replicator. </p>
- uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize()
  id: getMaxReplicationQueueMemorySize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxReplicationQueueMemorySize()
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize()
  overload: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 453
  package: system.fabric
  summary: "<p>Gets the maximum size for the replication queue memory.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public long getMaxReplicationQueueMemorySize()
    return:
      type: 0364520f
      description: <p>The maximum size for the replication queue memory. </p>
- uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize()
  id: getMaxReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 320
  package: system.fabric
  summary: "<p>Gets the maximum size for the replication queue.</p>\r\n<p></p>"
  syntax:
    content: public long getMaxReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>the maximum size for the replication queue. </p>
- uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  id: getMaxSecondaryReplicationQueueMemorySize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxSecondaryReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  overload: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 765
  package: system.fabric
  summary: "<p>Defines the maximum size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s.</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public long getMaxSecondaryReplicationQueueMemorySize()
    return:
      type: 0364520f
      description: <p>Returns the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the virtual memory consumption of the queue. </p>
- uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  id: getMaxSecondaryReplicationQueueSize()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getMaxSecondaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  overload: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 724
  package: system.fabric
  summary: "<p>Defines the maximum size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached, operations will be buffered in the Primary’s replication queue. If that queue also fills, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 2048.Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Secondary/Idle </p>"
  syntax:
    content: public long getMaxSecondaryReplicationQueueSize()
    return:
      type: 0364520f
      description: <p>The maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
- uid: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  id: getPrimaryWaitForPendingQuorumsTimeout()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getPrimaryWaitForPendingQuorumsTimeout()
  nameWithType: ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  fullName: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  overload: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 804
  package: system.fabric
  summary: "<p>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operations.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 0. This implies that reconfigurations aren’t waited upon for receiving quorum on the pending replication operations. This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, implying longer durations to fail-over a primary. </p>"
  syntax:
    content: public Duration getPrimaryWaitForPendingQuorumsTimeout()
    return:
      type: e02a2de0
      description: <p>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is a request for the primary replicator to process a reconfiguration <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref>. </p>
- uid: system.fabric.ReplicatorSettings.getReplicatorAddress()
  id: getReplicatorAddress()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getReplicatorAddress()
  nameWithType: ReplicatorSettings.getReplicatorAddress()
  fullName: system.fabric.ReplicatorSettings.getReplicatorAddress()
  overload: system.fabric.ReplicatorSettings.getReplicatorAddress*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 254
  package: system.fabric
  summary: "<p>Configures the address that this replicator will use when communicating with other Replicators.</p>\r\n<p>\r\n  <b>Remarks:</b>String is formatted as \"hostname:port\", where hostname can be FQDN or IP address. The default value is localhost:0 </p>"
  syntax:
    content: public String getReplicatorAddress()
    return:
      type: "26831127"
      description: <p>The address that this replicator will use when communicating with other Replicators. </p>
- uid: system.fabric.ReplicatorSettings.getRetryInterval()
  id: getRetryInterval()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getRetryInterval()
  nameWithType: ReplicatorSettings.getRetryInterval()
  fullName: system.fabric.ReplicatorSettings.getRetryInterval()
  overload: system.fabric.ReplicatorSettings.getRetryInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 184
  package: system.fabric
  summary: "<p>Defines how long the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.</p>\r\n<p>\r\n  <b>Remarks:</b>Receiving a message does not necessarily that the message has been processed. If this timer is exceeded, then the message is retransmitted. The default value is 5 seconds. </p>"
  syntax:
    content: public Duration getRetryInterval()
    return:
      type: e02a2de0
      description: <p>The time needed the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. </p>
- uid: system.fabric.ReplicatorSettings.getSecurityCredentials()
  id: getSecurityCredentials()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: getSecurityCredentials()
  nameWithType: ReplicatorSettings.getSecurityCredentials()
  fullName: system.fabric.ReplicatorSettings.getSecurityCredentials()
  overload: system.fabric.ReplicatorSettings.getSecurityCredentials*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 280
  package: system.fabric
  summary: "<p>Allows the service to define security credentials for securing the traffic between replicators.</p>\r\n<p></p>"
  syntax:
    content: public SecurityCredentials getSecurityCredentials()
    return:
      type: system.fabric.SecurityCredentials
      description: <p>The service to define security credentials for securing the traffic between replicators. </p>
- uid: system.fabric.ReplicatorSettings.isRequireServiceAck()
  id: isRequireServiceAck()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: isRequireServiceAck()
  nameWithType: ReplicatorSettings.isRequireServiceAck()
  fullName: system.fabric.ReplicatorSettings.isRequireServiceAck()
  overload: system.fabric.ReplicatorSettings.isRequireServiceAck*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 422
  package: system.fabric
  summary: "<p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref uid=\"system.fabric.Operation.acknowledge()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation#acknowledge()\"></xref> before it pumps the next operation.</p>\r\n<p>\r\n  <b>Remarks:</b>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the Replicator. This setting has no effect for persistent services. The default value is false. </p>"
  syntax:
    content: public boolean isRequireServiceAck()
    return:
      type: 4fc6e284
      description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  id: isSecondaryClearAcknowledgedOperations()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: isSecondaryClearAcknowledgedOperations()
  nameWithType: ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  fullName: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  overload: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 481
  package: system.fabric
  summary: "<p>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is false </p>"
  syntax:
    content: public boolean isSecondaryClearAcknowledgedOperations()
    return:
      type: 4fc6e284
      description: <p>true if the secondary replicator releases the operation as soon as it is acknowledged by the user service; otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  id: isUseStreamFaultsAndEndOfStreamOperationAck()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: isUseStreamFaultsAndEndOfStreamOperationAck()
  nameWithType: ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  fullName: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  overload: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 538
  package: system.fabric
  summary: "<p>Specifies whether the replicator uses stream faults.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is false </p>"
  syntax:
    content: public boolean isUseStreamFaultsAndEndOfStreamOperationAck()
    return:
      type: 4fc6e284
      description: <p>true if the replicator uses stream faults; otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.loadFrom(FabricCodePackageActivationContext,String,String)
  id: loadFrom(FabricCodePackageActivationContext,String,String)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  nameWithType: ReplicatorSettings.loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  fullName: system.fabric.ReplicatorSettings.loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  overload: system.fabric.ReplicatorSettings.loadFrom*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 1033
  package: system.fabric
  syntax:
    content: public static ReplicatorSettings loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
    parameters:
    - id: codePackageActivationContext
      type: system.fabric.FabricCodePackageActivationContext
    - id: configPackageName
      type: "26831127"
    - id: sectionName
      type: "26831127"
    return:
      type: system.fabric.ReplicatorSettings
- uid: system.fabric.ReplicatorSettings.ReplicatorSettings()
  id: ReplicatorSettings()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: ReplicatorSettings()
  nameWithType: ReplicatorSettings.ReplicatorSettings()
  fullName: system.fabric.ReplicatorSettings.ReplicatorSettings()
  overload: system.fabric.ReplicatorSettings.ReplicatorSettings*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 84
  package: system.fabric
  syntax:
    content: public ReplicatorSettings()
- uid: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval(Duration)
  id: setBatchAcknowledgementInterval(Duration)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  nameWithType: ReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  fullName: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  overload: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 240
  package: system.fabric
  summary: "<p>Sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</p>\r\n<p>\r\n  <b>Remarks:</b>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message. Increasing the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ReplicatorSettings#batchAcknowledgementInterval\"></xref> value decreases latency of individual replication operations but increases throughput of the replicator. Default value is 0.05 Seconds (50 milliseconds) </p>"
  syntax:
    content: public void setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
    parameters:
    - id: batchAcknowledgementInterval
      type: e02a2de0
      description: <p>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </p>
- uid: system.fabric.ReplicatorSettings.setInitialCopyQueueSize(long)
  id: setInitialCopyQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setInitialCopyQueueSize(long initialCopyQueueSize)
  nameWithType: ReplicatorSettings.setInitialCopyQueueSize(long initialCopyQueueSize)
  fullName: system.fabric.ReplicatorSettings.setInitialCopyQueueSize(long initialCopyQueueSize)
  overload: system.fabric.ReplicatorSettings.setInitialCopyQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 365
  package: system.fabric
  summary: "<p>Gets or sets the initial size of the copy operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains copy <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s not yet pumped and processed by the service.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public void setInitialCopyQueueSize(long initialCopyQueueSize)
    parameters:
    - id: initialCopyQueueSize
      type: 0364520f
      description: <p>The initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
- uid: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long)
  id: setInitialPrimaryReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 586
  package: system.fabric
  summary: "<p>Defines the initial size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s.The unit here is the number of operations in the queue.</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public void setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
    parameters:
    - id: initialPrimaryReplicationQueueSize
      type: 0364520f
      description: <p>The initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref></p>
- uid: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize(long)
  id: setInitialReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setInitialReplicationQueueSize(long initialReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialReplicationQueueSize(long initialReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize(long initialReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 311
  package: system.fabric
  summary: "<p>Sets the initial size of the replication queue size.</p>\r\n<p></p>"
  syntax:
    content: public void setInitialReplicationQueueSize(long initialReplicationQueueSize)
    parameters:
    - id: initialReplicationQueueSize
      type: 0364520f
      description: <p>The initial size of the replication queue size. </p>
- uid: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long)
  id: setInitialSecondaryReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 703
  package: system.fabric
  summary: "<p>Defines the initial size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle The default value is 64. Note that values for this parameter must be a power of 2. </p>"
  syntax:
    content: public void setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
    parameters:
    - id: initialSecondaryReplicationQueueSize
      type: 0364520f
      description: <p>The initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
- uid: system.fabric.ReplicatorSettings.setMaxCopyQueueSize(long)
  id: setMaxCopyQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxCopyQueueSize(long maxCopyQueueSize)
  nameWithType: ReplicatorSettings.setMaxCopyQueueSize(long maxCopyQueueSize)
  fullName: system.fabric.ReplicatorSettings.setMaxCopyQueueSize(long maxCopyQueueSize)
  overload: system.fabric.ReplicatorSettings.setMaxCopyQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 404
  package: system.fabric
  summary: "<p>Sets the maximum size of the copy operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains copy <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s not yet pumped and processed by the service.</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached at the secondary, operations will be buffered in the Primary’s copy queue. If that queue also fills, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 1024 </p>"
  syntax:
    content: public void setMaxCopyQueueSize(long maxCopyQueueSize)
    parameters:
    - id: maxCopyQueueSize
      type: 0364520f
      description: <p>The maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
- uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long)
  id: setMaxPrimaryReplicationQueueMemorySize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  overload: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 664
  package: system.fabric
  summary: "<p>Defines the maximum size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public void setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
    parameters:
    - id: maxPrimaryReplicationQueueMemorySize
      type: 0364520f
      description: <p>the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s The unit here is the virtual memory consumption of the queue .Returns long. </p>
- uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long)
  id: setMaxPrimaryReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 627
  package: system.fabric
  summary: "<p>Defines the maximum size of the primary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 1024 Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Primary </p>"
  syntax:
    content: public void setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
    parameters:
    - id: maxPrimaryReplicationQueueSize
      type: 0364520f
      description: <p>The maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the number of operations in the queue. </p>
- uid: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize(long)
  id: setMaxReplicationMessageSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxReplicationMessageSize(long maxReplicationMessageSize)
  nameWithType: ReplicatorSettings.setMaxReplicationMessageSize(long maxReplicationMessageSize)
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize(long maxReplicationMessageSize)
  overload: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 526
  package: system.fabric
  summary: "<p>Sets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages and copy context messages. The unit of representation is bytes.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 50MB </p>"
  syntax:
    content: public void setMaxReplicationMessageSize(long maxReplicationMessageSize)
    parameters:
    - id: maxReplicationMessageSize
      type: 0364520f
      description: <p>The maximum size of a message that can be transmitted via the replicator. </p>
- uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize(long)
  id: setMaxReplicationQueueMemorySize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  overload: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 466
  package: system.fabric
  summary: "<p>Sets the maximum size for the replication queue memory.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public void setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
    parameters:
    - id: maxReplicationQueueMemorySize
      type: 0364520f
      description: <p>The maximum size for the replication queue memory. </p>
- uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize(long)
  id: setMaxReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxReplicationQueueSize(long maxReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxReplicationQueueSize(long maxReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize(long maxReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 330
  package: system.fabric
  summary: "<p>Sets the maximum size for the replication queue.</p>\r\n<p></p>"
  syntax:
    content: public void setMaxReplicationQueueSize(long maxReplicationQueueSize)
    parameters:
    - id: maxReplicationQueueSize
      type: 0364520f
      description: <p>the maximum size for the replication queue. </p>
- uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long)
  id: setMaxSecondaryReplicationQueueMemorySize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  overload: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 784
  package: system.fabric
  summary: "<p>Defines the maximum size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s.</p>\r\n<p>\r\n  <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit </p>"
  syntax:
    content: public void setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
    parameters:
    - id: maxSecondaryReplicationQueueMemorySize
      type: 0364520f
      description: <p>Returns the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the virtual memory consumption of the queue. </p>
- uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long)
  id: setMaxSecondaryReplicationQueueSize(long)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  overload: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 746
  package: system.fabric
  summary: "<p>Defines the maximum size of the secondary replication operation queue inside <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref>, which contains replication <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>s</p>\r\n<p>\r\n  <b>Remarks:</b>If this queue size is reached, operations will be buffered in the Primary’s replication queue. If that queue also fills, then the Primary will begin seeing <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricErrorCode#ReplicationQueueFull\"></xref> exceptions. The default value is 2048.Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Secondary/Idle </p>"
  syntax:
    content: public void setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
    parameters:
    - id: maxSecondaryReplicationQueueSize
      type: 0364520f
      description: <p>The maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
- uid: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration)
  id: setPrimaryWaitForPendingQuorumsTimeout(Duration)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  nameWithType: ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  fullName: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  overload: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 825
  package: system.fabric
  summary: "<p>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operations.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is 0. This implies that reconfigurations aren’t waited upon for receiving quorum on the pending replication operations. This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, implying longer durations to fail-over a primary. </p>"
  syntax:
    content: public void setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
    parameters:
    - id: primaryWaitForPendingQuorumsTimeout
      type: e02a2de0
      description: <p>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is a request for the primary replicator to process a reconfiguration <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref>. </p>
- uid: system.fabric.ReplicatorSettings.setReplicatorAddress(String)
  id: setReplicatorAddress(String)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setReplicatorAddress(String replicatorAddress)
  nameWithType: ReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  fullName: system.fabric.ReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  overload: system.fabric.ReplicatorSettings.setReplicatorAddress*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 269
  package: system.fabric
  summary: "<p>Configures the address that this replicator will use when communicating with other Replicators.</p>\r\n<p>\r\n  <b>Remarks:</b>String is formatted as \"hostname:port\", where hostname can be FQDN or IP address. The default value is localhost:0 </p>"
  syntax:
    content: public void setReplicatorAddress(String replicatorAddress)
    parameters:
    - id: replicatorAddress
      type: "26831127"
      description: <p>The address that this replicator will use when communicating with other Replicators. </p>
- uid: system.fabric.ReplicatorSettings.setRequireServiceAck(boolean)
  id: setRequireServiceAck(boolean)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setRequireServiceAck(boolean requireServiceAck)
  nameWithType: ReplicatorSettings.setRequireServiceAck(boolean requireServiceAck)
  fullName: system.fabric.ReplicatorSettings.setRequireServiceAck(boolean requireServiceAck)
  overload: system.fabric.ReplicatorSettings.setRequireServiceAck*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 441
  package: system.fabric
  summary: "<p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref uid=\"system.fabric.Operation.acknowledge()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation#acknowledge()\"></xref> before it pumps the next operation.</p>\r\n<p>\r\n  <b>Remarks:</b>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the Replicator. This setting has no effect for persistent services. The default value is false. </p>"
  syntax:
    content: public void setRequireServiceAck(boolean requireServiceAck)
    parameters:
    - id: requireServiceAck
      type: 4fc6e284
      description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.setRetryInterval(Duration)
  id: setRetryInterval(Duration)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setRetryInterval(Duration retryInterval)
  nameWithType: ReplicatorSettings.setRetryInterval(Duration retryInterval)
  fullName: system.fabric.ReplicatorSettings.setRetryInterval(Duration retryInterval)
  overload: system.fabric.ReplicatorSettings.setRetryInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 203
  package: system.fabric
  summary: "<p>Defines how long the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.</p>\r\n<p>\r\n  <b>Remarks:</b>Receiving a message does not necessarily that the message has been processed. If this timer is exceeded, then the message is retransmitted. The default value is 5 seconds. </p>"
  syntax:
    content: public void setRetryInterval(Duration retryInterval)
    parameters:
    - id: retryInterval
      type: e02a2de0
      description: <p>The time needed the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. </p>
- uid: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean)
  id: setSecondaryClearAcknowledgedOperations(boolean)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  nameWithType: ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  fullName: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  overload: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 497
  package: system.fabric
  summary: "<p>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is false </p>"
  syntax:
    content: public void setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
    parameters:
    - id: secondaryClearAcknowledgedOperations
      type: 4fc6e284
      description: <p>true if the secondary replicator releases the operation as soon as it is acknowledged by the user service; otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.setSecurityCredentials(SecurityCredentials)
  id: setSecurityCredentials(SecurityCredentials)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setSecurityCredentials(SecurityCredentials securityCredentials)
  nameWithType: ReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  fullName: system.fabric.ReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  overload: system.fabric.ReplicatorSettings.setSecurityCredentials*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 292
  package: system.fabric
  summary: "<p>Allows the service to define security credentials for securing the traffic between replicators.</p>\r\n<p></p>"
  syntax:
    content: public void setSecurityCredentials(SecurityCredentials securityCredentials)
    parameters:
    - id: securityCredentials
      type: system.fabric.SecurityCredentials
      description: <p>The service to define security credentials for securing the traffic between replicators. </p>
- uid: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean)
  id: setUseStreamFaultsAndEndOfStreamOperationAck(boolean)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  nameWithType: ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  fullName: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  overload: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 551
  package: system.fabric
  summary: "<p>Specifies whether the replicator uses stream faults.</p>\r\n<p>\r\n  <b>Remarks:</b>The default value is false </p>"
  syntax:
    content: public void setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
    parameters:
    - id: useStreamFaultsAndEndOfStreamOperationAck
      type: 4fc6e284
      description: <p>true if the replicator uses stream faults; otherwise, false. </p>
- uid: system.fabric.ReplicatorSettings.toNative(PinCollection)
  id: toNative(PinCollection)
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: toNative(PinCollection pinCollection)
  nameWithType: ReplicatorSettings.toNative(PinCollection pinCollection)
  fullName: system.fabric.ReplicatorSettings.toNative(PinCollection pinCollection)
  overload: system.fabric.ReplicatorSettings.toNative*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 849
  package: system.fabric
  syntax:
    content: public long toNative(PinCollection pinCollection)
    parameters:
    - id: pinCollection
      type: 570261de
    return:
      type: 0364520f
- uid: system.fabric.ReplicatorSettings.toString()
  id: toString()
  parent: system.fabric.ReplicatorSettings
  href: system.fabric.ReplicatorSettings.yml
  langs:
  - java
  name: toString()
  nameWithType: ReplicatorSettings.toString()
  fullName: system.fabric.ReplicatorSettings.toString()
  overload: system.fabric.ReplicatorSettings.toString*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ReplicatorSettings.java
    startLine: 830
  package: system.fabric
  syntax:
    content: public String toString()
    return:
      type: "26831127"
references:
- uid: system.fabric.ReplicatorSettings.ReplicatorSettings*
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings.ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings.ReplicatorSettings
  package: system.fabric
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: system.fabric.ReplicatorSettings.getRetryInterval*
  name: getRetryInterval
  nameWithType: ReplicatorSettings.getRetryInterval
  fullName: system.fabric.ReplicatorSettings.getRetryInterval
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setRetryInterval*
  name: setRetryInterval
  nameWithType: ReplicatorSettings.setRetryInterval
  fullName: system.fabric.ReplicatorSettings.setRetryInterval
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval*
  name: getBatchAcknowledgementInterval
  nameWithType: ReplicatorSettings.getBatchAcknowledgementInterval
  fullName: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval*
  name: setBatchAcknowledgementInterval
  nameWithType: ReplicatorSettings.setBatchAcknowledgementInterval
  fullName: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval
  package: system.fabric
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: system.fabric.ReplicatorSettings.getReplicatorAddress*
  name: getReplicatorAddress
  nameWithType: ReplicatorSettings.getReplicatorAddress
  fullName: system.fabric.ReplicatorSettings.getReplicatorAddress
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setReplicatorAddress*
  name: setReplicatorAddress
  nameWithType: ReplicatorSettings.setReplicatorAddress
  fullName: system.fabric.ReplicatorSettings.setReplicatorAddress
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getSecurityCredentials*
  name: getSecurityCredentials
  nameWithType: ReplicatorSettings.getSecurityCredentials
  fullName: system.fabric.ReplicatorSettings.getSecurityCredentials
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setSecurityCredentials*
  name: setSecurityCredentials
  nameWithType: ReplicatorSettings.setSecurityCredentials
  fullName: system.fabric.ReplicatorSettings.setSecurityCredentials
  package: system.fabric
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize*
  name: getInitialReplicationQueueSize
  nameWithType: ReplicatorSettings.getInitialReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize*
  name: setInitialReplicationQueueSize
  nameWithType: ReplicatorSettings.setInitialReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize*
  name: getMaxReplicationQueueSize
  nameWithType: ReplicatorSettings.getMaxReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize*
  name: setMaxReplicationQueueSize
  nameWithType: ReplicatorSettings.setMaxReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getInitialCopyQueueSize*
  name: getInitialCopyQueueSize
  nameWithType: ReplicatorSettings.getInitialCopyQueueSize
  fullName: system.fabric.ReplicatorSettings.getInitialCopyQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setInitialCopyQueueSize*
  name: setInitialCopyQueueSize
  nameWithType: ReplicatorSettings.setInitialCopyQueueSize
  fullName: system.fabric.ReplicatorSettings.setInitialCopyQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxCopyQueueSize*
  name: getMaxCopyQueueSize
  nameWithType: ReplicatorSettings.getMaxCopyQueueSize
  fullName: system.fabric.ReplicatorSettings.getMaxCopyQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxCopyQueueSize*
  name: setMaxCopyQueueSize
  nameWithType: ReplicatorSettings.setMaxCopyQueueSize
  fullName: system.fabric.ReplicatorSettings.setMaxCopyQueueSize
  package: system.fabric
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: system.fabric.ReplicatorSettings.isRequireServiceAck*
  name: isRequireServiceAck
  nameWithType: ReplicatorSettings.isRequireServiceAck
  fullName: system.fabric.ReplicatorSettings.isRequireServiceAck
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setRequireServiceAck*
  name: setRequireServiceAck
  nameWithType: ReplicatorSettings.setRequireServiceAck
  fullName: system.fabric.ReplicatorSettings.setRequireServiceAck
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize*
  name: getMaxReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.getMaxReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize*
  name: setMaxReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.setMaxReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations*
  name: isSecondaryClearAcknowledgedOperations
  nameWithType: ReplicatorSettings.isSecondaryClearAcknowledgedOperations
  fullName: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations*
  name: setSecondaryClearAcknowledgedOperations
  nameWithType: ReplicatorSettings.setSecondaryClearAcknowledgedOperations
  fullName: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations
  package: system.fabric
- uid: 34f09483
  spec.java:
  - name: Long
    fullName: Long
- uid: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize*
  name: getMaxReplicationMessageSize
  nameWithType: ReplicatorSettings.getMaxReplicationMessageSize
  fullName: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize*
  name: setMaxReplicationMessageSize
  nameWithType: ReplicatorSettings.setMaxReplicationMessageSize
  fullName: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck*
  name: isUseStreamFaultsAndEndOfStreamOperationAck
  nameWithType: ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck
  fullName: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck*
  name: setUseStreamFaultsAndEndOfStreamOperationAck
  nameWithType: ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck
  fullName: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize*
  name: getInitialPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.getInitialPrimaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize*
  name: setInitialPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.setInitialPrimaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize*
  name: getMaxPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize*
  name: setMaxPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize*
  name: getMaxPrimaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize*
  name: setMaxPrimaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize*
  name: getInitialSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.getInitialSecondaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize*
  name: setInitialSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.setInitialSecondaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize*
  name: getMaxSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize*
  name: setMaxSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueSize
  fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize*
  name: getMaxSecondaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize*
  name: setMaxSecondaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize
  fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout*
  name: getPrimaryWaitForPendingQuorumsTimeout
  nameWithType: ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout
  fullName: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout*
  name: setPrimaryWaitForPendingQuorumsTimeout
  nameWithType: ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout
  fullName: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.toString*
  name: toString
  nameWithType: ReplicatorSettings.toString
  fullName: system.fabric.ReplicatorSettings.toString
  package: system.fabric
- uid: 570261de
  spec.java:
  - name: PinCollection
    fullName: PinCollection
- uid: system.fabric.ReplicatorSettings.toNative*
  name: toNative
  nameWithType: ReplicatorSettings.toNative
  fullName: system.fabric.ReplicatorSettings.toNative
  package: system.fabric
- uid: system.fabric.ReplicatorSettings.loadFrom*
  name: loadFrom
  nameWithType: ReplicatorSettings.loadFrom
  fullName: system.fabric.ReplicatorSettings.loadFrom
  package: system.fabric
- uid: system.fabric.SecurityCredentials
  parent: system.fabric
  href: system.fabric.SecurityCredentials.yml
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: system.fabric.SecurityCredentials
  type: Class
  summary: "<p>An abstract base class for types that represent security credentials. </p>"
  syntax:
    content: public class SecurityCredentials
- uid: system.fabric.ReplicatorSettings
  parent: system.fabric
  href: system.fabric.ReplicatorSettings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  summary: "<p>Allows a stateful replica to configure the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> when creating it <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)\"></xref></p>"
  syntax: *o1
- uid: system.fabric.FabricReplicator
  parent: system.fabric
  href: system.fabric.FabricReplicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: "<p>Replicates state for high availability and reliability. </p>\r\n<p>\r\n  <b>Remarks:</b>Provides the default implementation of the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref>, <xref uid=\"system.fabric.Replicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Replicator\"></xref>, and <xref uid=\"system.fabric.PrimaryReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.PrimaryReplicator\"></xref> interfaces, which user services can use, along with their implementation of the <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref> interface. An instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> class is obtained via the <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)\"></xref> method, which can be cast to <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for use. </p>"
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric.Operation
  parent: system.fabric
  href: system.fabric.Operation.yml
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  summary: "<p>\r\n  <b>Remarks:</b>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid=\"system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)\"></xref> and the sequence number and other identifying information. </p>"
  syntax:
    content: public interface Operation
- uid: system.fabric.Operation.acknowledge()
  parent: system.fabric.Operation
  href: system.fabric.Operation.yml
  name: acknowledge()
  nameWithType: Operation.acknowledge()
  fullName: system.fabric.Operation.acknowledge()
  type: Method
  summary: "<p>Acknowledges that this operation has been successfully applied at the Secondary replica. </p>\r\n<p>\r\n  <b>Remarks:</b>Services should call this method when they have obtained an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> from the replicator and successfully applied it to their local store. For persisted services, calling this method is mandatory because the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> does not release additional objects that implement <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref>. For volatile services, the replicator implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value <xref uid=\"system.fabric.ReplicatorSettings.isRequireServiceAck()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.ReplicatorSettings#isRequireServiceAck()\"></xref> to true. An operation must be acknowledged by a quorum of replicas before the Primary replica receives the <xref uid=\"system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)\"></xref> operation complete responses. </p>"
  syntax:
    content: public void acknowledge()
- uid: system.fabric.FabricCodePackageActivationContext
  parent: system.fabric
  href: system.fabric.FabricCodePackageActivationContext.yml
  name: FabricCodePackageActivationContext
  nameWithType: FabricCodePackageActivationContext
  fullName: system.fabric.FabricCodePackageActivationContext
  type: Class
  summary: "<p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>"
  syntax:
    content: public class FabricCodePackageActivationContext implements CodePackageActivationContext
- uid: system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  name: createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  nameWithType: StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  fullName: system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  type: Method
  summary: "<p>Creates a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> with the specified settings and returns it to the replica.</p>\r\n<p>\r\n  <b>Remarks:</b>This method should be used to create a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> to service as the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for a stateful service that implements <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref>. </p>"
  syntax:
    content: public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
    parameters:
    - id: stateProvider
      type: system.fabric.StateProvider
      description: <p>The <xref uid="system.fabric.StateProvider" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be associated. This is often the same object that implements <xref uid="system.fabric.StatefulServiceReplica" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceReplica"></xref>, but certain services might be factored differently. </p>
    - id: replicatorSettings
      type: system.fabric.ReplicatorSettings
      description: >-
        <p>

          <xref uid="system.fabric.ReplicatorSettings" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be configured. </p>
    return:
      type: system.fabric.FabricReplicator
      description: <p>Returns <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref>. </p>
