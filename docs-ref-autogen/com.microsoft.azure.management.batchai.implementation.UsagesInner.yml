### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.UsagesInner(Retrofit retrofit, BatchAIManagementClientImpl client)
  name: UsagesInner(Retrofit retrofit, BatchAIManagementClientImpl client)
  nameWithType: UsagesInner.UsagesInner(Retrofit retrofit, BatchAIManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.batchai.implementation.BatchAIManagementClientImpl?alt=com.microsoft.azure.management.batchai.implementation.BatchAIManagementClientImpl&text=BatchAIManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of UsagesInner.</p>

    <p></p>
  syntax: public UsagesInner(Retrofit retrofit, BatchAIManagementClientImpl client)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.UsagesInner(Retrofit,BatchAIManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.list(final String location)
  name: list(final String location)
  nameWithType: UsagesInner.list(final String location)
  parameters:
  - description: <p>The location for which resource usage is queried. </p>
    name: location
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;UsageInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public PagedList<UsageInner> list(final String location)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.list(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listAsync(final String location)
  name: listAsync(final String location)
  nameWithType: UsagesInner.listAsync(final String location)
  parameters:
  - description: <p>The location for which resource usage is queried. </p>
    name: location
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;UsageInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public Observable<Page<UsageInner>> listAsync(final String location)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listAsync(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listAsync(final String location, final ListOperationCallback<UsageInner> serviceCallback)
  name: listAsync(final String location, final ListOperationCallback<UsageInner> serviceCallback)
  nameWithType: UsagesInner.listAsync(final String location, final ListOperationCallback<UsageInner> serviceCallback)
  parameters:
  - description: <p>The location for which resource usage is queried. </p>
    name: location
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public ServiceFuture<List<UsageInner>> listAsync(final String location, final ListOperationCallback<UsageInner> serviceCallback)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listAsync(final String,final ListOperationCallback<UsageInner>)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: UsagesInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;UsageInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public PagedList<UsageInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNext(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: UsagesInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;UsageInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public Observable<Page<UsageInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<UsageInner>> serviceFuture, final ListOperationCallback<UsageInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<UsageInner>> serviceFuture, final ListOperationCallback<UsageInner> serviceCallback)
  nameWithType: UsagesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<UsageInner>> serviceFuture, final ListOperationCallback<UsageInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public ServiceFuture<List<UsageInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<UsageInner>> serviceFuture, final ListOperationCallback<UsageInner> serviceCallback)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextAsync(final String,final ServiceFuture<List<UsageInner>>,final ListOperationCallback<UsageInner>)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: UsagesInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;UsageInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p>ServiceResponse&lt;PageImpl&lt;UsageInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<UsageInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: UsagesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;UsageInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<UsageInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listSinglePageAsync(final String location)
  name: listSinglePageAsync(final String location)
  nameWithType: UsagesInner.listSinglePageAsync(final String location)
  parameters:
  - description: <p>The location for which resource usage is queried. </p>
    name: location
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;UsageInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p>ServiceResponse&lt;PageImpl&lt;UsageInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<UsageInner>>> listSinglePageAsync(final String location)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner.listWithServiceResponseAsync(final String location)
  name: listWithServiceResponseAsync(final String location)
  nameWithType: UsagesInner.listWithServiceResponseAsync(final String location)
  parameters:
  - description: <p>The location for which resource usage is queried. </p>
    name: location
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;UsageInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batchai.implementation.UsageInner?alt=com.microsoft.azure.management.batchai.implementation.UsageInner&text=UsageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the current usage information as well as limits for Batch AI resources for given subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<UsageInner>>> listWithServiceResponseAsync(final String location)
  uid: com.microsoft.azure.management.batchai.implementation.UsagesInner.listWithServiceResponseAsync(final String)
nameWithType: UsagesInner
syntax: public class UsagesInner
type: class
uid: com.microsoft.azure.management.batchai.implementation.UsagesInner
fullName: com.microsoft.azure.management.batchai.implementation.UsagesInner
name: UsagesInner
package: com.microsoft.azure.management.batchai.implementation
summary: <p>An instance of this class provides access to all the operations defined in Usages. </p>
metadata: {}
