### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileSystemClient.getFileClient*"
fullName: "com.azure.storage.file.datalake.DataLakeFileSystemClient.getFileClient"
name: "getFileClient"
nameWithType: "DataLakeFileSystemClient.getFileClient"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemClient.getFileClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemClient.getFileClient(String fileName)"
  name: "getFileClient(String fileName)"
  nameWithType: "DataLakeFileSystemClient.getFileClient(String fileName)"
  summary: "Initializes a new DataLakeFileClient object by concatenating fileName to the end of DataLakeFileSystemClient's URL. The new DataLakeFileClient uses the same request policy pipeline as the DataLakeFileSystemClient."
  parameters:
  - description: "A <code>String</code> representing the name of the file. If the path name contains special characters,\n pass in the url encoded version of the path name.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n DataLakeFileClient dataLakeFileClient = client.getFileClient&#40;fileName&#41;;\n </pre>"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileClient getFileClient(String fileName)"
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> object which references the file with the specified name in this file\n system."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.4.0
