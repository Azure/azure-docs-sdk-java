### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.logging.ClientLogger
  id: ClientLogger
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging
  children:
  - com.azure.core.util.logging.ClientLogger.<T>logThowableAsWarning(T)
  - com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError(T)
  - com.azure.core.util.logging.ClientLogger.<T>logThrowableAsWarning(T)
  - com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.Class<?>)
  - com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.String)
  - com.azure.core.util.logging.ClientLogger.canLogAtLevel(com.azure.core.util.logging.LogLevel)
  - com.azure.core.util.logging.ClientLogger.error(java.lang.String)
  - com.azure.core.util.logging.ClientLogger.error(java.lang.String,java.lang.Object...)
  - com.azure.core.util.logging.ClientLogger.info(java.lang.String)
  - com.azure.core.util.logging.ClientLogger.info(java.lang.String,java.lang.Object...)
  - com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)
  - com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)
  - com.azure.core.util.logging.ClientLogger.verbose(java.lang.String)
  - com.azure.core.util.logging.ClientLogger.verbose(java.lang.String,java.lang.Object...)
  - com.azure.core.util.logging.ClientLogger.warning(java.lang.String)
  - com.azure.core.util.logging.ClientLogger.warning(java.lang.String,java.lang.Object...)
  langs:
  - java
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
  type: Class
  package: com.azure.core.util.logging
  summary: >-
    This is a fluent logger helper class that wraps a pluggable <xref uid="" data-throw-if-not-resolved="false">Logger</xref>.


    This logger logs formattable messages that use `{}` as the placeholder. When a <xref uid="" data-throw-if-not-resolved="false">throwable</xref> is the last argument of the format varargs and the logger is enabled for <xref uid="com.azure.core.util.logging.ClientLogger.verbose*" data-throw-if-not-resolved="false">verbose</xref>, the stack trace for the throwable is logged.


    A minimum logging level threshold is determined by the <xref uid="com.azure.core.util.Configuration.PROPERTY_AZURE_LOG_LEVEL" data-throw-if-not-resolved="false">AZURE_LOG_LEVEL</xref> environment configuration. By default logging is **disabled**.


    **Log level hierarchy**


    1.  <xref uid="com.azure.core.util.logging.ClientLogger.error*" data-throw-if-not-resolved="false">Error</xref>

    2.  <xref uid="com.azure.core.util.logging.ClientLogger.warning*" data-throw-if-not-resolved="false">Warning</xref>

    3.  <xref uid="com.azure.core.util.logging.ClientLogger.info*" data-throw-if-not-resolved="false">Info</xref>

    4.  <xref uid="com.azure.core.util.logging.ClientLogger.verbose*" data-throw-if-not-resolved="false">Verbose</xref>
  syntax:
    content: public class ClientLogger
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.util.logging.ClientLogger.<T>logThowableAsWarning(T)
  id: <T>logThowableAsWarning(T)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: <T>logThowableAsWarning(T throwable)
  nameWithType: ClientLogger.<T>logThowableAsWarning(T throwable)
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThowableAsWarning(T throwable)
  overload: com.azure.core.util.logging.ClientLogger.logThowableAsWarning*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs the <xref uid="" data-throw-if-not-resolved="false">Throwable</xref> at the warning level and returns it to be thrown.


    This API covers the cases where a checked exception type needs to be thrown and logged. If a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> is being logged use <xref uid="com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)" data-throw-if-not-resolved="false">#logExceptionAsWarning(RuntimeException)</xref> instead.
  syntax:
    content: public T <T>logThowableAsWarning(T throwable)
    parameters:
    - id: throwable
      type: T
      description: Throwable to be logged and returned.
    return:
      type: T
      description: The passed <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError(T)
  id: <T>logThrowableAsError(T)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: <T>logThrowableAsError(T throwable)
  nameWithType: ClientLogger.<T>logThrowableAsError(T throwable)
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError(T throwable)
  overload: com.azure.core.util.logging.ClientLogger.logThrowableAsError*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs the <xref uid="" data-throw-if-not-resolved="false">Throwable</xref> at the error level and returns it to be thrown.


    This API covers the cases where a checked exception type needs to be thrown and logged. If a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> is being logged use <xref uid="com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)" data-throw-if-not-resolved="false">#logExceptionAsError(RuntimeException)</xref> instead.
  syntax:
    content: public T <T>logThrowableAsError(T throwable)
    parameters:
    - id: throwable
      type: T
      description: Throwable to be logged and returned.
    return:
      type: T
      description: The passed <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsWarning(T)
  id: <T>logThrowableAsWarning(T)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: <T>logThrowableAsWarning(T throwable)
  nameWithType: ClientLogger.<T>logThrowableAsWarning(T throwable)
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsWarning(T throwable)
  overload: com.azure.core.util.logging.ClientLogger.logThrowableAsWarning*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs the <xref uid="" data-throw-if-not-resolved="false">Throwable</xref> at the warning level and returns it to be thrown.


    This API covers the cases where a checked exception type needs to be thrown and logged. If a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> is being logged use <xref uid="com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)" data-throw-if-not-resolved="false">#logExceptionAsWarning(RuntimeException)</xref> instead.
  syntax:
    content: public T <T>logThrowableAsWarning(T throwable)
    parameters:
    - id: throwable
      type: T
      description: Throwable to be logged and returned.
    return:
      type: T
      description: The passed <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.Class<?>)
  id: ClientLogger(java.lang.Class<?>)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: ClientLogger(Class<?> clazz)
  nameWithType: ClientLogger.ClientLogger(Class<?> clazz)
  fullName: com.azure.core.util.logging.ClientLogger.ClientLogger(Class<?> clazz)
  overload: com.azure.core.util.logging.ClientLogger.ClientLogger*
  type: Constructor
  package: com.azure.core.util.logging
  summary: Retrieves a logger for the passed class using the <xref uid="" data-throw-if-not-resolved="false">LoggerFactory</xref>.
  syntax:
    content: public ClientLogger(Class<?> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<?>
      description: Class creating the logger.
- uid: com.azure.core.util.logging.ClientLogger.ClientLogger(java.lang.String)
  id: ClientLogger(java.lang.String)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: ClientLogger(String className)
  nameWithType: ClientLogger.ClientLogger(String className)
  fullName: com.azure.core.util.logging.ClientLogger.ClientLogger(String className)
  overload: com.azure.core.util.logging.ClientLogger.ClientLogger*
  type: Constructor
  package: com.azure.core.util.logging
  summary: Retrieves a logger for the passed class name using the <xref uid="" data-throw-if-not-resolved="false">LoggerFactory</xref>.
  syntax:
    content: public ClientLogger(String className)
    parameters:
    - id: className
      type: java.lang.String
      description: Class name creating the logger.
- uid: com.azure.core.util.logging.ClientLogger.canLogAtLevel(com.azure.core.util.logging.LogLevel)
  id: canLogAtLevel(com.azure.core.util.logging.LogLevel)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: canLogAtLevel(LogLevel logLevel)
  nameWithType: ClientLogger.canLogAtLevel(LogLevel logLevel)
  fullName: com.azure.core.util.logging.ClientLogger.canLogAtLevel(LogLevel logLevel)
  overload: com.azure.core.util.logging.ClientLogger.canLogAtLevel*
  type: Method
  package: com.azure.core.util.logging
  summary: Determines if the app or environment logger support logging at the given log level.
  syntax:
    content: public boolean canLogAtLevel(LogLevel logLevel)
    parameters:
    - id: logLevel
      type: com.azure.core.util.logging.LogLevel
      description: Logging level for the log message.
    return:
      type: boolean
      description: Flag indicating if the environment and logger are configured to support logging at the given log level.
- uid: com.azure.core.util.logging.ClientLogger.error(java.lang.String)
  id: error(java.lang.String)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: error(String message)
  nameWithType: ClientLogger.error(String message)
  fullName: com.azure.core.util.logging.ClientLogger.error(String message)
  overload: com.azure.core.util.logging.ClientLogger.error*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a message at `error` log level.


    **Code samples**


    Logging a message at verbose log level.


    ```java

    try {
         upload(resource);
     } catch (IOException ex) {
         logger.error(ex.getMessage());
     }
    ```
  syntax:
    content: public void error(String message)
    parameters:
    - id: message
      type: java.lang.String
      description: The message to log.
- uid: com.azure.core.util.logging.ClientLogger.error(java.lang.String,java.lang.Object...)
  id: error(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: error(String format, Object[] args)
  nameWithType: ClientLogger.error(String format, Object[] args)
  fullName: com.azure.core.util.logging.ClientLogger.error(String format, Object[] args)
  overload: com.azure.core.util.logging.ClientLogger.error*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a formattable message that uses `{}` as the placeholder at `error` log level.


    **Code samples**


    Logging an error with stack trace.


    ```java

    try {
         upload(resource);
     } catch (IOException ex) {
         logger.error("A formattable message. Hello, {}", name, ex);
     }
    ```
  syntax:
    content: public void error(String format, Object[] args)
    parameters:
    - id: format
      type: java.lang.String
      description: The formattable message to log.
    - id: args
      type: java.lang.Object[]
      description: >-
        Arguments for the message. If an exception is being logged, the last argument should be the
             <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.info(java.lang.String)
  id: info(java.lang.String)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: info(String message)
  nameWithType: ClientLogger.info(String message)
  fullName: com.azure.core.util.logging.ClientLogger.info(String message)
  overload: com.azure.core.util.logging.ClientLogger.info*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a message at `info` log level.


    **Code samples**


    Logging a message at verbose log level.


    ```java

    logger.info("A log message");

    ```
  syntax:
    content: public void info(String message)
    parameters:
    - id: message
      type: java.lang.String
      description: The message to log.
- uid: com.azure.core.util.logging.ClientLogger.info(java.lang.String,java.lang.Object...)
  id: info(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: info(String format, Object[] args)
  nameWithType: ClientLogger.info(String format, Object[] args)
  fullName: com.azure.core.util.logging.ClientLogger.info(String format, Object[] args)
  overload: com.azure.core.util.logging.ClientLogger.info*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a formattable message that uses `{}` as the placeholder at `informational` log level.


    **Code samples**


    Logging a message at informational log level.


    ```java

    logger.info("A formattable message. Hello, {}", name);

    ```
  syntax:
    content: public void info(String format, Object[] args)
    parameters:
    - id: format
      type: java.lang.String
      description: The formattable message to log
    - id: args
      type: java.lang.Object[]
      description: >-
        Arguments for the message. If an exception is being logged, the last argument should be the
             <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)
  id: logExceptionAsError(java.lang.RuntimeException)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: logExceptionAsError(RuntimeException runtimeException)
  nameWithType: ClientLogger.logExceptionAsError(RuntimeException runtimeException)
  fullName: com.azure.core.util.logging.ClientLogger.logExceptionAsError(RuntimeException runtimeException)
  overload: com.azure.core.util.logging.ClientLogger.logExceptionAsError*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs the <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> at the error level and returns it to be thrown.


    This API covers the cases where a runtime exception type needs to be thrown and logged. If a <xref uid="" data-throw-if-not-resolved="false">Throwable</xref> is being logged use <xref uid="com.azure.core.util.logging.ClientLogger.logThrowableAsError*" data-throw-if-not-resolved="false">#logThrowableAsError(Throwable)</xref> instead.
  syntax:
    content: public RuntimeException logExceptionAsError(RuntimeException runtimeException)
    parameters:
    - id: runtimeException
      type: java.lang.RuntimeException
      description: RuntimeException to be logged and returned.
    return:
      type: java.lang.RuntimeException
      description: The passed <code>RuntimeException</code>.
- uid: com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(java.lang.RuntimeException)
  id: logExceptionAsWarning(java.lang.RuntimeException)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: logExceptionAsWarning(RuntimeException runtimeException)
  nameWithType: ClientLogger.logExceptionAsWarning(RuntimeException runtimeException)
  fullName: com.azure.core.util.logging.ClientLogger.logExceptionAsWarning(RuntimeException runtimeException)
  overload: com.azure.core.util.logging.ClientLogger.logExceptionAsWarning*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs the <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> at the warning level and returns it to be thrown.


    This API covers the cases where a runtime exception type needs to be thrown and logged. If a <xref uid="" data-throw-if-not-resolved="false">Throwable</xref> is being logged use <xref uid="com.azure.core.util.logging.ClientLogger.logThrowableAsWarning*" data-throw-if-not-resolved="false">#logThrowableAsWarning(Throwable)</xref> instead.
  syntax:
    content: public RuntimeException logExceptionAsWarning(RuntimeException runtimeException)
    parameters:
    - id: runtimeException
      type: java.lang.RuntimeException
      description: RuntimeException to be logged and returned.
    return:
      type: java.lang.RuntimeException
      description: The passed <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
- uid: com.azure.core.util.logging.ClientLogger.verbose(java.lang.String)
  id: verbose(java.lang.String)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: verbose(String message)
  nameWithType: ClientLogger.verbose(String message)
  fullName: com.azure.core.util.logging.ClientLogger.verbose(String message)
  overload: com.azure.core.util.logging.ClientLogger.verbose*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a message at `verbose` log level.


    **Code samples**


    Logging a message at verbose log level.


    ```java

    logger.verbose("A log message");

    ```
  syntax:
    content: public void verbose(String message)
    parameters:
    - id: message
      type: java.lang.String
      description: The message to log.
- uid: com.azure.core.util.logging.ClientLogger.verbose(java.lang.String,java.lang.Object...)
  id: verbose(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: verbose(String format, Object[] args)
  nameWithType: ClientLogger.verbose(String format, Object[] args)
  fullName: com.azure.core.util.logging.ClientLogger.verbose(String format, Object[] args)
  overload: com.azure.core.util.logging.ClientLogger.verbose*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a formattable message that uses `{}` as the placeholder at `verbose` log level.


    **Code samples**


    Logging a message at verbose log level.


    ```java

    logger.verbose("A formattable message. Hello, {}", name);

    ```
  syntax:
    content: public void verbose(String format, Object[] args)
    parameters:
    - id: format
      type: java.lang.String
      description: The formattable message to log.
    - id: args
      type: java.lang.Object[]
      description: >-
        Arguments for the message. If an exception is being logged, the last argument should be the
             <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
- uid: com.azure.core.util.logging.ClientLogger.warning(java.lang.String)
  id: warning(java.lang.String)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: warning(String message)
  nameWithType: ClientLogger.warning(String message)
  fullName: com.azure.core.util.logging.ClientLogger.warning(String message)
  overload: com.azure.core.util.logging.ClientLogger.warning*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a message at `warning` log level.


    **Code samples**


    Logging a message at verbose log level.


    ```java

    Throwable detailedException = new IllegalArgumentException("A exception with a detailed message");
     logger.warning(detailedException.getMessage());
    ```
  syntax:
    content: public void warning(String message)
    parameters:
    - id: message
      type: java.lang.String
      description: The message to log.
- uid: com.azure.core.util.logging.ClientLogger.warning(java.lang.String,java.lang.Object...)
  id: warning(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.logging.ClientLogger
  langs:
  - java
  name: warning(String format, Object[] args)
  nameWithType: ClientLogger.warning(String format, Object[] args)
  fullName: com.azure.core.util.logging.ClientLogger.warning(String format, Object[] args)
  overload: com.azure.core.util.logging.ClientLogger.warning*
  type: Method
  package: com.azure.core.util.logging
  summary: >-
    Logs a formattable message that uses `{}` as the placeholder at `warning` log level.


    **Code samples**


    Logging a message at warning log level.


    ```java

    Throwable exception = new IllegalArgumentException("An invalid argument was encountered.");
     logger.warning("A formattable message. Hello, {}", name, exception);
    ```
  syntax:
    content: public void warning(String format, Object[] args)
    parameters:
    - id: format
      type: java.lang.String
      description: The formattable message to log.
    - id: args
      type: java.lang.Object[]
      description: >-
        Arguments for the message. If an exception is being logged, the last argument should be the
             <xref uid="" data-throw-if-not-resolved="false">Throwable</xref>.
references:
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.logging.ClientLogger.ClientLogger*
  name: ClientLogger
  nameWithType: ClientLogger.ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger.ClientLogger
  package: com.azure.core.util.logging
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.logging.ClientLogger.verbose*
  name: verbose
  nameWithType: ClientLogger.verbose
  fullName: com.azure.core.util.logging.ClientLogger.verbose
  package: com.azure.core.util.logging
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.core.util.logging.ClientLogger.info*
  name: info
  nameWithType: ClientLogger.info
  fullName: com.azure.core.util.logging.ClientLogger.info
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.ClientLogger.warning*
  name: warning
  nameWithType: ClientLogger.warning
  fullName: com.azure.core.util.logging.ClientLogger.warning
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.ClientLogger.error*
  name: error
  nameWithType: ClientLogger.error
  fullName: com.azure.core.util.logging.ClientLogger.error
  package: com.azure.core.util.logging
- uid: java.lang.RuntimeException
  spec.java:
  - uid: java.lang.RuntimeException
    name: RuntimeException
    fullName: java.lang.RuntimeException
- uid: com.azure.core.util.logging.ClientLogger.logExceptionAsWarning*
  name: logExceptionAsWarning
  nameWithType: ClientLogger.logExceptionAsWarning
  fullName: com.azure.core.util.logging.ClientLogger.logExceptionAsWarning
  package: com.azure.core.util.logging
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.core.util.logging.ClientLogger.logThowableAsWarning*
  name: <T>logThowableAsWarning
  nameWithType: ClientLogger.<T>logThowableAsWarning
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThowableAsWarning
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.ClientLogger.logThrowableAsWarning*
  name: <T>logThrowableAsWarning
  nameWithType: ClientLogger.<T>logThrowableAsWarning
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsWarning
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.ClientLogger.logExceptionAsError*
  name: logExceptionAsError
  nameWithType: ClientLogger.logExceptionAsError
  fullName: com.azure.core.util.logging.ClientLogger.logExceptionAsError
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.ClientLogger.logThrowableAsError*
  name: <T>logThrowableAsError
  nameWithType: ClientLogger.<T>logThrowableAsError
  fullName: com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError
  package: com.azure.core.util.logging
- uid: com.azure.core.util.logging.LogLevel
  name: LogLevel
  nameWithType: LogLevel
  fullName: com.azure.core.util.logging.LogLevel
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.util.logging.ClientLogger.canLogAtLevel*
  name: canLogAtLevel
  nameWithType: ClientLogger.canLogAtLevel
  fullName: com.azure.core.util.logging.ClientLogger.canLogAtLevel
  package: com.azure.core.util.logging
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
