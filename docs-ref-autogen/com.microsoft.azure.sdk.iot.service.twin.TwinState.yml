### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.TwinState(String json)
  name: TwinState(String json)
  nameWithType: TwinState.TwinState(String json)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the JSON received from the service. It cannot be<code>null 

          </code> or empty. </p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new instance of the TwinState parsing the provided string as a JSON with the full Twin information.</p>

    <p></p>
  syntax: public TwinState(String json)
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.TwinState(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.TwinState(TwinCollection tags, TwinCollection desiredProperty, TwinCollection reportedProperty)
  name: TwinState(TwinCollection tags, TwinCollection desiredProperty, TwinCollection reportedProperty)
  nameWithType: TwinState.TwinState(TwinCollection tags, TwinCollection desiredProperty, TwinCollection reportedProperty)
  parameters:
  - description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinCollection" data-throw-if-not-resolved="false" data-raw-source="TwinCollection"></xref> with the initial tags state. It can be<code>null 

          </code> . </p>
    name: tags
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinCollection" data-throw-if-not-resolved="false" data-raw-source="TwinCollection"></xref> with the desired properties. It can be<code>null 

          </code> . </p>
    name: desiredProperty
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinCollection" data-throw-if-not-resolved="false" data-raw-source="TwinCollection"></xref> with the reported properties. It can be<code>null 

          </code> . </p>
    name: reportedProperty
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: "<p>CONSTRUCTOR</p>\r\n<p>This constructor creates an instance of the TwinState with the provided <xref uid=\"com.microsoft.azure.sdk.iot.service.twin.TwinCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TwinCollection\"></xref> tags and desired properties.</p>\r\n<p>When serialized, this class will looks like the following example: <pre><code>\"initialTwin\": {\r\n        \"tags\":{\r\n            \"SpeedUnity\":\"MPH\",\r\n            \"$version\":4\r\n        }\r\n        \"properties\":{\r\n            \"desired\":{\r\n                \"MaxSpeed\":{\r\n                    \"Value\":500,\r\n                    \"NewValue\":300\r\n                },\r\n                \"$version\":4\r\n            }\r\n        }\r\n    }\r\n    </code> \r\n    }\r\n</pre></p>\r\n<p></p>"
  syntax: public TwinState(TwinCollection tags, TwinCollection desiredProperty, TwinCollection reportedProperty)
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.TwinState(TwinCollection,TwinCollection,TwinCollection)
fields:
- field:
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinConnectionState?alt=com.microsoft.azure.sdk.iot.service.twin.TwinConnectionState&text=TwinConnectionState" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.connectionState
  name: connectionState
  nameWithType: TwinState.connectionState
  syntax: protected TwinConnectionState connectionState= null
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.connectionState
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromDesiredPropertyJson(String json)
  name: createFromDesiredPropertyJson(String json)
  nameWithType: TwinState.createFromDesiredPropertyJson(String json)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the JSON received from the service. It cannot be<code>null 

          </code> or empty. </p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>The new instance of the<code>TwinState 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinState?alt=com.microsoft.azure.sdk.iot.service.twin.TwinState&text=TwinState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory</p>

    <p>Create a new instance of the TwinState parsing the provided string as a JSON with only desired properties information.</p>

    <p></p>
  syntax: public static TwinState createFromDesiredPropertyJson(String json)
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromDesiredPropertyJson(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromPropertiesJson(String json)
  name: createFromPropertiesJson(String json)
  nameWithType: TwinState.createFromPropertiesJson(String json)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the JSON received from the service. It cannot be<code>null 

          </code> or empty. </p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>The new instance of the<code>TwinState 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinState?alt=com.microsoft.azure.sdk.iot.service.twin.TwinState&text=TwinState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory</p>

    <p>Create a new instance of the TwinState parsing the provided string as a JSON with only desired properties information.</p>

    <p></p>
  syntax: public static TwinState createFromPropertiesJson(String json)
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromPropertiesJson(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromReportedPropertyJson(String json)
  name: createFromReportedPropertyJson(String json)
  nameWithType: TwinState.createFromReportedPropertyJson(String json)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the JSON received from the service. It cannot be<code>null 

          </code> or empty. </p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>The new instance of the<code>TwinState 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinState?alt=com.microsoft.azure.sdk.iot.service.twin.TwinState&text=TwinState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory</p>

    <p>Create a new instance of the TwinState parsing the provided string as a JSON with only reported properties information.</p>

    <p></p>
  syntax: public static TwinState createFromReportedPropertyJson(String json)
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.createFromReportedPropertyJson(String)
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.getConnectionState()
  name: getConnectionState()
  nameWithType: TwinState.getConnectionState()
  returns:
    description: <p>the connection state </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Get the connection state </p>
  syntax: public String getConnectionState()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.getConnectionState()
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.getDesiredProperties()
  name: getDesiredProperties()
  nameWithType: TwinState.getDesiredProperties()
  returns:
    description: >-
      <p>The<code>TwinCollection 

          </code> with the desired property content. It can be<code>null 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the desired property.</p>

    <p></p>
  syntax: public TwinCollection getDesiredProperties()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.getDesiredProperties()
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.getReportedProperties()
  name: getReportedProperties()
  nameWithType: TwinState.getReportedProperties()
  returns:
    description: >-
      <p>The<code>TwinCollection 

          </code> with the reported property content. It can be<code>null 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the reported property.</p>

    <p></p>
  syntax: public TwinCollection getReportedProperties()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.getReportedProperties()
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.getTags()
  name: getTags()
  nameWithType: TwinState.getTags()
  returns:
    description: >-
      <p>The<code>TwinCollection 

          </code> with the tags content. It can be<code>null 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.service.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the tags.</p>

    <p></p>
  syntax: public TwinCollection getTags()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.getTags()
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.toJsonElement()
  name: toJsonElement()
  nameWithType: TwinState.toJsonElement()
  returns:
    description: >-
      <p>The<code>JsonElement 

          </code> with the content of this class. </p>
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Serializer</p>

    <p>Creates a<code>JsonElement 

        </code> , which the content represents the information in this class and its subclasses in a JSON format.</p>

    <p>This is useful if the caller will integrate this JSON with JSON from other classes to generate a consolidated JSON. </p>

    <p></p>
  syntax: public JsonElement toJsonElement()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.toJsonElement()
- fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState.toString()
  name: toString()
  nameWithType: TwinState.toString()
  returns:
    description: >-
      <p>The<code>String 

          </code> with the pretty print JSON. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a pretty print JSON with the content of this class and subclasses.</p>

    <p></p>
  syntax: public String toString()
  uid: com.microsoft.azure.sdk.iot.service.twin.TwinState.toString()
nameWithType: TwinState
syntax: public class TwinState
type: class
uid: com.microsoft.azure.sdk.iot.service.twin.TwinState
fullName: com.microsoft.azure.sdk.iot.service.twin.TwinState
name: TwinState
package: com.microsoft.azure.sdk.iot.service.twin
summary: >-
  <p>Representation of a single Twin.</p>

  <p>The TwinState can contain one <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinCollection" data-throw-if-not-resolved="false" data-raw-source="TwinCollection"></xref> of <b>Tags</b>, and one <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinCollection" data-throw-if-not-resolved="false" data-raw-source="TwinCollection"></xref> of <b>properties.desired</b>.</p>

  <p>Each entity in the collections can contain a associated <xref uid="com.microsoft.azure.sdk.iot.service.twin.TwinMetadata" data-throw-if-not-resolved="false" data-raw-source="TwinMetadata"></xref>.</p>

  <p>These metadata are provided by the Service and contains information about the last updated date time, and version.</p>

  <p>For instance, the following is a valid TwinState, represented as <code>initialTwin 

      </code> in the rest API. <pre><code>{

          "initialTwin": {

              "tags":{

                  "SpeedUnity":"MPH",

                  "$metadata":{

                      "$lastUpdated":"2017-09-21T02:07:44.238Z",

                      "$lastUpdatedVersion":4,

                      "SpeedUnity":{

                          "$lastUpdated":"2017-09-21T02:07:44.238Z",

                          "$lastUpdatedVersion":4

                      }

                  },

                  "$version":4

              },

              "properties":{

                  "desired": {

                      "MaxSpeed":{

                          "Value":500,

                          "NewValue":300

                      },

                      "$metadata":{

                          "$lastUpdated":"2017-09-21T02:07:44.238Z",

                          "$lastUpdatedVersion":4,

                          "MaxSpeed":{

                              "$lastUpdated":"2017-09-21T02:07:44.238Z",

                              "$lastUpdatedVersion":4,

                              "Value":{

                                  "$lastUpdated":"2017-09-21T02:07:44.238Z",

                                  "$lastUpdatedVersion":4

                              },

                              "NewValue":{

                                  "$lastUpdated":"2017-09-21T02:07:44.238Z",

                                  "$lastUpdatedVersion":4

                              }

                          }

                      },

                      "$version":4

                  },

                  "reported": {

                      "MaxSpeed":{

                          "Value":500,

                          "NewValue":300

                      },

                      "$metadata":{

                          "$lastUpdated":"2017-09-21T02:07:44.238Z",

                          "$lastUpdatedVersion":5,

                          "MaxSpeed":{

                              "$lastUpdated":"2017-09-21T02:07:44.238Z",

                              "$lastUpdatedVersion":4,

                              "Value":{

                                  "$lastUpdated":"2017-09-21T02:07:44.238Z",

                                  "$lastUpdatedVersion":5

                              },

                              "NewValue":{

                                  "$lastUpdated":"2017-09-21T02:07:44.238Z",

                                  "$lastUpdatedVersion":4

                              }

                          }

                      },

                      "$version":6

                  }

              }

          }

      }

      </code></pre></p>

  <p></p>
metadata: {}
