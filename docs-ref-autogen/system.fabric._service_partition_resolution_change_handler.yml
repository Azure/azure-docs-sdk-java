items:
- uid: system.fabric._service_partition_resolution_change_handler
  id: _service_partition_resolution_change_handler
  parent: system.fabric
  children:
  - system.fabric._service_partition_resolution_change_handler.onChange(FabricClient,long,ResolvedServicePartition)
  href: system.fabric._service_partition_resolution_change_handler.yml
  langs:
  - java
  name: ServicePartitionResolutionChangeHandler
  nameWithType: ServicePartitionResolutionChangeHandler
  fullName: system.fabric.ServicePartitionResolutionChangeHandler
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/ServicePartitionResolutionChangeHandler.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/ServicePartitionResolutionChangeHandler.java
    startLine: 2
  package: system.fabric
  syntax:
    content: public interface ServicePartitionResolutionChangeHandler
- uid: system.fabric._service_partition_resolution_change_handler.onChange(FabricClient,long,ResolvedServicePartition)
  id: onChange(FabricClient,long,ResolvedServicePartition)
  parent: system.fabric._service_partition_resolution_change_handler
  href: system.fabric._service_partition_resolution_change_handler.yml
  langs:
  - java
  name: onChange(FabricClient fClient, long handlerId, ResolvedServicePartition partitionPtr)
  nameWithType: ServicePartitionResolutionChangeHandler.onChange(FabricClient fClient, long handlerId, ResolvedServicePartition partitionPtr)
  fullName: void system.fabric.ServicePartitionResolutionChangeHandler.onChange(FabricClient fClient, long handlerId, ResolvedServicePartition partitionPtr)
  overload: system.fabric._service_partition_resolution_change_handler.onChange*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ServicePartitionResolutionChangeHandler.java
    startLine: 14
  package: system.fabric
  summary: >-
    <p>Handler method to be overriden by implementing class to specify what operation(s) to perform when onChange gets called.</p>

    <p></p>
  syntax:
    content: public void onChange(FabricClient fClient, long handlerId, ResolvedServicePartition partitionPtr)
    parameters:
    - id: fClient
      type: system.fabric._fabric_client
      description: '<p>: <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref></p>'
    - id: handlerId
      type: 0364520f
      description: '<p>: Id for ServicePartitionResolutionChange Handler </p>'
    - id: partitionPtr
      type: system.fabric._resolved_service_partition
      description: '<p>: <xref href="system.fabric._resolved_service_partition" data-throw-if-not-resolved="false"></xref></p>'
references:
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric._service_partition_resolution_change_handler.onChange*
  name: onChange
  nameWithType: ServicePartitionResolutionChangeHandler.onChange
  fullName: void system.fabric.ServicePartitionResolutionChangeHandler.onChange
  package: system.fabric
- uid: system.fabric._fabric_client
  parent: system.fabric
  href: system.fabric._fabric_client.yml
  name: FabricClient
  nameWithType: FabricClient
  fullName: system.fabric.FabricClient
  type: Class
  summary: >-
    <p>Creates and manages Service Fabric services and other entities. </p>

    <p>

      <bold>Remarks:</bold>It is highly recommended that you share FabricClients as much as possible. This is because the <xref href="system.fabric._fabric_client" data-throw-if-not-resolved="false"></xref> has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise. </p>
  syntax:
    content: public class FabricClient
- uid: system.fabric._resolved_service_partition
  parent: system.fabric
  href: system.fabric._resolved_service_partition.yml
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: system.fabric.ResolvedServicePartition
  type: Class
  summary: >-
    <p>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</p>

    <p></p>
  syntax:
    content: public class ResolvedServicePartition
