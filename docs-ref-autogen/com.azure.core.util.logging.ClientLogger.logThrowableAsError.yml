### YamlMime:JavaMember
uid: "com.azure.core.util.logging.ClientLogger.logThrowableAsError*"
fullName: "com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError"
name: "<T>logThrowableAsError"
nameWithType: "ClientLogger.<T>logThrowableAsError"
members:
- uid: "com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError(T)"
  fullName: "com.azure.core.util.logging.ClientLogger.<T>logThrowableAsError(T throwable)"
  name: "<T>logThrowableAsError(T throwable)"
  nameWithType: "ClientLogger.<T>logThrowableAsError(T throwable)"
  summary: "Logs the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref> at the error level and returns it to be thrown.\n\nThis API covers the cases where a checked exception type needs to be thrown and logged. If a <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> is being logged use <xref uid=\"com.azure.core.util.logging.ClientLogger.logExceptionAsError(java.lang.RuntimeException)\" data-throw-if-not-resolved=\"false\">#logExceptionAsError(RuntimeException)</xref> instead."
  parameters:
  - description: "Throwable to be logged and returned."
    name: "throwable"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>logThrowableAsError(T throwable)"
  returns:
    description: "The passed <xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref>."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.util.logging"
artifact: com.azure:azure-core:1.9.0
