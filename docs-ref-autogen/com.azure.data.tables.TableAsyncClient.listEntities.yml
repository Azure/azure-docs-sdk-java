### YamlMime:JavaMember
uid: "com.azure.data.tables.TableAsyncClient.listEntities*"
fullName: "com.azure.data.tables.TableAsyncClient.listEntities"
name: "listEntities"
nameWithType: "TableAsyncClient.listEntities"
members:
- uid: "com.azure.data.tables.TableAsyncClient.listEntities()"
  fullName: "com.azure.data.tables.TableAsyncClient.listEntities()"
  name: "listEntities()"
  nameWithType: "TableAsyncClient.listEntities()"
  summary: "Lists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table.\n\n**Code Samples**\n\nLists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on the table. Prints out the details of the retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref>.\n\n```java\ntableAsyncClient.listEntities()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableEntity ->\n         System.out.printf(\"Retrieved entity with partition key '%s' and row key '%s'.%n\",\n             tableEntity.getPartitionKey(), tableEntity.getRowKey()));\n```"
  syntax: "public PagedFlux<TableEntity> listEntities()"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)"
  fullName: "com.azure.data.tables.TableAsyncClient.listEntities(ListEntitiesOptions options)"
  name: "listEntities(ListEntitiesOptions options)"
  nameWithType: "TableAsyncClient.listEntities(ListEntitiesOptions options)"
  summary: "Lists <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> using the parameters in the provided options.\n\nIf the `filter` parameter in the options is set, only <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> matching the filter will be returned. If the `select` parameter is set, only the properties included in the select parameter will be returned for each <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>. If the `top` parameter is set, the maximum number of returned <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> per page will be limited to that value.\n\n**Code Samples**\n\nLists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on the table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and all the retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref>.\n\n```java\nList<String> propertiesToSelect = new ArrayList<>();\n propertiesToSelect.add(\"name\");\n propertiesToSelect.add(\"lastname\");\n propertiesToSelect.add(\"age\");\n\n ListEntitiesOptions listEntitiesOptions = new ListEntitiesOptions()\n     .setTop(15)\n     .setFilter(\"PartitionKey eq 'MyPartitionKey' and RowKey eq 'MyRowKey'\")\n     .setSelect(propertiesToSelect);\n\n tableAsyncClient.listEntities(listEntitiesOptions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableEntity -> {\n         System.out.printf(\"Retrieved entity with partition key '%s', row key '%s' and properties:%n\",\n             tableEntity.getPartitionKey(), tableEntity.getRowKey());\n\n         tableEntity.getProperties().forEach((key, value) ->\n             System.out.printf(\"Name: '%s'. Value: '%s'.%n\", key, value));\n     });\n```"
  parameters:
  - description: "The <code>filter</code>, <code>select</code>, and <code>top</code> OData query options to apply to this\n operation."
    name: "options"
    type: "<xref href=\"com.azure.data.tables.models.ListEntitiesOptions?alt=com.azure.data.tables.models.ListEntitiesOptions&text=ListEntitiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TableEntity> listEntities(ListEntitiesOptions options)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing matching <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.data.tables"
artifact: com.azure:azure-data-tables:12.2.1
