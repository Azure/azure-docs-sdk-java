### YamlMime:JavaMember
nameWithType: IMessageReceiver.renewMessageLock
type: method
members:
- fullName: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)
  name: renewMessageLock(IMessage message)
  nameWithType: IMessageReceiver.renewMessageLock(IMessage message)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false">Message</xref> to be renewed </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if renew failed </p>
  returns:
    description: <p>The new locked until UTC time. </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEKLOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value.</p>

    <p></p>
  syntax: public Instant renewMessageLock(IMessage message)
  uid: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage)
- fullName: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(UUID lockToken)
  name: renewMessageLock(UUID lockToken)
  nameWithType: IMessageReceiver.renewMessageLock(UUID lockToken)
  parameters:
  - description: <p>Message lock token <xref uid="com.microsoft.azure.servicebus.Message.getLockToken()" data-throw-if-not-resolved="false">Message#getLockToken()</xref></p>
    name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if renew failed </p>
  returns:
    description: <p>The new locked until UTC time. </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEKLOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value.</p>

    <p>Note - calling this will not update <xref uid="com.microsoft.azure.servicebus.Message.getLockedUntilUtc()" data-throw-if-not-resolved="false">Message#getLockedUntilUtc()</xref> and updated lockedUntilUtc must be tracked by the application. </p>
  syntax: public Instant renewMessageLock(UUID lockToken)
  uid: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(UUID)
uid: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock*
fullName: com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage message)
name: renewMessageLock(IMessage message)
package: com.microsoft.azure.servicebus
metadata: {}
