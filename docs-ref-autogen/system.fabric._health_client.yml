items:
- uid: system.fabric._health_client
  id: _health_client
  parent: system.fabric
  children:
  - system.fabric._health_client.close()
  - system.fabric._health_client.getApplicationHealthAsync(ApplicationHealthQueryDescription)
  - system.fabric._health_client.getApplicationHealthAsync(ApplicationHealthQueryDescription,Duration)
  - system.fabric._health_client.getApplicationHealthAsync(URI)
  - system.fabric._health_client.getApplicationHealthAsync(URI,ApplicationHealthPolicy)
  - system.fabric._health_client.getApplicationHealthAsync(URI,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getApplicationHealthAsync(URI,Duration)
  - system.fabric._health_client.getClusterHealthAsync()
  - system.fabric._health_client.getClusterHealthAsync(ClusterHealthPolicy)
  - system.fabric._health_client.getClusterHealthAsync(ClusterHealthPolicy,Duration)
  - system.fabric._health_client.getClusterHealthAsync(ClusterHealthQueryDescription)
  - system.fabric._health_client.getClusterHealthAsync(ClusterHealthQueryDescription,Duration)
  - system.fabric._health_client.getClusterHealthAsync(Duration)
  - system.fabric._health_client.getClusterHealthChunkAsync()
  - system.fabric._health_client.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription)
  - system.fabric._health_client.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription,Duration)
  - system.fabric._health_client.getClusterHealthChunkAsync(Duration)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription,Duration)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,Duration)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription,Duration)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,Duration)
  - system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription)
  - system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription,Duration)
  - system.fabric._health_client.getNodeHealthAsync(String)
  - system.fabric._health_client.getNodeHealthAsync(String,ClusterHealthPolicy)
  - system.fabric._health_client.getNodeHealthAsync(String,ClusterHealthPolicy,Duration)
  - system.fabric._health_client.getNodeHealthAsync(String,Duration)
  - system.fabric._health_client.getPartitionHealthAsync(PartitionHealthQueryDescription)
  - system.fabric._health_client.getPartitionHealthAsync(PartitionHealthQueryDescription,Duration)
  - system.fabric._health_client.getPartitionHealthAsync(UUID)
  - system.fabric._health_client.getPartitionHealthAsync(UUID,ApplicationHealthPolicy)
  - system.fabric._health_client.getPartitionHealthAsync(UUID,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getPartitionHealthAsync(UUID,Duration)
  - system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription)
  - system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription,Duration)
  - system.fabric._health_client.getReplicaHealthAsync(UUID,long)
  - system.fabric._health_client.getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy)
  - system.fabric._health_client.getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getReplicaHealthAsync(UUID,long,Duration)
  - system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription)
  - system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription,Duration)
  - system.fabric._health_client.getServiceHealthAsync(URI)
  - system.fabric._health_client.getServiceHealthAsync(URI,ApplicationHealthPolicy)
  - system.fabric._health_client.getServiceHealthAsync(URI,ApplicationHealthPolicy,Duration)
  - system.fabric._health_client.getServiceHealthAsync(URI,Duration)
  - system.fabric._health_client.reportHealth(HealthReport)
  href: system.fabric._health_client.yml
  langs:
  - java
  name: HealthClient
  nameWithType: HealthClient
  fullName: system.fabric.HealthClient
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 38
  package: system.fabric
  summary: <p>Represents the health client used to perform health related operations, like report and query health. </p>
  syntax:
    content: public class HealthClient
  inheritance:
  - java.lang.Object
  - AutoCloseable
  inheritedMembers:
  - system.fabric._health_client.BeginGetApplicationHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetClusterHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetClusterHealthChunk(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetDeployedApplicationHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetDeployedServicePackageHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetNodeHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetPartitionHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetReplicaHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.BeginGetServiceHealth2(long,long,long,NativeAsyncCallback)
  - system.fabric._health_client.EndGetApplicationHealth2(long,long)
  - system.fabric._health_client.EndGetClusterHealth2(long,long)
  - system.fabric._health_client.EndGetClusterHealthChunk(long,long)
  - system.fabric._health_client.EndGetDeployedApplicationHealth2(long,long)
  - system.fabric._health_client.EndGetDeployedServicePackageHealth2(long,long)
  - system.fabric._health_client.EndGetNodeHealth2(long,long)
  - system.fabric._health_client.EndGetPartitionHealth2(long,long)
  - system.fabric._health_client.EndGetReplicaHealth2(long,long)
  - system.fabric._health_client.EndGetServiceHealth2(long,long)
  - system.fabric._health_client.GetHealthClient(long)
  - system.fabric._health_client.HealthClient(long)
  - system.fabric._health_client.healthClientPtr()
  - system.fabric._health_client.Release(long)
  - system.fabric._health_client.ReportHealth(long,int,String,String,String,int,long,long,boolean,String)
- uid: system.fabric._health_client.close()
  id: close()
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: close()
  nameWithType: HealthClient.close()
  fullName: void system.fabric.HealthClient.close()
  overload: system.fabric._health_client.close*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1322
  package: system.fabric
  syntax:
    content: public void close()
- uid: system.fabric._health_client.getApplicationHealthAsync(ApplicationHealthQueryDescription)
  id: getApplicationHealthAsync(ApplicationHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 435
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._application_health_query_description
      description: <p>The query description. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health reports of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(ApplicationHealthQueryDescription,Duration)
  id: getApplicationHealthAsync(ApplicationHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 456
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._application_health_query_description
      description: <p>The query description. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health reports of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(URI)
  id: getApplicationHealthAsync(URI)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(URI applicationName)
  nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 366
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(URI,ApplicationHealthPolicy)
  id: getApplicationHealthAsync(URI,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 381
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the application. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health reports of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(URI,ApplicationHealthPolicy,Duration)
  id: getApplicationHealthAsync(URI,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 418
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the application health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health reports of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(URI,Duration)
  id: getApplicationHealthAsync(URI,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getApplicationHealthAsync(URI applicationName, Duration timeout)
  nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName, Duration timeout)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName, Duration timeout)
  overload: system.fabric._health_client.getApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 400
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health reports of the specified Service Fabric application. </p>
- uid: system.fabric._health_client.getClusterHealthAsync()
  id: getClusterHealthAsync()
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync()
  nameWithType: HealthClient.getClusterHealthAsync()
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync()
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 165
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync()
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthAsync(ClusterHealthPolicy)
  id: getClusterHealthAsync(ClusterHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync(ClusterHealthPolicy healthPolicy)
  nameWithType: HealthClient.getClusterHealthAsync(ClusterHealthPolicy healthPolicy)
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync(ClusterHealthPolicy healthPolicy)
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 179
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster, evaluating it using the specified policy.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync(ClusterHealthPolicy healthPolicy)
    parameters:
    - id: healthPolicy
      type: system.fabric._cluster_health_policy
      description: <p>The cluster health policy used to evaluate cluster health. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthAsync(ClusterHealthPolicy,Duration)
  id: getClusterHealthAsync(ClusterHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync(ClusterHealthPolicy healthPolicy, Duration timeout)
  nameWithType: HealthClient.getClusterHealthAsync(ClusterHealthPolicy healthPolicy, Duration timeout)
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync(ClusterHealthPolicy healthPolicy, Duration timeout)
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 210
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster by using the specified health policy, timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync(ClusterHealthPolicy healthPolicy, Duration timeout)
    parameters:
    - id: healthPolicy
      type: system.fabric._cluster_health_policy
      description: <p>The cluster health policy used to evaluate cluster health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthAsync(ClusterHealthQueryDescription)
  id: getClusterHealthAsync(ClusterHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync(ClusterHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getClusterHealthAsync(ClusterHealthQueryDescription queryDescription)
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync(ClusterHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 224
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster by using a query description.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync(ClusterHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._cluster_health_query_description
      description: <p>The query description that defined query parameters like health policies, filters etc. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthAsync(ClusterHealthQueryDescription,Duration)
  id: getClusterHealthAsync(ClusterHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync(ClusterHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getClusterHealthAsync(ClusterHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync(ClusterHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 244
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster by using a query description, a timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync(ClusterHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._cluster_health_query_description
      description: <p>The query description that defined query parameters like health policies, filters etc. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthAsync(Duration)
  id: getClusterHealthAsync(Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthAsync(Duration timeout)
  nameWithType: HealthClient.getClusterHealthAsync(Duration timeout)
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync(Duration timeout)
  overload: system.fabric._health_client.getClusterHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 195
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric cluster by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ClusterHealth> getClusterHealthAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
      description: <p>The health of a Service Fabric cluster. </p>
- uid: system.fabric._health_client.getClusterHealthChunkAsync()
  id: getClusterHealthChunkAsync()
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthChunkAsync()
  nameWithType: HealthClient.getClusterHealthChunkAsync()
  fullName: CompletableFuture<ClusterHealthChunk> system.fabric.HealthClient.getClusterHealthChunkAsync()
  overload: system.fabric._health_client.getClusterHealthChunkAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1060
  package: system.fabric
  summary: >-
    <p>Gets the health of a Service Fabric cluster.</p>

    <p>

      <bold>Remarks:</bold>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified. </p>
  syntax:
    content: public CompletableFuture<ClusterHealthChunk> getClusterHealthChunkAsync()
    return:
      type: 9cdf14d0system.fabric.health._cluster_health_chunka08ddfce
      description: <p>The health chunk representing the cluster health. </p>
- uid: system.fabric._health_client.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription)
  id: getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription)
  nameWithType: HealthClient.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription)
  fullName: CompletableFuture<ClusterHealthChunk> system.fabric.HealthClient.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription)
  overload: system.fabric._health_client.getClusterHealthChunkAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1097
  package: system.fabric
  summary: >-
    <p>Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.</p>

    <p>

      <bold>Remarks:</bold>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results. </p>
  syntax:
    content: public CompletableFuture<ClusterHealthChunk> getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._cluster_health_chunk_query_description
      description: <p>The query description that defines how health evaluation should be performed and what entities should be included in the <xref href="system.fabric.health._cluster_health_chunk" data-throw-if-not-resolved="false"></xref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_health_chunka08ddfce
      description: <p>The health chunk representing the cluster health. </p>
- uid: system.fabric._health_client.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription,Duration)
  id: getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<ClusterHealthChunk> system.fabric.HealthClient.getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getClusterHealthChunkAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1120
  package: system.fabric
  summary: >-
    <p>Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.</p>

    <p>

      <bold>Remarks:</bold>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results. </p>
  syntax:
    content: public CompletableFuture<ClusterHealthChunk> getClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._cluster_health_chunk_query_description
      description: <p>The query description that defines how health evaluation should be performed and what entities should be included in the <xref href="system.fabric.health._cluster_health_chunk" data-throw-if-not-resolved="false"></xref>. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref></p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_health_chunka08ddfce
      description: <p>The health chunk representing the cluster health. </p>
- uid: system.fabric._health_client.getClusterHealthChunkAsync(Duration)
  id: getClusterHealthChunkAsync(Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getClusterHealthChunkAsync(Duration timeout)
  nameWithType: HealthClient.getClusterHealthChunkAsync(Duration timeout)
  fullName: CompletableFuture<ClusterHealthChunk> system.fabric.HealthClient.getClusterHealthChunkAsync(Duration timeout)
  overload: system.fabric._health_client.getClusterHealthChunkAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1079
  package: system.fabric
  summary: >-
    <p>Gets the health of a Service Fabric cluster.</p>

    <p>

      <bold>Remarks:</bold>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified. </p>
  syntax:
    content: public CompletableFuture<ClusterHealthChunk> getClusterHealthChunkAsync(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref></p>
    return:
      type: 9cdf14d0system.fabric.health._cluster_health_chunka08ddfce
      description: <p>The health chunk representing the cluster health. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
  id: getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 884
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._deployed_application_health_query_description
      description: <p>The query description </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription,Duration)
  id: getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 905
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._deployed_application_health_query_description
      description: <p>The query description </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String)
  id: getDeployedApplicationHealthAsync(URI,String)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(URI applicationName, String nodeName)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 798
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(URI applicationName, String nodeName)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The node name where the Service Fabric application is deployed. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy)
  id: getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 818
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The node name where the Service Fabric application is deployed. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate entity health. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy,Duration)
  id: getDeployedApplicationHealthAsync(URI,String,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 865
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(URI applicationName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The node name where the Service Fabric application is deployed. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync(URI,String,Duration)
  id: getDeployedApplicationHealthAsync(URI,String,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedApplicationHealthAsync(URI applicationName, String nodeName, Duration timeout)
  nameWithType: HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, Duration timeout)
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync(URI applicationName, String nodeName, Duration timeout)
  overload: system.fabric._health_client.getDeployedApplicationHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 841
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedApplicationHealth> getDeployedApplicationHealthAsync(URI applicationName, String nodeName, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The node name where the Service Fabric application is deployed. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
      description: <p>The health of a deployed Service Fabric application. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)
  id: getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1019
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._deployed_service_package_health_query_description
      description: <p>The query description </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription,Duration)
  id: getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1039
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._deployed_service_package_health_query_description
      description: <p>The query description </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String)
  id: getDeployedServicePackageHealthAsync(URI,String,String)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 927
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: serviceManifestName
      type: "26831127"
      description: <p>The name of the service manifest file for this Service Fabric service. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The name of the node that the Service Fabric service was deployed to. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy)
  id: getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 949
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: serviceManifestName
      type: "26831127"
      description: <p>The name of the service manifest file for this Service Fabric service. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The name of the node that the Service Fabric service was deployed to. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy,Duration)
  id: getDeployedServicePackageHealthAsync(URI,String,String,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 1000
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: serviceManifestName
      type: "26831127"
      description: <p>The name of the service manifest file for this Service Fabric service. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The name of the node that the Service Fabric service was deployed to. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>.. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync(URI,String,String,Duration)
  id: getDeployedServicePackageHealthAsync(URI,String,String,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, Duration timeout)
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, Duration timeout)
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, Duration timeout)
  overload: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 974
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a deployed Service Fabric service package.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<DeployedServicePackageHealth> getDeployedServicePackageHealthAsync(URI applicationName, String serviceManifestName, String nodeName, Duration timeout)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    - id: serviceManifestName
      type: "26831127"
      description: <p>The name of the service manifest file for this Service Fabric service. </p>
    - id: nodeName
      type: "26831127"
      description: <p>The name of the node that the Service Fabric service was deployed to. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>.. </p>
    return:
      type: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
      description: <p>The health of a deployed Service Fabric service package. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription)
  id: getNodeHealthAsync(NodeHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(NodeHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getNodeHealthAsync(NodeHealthQueryDescription queryDescription)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(NodeHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 328
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(NodeHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._node_health_query_description
      description: <p>The query description that defines parameters like health policy, filters etc. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription,Duration)
  id: getNodeHealthAsync(NodeHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(NodeHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getNodeHealthAsync(NodeHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(NodeHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 348
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(NodeHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._node_health_query_description
      description: <p>The query description that defines parameters like health policy, filters etc. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(String)
  id: getNodeHealthAsync(String)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(String nodeName)
  nameWithType: HealthClient.getNodeHealthAsync(String nodeName)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(String nodeName)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 262
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(String nodeName)
    parameters:
    - id: nodeName
      type: "26831127"
      description: <p>The Service Fabric node name. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(String,ClusterHealthPolicy)
  id: getNodeHealthAsync(String,ClusterHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy)
  nameWithType: HealthClient.getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 276
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy)
    parameters:
    - id: nodeName
      type: "26831127"
      description: <p>The Service Fabric node name. </p>
    - id: healthPolicy
      type: system.fabric._cluster_health_policy
      description: <p>The cluster health policy used to evaluate the node health. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(String,ClusterHealthPolicy,Duration)
  id: getNodeHealthAsync(String,ClusterHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy, Duration timeout)
  nameWithType: HealthClient.getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy, Duration timeout)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy, Duration timeout)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 311
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(String nodeName, ClusterHealthPolicy healthPolicy, Duration timeout)
    parameters:
    - id: nodeName
      type: "26831127"
      description: <p>The Service Fabric node. </p>
    - id: healthPolicy
      type: system.fabric._cluster_health_policy
      description: <p>The cluster health policy used to evaluate the node health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getNodeHealthAsync(String,Duration)
  id: getNodeHealthAsync(String,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getNodeHealthAsync(String nodeName, Duration timeout)
  nameWithType: HealthClient.getNodeHealthAsync(String nodeName, Duration timeout)
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync(String nodeName, Duration timeout)
  overload: system.fabric._health_client.getNodeHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 293
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<NodeHealth> getNodeHealthAsync(String nodeName, Duration timeout)
    parameters:
    - id: nodeName
      type: "26831127"
      description: <p>The Service Fabric node. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._node_healtha08ddfce
      description: <p>The health of a Service Fabric node. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(PartitionHealthQueryDescription)
  id: getPartitionHealthAsync(PartitionHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 645
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._partition_health_query_description
      description: <p>The query description. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(PartitionHealthQueryDescription,Duration)
  id: getPartitionHealthAsync(PartitionHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 665
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(PartitionHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._partition_health_query_description
      description: <p>The query description. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(UUID)
  id: getPartitionHealthAsync(UUID)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(UUID partitionId)
  nameWithType: HealthClient.getPartitionHealthAsync(UUID partitionId)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(UUID partitionId)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 580
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(UUID partitionId)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(UUID,ApplicationHealthPolicy)
  id: getPartitionHealthAsync(UUID,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 594
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(UUID,ApplicationHealthPolicy,Duration)
  id: getPartitionHealthAsync(UUID,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 629
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(UUID partitionId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getPartitionHealthAsync(UUID,Duration)
  id: getPartitionHealthAsync(UUID,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getPartitionHealthAsync(UUID partitionId, Duration timeout)
  nameWithType: HealthClient.getPartitionHealthAsync(UUID partitionId, Duration timeout)
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync(UUID partitionId, Duration timeout)
  overload: system.fabric._health_client.getPartitionHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 612
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric partition.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionHealth> getPartitionHealthAsync(UUID partitionId, Duration timeout)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._partition_healtha08ddfce
      description: <p>The health of a Service Fabric partition. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription)
  id: getReplicaHealthAsync(ReplicaHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 758
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._replica_health_query_description
      description: <p>The query description. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription,Duration)
  id: getReplicaHealthAsync(ReplicaHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 777
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._replica_health_query_description
      description: <p>The query description. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(UUID,long)
  id: getReplicaHealthAsync(UUID,long)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(UUID partitionId, long replicaId)
  nameWithType: HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 685
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(UUID partitionId, long replicaId)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: replicaId
      type: 0364520f
      description: <p>The ID of the Service Fabric replica. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy)
  id: getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 701
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: replicaId
      type: 0364520f
      description: <p>The ID of the Service Fabric replica. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy,Duration)
  id: getReplicaHealthAsync(UUID,long,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 741
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(UUID partitionId, long replicaId, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: replicaId
      type: 0364520f
      description: <p>The ID of the Service Fabric replica. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getReplicaHealthAsync(UUID,long,Duration)
  id: getReplicaHealthAsync(UUID,long,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getReplicaHealthAsync(UUID partitionId, long replicaId, Duration timeout)
  nameWithType: HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, Duration timeout)
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync(UUID partitionId, long replicaId, Duration timeout)
  overload: system.fabric._health_client.getReplicaHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 722
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric replica.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ReplicaHealth> getReplicaHealthAsync(UUID partitionId, long replicaId, Duration timeout)
    parameters:
    - id: partitionId
      type: add9545a
      description: <p>The ID of the Service Fabric partition. </p>
    - id: replicaId
      type: 0364520f
      description: <p>The ID of the Service Fabric replica. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._replica_healtha08ddfce
      description: <p>The health of a Service Fabric replica. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription)
  id: getServiceHealthAsync(ServiceHealthQueryDescription)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(ServiceHealthQueryDescription queryDescription)
  nameWithType: HealthClient.getServiceHealthAsync(ServiceHealthQueryDescription queryDescription)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(ServiceHealthQueryDescription queryDescription)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 542
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(ServiceHealthQueryDescription queryDescription)
    parameters:
    - id: queryDescription
      type: system.fabric._service_health_query_description
      description: <p>The query description. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription,Duration)
  id: getServiceHealthAsync(ServiceHealthQueryDescription,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(ServiceHealthQueryDescription queryDescription, Duration timeout)
  nameWithType: HealthClient.getServiceHealthAsync(ServiceHealthQueryDescription queryDescription, Duration timeout)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(ServiceHealthQueryDescription queryDescription, Duration timeout)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 562
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(ServiceHealthQueryDescription queryDescription, Duration timeout)
    parameters:
    - id: queryDescription
      type: system.fabric._service_health_query_description
      description: <p>The query description. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(URI)
  id: getServiceHealthAsync(URI)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(URI serviceName)
  nameWithType: HealthClient.getServiceHealthAsync(URI serviceName)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(URI serviceName)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 474
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(URI serviceName)
    parameters:
    - id: serviceName
      type: "62304784"
      description: <p>The name of the Service Fabric service. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(URI,ApplicationHealthPolicy)
  id: getServiceHealthAsync(URI,ApplicationHealthPolicy)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy)
  nameWithType: HealthClient.getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 488
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy)
    parameters:
    - id: serviceName
      type: "62304784"
      description: <p>The name of the Service Fabric service. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate service health. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(URI,ApplicationHealthPolicy,Duration)
  id: getServiceHealthAsync(URI,ApplicationHealthPolicy,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  nameWithType: HealthClient.getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 525
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(URI serviceName, ApplicationHealthPolicy applicationHealthPolicy, Duration timeout)
    parameters:
    - id: serviceName
      type: "62304784"
      description: <p>The name of the Service Fabric service. </p>
    - id: applicationHealthPolicy
      type: system.fabric._application_health_policy
      description: <p>The application health policy used to evaluate the entity health. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.getServiceHealthAsync(URI,Duration)
  id: getServiceHealthAsync(URI,Duration)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: getServiceHealthAsync(URI serviceName, Duration timeout)
  nameWithType: HealthClient.getServiceHealthAsync(URI serviceName, Duration timeout)
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync(URI serviceName, Duration timeout)
  overload: system.fabric._health_client.getServiceHealthAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 507
  package: system.fabric
  summary: >-
    <p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ServiceHealth> getServiceHealthAsync(URI serviceName, Duration timeout)
    parameters:
    - id: serviceName
      type: "62304784"
      description: <p>The name of the Service Fabric service. </p>
    - id: timeout
      type: e02a2de0
      description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <ref refid="" kindref="compound">java.util.concurrent.TimeoutException</ref>. </p>
    return:
      type: 9cdf14d0system.fabric.health._service_healtha08ddfce
      description: <p>The health of a Service Fabric service. </p>
- uid: system.fabric._health_client.reportHealth(HealthReport)
  id: reportHealth(HealthReport)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  langs:
  - java
  name: reportHealth(HealthReport healthReport)
  nameWithType: HealthClient.reportHealth(HealthReport healthReport)
  fullName: void system.fabric.HealthClient.reportHealth(HealthReport healthReport)
  overload: system.fabric._health_client.reportHealth*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/HealthClient.java
    startLine: 142
  package: system.fabric
  summary: >-
    <p>Reports health on a Service Fabric entity.</p>

    <p></p>
  syntax:
    content: public void reportHealth(HealthReport healthReport)
    parameters:
    - id: healthReport
      type: system.fabric.health._health_report
      description: <p>The health report to submit. </p>
references:
- uid: system.fabric._health_client.reportHealth*
  name: reportHealth
  nameWithType: HealthClient.reportHealth
  fullName: void system.fabric.HealthClient.reportHealth
  package: system.fabric
- uid: 9cdf14d0system.fabric.health._cluster_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._cluster_health
    name: ClusterHealth
    fullName: system.fabric.health.ClusterHealth
    href: system.fabric.health._cluster_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getClusterHealthAsync*
  name: getClusterHealthAsync
  nameWithType: HealthClient.getClusterHealthAsync
  fullName: CompletableFuture<ClusterHealth> system.fabric.HealthClient.getClusterHealthAsync
  package: system.fabric
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9cdf14d0system.fabric.health._node_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._node_health
    name: NodeHealth
    fullName: system.fabric.health.NodeHealth
    href: system.fabric.health._node_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getNodeHealthAsync*
  name: getNodeHealthAsync
  nameWithType: HealthClient.getNodeHealthAsync
  fullName: CompletableFuture<NodeHealth> system.fabric.HealthClient.getNodeHealthAsync
  package: system.fabric
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 9cdf14d0system.fabric.health._application_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._application_health
    name: ApplicationHealth
    fullName: system.fabric.health.ApplicationHealth
    href: system.fabric.health._application_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getApplicationHealthAsync*
  name: getApplicationHealthAsync
  nameWithType: HealthClient.getApplicationHealthAsync
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync
  package: system.fabric
- uid: 9cdf14d0system.fabric.health._service_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._service_health
    name: ServiceHealth
    fullName: system.fabric.health.ServiceHealth
    href: system.fabric.health._service_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getServiceHealthAsync*
  name: getServiceHealthAsync
  nameWithType: HealthClient.getServiceHealthAsync
  fullName: CompletableFuture<ServiceHealth> system.fabric.HealthClient.getServiceHealthAsync
  package: system.fabric
- uid: add9545a
  spec.java:
  - name: UUID
    fullName: UUID
- uid: 9cdf14d0system.fabric.health._partition_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._partition_health
    name: PartitionHealth
    fullName: system.fabric.health.PartitionHealth
    href: system.fabric.health._partition_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getPartitionHealthAsync*
  name: getPartitionHealthAsync
  nameWithType: HealthClient.getPartitionHealthAsync
  fullName: CompletableFuture<PartitionHealth> system.fabric.HealthClient.getPartitionHealthAsync
  package: system.fabric
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: 9cdf14d0system.fabric.health._replica_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._replica_health
    name: ReplicaHealth
    fullName: system.fabric.health.ReplicaHealth
    href: system.fabric.health._replica_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getReplicaHealthAsync*
  name: getReplicaHealthAsync
  nameWithType: HealthClient.getReplicaHealthAsync
  fullName: CompletableFuture<ReplicaHealth> system.fabric.HealthClient.getReplicaHealthAsync
  package: system.fabric
- uid: 9cdf14d0system.fabric.health._deployed_application_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._deployed_application_health
    name: DeployedApplicationHealth
    fullName: system.fabric.health.DeployedApplicationHealth
    href: system.fabric.health._deployed_application_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getDeployedApplicationHealthAsync*
  name: getDeployedApplicationHealthAsync
  nameWithType: HealthClient.getDeployedApplicationHealthAsync
  fullName: CompletableFuture<DeployedApplicationHealth> system.fabric.HealthClient.getDeployedApplicationHealthAsync
  package: system.fabric
- uid: 9cdf14d0system.fabric.health._deployed_service_package_healtha08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._deployed_service_package_health
    name: DeployedServicePackageHealth
    fullName: system.fabric.health.DeployedServicePackageHealth
    href: system.fabric.health._deployed_service_package_health.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getDeployedServicePackageHealthAsync*
  name: getDeployedServicePackageHealthAsync
  nameWithType: HealthClient.getDeployedServicePackageHealthAsync
  fullName: CompletableFuture<DeployedServicePackageHealth> system.fabric.HealthClient.getDeployedServicePackageHealthAsync
  package: system.fabric
- uid: 9cdf14d0system.fabric.health._cluster_health_chunka08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.health._cluster_health_chunk
    name: ClusterHealthChunk
    fullName: system.fabric.health.ClusterHealthChunk
    href: system.fabric.health._cluster_health_chunk.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._health_client.getClusterHealthChunkAsync*
  name: getClusterHealthChunkAsync
  nameWithType: HealthClient.getClusterHealthChunkAsync
  fullName: CompletableFuture<ClusterHealthChunk> system.fabric.HealthClient.getClusterHealthChunkAsync
  package: system.fabric
- uid: system.fabric._health_client.close*
  name: close
  nameWithType: HealthClient.close
  fullName: void system.fabric.HealthClient.close
  package: system.fabric
- uid: system.fabric._health_client.BeginGetApplicationHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetClusterHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetClusterHealthChunk(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetDeployedApplicationHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetDeployedServicePackageHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetNodeHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetPartitionHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetReplicaHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.BeginGetServiceHealth2(long,long,long,NativeAsyncCallback)
- uid: system.fabric._health_client.EndGetApplicationHealth2(long,long)
- uid: system.fabric._health_client.EndGetClusterHealth2(long,long)
- uid: system.fabric._health_client.EndGetClusterHealthChunk(long,long)
- uid: system.fabric._health_client.EndGetDeployedApplicationHealth2(long,long)
- uid: system.fabric._health_client.EndGetDeployedServicePackageHealth2(long,long)
- uid: system.fabric._health_client.EndGetNodeHealth2(long,long)
- uid: system.fabric._health_client.EndGetPartitionHealth2(long,long)
- uid: system.fabric._health_client.EndGetReplicaHealth2(long,long)
- uid: system.fabric._health_client.EndGetServiceHealth2(long,long)
- uid: system.fabric._health_client.GetHealthClient(long)
- uid: system.fabric._health_client.HealthClient(long)
- uid: system.fabric._health_client.healthClientPtr()
- uid: system.fabric._health_client.Release(long)
- uid: system.fabric._health_client.ReportHealth(long,int,String,String,String,int,long,long,boolean,String)
- uid: system.fabric.interop._native_async_callback
  parent: system.fabric.interop
  href: system.fabric.interop._native_async_callback.yml
  name: NativeAsyncCallback
  nameWithType: NativeAsyncCallback
  fullName: system.fabric.interop.NativeAsyncCallback
  type: Interface
  syntax:
    content: public interface NativeAsyncCallback
- uid: system.fabric.health._cluster_health
  parent: system.fabric.health
  href: system.fabric.health._cluster_health.yml
  name: ClusterHealth
  nameWithType: ClusterHealth
  fullName: system.fabric.health.ClusterHealth
  type: Class
  summary: <p>Represents the health of the cluster, as returned by <xref href="system.fabric._health_client.getClusterHealthAsync(ClusterHealthQueryDescription)" data-throw-if-not-resolved="false"></xref> . Contains the cluster aggregated health state and the cluster application and node health states. </p>
  syntax:
    content: public class ClusterHealth extends EntityHealth
- uid: system.fabric.health._node_health
  parent: system.fabric.health
  href: system.fabric.health._node_health.yml
  name: NodeHealth
  nameWithType: NodeHealth
  fullName: system.fabric.health.NodeHealth
  type: Class
  summary: <p>Describes the health of a node as returned by <xref href="system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class NodeHealth
- uid: system.fabric.health._application_health
  parent: system.fabric.health
  href: system.fabric.health._application_health.yml
  name: ApplicationHealth
  nameWithType: ApplicationHealth
  fullName: system.fabric.health.ApplicationHealth
  type: Class
  summary: <p>Describes the health of an application as returned by <xref href="system.fabric._health_client.getApplicationHealthAsync(URI)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ApplicationHealth extends EntityHealth
- uid: system.fabric.health._service_health
  parent: system.fabric.health
  href: system.fabric.health._service_health.yml
  name: ServiceHealth
  nameWithType: ServiceHealth
  fullName: system.fabric.health.ServiceHealth
  type: Class
  summary: <p>Describes the health of a service as returned by <xref href="system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ServiceHealth
- uid: system.fabric.health._partition_health
  parent: system.fabric.health
  href: system.fabric.health._partition_health.yml
  name: PartitionHealth
  nameWithType: PartitionHealth
  fullName: system.fabric.health.PartitionHealth
  type: Class
  summary: <p>Describes health of a partition as returned by <xref href="system.fabric._health_client.getPartitionHealthAsync(PartitionHealthQueryDescription)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class PartitionHealth
- uid: system.fabric.health._replica_health
  parent: system.fabric.health
  href: system.fabric.health._replica_health.yml
  name: ReplicaHealth
  nameWithType: ReplicaHealth
  fullName: system.fabric.health.ReplicaHealth
  type: Class
  summary: <p>Describes the health of a stateful service replica or a stateless service instance as returned by <xref href="system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ReplicaHealth
- uid: system.fabric.health._deployed_application_health
  parent: system.fabric.health
  href: system.fabric.health._deployed_application_health.yml
  name: DeployedApplicationHealth
  nameWithType: DeployedApplicationHealth
  fullName: system.fabric.health.DeployedApplicationHealth
  type: Class
  summary: <p>Describes the health of an application deployed on a node as returned by <xref href="system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class DeployedApplicationHealth extends EntityHealth
- uid: system.fabric.health._deployed_service_package_health
  parent: system.fabric.health
  href: system.fabric.health._deployed_service_package_health.yml
  name: DeployedServicePackageHealth
  nameWithType: DeployedServicePackageHealth
  fullName: system.fabric.health.DeployedServicePackageHealth
  type: Class
  syntax:
    content: public class DeployedServicePackageHealth extends EntityHealth
- uid: system.fabric.health._cluster_health_chunk
  parent: system.fabric.health
  href: system.fabric.health._cluster_health_chunk.yml
  name: ClusterHealthChunk
  nameWithType: ClusterHealthChunk
  fullName: system.fabric.health.ClusterHealthChunk
  type: Class
  summary: <p>Represents the cluster state chunk, which includes health information about the cluster. </p>
  syntax:
    content: public class ClusterHealthChunk
- uid: system.fabric.health._health_report
  parent: system.fabric.health
  href: system.fabric.health._health_report.yml
  name: HealthReport
  nameWithType: HealthReport
  fullName: system.fabric.health.HealthReport
  type: Class
  summary: >-
    <p>

      <bold>Remarks:</bold>The report can be sent to the health store using <xref href="system.fabric._health_client.reportHealth(HealthReport)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class HealthReport
- uid: system.fabric._cluster_health_policy
  parent: system.fabric
  href: system.fabric._cluster_health_policy.yml
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy
  fullName: system.fabric.ClusterHealthPolicy
  type: Class
  summary: <p>Defines a health policy used to evaluate the health of the cluster or of a cluster node. </p>
  syntax:
    content: public class ClusterHealthPolicy
- uid: system.fabric._cluster_health_query_description
  parent: system.fabric
  href: system.fabric._cluster_health_query_description.yml
  name: ClusterHealthQueryDescription
  nameWithType: ClusterHealthQueryDescription
  fullName: system.fabric.ClusterHealthQueryDescription
  type: Class
  summary: <p>Provides query input for getting <xref href="system.fabric.health._cluster_health" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ClusterHealthQueryDescription
- uid: system.fabric._node_health_query_description
  parent: system.fabric
  href: system.fabric._node_health_query_description.yml
  name: NodeHealthQueryDescription
  nameWithType: NodeHealthQueryDescription
  fullName: system.fabric.NodeHealthQueryDescription
  type: Class
  summary: <p>Describes query input for getting <xref href="system.fabric.health._node_health" data-throw-if-not-resolved="false"></xref>. Used by <xref href="system.fabric._health_client.getNodeHealthAsync(NodeHealthQueryDescription)" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class NodeHealthQueryDescription
- uid: system.fabric._application_health_policy
  parent: system.fabric
  href: system.fabric._application_health_policy.yml
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: system.fabric.ApplicationHealthPolicy
  type: Class
  summary: <p>Defines a health policy used to evaluate the health of an application or one of its children entities. </p>
  syntax:
    content: public class ApplicationHealthPolicy
- uid: system.fabric._application_health_query_description
  parent: system.fabric
  href: system.fabric._application_health_query_description.yml
  name: ApplicationHealthQueryDescription
  nameWithType: ApplicationHealthQueryDescription
  fullName: system.fabric.ApplicationHealthQueryDescription
  type: Class
  summary: <p>Represents the query input for getting application health. Used by <xref href="system.fabric._health_client.getApplicationHealthAsync(ApplicationHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ApplicationHealthQueryDescription
- uid: system.fabric._service_health_query_description
  parent: system.fabric
  href: system.fabric._service_health_query_description.yml
  name: ServiceHealthQueryDescription
  nameWithType: ServiceHealthQueryDescription
  fullName: system.fabric.ServiceHealthQueryDescription
  type: Class
  summary: <p>Provides query input for getting <xref href="system.fabric.health._service_health" data-throw-if-not-resolved="false"></xref>. Used by <xref href="system.fabric._health_client.getServiceHealthAsync(ServiceHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ServiceHealthQueryDescription
- uid: system.fabric._partition_health_query_description
  parent: system.fabric
  href: system.fabric._partition_health_query_description.yml
  name: PartitionHealthQueryDescription
  nameWithType: PartitionHealthQueryDescription
  fullName: system.fabric.PartitionHealthQueryDescription
  type: Class
  summary: <p>Describes query input for getting <xref href="system.fabric.health._partition_health" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class PartitionHealthQueryDescription
- uid: system.fabric._replica_health_query_description
  parent: system.fabric
  href: system.fabric._replica_health_query_description.yml
  name: ReplicaHealthQueryDescription
  nameWithType: ReplicaHealthQueryDescription
  fullName: system.fabric.ReplicaHealthQueryDescription
  type: Class
  summary: <p>Describes the query input for getting <xref href="system.fabric.health._replica_health" data-throw-if-not-resolved="false"></xref>. Used by <xref href="system.fabric._health_client.getReplicaHealthAsync(ReplicaHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ReplicaHealthQueryDescription
- uid: system.fabric._deployed_application_health_query_description
  parent: system.fabric
  href: system.fabric._deployed_application_health_query_description.yml
  name: DeployedApplicationHealthQueryDescription
  nameWithType: DeployedApplicationHealthQueryDescription
  fullName: system.fabric.DeployedApplicationHealthQueryDescription
  type: Class
  summary: <p>Describes query input for getting <xref href="system.fabric.health._deployed_application_health" data-throw-if-not-resolved="false"></xref>. Used by <xref href="system.fabric._health_client.getDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class DeployedApplicationHealthQueryDescription
- uid: system.fabric._deployed_service_package_health_query_description
  parent: system.fabric
  href: system.fabric._deployed_service_package_health_query_description.yml
  name: DeployedServicePackageHealthQueryDescription
  nameWithType: DeployedServicePackageHealthQueryDescription
  fullName: system.fabric.DeployedServicePackageHealthQueryDescription
  type: Class
  summary: <p>Describes the query input for getting <xref href="system.fabric.health._deployed_service_package_health" data-throw-if-not-resolved="false"></xref>. Used by <xref href="system.fabric._health_client.getDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class DeployedServicePackageHealthQueryDescription
- uid: system.fabric._cluster_health_chunk_query_description
  parent: system.fabric
  href: system.fabric._cluster_health_chunk_query_description.yml
  name: ClusterHealthChunkQueryDescription
  nameWithType: ClusterHealthChunkQueryDescription
  fullName: system.fabric.ClusterHealthChunkQueryDescription
  type: Class
  summary: <p>Describes the cluster health chunk query input. </p>
  syntax:
    content: public class ClusterHealthChunkQueryDescription
