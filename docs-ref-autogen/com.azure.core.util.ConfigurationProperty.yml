### YamlMime:JavaType
uid: "com.azure.core.util.ConfigurationProperty"
fullName: "com.azure.core.util.ConfigurationProperty<T>"
name: "ConfigurationProperty<T>"
nameWithType: "ConfigurationProperty<T>"
summary: "Represents configuration property."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ConfigurationProperty<T>"
methods:
- uid: "com.azure.core.util.ConfigurationProperty.getAliases()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getAliases()"
  name: "getAliases()"
  nameWithType: "ConfigurationProperty<T>.getAliases()"
  summary: "Gets property aliases - alternative names property can have."
  syntax: "public Iterable<String> getAliases()"
  desc: "Gets property aliases - alternative names property can have."
  returns:
    description: "array of name aliases."
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.ConfigurationProperty.getConverter()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getConverter()"
  name: "getConverter()"
  nameWithType: "ConfigurationProperty<T>.getConverter()"
  summary: "Gets converter for property value."
  syntax: "public Function<String,T> getConverter()"
  desc: "Gets converter for property value."
  returns:
    description: "property value converter."
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.ConfigurationProperty.getDefaultValue()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getDefaultValue()"
  name: "getDefaultValue()"
  nameWithType: "ConfigurationProperty<T>.getDefaultValue()"
  summary: "Gets property default value to be used when property is missing in the configuration."
  syntax: "public T getDefaultValue()"
  desc: "Gets property default value to be used when property is missing in the configuration."
  returns:
    description: "default value."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.ConfigurationProperty.getEnvironmentVariableName()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getEnvironmentVariableName()"
  name: "getEnvironmentVariableName()"
  nameWithType: "ConfigurationProperty<T>.getEnvironmentVariableName()"
  summary: "Gets name of environment variables this property can be configured with."
  syntax: "public String getEnvironmentVariableName()"
  desc: "Gets name of environment variables this property can be configured with."
  returns:
    description: "environment variable name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.ConfigurationProperty.getName()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getName()"
  name: "getName()"
  nameWithType: "ConfigurationProperty<T>.getName()"
  summary: "Gets full property name including relative path to it."
  syntax: "public String getName()"
  desc: "Gets full property name including relative path to it."
  returns:
    description: "property name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.ConfigurationProperty.getSystemPropertyName()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getSystemPropertyName()"
  name: "getSystemPropertyName()"
  nameWithType: "ConfigurationProperty<T>.getSystemPropertyName()"
  summary: "Gets name of system property this property can be configured with."
  syntax: "public String getSystemPropertyName()"
  desc: "Gets name of system property this property can be configured with."
  returns:
    description: "system property name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.ConfigurationProperty.getValueSanitizer()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.getValueSanitizer()"
  name: "getValueSanitizer()"
  nameWithType: "ConfigurationProperty<T>.getValueSanitizer()"
  summary: "Returns property value sanitizer that is used to securely log property value."
  syntax: "public Function<String,String> getValueSanitizer()"
  desc: "Returns property value sanitizer that is used to securely log property value."
  returns:
    description: "function that sanitizes property value."
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.ConfigurationProperty.isRequired()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.isRequired()"
  name: "isRequired()"
  nameWithType: "ConfigurationProperty<T>.isRequired()"
  summary: "Returns true if property is required, used for validation purposes."
  syntax: "public boolean isRequired()"
  desc: "Returns true if property is required, used for validation purposes."
  returns:
    description: "flag indicating if the property is required."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.ConfigurationProperty.isShared()"
  fullName: "com.azure.core.util.ConfigurationProperty<T>.isShared()"
  name: "isShared()"
  nameWithType: "ConfigurationProperty<T>.isShared()"
  summary: "Returns true if property can be shared between clients and <xref uid=\"com.azure.core.util.Configuration.<T>get(com.azure.core.util.ConfigurationProperty<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Configuration#get(ConfigurationProperty)\"></xref> should look for it in per-client and root sections."
  syntax: "public boolean isShared()"
  desc: "Returns true if property can be shared between clients and <xref uid=\"com.azure.core.util.Configuration.<T>get(com.azure.core.util.ConfigurationProperty<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Configuration#get(ConfigurationProperty)\"></xref> should look for it in per-client and root sections."
  returns:
    description: "flag indicating if the property is shared."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- description: "Type of property value."
  name: "T"
desc: "Represents configuration property."
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.31.0
