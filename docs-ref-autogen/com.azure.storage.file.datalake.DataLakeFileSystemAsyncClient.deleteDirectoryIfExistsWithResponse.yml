### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse*"
fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse"
name: "deleteDirectoryIfExistsWithResponse"
nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(java.lang.String,com.azure.storage.file.datalake.options.DataLakePathDeleteOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  name: "deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  nameWithType: "DataLakeFileSystemAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  summary: "Deletes the specified directory in the file system if it exists."
  parameters:
  - description: "Name of the directory to delete. If the path name contains special characters, pass in the\n url encoded version of the path name."
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteDirectoryIfExistsWithResponse(String directoryName, DataLakePathDeleteOptions options)"
  desc: "Deletes the specified directory in the file system if it exists. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n DataLakePathDeleteOptions options = new DataLakePathDeleteOptions().setIsRecursive(recursive)\n     .setRequestConditions(requestConditions);\n\n client.deleteDirectoryIfExistsWithResponse(directoryName, options).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 200, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.11.0
