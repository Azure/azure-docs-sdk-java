### YamlMime:JavaMember
uid: "com.azure.core.util.polling.ChainedPollingStrategy.canPoll*"
fullName: "com.azure.core.util.polling.ChainedPollingStrategy<T,U>.canPoll"
name: "canPoll"
nameWithType: "ChainedPollingStrategy<T,U>.canPoll"
members:
- uid: "com.azure.core.util.polling.ChainedPollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)"
  fullName: "com.azure.core.util.polling.ChainedPollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  name: "canPoll(Response<?> initialResponse)"
  nameWithType: "ChainedPollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  summary: "Checks if this strategy is able to handle polling for this long-running operation based on the information in the initial response."
  parameters:
  - name: "initialResponse"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public Mono<Boolean> canPoll(Response<?> initialResponse)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util.polling"
artifact: com.azure:azure-core:1.23.0
