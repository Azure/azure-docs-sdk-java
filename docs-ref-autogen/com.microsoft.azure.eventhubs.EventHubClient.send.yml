### YamlMime:JavaMember
uid: "com.microsoft.azure.eventhubs.EventHubClient.send*"
fullName: "com.microsoft.azure.eventhubs.EventHubClient.send"
name: "send"
nameWithType: "EventHubClient.send"
members:
- uid: "com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)"
  fullName: "com.microsoft.azure.eventhubs.EventHubClient.send(EventData data)"
  name: "send(EventData data)"
  nameWithType: "EventHubClient.send(EventData data)"
  summary: "Send <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to EventHub. The sent <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> will land on any arbitrarily chosen EventHubs partition.\n\nThere are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):\n\n *  <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref>, <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(Iterable)\"></xref>, or <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventDataBatch)\"></xref>\n *  <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData, String)\"></xref> or <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(Iterable, String)\"></xref>\n *  <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#send(EventData)\"></xref>, <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#send(Iterable)\"></xref>, or <xref uid=\"com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionSender#send(EventDataBatch)\"></xref>\n\nUse this method to Send, if:\n\n```java\na)  the send() operation should be highly available and\n b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable\n```\n\n<xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref> send's the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a Service Gateway, which in-turn will forward the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm:\n\n```java\ni.  Forward the 's to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the 's to all EventHubs' partitions)\n ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.\n```"
  parameters:
  - description: "the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to be sent."
    name: "data"
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(EventData data)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)"
  fullName: "com.microsoft.azure.eventhubs.EventHubClient.send(EventData eventData, String partitionKey)"
  name: "send(EventData eventData, String partitionKey)"
  nameWithType: "EventHubClient.send(EventData eventData, String partitionKey)"
  summary: "Send an '<xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> with a partitionKey' to EventHub. All <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency.\n\nThere are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):\n\n```java\ni.    or \n ii.   or \n iii.  or\n```\n\nUse this type of Send, if:\n\n```java\ni.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation\n ii. The client wants to take control of distribution of data across partitions.\n```\n\nMultiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed."
  parameters:
  - description: "the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to be sent."
    name: "eventData"
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid=\"com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData.SystemProperties#getPartitionKey()\"></xref>"
    name: "partitionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(EventData eventData, String partitionKey)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventDataBatch)"
  fullName: "com.microsoft.azure.eventhubs.EventHubClient.send(EventDataBatch eventDatas)"
  name: "send(EventDataBatch eventDatas)"
  nameWithType: "EventHubClient.send(EventDataBatch eventDatas)"
  summary: "Send <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> to EventHub. The sent <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> will land according the partition key set in the <xref uid=\"com.microsoft.azure.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>. If a partition key is not set, then we will Round-robin the <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s to all EventHubs' partitions."
  parameters:
  - description: "EventDataBatch to send to EventHub"
    name: "eventDatas"
    type: "<xref href=\"com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(EventDataBatch eventDatas)"
  returns:
    description: "a CompleteableFuture that can be completed when the send operations are done"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)"
  fullName: "com.microsoft.azure.eventhubs.EventHubClient.send(Iterable<EventData> eventDatas)"
  name: "send(Iterable<EventData> eventDatas)"
  nameWithType: "EventHubClient.send(Iterable<EventData> eventDatas)"
  summary: "Send a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to EventHub. The sent <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs.\n\nThere are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref>, which is used to send single <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. Use this overload versus <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData)\"></xref>, if you need to send a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>.\n\nSending a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s is useful in the following cases:\n\n```java\ni.   Efficient send - sending a batch of  maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.\n ii.  Send multiple 's in a Transaction. To achieve ACID properties, the Gateway Service will forward all 's in the batch to a single EventHubs' partition.\n```\n\nSample code (sample uses sync version of the api but concept are identical):\n\n```java\nGson gson = new GsonBuilder().create();\n EventHubClient client = EventHubClient.createSync(\"__connection__\");\n\n while (true)\n {\n     LinkedList events = new LinkedList();}\n     for (int count = 1; count < 11; count++)\n     {\n         PayloadEvent payload = new PayloadEvent(count);\n         byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());\n         EventData sendEvent = new EventData(payloadBytes);\n         sendEvent.getProperties().put(\"from\", \"javaClient\");\n         events.add(sendEvent);\n     }\n\n     client.sendSync(events);\n     System.out.println(String.format(\"Sent Batch... Size: %s\", events.size()));\n }\n```\n\nfor Exceptions refer to <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.sendSync(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#sendSync(Iterable)\"></xref>"
  parameters:
  - description: "batch of events to send to EventHub"
    name: "eventDatas"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.eventhubs.EventHubClient.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>,java.lang.String)"
  fullName: "com.microsoft.azure.eventhubs.EventHubClient.send(Iterable<EventData> eventDatas, String partitionKey)"
  name: "send(Iterable<EventData> eventDatas, String partitionKey)"
  nameWithType: "EventHubClient.send(Iterable<EventData> eventDatas, String partitionKey)"
  summary: "Send a 'batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> with the same partitionKey' to EventHub. All <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition.\n\nThere are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.send(com.microsoft.azure.eventhubs.EventData,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#send(EventData, String)\"></xref>, which is the same type of Send and is used to send single <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>.\n\nSending a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s is useful in the following cases:\n\n```java\ni.   Efficient send - sending a batch of  maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.\n ii.  Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).\n```"
  parameters:
  - description: "the batch of events to send to EventHub"
    name: "eventDatas"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid=\"com.microsoft.azure.eventhubs.EventData.SystemProperties.getPartitionKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData.SystemProperties#getPartitionKey()\"></xref>"
    name: "partitionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas, String partitionKey)"
  returns:
    description: "a CompletableFuture that can be completed when the send operations is done.."
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.microsoft.azure.eventhubs"
artifact: com.microsoft.azure:azure-eventhubs:3.2.2
