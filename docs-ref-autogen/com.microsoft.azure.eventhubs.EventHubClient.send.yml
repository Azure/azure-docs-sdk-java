### YamlMime:JavaMember
nameWithType: EventHubClient.send
type: method
members:
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
  name: send(final EventData data)
  nameWithType: EventHubClient.send(final EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    name: data
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <ul><li><p><xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></p></li></ul></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventData data)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData eventData, final String partitionKey)
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.send(final EventData eventData, final String partitionKey)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    name: eventData
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch eventDatas)
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.send(final EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: final <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompleteableFuture that can be completed when the send operations are done </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas)
  name: send(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().create();

    EventHubClient client = EventHubClient.createSync("__connection__");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}EventData{&gt;} events = new LinkedList{&lt;}EventData{&gt;}();}

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            EventData sendEvent = new EventData(payloadBytes);

            sendEvent.getProperties().put("from", "javaClient");

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    client.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p>for Exceptions refer to <xref uid="" data-throw-if-not-resolved="false">sendSync(Iterable)</xref></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData>)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  name: send(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  parameters:
  - description: <p>the batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send a 'batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.

    ii.	Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData>,final String)
uid: com.microsoft.azure.eventhubs.EventHubClient.send*
fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
name: send(final EventData data)
package: com.microsoft.azure.eventhubs
metadata: {}
