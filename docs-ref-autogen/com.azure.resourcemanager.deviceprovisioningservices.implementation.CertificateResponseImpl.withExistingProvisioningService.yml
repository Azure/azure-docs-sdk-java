### YamlMime:JavaMember
uid: "com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl.withExistingProvisioningService*"
fullName: "com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl.withExistingProvisioningService"
name: "withExistingProvisioningService"
nameWithType: "CertificateResponseImpl.withExistingProvisioningService"
members:
- uid: "com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl.withExistingProvisioningService(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl.withExistingProvisioningService(String resourceGroupName, String provisioningServiceName)"
  name: "withExistingProvisioningService(String resourceGroupName, String provisioningServiceName)"
  nameWithType: "CertificateResponseImpl.withExistingProvisioningService(String resourceGroupName, String provisioningServiceName)"
  summary: "Specifies resourceGroupName, provisioningServiceName."
  parameters:
  - name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "provisioningServiceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CertificateResponseImpl withExistingProvisioningService(String resourceGroupName, String provisioningServiceName)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl?alt=com.azure.resourcemanager.deviceprovisioningservices.implementation.CertificateResponseImpl&text=CertificateResponseImpl\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.deviceprovisioningservices.implementation"
artifact: com.azure.resourcemanager:azure-resourcemanager-deviceprovisioningservices:1.0.0
