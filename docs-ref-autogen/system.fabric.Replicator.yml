### YamlMime:JavaType
inheritedMembers:
- system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
- system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
- system.fabric.PrimaryReplicator.removeReplica(long)
- system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
- system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
- system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
methods:
- fullName: system.fabric.Replicator.abort()
  name: abort()
  nameWithType: Replicator.abort()
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void abort()
  uid: system.fabric.Replicator.abort()
- fullName: system.fabric.Replicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  name: changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  nameWithType: Replicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: epoch
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: role
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  uid: system.fabric.Replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
- fullName: system.fabric.Replicator.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: Replicator.closeAsync(CancellationToken cancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture closeAsync(CancellationToken cancellationToken)
  uid: system.fabric.Replicator.closeAsync(CancellationToken)
- fullName: system.fabric.Replicator.getCatchUpCapability()
  name: getCatchUpCapability()
  nameWithType: Replicator.getCatchUpCapability()
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public long getCatchUpCapability()
  uid: system.fabric.Replicator.getCatchUpCapability()
- fullName: system.fabric.Replicator.getCurrentProgress()
  name: getCurrentProgress()
  nameWithType: Replicator.getCurrentProgress()
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public long getCurrentProgress()
  uid: system.fabric.Replicator.getCurrentProgress()
- fullName: system.fabric.Replicator.openAsync(CancellationToken cancellationToken)
  name: openAsync(CancellationToken cancellationToken)
  nameWithType: Replicator.openAsync(CancellationToken cancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CString%3E?alt=CompletableFuture%3CString%3E&text=CompletableFuture%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture<String> openAsync(CancellationToken cancellationToken)
  uid: system.fabric.Replicator.openAsync(CancellationToken)
- fullName: system.fabric.Replicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  name: updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  nameWithType: Replicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: epoch
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  uid: system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)
nameWithType: Replicator
syntax: public interface Replicator extends PrimaryReplicator
type: interface
uid: system.fabric.Replicator
fullName: system.fabric.Replicator
name: Replicator
package: system.fabric
summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
metadata: {}
