### YamlMime:JavaType
uid: "com.azure.core.util.paging.ContinuablePagedFlux"
fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>"
name: "ContinuablePagedFlux<C,T,P>"
nameWithType: "ContinuablePagedFlux<C,T,P>"
summary: "This class is a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> implementation that provides the ability to operate on pages of type <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> and individual items in such pages."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"reactor.core.publisher.Flux?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
- classRef: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"reactor.core.publisher.Flux.<A>reduce(A,java.util.function.BiFunction<A,? super T,A>)?alt=reactor.core.publisher.Flux.<A>reduce&text=<A>reduce\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<A>reduceWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)?alt=reactor.core.publisher.Flux.<A>reduceWith&text=<A>reduceWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<A>scan(A,java.util.function.BiFunction<A,? super T,A>)?alt=reactor.core.publisher.Flux.<A>scan&text=<A>scan\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<A>scanWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)?alt=reactor.core.publisher.Flux.<A>scanWith&text=<A>scanWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<C>buffer(int,int,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<C>buffer&text=<C>buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<C>buffer(int,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<C>buffer&text=<C>buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<C>buffer(org.reactivestreams.Publisher<?>,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<C>buffer&text=<C>buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<C>bufferTimeout&text=<C>bufferTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<C>bufferTimeout&text=<C>bufferTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>cast(java.lang.Class<E>)?alt=reactor.core.publisher.Flux.<E>cast&text=<E>cast\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>collect(java.util.function.Supplier<E>,java.util.function.BiConsumer<E,? super T>)?alt=reactor.core.publisher.Flux.<E>collect&text=<E>collect\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)?alt=reactor.core.publisher.Flux.<E>doOnError&text=<E>doOnError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)?alt=reactor.core.publisher.Flux.<E>onErrorContinue&text=<E>onErrorContinue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)?alt=reactor.core.publisher.Flux.<E>onErrorContinue&text=<E>onErrorContinue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)?alt=reactor.core.publisher.Flux.<E>onErrorMap&text=<E>onErrorMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<E>onErrorResume&text=<E>onErrorResume\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>onErrorReturn(java.lang.Class<E>,T)?alt=reactor.core.publisher.Flux.<E>onErrorReturn&text=<E>onErrorReturn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<E>subscribeWith(E)?alt=reactor.core.publisher.Flux.<E>subscribeWith&text=<E>subscribeWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I,O>zip&text=<I,O>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I,O>zip&text=<I,O>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)?alt=reactor.core.publisher.Flux.<I>first&text=<I>first\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>first(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>first&text=<I>first\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>firstWithSignal(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)?alt=reactor.core.publisher.Flux.<I>firstWithSignal&text=<I>firstWithSignal\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>firstWithSignal(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>firstWithSignal&text=<I>firstWithSignal\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>firstWithValue(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)?alt=reactor.core.publisher.Flux.<I>firstWithValue&text=<I>firstWithValue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>firstWithValue(org.reactivestreams.Publisher<? extends I>,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>firstWithValue&text=<I>firstWithValue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>index(java.util.function.BiFunction<? super java.lang.Long,? super T,? extends I>)?alt=reactor.core.publisher.Flux.<I>index&text=<I>index\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>merge(int,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>merge&text=<I>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)?alt=reactor.core.publisher.Flux.<I>merge&text=<I>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>merge(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>merge&text=<I>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeComparing(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeComparing&text=<I>mergeComparing\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeDelayError(int,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeDelayError&text=<I>mergeDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeOrdered(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeOrdered&text=<I>mergeOrdered\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergePriority(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergePriority&text=<I>mergePriority\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequential(int,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeSequential&text=<I>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)?alt=reactor.core.publisher.Flux.<I>mergeSequential&text=<I>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)?alt=reactor.core.publisher.Flux.<I>mergeSequential&text=<I>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequential(org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeSequential&text=<I>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequentialDelayError(int,org.reactivestreams.Publisher<? extends I>...)?alt=reactor.core.publisher.Flux.<I>mergeSequentialDelayError&text=<I>mergeSequentialDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<I>mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)?alt=reactor.core.publisher.Flux.<I>mergeSequentialDelayError&text=<I>mergeSequentialDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<K,V>collectMap&text=<K,V>collectMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,V>>)?alt=reactor.core.publisher.Flux.<K,V>collectMap&text=<K,V>collectMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<K,V>collectMultimap&text=<K,V>collectMultimap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,java.util.Collection<V>>>)?alt=reactor.core.publisher.Flux.<K,V>collectMultimap&text=<K,V>collectMultimap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<K,V>groupBy&text=<K,V>groupBy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,int)?alt=reactor.core.publisher.Flux.<K,V>groupBy&text=<K,V>groupBy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K>collectMap(java.util.function.Function<? super T,? extends K>)?alt=reactor.core.publisher.Flux.<K>collectMap&text=<K>collectMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K>collectMultimap(java.util.function.Function<? super T,? extends K>)?alt=reactor.core.publisher.Flux.<K>collectMultimap&text=<K>collectMultimap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>)?alt=reactor.core.publisher.Flux.<K>groupBy&text=<K>groupBy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>,int)?alt=reactor.core.publisher.Flux.<K>groupBy&text=<K>groupBy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<O>error(java.lang.Throwable,boolean)?alt=reactor.core.publisher.Flux.<O>error&text=<O>error\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,int,java.util.function.Function<? super java.lang.Object[],? extends O>)?alt=reactor.core.publisher.Flux.<O>zip&text=<O>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super java.lang.Object[],? extends O>)?alt=reactor.core.publisher.Flux.<O>zip&text=<O>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<P>as(java.util.function.Function<? super reactor.core.publisher.Flux<T>,P>)?alt=reactor.core.publisher.Flux.<P>as&text=<P>as\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R,A>collect(java.util.stream.Collector<? super T,A,? extends R>)?alt=reactor.core.publisher.Flux.<R,A>collect&text=<R,A>collect\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)?alt=reactor.core.publisher.Flux.<R>concatMapIterable&text=<R>concatMapIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)?alt=reactor.core.publisher.Flux.<R>concatMapIterable&text=<R>concatMapIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)?alt=reactor.core.publisher.Flux.<R>doOnDiscard&text=<R>doOnDiscard\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)?alt=reactor.core.publisher.Flux.<R>flatMap&text=<R>flatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)?alt=reactor.core.publisher.Flux.<R>flatMap&text=<R>flatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)?alt=reactor.core.publisher.Flux.<R>flatMapIterable&text=<R>flatMapIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)?alt=reactor.core.publisher.Flux.<R>flatMapIterable&text=<R>flatMapIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)?alt=reactor.core.publisher.Flux.<R>flatMapSequential&text=<R>flatMapSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int)?alt=reactor.core.publisher.Flux.<R>flatMapSequential&text=<R>flatMapSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)?alt=reactor.core.publisher.Flux.<R>flatMapSequential&text=<R>flatMapSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>flatMapSequentialDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)?alt=reactor.core.publisher.Flux.<R>flatMapSequentialDelayError&text=<R>flatMapSequentialDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)?alt=reactor.core.publisher.Flux.<R>handle&text=<R>handle\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>)?alt=reactor.core.publisher.Flux.<R>publish&text=<R>publish\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>,int)?alt=reactor.core.publisher.Flux.<R>publish&text=<R>publish\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>)?alt=reactor.core.publisher.Flux.<T,D>using&text=<T,D>using\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>,boolean)?alt=reactor.core.publisher.Flux.<T,D>using&text=<T,D>using\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)?alt=reactor.core.publisher.Flux.<T,D>usingWhen&text=<T,D>usingWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)?alt=reactor.core.publisher.Flux.<T,D>usingWhen&text=<T,D>usingWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>)?alt=reactor.core.publisher.Flux.<T,S>generate&text=<T,S>generate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>,java.util.function.Consumer<? super S>)?alt=reactor.core.publisher.Flux.<T,S>generate&text=<T,S>generate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,int,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T,V>combineLatest&text=<T,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T,V>combineLatest&text=<T,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,int,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T,V>combineLatest&text=<T,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T,V>combineLatest&text=<T,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,O>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)?alt=reactor.core.publisher.Flux.<T1,T2,O>zip&text=<T1,T2,O>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>,org.reactivestreams.Publisher<? extends T8>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip&text=<T1,T2,T3,T4,T5,T6,T7,T8>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip&text=<T1,T2,T3,T4,T5,T6,T7>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest&text=<T1,T2,T3,T4,T5,T6,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip&text=<T1,T2,T3,T4,T5,T6>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest&text=<T1,T2,T3,T4,T5,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip&text=<T1,T2,T3,T4,T5>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest&text=<T1,T2,T3,T4,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,T4>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,T4>zip&text=<T1,T2,T3,T4>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,java.util.function.Function<java.lang.Object[],V>)?alt=reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest&text=<T1,T2,T3,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,T3>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>)?alt=reactor.core.publisher.Flux.<T1,T2,T3>zip&text=<T1,T2,T3>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends V>)?alt=reactor.core.publisher.Flux.<T1,T2,V>combineLatest&text=<T1,T2,V>combineLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T1,T2>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>)?alt=reactor.core.publisher.Flux.<T1,T2>zip&text=<T1,T2>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,int,java.util.function.BiFunction<? super T,? super T2,? extends V>)?alt=reactor.core.publisher.Flux.<T2,V>zipWith&text=<T2,V>zipWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)?alt=reactor.core.publisher.Flux.<T2,V>zipWith&text=<T2,V>zipWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2,V>zipWithIterable(java.lang.Iterable<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)?alt=reactor.core.publisher.Flux.<T2,V>zipWithIterable&text=<T2,V>zipWithIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>)?alt=reactor.core.publisher.Flux.<T2>zipWith&text=<T2>zipWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>,int)?alt=reactor.core.publisher.Flux.<T2>zipWith&text=<T2>zipWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T2>zipWithIterable(java.lang.Iterable<? extends T2>)?alt=reactor.core.publisher.Flux.<T2>zipWithIterable&text=<T2>zipWithIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>concat&text=<T>concat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>concat&text=<T>concat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>concat&text=<T>concat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.<T>concat&text=<T>concat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>concatDelayError&text=<T>concatDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>concatDelayError&text=<T>concatDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,boolean,int)?alt=reactor.core.publisher.Flux.<T>concatDelayError&text=<T>concatDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.<T>concatDelayError&text=<T>concatDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)?alt=reactor.core.publisher.Flux.<T>create&text=<T>create\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)?alt=reactor.core.publisher.Flux.<T>create&text=<T>create\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>)?alt=reactor.core.publisher.Flux.<T>defer&text=<T>defer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>deferContextual(java.util.function.Function<reactor.util.context.ContextView,? extends org.reactivestreams.Publisher<T>>)?alt=reactor.core.publisher.Flux.<T>deferContextual&text=<T>deferContextual\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends org.reactivestreams.Publisher<T>>)?alt=reactor.core.publisher.Flux.<T>deferWithContext&text=<T>deferWithContext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>empty()?alt=reactor.core.publisher.Flux.<T>empty&text=<T>empty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>error(java.lang.Throwable)?alt=reactor.core.publisher.Flux.<T>error&text=<T>error\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)?alt=reactor.core.publisher.Flux.<T>error&text=<T>error\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>from(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.<T>from&text=<T>from\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>fromArray(T[])?alt=reactor.core.publisher.Flux.<T>fromArray&text=<T>fromArray\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>fromIterable(java.lang.Iterable<? extends T>)?alt=reactor.core.publisher.Flux.<T>fromIterable&text=<T>fromIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>)?alt=reactor.core.publisher.Flux.<T>fromStream&text=<T>fromStream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>fromStream(java.util.stream.Stream<? extends T>)?alt=reactor.core.publisher.Flux.<T>fromStream&text=<T>fromStream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>)?alt=reactor.core.publisher.Flux.<T>generate&text=<T>generate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>just(T)?alt=reactor.core.publisher.Flux.<T>just&text=<T>just\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>just(T...)?alt=reactor.core.publisher.Flux.<T>just&text=<T>just\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>merge&text=<T>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.<T>merge&text=<T>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)?alt=reactor.core.publisher.Flux.<T>merge&text=<T>merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeComparing(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergeComparing&text=<T>mergeComparing\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeComparing(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergeComparing&text=<T>mergeComparing\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeComparingDelayError(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergeComparingDelayError&text=<T>mergeComparingDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeOrdered(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergeOrdered&text=<T>mergeOrdered\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeOrdered(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergeOrdered&text=<T>mergeOrdered\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergePriority(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergePriority&text=<T>mergePriority\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergePriority(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergePriority&text=<T>mergePriority\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergePriorityDelayError(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)?alt=reactor.core.publisher.Flux.<T>mergePriorityDelayError&text=<T>mergePriorityDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>mergeSequential&text=<T>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)?alt=reactor.core.publisher.Flux.<T>mergeSequential&text=<T>mergeSequential\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)?alt=reactor.core.publisher.Flux.<T>mergeSequentialDelayError&text=<T>mergeSequentialDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>never()?alt=reactor.core.publisher.Flux.<T>never&text=<T>never\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.ConnectableFlux<T>)?alt=reactor.core.publisher.Flux.<T>onAssembly&text=<T>onAssembly\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.Flux<T>)?alt=reactor.core.publisher.Flux.<T>onAssembly&text=<T>onAssembly\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)?alt=reactor.core.publisher.Flux.<T>push&text=<T>push\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)?alt=reactor.core.publisher.Flux.<T>push&text=<T>push\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.<T>switchOnNext&text=<T>switchOnNext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.<T>switchOnNext&text=<T>switchOnNext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super reactor.core.publisher.Flux<TRight>,? extends R>)?alt=reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin&text=<TRight,TLeftEnd,TRightEnd,R>groupJoin\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super TRight,? extends R>)?alt=reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join&text=<TRight,TLeftEnd,TRightEnd,R>join\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<TUPLE,V>zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super TUPLE,? extends V>)?alt=reactor.core.publisher.Flux.<TUPLE,V>zip&text=<TUPLE,V>zip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,R>withLatestFrom(org.reactivestreams.Publisher<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends R>)?alt=reactor.core.publisher.Flux.<U,R>withLatestFrom&text=<U,R>withLatestFrom\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,V,C>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<U,V,C>bufferWhen&text=<U,V,C>bufferWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,V>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<U,V>bufferWhen&text=<U,V>bufferWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<U,V>timeout&text=<U,V>timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>,org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.<U,V>timeout&text=<U,V>timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U,V>windowWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<U,V>windowWhen&text=<U,V>windowWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>delaySubscription(org.reactivestreams.Publisher<U>)?alt=reactor.core.publisher.Flux.<U>delaySubscription&text=<U>delaySubscription\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>ofType(java.lang.Class<U>)?alt=reactor.core.publisher.Flux.<U>ofType&text=<U>ofType\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>sample(org.reactivestreams.Publisher<U>)?alt=reactor.core.publisher.Flux.<U>sample&text=<U>sample\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>sampleFirst(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)?alt=reactor.core.publisher.Flux.<U>sampleFirst&text=<U>sampleFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)?alt=reactor.core.publisher.Flux.<U>sampleTimeout&text=<U>sampleTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>,int)?alt=reactor.core.publisher.Flux.<U>sampleTimeout&text=<U>sampleTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<U>timeout(org.reactivestreams.Publisher<U>)?alt=reactor.core.publisher.Flux.<U>timeout&text=<U>timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>)?alt=reactor.core.publisher.Flux.<V,C>distinct&text=<V,C>distinct\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>,java.util.function.BiPredicate<C,V>,java.util.function.Consumer<C>)?alt=reactor.core.publisher.Flux.<V,C>distinct&text=<V,C>distinct\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>bufferUntilChanged()?alt=reactor.core.publisher.Flux.<V>bufferUntilChanged&text=<V>bufferUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<V>bufferUntilChanged&text=<V>bufferUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)?alt=reactor.core.publisher.Flux.<V>bufferUntilChanged&text=<V>bufferUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)?alt=reactor.core.publisher.Flux.<V>concatMap&text=<V>concatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)?alt=reactor.core.publisher.Flux.<V>concatMap&text=<V>concatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)?alt=reactor.core.publisher.Flux.<V>concatMapDelayError&text=<V>concatMapDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,boolean,int)?alt=reactor.core.publisher.Flux.<V>concatMapDelayError&text=<V>concatMapDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)?alt=reactor.core.publisher.Flux.<V>concatMapDelayError&text=<V>concatMapDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>distinct(java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<V>distinct&text=<V>distinct\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<V>distinctUntilChanged&text=<V>distinctUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)?alt=reactor.core.publisher.Flux.<V>distinctUntilChanged&text=<V>distinctUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)?alt=reactor.core.publisher.Flux.<V>flatMap&text=<V>flatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)?alt=reactor.core.publisher.Flux.<V>flatMap&text=<V>flatMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>flatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)?alt=reactor.core.publisher.Flux.<V>flatMapDelayError&text=<V>flatMapDelayError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>map(java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<V>map&text=<V>map\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>mapNotNull(java.util.function.Function<? super T,? extends V>)?alt=reactor.core.publisher.Flux.<V>mapNotNull&text=<V>mapNotNull\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>)?alt=reactor.core.publisher.Flux.<V>switchMap&text=<V>switchMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>,int)?alt=reactor.core.publisher.Flux.<V>switchMap&text=<V>switchMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>)?alt=reactor.core.publisher.Flux.<V>switchOnFirst&text=<V>switchOnFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>,boolean)?alt=reactor.core.publisher.Flux.<V>switchOnFirst&text=<V>switchOnFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>then(reactor.core.publisher.Mono<V>)?alt=reactor.core.publisher.Flux.<V>then&text=<V>then\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>thenMany(org.reactivestreams.Publisher<V>)?alt=reactor.core.publisher.Flux.<V>thenMany&text=<V>thenMany\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<V>transform&text=<V>transform\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<V>transformDeferred&text=<V>transformDeferred\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>transformDeferredContextual(java.util.function.BiFunction<? super reactor.core.publisher.Flux<T>,? super reactor.util.context.ContextView,? extends org.reactivestreams.Publisher<V>>)?alt=reactor.core.publisher.Flux.<V>transformDeferredContextual&text=<V>transformDeferredContextual\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>windowUntilChanged()?alt=reactor.core.publisher.Flux.<V>windowUntilChanged&text=<V>windowUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)?alt=reactor.core.publisher.Flux.<V>windowUntilChanged&text=<V>windowUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? super V>)?alt=reactor.core.publisher.Flux.<V>windowUntilChanged&text=<V>windowUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.<X>dematerialize()?alt=reactor.core.publisher.Flux.<X>dematerialize&text=<X>dematerialize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.all(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.all&text=all\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.any(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.any&text=any\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.blockFirst()?alt=reactor.core.publisher.Flux.blockFirst&text=blockFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.blockFirst(java.time.Duration)?alt=reactor.core.publisher.Flux.blockFirst&text=blockFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.blockLast()?alt=reactor.core.publisher.Flux.blockLast&text=blockLast\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.blockLast(java.time.Duration)?alt=reactor.core.publisher.Flux.blockLast&text=blockLast\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer()?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(int)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(int,int)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(java.time.Duration)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher<?>)?alt=reactor.core.publisher.Flux.buffer&text=buffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration)?alt=reactor.core.publisher.Flux.bufferTimeout&text=bufferTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.bufferTimeout&text=bufferTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.bufferUntil&text=bufferUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>,boolean)?alt=reactor.core.publisher.Flux.bufferUntil&text=bufferUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.bufferWhile&text=bufferWhile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache()?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache(int)?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache(int,java.time.Duration)?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache(int,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache(java.time.Duration)?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cache(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.cache&text=cache\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.cancelOn(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.cancelOn&text=cancelOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.checkpoint()?alt=reactor.core.publisher.Flux.checkpoint&text=checkpoint\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.checkpoint(java.lang.String)?alt=reactor.core.publisher.Flux.checkpoint&text=checkpoint\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.checkpoint(java.lang.String,boolean)?alt=reactor.core.publisher.Flux.checkpoint&text=checkpoint\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.collectList()?alt=reactor.core.publisher.Flux.collectList&text=collectList\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.collectSortedList()?alt=reactor.core.publisher.Flux.collectSortedList&text=collectSortedList\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.collectSortedList(java.util.Comparator<? super T>)?alt=reactor.core.publisher.Flux.collectSortedList&text=collectSortedList\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.concatWith&text=concatWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.concatWithValues(T...)?alt=reactor.core.publisher.Flux.concatWithValues&text=concatWithValues\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.contextWrite(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)?alt=reactor.core.publisher.Flux.contextWrite&text=contextWrite\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.contextWrite(reactor.util.context.ContextView)?alt=reactor.core.publisher.Flux.contextWrite&text=contextWrite\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.count()?alt=reactor.core.publisher.Flux.count&text=count\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.defaultIfEmpty(T)?alt=reactor.core.publisher.Flux.defaultIfEmpty&text=defaultIfEmpty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delayElements(java.time.Duration)?alt=reactor.core.publisher.Flux.delayElements&text=delayElements\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delayElements(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.delayElements&text=delayElements\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delaySequence(java.time.Duration)?alt=reactor.core.publisher.Flux.delaySequence&text=delaySequence\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delaySequence(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.delaySequence&text=delaySequence\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delaySubscription(java.time.Duration)?alt=reactor.core.publisher.Flux.delaySubscription&text=delaySubscription\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.delaySubscription&text=delaySubscription\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)?alt=reactor.core.publisher.Flux.delayUntil&text=delayUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.distinct()?alt=reactor.core.publisher.Flux.distinct&text=distinct\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.distinctUntilChanged()?alt=reactor.core.publisher.Flux.distinctUntilChanged&text=distinctUntilChanged\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doAfterTerminate(java.lang.Runnable)?alt=reactor.core.publisher.Flux.doAfterTerminate&text=doAfterTerminate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)?alt=reactor.core.publisher.Flux.doFinally&text=doFinally\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doFirst(java.lang.Runnable)?alt=reactor.core.publisher.Flux.doFirst&text=doFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnCancel(java.lang.Runnable)?alt=reactor.core.publisher.Flux.doOnCancel&text=doOnCancel\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnComplete(java.lang.Runnable)?alt=reactor.core.publisher.Flux.doOnComplete&text=doOnComplete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)?alt=reactor.core.publisher.Flux.doOnEach&text=doOnEach\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)?alt=reactor.core.publisher.Flux.doOnError&text=doOnError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)?alt=reactor.core.publisher.Flux.doOnError&text=doOnError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer<? super T>)?alt=reactor.core.publisher.Flux.doOnNext&text=doOnNext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnRequest(java.util.function.LongConsumer)?alt=reactor.core.publisher.Flux.doOnRequest&text=doOnRequest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)?alt=reactor.core.publisher.Flux.doOnSubscribe&text=doOnSubscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.doOnTerminate(java.lang.Runnable)?alt=reactor.core.publisher.Flux.doOnTerminate&text=doOnTerminate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.elapsed()?alt=reactor.core.publisher.Flux.elapsed&text=elapsed\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.elapsed(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.elapsed&text=elapsed\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.elementAt(int)?alt=reactor.core.publisher.Flux.elementAt&text=elementAt\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.elementAt(int,T)?alt=reactor.core.publisher.Flux.elementAt&text=elementAt\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.expand&text=expand\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.expand&text=expand\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.expandDeep&text=expandDeep\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)?alt=reactor.core.publisher.Flux.expandDeep&text=expandDeep\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.filter(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.filter&text=filter\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)?alt=reactor.core.publisher.Flux.filterWhen&text=filterWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>,int)?alt=reactor.core.publisher.Flux.filterWhen&text=filterWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.getPrefetch()?alt=reactor.core.publisher.Flux.getPrefetch&text=getPrefetch\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.hasElement(T)?alt=reactor.core.publisher.Flux.hasElement&text=hasElement\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.hasElements()?alt=reactor.core.publisher.Flux.hasElements&text=hasElements\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.hide()?alt=reactor.core.publisher.Flux.hide&text=hide\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.ignoreElements()?alt=reactor.core.publisher.Flux.ignoreElements&text=ignoreElements\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.index()?alt=reactor.core.publisher.Flux.index&text=index\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.interval(java.time.Duration)?alt=reactor.core.publisher.Flux.interval&text=interval\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration)?alt=reactor.core.publisher.Flux.interval&text=interval\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.interval&text=interval\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.interval(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.interval&text=interval\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.last()?alt=reactor.core.publisher.Flux.last&text=last\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.last(T)?alt=reactor.core.publisher.Flux.last&text=last\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.limitRate(int)?alt=reactor.core.publisher.Flux.limitRate&text=limitRate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.limitRate(int,int)?alt=reactor.core.publisher.Flux.limitRate&text=limitRate\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.limitRequest(long)?alt=reactor.core.publisher.Flux.limitRequest&text=limitRequest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log()?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log(java.lang.String)?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log(reactor.util.Logger)?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)?alt=reactor.core.publisher.Flux.log&text=log\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.materialize()?alt=reactor.core.publisher.Flux.materialize&text=materialize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.mergeComparingWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)?alt=reactor.core.publisher.Flux.mergeComparingWith&text=mergeComparingWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)?alt=reactor.core.publisher.Flux.mergeOrderedWith&text=mergeOrderedWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.mergeWith&text=mergeWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.metrics()?alt=reactor.core.publisher.Flux.metrics&text=metrics\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.name(java.lang.String)?alt=reactor.core.publisher.Flux.name&text=name\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.next()?alt=reactor.core.publisher.Flux.next&text=next\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer()?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(int)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>,reactor.core.publisher.BufferOverflowStrategy)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(int,reactor.core.publisher.BufferOverflowStrategy)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.onBackpressureBuffer&text=onBackpressureBuffer\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureDrop()?alt=reactor.core.publisher.Flux.onBackpressureDrop&text=onBackpressureDrop\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer<? super T>)?alt=reactor.core.publisher.Flux.onBackpressureDrop&text=onBackpressureDrop\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureError()?alt=reactor.core.publisher.Flux.onBackpressureError&text=onBackpressureError\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onBackpressureLatest()?alt=reactor.core.publisher.Flux.onBackpressureLatest&text=onBackpressureLatest\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorComplete()?alt=reactor.core.publisher.Flux.onErrorComplete&text=onErrorComplete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorComplete(java.lang.Class<? extends java.lang.Throwable>)?alt=reactor.core.publisher.Flux.onErrorComplete&text=onErrorComplete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorComplete(java.util.function.Predicate<? super java.lang.Throwable>)?alt=reactor.core.publisher.Flux.onErrorComplete&text=onErrorComplete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)?alt=reactor.core.publisher.Flux.onErrorContinue&text=onErrorContinue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)?alt=reactor.core.publisher.Flux.onErrorMap&text=onErrorMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)?alt=reactor.core.publisher.Flux.onErrorMap&text=onErrorMap\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.onErrorResume&text=onErrorResume\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)?alt=reactor.core.publisher.Flux.onErrorResume&text=onErrorResume\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorReturn(T)?alt=reactor.core.publisher.Flux.onErrorReturn&text=onErrorReturn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)?alt=reactor.core.publisher.Flux.onErrorReturn&text=onErrorReturn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onErrorStop()?alt=reactor.core.publisher.Flux.onErrorStop&text=onErrorStop\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.onTerminateDetach()?alt=reactor.core.publisher.Flux.onTerminateDetach&text=onTerminateDetach\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.or(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.or&text=or\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.parallel()?alt=reactor.core.publisher.Flux.parallel&text=parallel\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.parallel(int)?alt=reactor.core.publisher.Flux.parallel&text=parallel\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.parallel(int,int)?alt=reactor.core.publisher.Flux.parallel&text=parallel\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publish()?alt=reactor.core.publisher.Flux.publish&text=publish\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publish(int)?alt=reactor.core.publisher.Flux.publish&text=publish\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publishNext()?alt=reactor.core.publisher.Flux.publishNext&text=publishNext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.publishOn&text=publishOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,boolean,int)?alt=reactor.core.publisher.Flux.publishOn&text=publishOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,int)?alt=reactor.core.publisher.Flux.publishOn&text=publishOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.range(int,int)?alt=reactor.core.publisher.Flux.range&text=range\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.reduce(java.util.function.BiFunction<T,T,T>)?alt=reactor.core.publisher.Flux.reduce&text=reduce\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.repeat()?alt=reactor.core.publisher.Flux.repeat&text=repeat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.repeat(java.util.function.BooleanSupplier)?alt=reactor.core.publisher.Flux.repeat&text=repeat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.repeat(long)?alt=reactor.core.publisher.Flux.repeat&text=repeat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.repeat(long,java.util.function.BooleanSupplier)?alt=reactor.core.publisher.Flux.repeat&text=repeat\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)?alt=reactor.core.publisher.Flux.repeatWhen&text=repeatWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay()?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay(int)?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay(int,java.time.Duration)?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay(int,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay(java.time.Duration)?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.replay(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.replay&text=replay\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.retry()?alt=reactor.core.publisher.Flux.retry&text=retry\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.retry(long)?alt=reactor.core.publisher.Flux.retry&text=retry\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.retryWhen(reactor.util.retry.Retry)?alt=reactor.core.publisher.Flux.retryWhen&text=retryWhen\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.sample(java.time.Duration)?alt=reactor.core.publisher.Flux.sample&text=sample\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.sampleFirst(java.time.Duration)?alt=reactor.core.publisher.Flux.sampleFirst&text=sampleFirst\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.scan(java.util.function.BiFunction<T,T,T>)?alt=reactor.core.publisher.Flux.scan&text=scan\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.share()?alt=reactor.core.publisher.Flux.share&text=share\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.shareNext()?alt=reactor.core.publisher.Flux.shareNext&text=shareNext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.single()?alt=reactor.core.publisher.Flux.single&text=single\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.single(T)?alt=reactor.core.publisher.Flux.single&text=single\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.singleOrEmpty()?alt=reactor.core.publisher.Flux.singleOrEmpty&text=singleOrEmpty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skip(java.time.Duration)?alt=reactor.core.publisher.Flux.skip&text=skip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skip(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.skip&text=skip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skip(long)?alt=reactor.core.publisher.Flux.skip&text=skip\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skipLast(int)?alt=reactor.core.publisher.Flux.skipLast&text=skipLast\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.skipUntil&text=skipUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher<?>)?alt=reactor.core.publisher.Flux.skipUntilOther&text=skipUntilOther\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.skipWhile&text=skipWhile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.sort()?alt=reactor.core.publisher.Flux.sort&text=sort\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.sort(java.util.Comparator<? super T>)?alt=reactor.core.publisher.Flux.sort&text=sort\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.startWith(T...)?alt=reactor.core.publisher.Flux.startWith&text=startWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.startWith(java.lang.Iterable<? extends T>)?alt=reactor.core.publisher.Flux.startWith&text=startWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.startWith&text=startWith\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe()?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber<? super T>)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber<? super T>)?alt=reactor.core.publisher.Flux.subscribe&text=subscribe\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.subscribeOn&text=subscribeOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler,boolean)?alt=reactor.core.publisher.Flux.subscribeOn&text=subscribeOn\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)?alt=reactor.core.publisher.Flux.subscriberContext&text=subscriberContext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.subscriberContext(reactor.util.context.Context)?alt=reactor.core.publisher.Flux.subscriberContext&text=subscriberContext\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.switchIfEmpty&text=switchIfEmpty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.tag(java.lang.String,java.lang.String)?alt=reactor.core.publisher.Flux.tag&text=tag\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.take(java.time.Duration)?alt=reactor.core.publisher.Flux.take&text=take\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.take(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.take&text=take\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.take(long)?alt=reactor.core.publisher.Flux.take&text=take\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.take(long,boolean)?alt=reactor.core.publisher.Flux.take&text=take\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.takeLast(int)?alt=reactor.core.publisher.Flux.takeLast&text=takeLast\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.takeUntil&text=takeUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher<?>)?alt=reactor.core.publisher.Flux.takeUntilOther&text=takeUntilOther\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate<? super T>)?alt=reactor.core.publisher.Flux.takeWhile&text=takeWhile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.then()?alt=reactor.core.publisher.Flux.then&text=then\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)?alt=reactor.core.publisher.Flux.thenEmpty&text=thenEmpty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timed()?alt=reactor.core.publisher.Flux.timed&text=timed\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timed(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.timed&text=timed\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timeout(java.time.Duration)?alt=reactor.core.publisher.Flux.timeout&text=timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>)?alt=reactor.core.publisher.Flux.timeout&text=timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.timeout&text=timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.timeout&text=timeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timestamp()?alt=reactor.core.publisher.Flux.timestamp&text=timestamp\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.timestamp(reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.timestamp&text=timestamp\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toIterable()?alt=reactor.core.publisher.Flux.toIterable&text=toIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toIterable(int)?alt=reactor.core.publisher.Flux.toIterable&text=toIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier<java.util.Queue<T>>)?alt=reactor.core.publisher.Flux.toIterable&text=toIterable\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toStream()?alt=reactor.core.publisher.Flux.toStream&text=toStream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toStream(int)?alt=reactor.core.publisher.Flux.toStream&text=toStream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.toString()?alt=reactor.core.publisher.Flux.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(int)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(int,int)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(java.time.Duration)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.window(org.reactivestreams.Publisher<?>)?alt=reactor.core.publisher.Flux.window&text=window\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration)?alt=reactor.core.publisher.Flux.windowTimeout&text=windowTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,boolean)?alt=reactor.core.publisher.Flux.windowTimeout&text=windowTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)?alt=reactor.core.publisher.Flux.windowTimeout&text=windowTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,boolean)?alt=reactor.core.publisher.Flux.windowTimeout&text=windowTimeout\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>)?alt=reactor.core.publisher.Flux.windowUntil&text=windowUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean)?alt=reactor.core.publisher.Flux.windowUntil&text=windowUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean,int)?alt=reactor.core.publisher.Flux.windowUntil&text=windowUntil\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>)?alt=reactor.core.publisher.Flux.windowWhile&text=windowWhile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>,int)?alt=reactor.core.publisher.Flux.windowWhile&text=windowWhile\" data-throw-if-not-resolved=\"False\" />"
syntax: "public abstract class **ContinuablePagedFlux<C,T,P>**</br> extends <xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.ContinuablePagedFlux()"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.ContinuablePagedFlux()"
  name: "ContinuablePagedFlux()"
  nameWithType: "ContinuablePagedFlux<C,T,P>.ContinuablePagedFlux()"
  summary: "Creates an instance of Continuable<wbr>Paged<wbr>Flux."
  syntax: "public ContinuablePagedFlux()"
  desc: "Creates an instance of ContinuablePagedFlux.\n\nContinuation completes when the last returned continuation token is null."
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.ContinuablePagedFlux(java.util.function.Predicate<C>)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.ContinuablePagedFlux(Predicate<C> continuationPredicate)"
  name: "ContinuablePagedFlux(Predicate<C> continuationPredicate)"
  nameWithType: "ContinuablePagedFlux<C,T,P>.ContinuablePagedFlux(Predicate<C> continuationPredicate)"
  summary: "Creates an instance of Continuable<wbr>Paged<wbr>Flux."
  modifiers:
  - "protected"
  parameters:
  - description: "A predicate which determines if paging should continue."
    name: "continuationPredicate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\">Predicate</a>&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "protected ContinuablePagedFlux(Predicate<C> continuationPredicate)"
  desc: "Creates an instance of ContinuablePagedFlux.\n\nIf `continuationPredicate` is null then the predicate will only check if the continuation token is non-null."
methods:
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.byPage()"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.byPage()"
  name: "byPage()"
  nameWithType: "ContinuablePagedFlux<C,T,P>.byPage()"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page."
  modifiers:
  - "abstract"
  syntax: "public abstract Flux<P> byPage()"
  desc: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.byPage(C continuationToken)"
  name: "byPage(C continuationToken)"
  nameWithType: "ContinuablePagedFlux<C,T,P>.byPage(C continuationToken)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token."
  modifiers:
  - "abstract"
  parameters:
  - description: "A continuation token identifying the page to select."
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<P> byPage(C continuationToken)"
  desc: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.byPage(C continuationToken, int preferredPageSize)"
  name: "byPage(C continuationToken, int preferredPageSize)"
  nameWithType: "ContinuablePagedFlux<C,T,P>.byPage(C continuationToken, int preferredPageSize)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token requesting each page to contain the number of elements equal to the preferred page size."
  modifiers:
  - "abstract"
  parameters:
  - description: "A continuation token identifying the page to select."
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - description: "The preferred page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<P> byPage(C continuationToken, int preferredPageSize)"
  desc: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token requesting each page to contain the number of elements equal to the preferred page size.\n\nThe service may or may not honor the preferred page size therefore the client *MUST* be prepared to handle pages with different page sizes."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.byPage(int preferredPageSize)"
  name: "byPage(int preferredPageSize)"
  nameWithType: "ContinuablePagedFlux<C,T,P>.byPage(int preferredPageSize)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page requesting each page to contain a number of elements equal to the preferred page size."
  modifiers:
  - "abstract"
  parameters:
  - description: "The preferred page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Flux<P> byPage(int preferredPageSize)"
  desc: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page requesting each page to contain a number of elements equal to the preferred page size.\n\nThe service may or may not honor the preferred page size therefore the client *MUST* be prepared to handle pages with different page sizes."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFlux.getContinuationPredicate()"
  fullName: "com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>.getContinuationPredicate()"
  name: "getContinuationPredicate()"
  nameWithType: "ContinuablePagedFlux<C,T,P>.getContinuationPredicate()"
  summary: "Gets the <xref uid=\"java.util.function.Predicate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate\"></xref> that determines if paging should continue."
  modifiers:
  - "protected"
  - "final"
  syntax: "protected final Predicate<C> getContinuationPredicate()"
  desc: "Gets the <xref uid=\"java.util.function.Predicate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate\"></xref> that determines if paging should continue."
  returns:
    description: "The <xref uid=\"java.util.function.Predicate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate\"></xref> that determines if paging should continue."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html\">Predicate</a>&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "Type of the continuation token."
  name: "C"
- description: "Type of the elements in the page."
  name: "T"
- description: "Type of the page."
  name: "P"
desc: "This class is a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> implementation that provides the ability to operate on pages of type <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> and individual items in such pages. This type supports user-provided continuation tokens, allowing for restarting from a previously-retrieved continuation token."
metadata: {}
package: "com.azure.core.util.paging"
artifact: com.azure:azure-core:1.45.1
