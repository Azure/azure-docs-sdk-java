### YamlMime:JavaMember
nameWithType: Trainings.getTaggedImageCount
type: method
members:
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount()
  name: getTaggedImageCount()
  nameWithType: Trainings.getTaggedImageCount()
  returns:
    description: <p>the first stage of the getTaggedImageCount call </p>
    type: <xref href="TrainingsGetTaggedImageCountDefinitionStages.WithProjectId?alt=TrainingsGetTaggedImageCountDefinitionStages.WithProjectId&text=TrainingsGetTaggedImageCountDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public TrainingsGetTaggedImageCountDefinitionStages.WithProjectId getTaggedImageCount()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  name: getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  nameWithType: Trainings.getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTaggedImageCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter&text=GetTaggedImageCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the int object if successful. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public int getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount(UUID,GetTaggedImageCountOptionalParameter)
uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount*
fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount()
name: getTaggedImageCount()
package: com.microsoft.azure.cognitiveservices.vision.customvision.training
metadata: {}
