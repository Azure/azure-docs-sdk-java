### YamlMime:JavaMember
uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse*"
fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse"
name: "setReadOnlyWithResponse"
nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse"
members:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnlyWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), true)\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> {\n         final ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n             result.getKey(), result.getLabel(), result.getValue());\n     });\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nclient.setReadOnlyWithResponse(new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false)\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> {\n         ConfigurationSetting result = response.getValue();\n         System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n     });\n```"
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ConfigurationSetting>> setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly)"
  returns:
    description: "A REST response containing the read-only or not read-only ConfigurationSetting if <code>isReadOnly</code>\n is true or null, or false respectively. Or return <code>null</code> if the setting didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value.\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.1.8
