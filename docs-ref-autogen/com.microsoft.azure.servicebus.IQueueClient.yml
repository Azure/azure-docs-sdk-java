### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.IQueueClient
  id: IQueueClient
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  - com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  langs:
  - java
  name: IQueueClient
  nameWithType: IQueueClient
  fullName: com.microsoft.azure.servicebus.IQueueClient
  type: Interface
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IQueueClient.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IQueueClient.java
    startLine: 8
  package: com.microsoft.azure.servicebus
  summary: "<p>QueueClient can be used for all basic interactions with a Service Bus Queue. </p>"
  syntax:
    content: public interface IQueueClient extends IMessageSender,IMessageEntityClient
  inheritedMembers:
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.ICloseable.close()
  - com.microsoft.azure.servicebus.ICloseable.closeAsync()
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.getPrefetchCount()
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,ExecutorService)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,ExecutorService)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  - com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  - com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.IMessageAndSessionPump.setPrefetchCount(int)
- uid: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  id: getQueueName()
  parent: com.microsoft.azure.servicebus.IQueueClient
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  langs:
  - java
  name: getQueueName()
  nameWithType: IQueueClient.getQueueName()
  fullName: com.microsoft.azure.servicebus.IQueueClient.getQueueName()
  overload: com.microsoft.azure.servicebus.IQueueClient.getQueueName*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IQueueClient.java
    startLine: 22
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the name of the queue.</p>\r\n<p></p>"
  syntax:
    content: public String getQueueName()
    return:
      type: "26831127"
      description: <p>The name of the queue. </p>
- uid: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  id: getReceiveMode()
  parent: com.microsoft.azure.servicebus.IQueueClient
  href: com.microsoft.azure.servicebus.IQueueClient.yml
  langs:
  - java
  name: getReceiveMode()
  nameWithType: IQueueClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode()
  overload: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/IQueueClient.java
    startLine: 15
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver</p>\r\n<p></p>"
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
      description: <p>The receive mode. </p>
references:
- uid: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode*
  name: getReceiveMode
  nameWithType: IQueueClient.getReceiveMode
  fullName: com.microsoft.azure.servicebus.IQueueClient.getReceiveMode
  package: com.microsoft.azure.servicebus
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.servicebus.IQueueClient.getQueueName*
  name: getQueueName
  nameWithType: IQueueClient.getQueueName
  fullName: com.microsoft.azure.servicebus.IQueueClient.getQueueName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.ICloseable.close()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: "<p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>"
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: "<p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>"
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- uid: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  parent: com.microsoft.azure.servicebus.IMessageEntityClient
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.getPrefetchCount()
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,ExecutorService)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,ExecutorService)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message)
  nameWithType: IMessageSender.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message)
  nameWithType: IMessageSender.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageAndSessionPump.setPrefetchCount(int)
- uid: com.microsoft.azure.servicebus.IMessageSender
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: com.microsoft.azure.servicebus.IMessageSender
  type: Interface
  summary: "<p>Represents a message sender that sends messages to Azure Service Bus.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageSender extends IMessageEntityClient
- uid: com.microsoft.azure.servicebus.IMessageEntityClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: IMessageEntityClient
  nameWithType: IMessageEntityClient
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient
  type: Interface
  summary: "<p>Represents a messaging client to an Azure Service Bus entity.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageEntityClient extends ICloseable
- uid: com.microsoft.azure.servicebus.QueueClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: QueueClient
  nameWithType: QueueClient
  fullName: com.microsoft.azure.servicebus.QueueClient
  type: Class
  syntax:
    content: public class QueueClient
- uid: com.microsoft.azure.servicebus.ReceiveMode
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ReceiveMode.yml
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
  type: Enum
  summary: "<p>Enumeration to represent the two receive modes Azure Service Bus supports.</p>\r\n<p></p>"
  syntax:
    content: public enum ReceiveMode
- uid: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: getReceiveMode()
  nameWithType: QueueClient.getReceiveMode()
  fullName: com.microsoft.azure.servicebus.QueueClient.getReceiveMode()
  type: Method
  summary: "<p>Gets the <xref uid=\"com.microsoft.azure.servicebus.ReceiveMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveMode\"></xref> of the current receiver</p>\r\n<p></p>"
  syntax:
    content: public ReceiveMode getReceiveMode()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
      description: <p>The receive mode. </p>
- uid: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  parent: com.microsoft.azure.servicebus.QueueClient
  href: com.microsoft.azure.servicebus.QueueClient.yml
  name: getQueueName()
  nameWithType: QueueClient.getQueueName()
  fullName: com.microsoft.azure.servicebus.QueueClient.getQueueName()
  type: Method
  summary: "<p>Gets the name of the queue.</p>\r\n<p></p>"
  syntax:
    content: public String getQueueName()
    return:
      type: "26831127"
      description: <p>The name of the queue. </p>
