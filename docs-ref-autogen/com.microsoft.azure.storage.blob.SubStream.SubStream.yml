### YamlMime:JavaMember
nameWithType: SubStream.SubStream
type: constructor
members:
- fullName: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  name: SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  nameWithType: SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  parameters:
  - description: <p>The markable InputStream to be wrapped. </p>
    name: source
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A valid index in the wrapped stream where the substream should logically begin. </p>
    name: startIndex
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The length of the substream. </p>
    name: streamLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>An intrinsic lock to ensure thread-safe, concurrent operations on substream instances wrapping the same InputStream. </p>
    name: lock
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new substream instance that partitions the wrapped stream  from  up to . Each substream instance that wraps the same underlying  must share the same mutual exclusion  to avoid race conditions from concurrent operations.</p>

    <p></p>
  syntax: public SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  uid: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream,long,long,Object)
uid: com.microsoft.azure.storage.blob.SubStream.SubStream*
fullName: com.microsoft.azure.storage.blob.SubStream.SubStream
name: SubStream
package: com.microsoft.azure.storage.blob
metadata: {}
