### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByName.getByName(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
methods:
- fullName: com.microsoft.azure.management.resources.Providers.getByNameAsync(String name)
  name: getByNameAsync(String name)
  nameWithType: Providers.getByNameAsync(String name)
  parameters:
  - description: <p>the name of the provider </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call returning the found provider, if any </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a provider from Azure based on the provider name.</p>

    <p></p>
  syntax: public Observable<Provider> getByNameAsync(String name)
  uid: com.microsoft.azure.management.resources.Providers.getByNameAsync(String)
- fullName: com.microsoft.azure.management.resources.Providers.register(String resourceProviderNamespace)
  name: register(String resourceProviderNamespace)
  nameWithType: Providers.register(String resourceProviderNamespace)
  parameters:
  - description: <p>namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the registered provider </p>
    type: <xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers provider to be used with a subscription.</p>

    <p></p>
  syntax: public Provider register(String resourceProviderNamespace)
  uid: com.microsoft.azure.management.resources.Providers.register(String)
- fullName: com.microsoft.azure.management.resources.Providers.registerAsync(String resourceProviderNamespace)
  name: registerAsync(String resourceProviderNamespace)
  nameWithType: Providers.registerAsync(String resourceProviderNamespace)
  parameters:
  - description: <p>Namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call returning the registered provider if successful </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Registers provider to be used with a subscription asynchronously.</p>

    <p></p>
  syntax: public Observable<Provider> registerAsync(String resourceProviderNamespace)
  uid: com.microsoft.azure.management.resources.Providers.registerAsync(String)
- fullName: com.microsoft.azure.management.resources.Providers.registerAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  name: registerAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  nameWithType: Providers.registerAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  parameters:
  - description: <p>Namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure with the ProviderInner object wrapped as parameter if successful </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Registers provider to be used with a subscription asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Provider> registerAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  uid: com.microsoft.azure.management.resources.Providers.registerAsync(String,ServiceCallback<Provider>)
- fullName: com.microsoft.azure.management.resources.Providers.unregister(String resourceProviderNamespace)
  name: unregister(String resourceProviderNamespace)
  nameWithType: Providers.unregister(String resourceProviderNamespace)
  parameters:
  - description: <p>Namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ProviderInner object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful </p>
    type: <xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unregisters provider from a subscription.</p>

    <p></p>
  syntax: public Provider unregister(String resourceProviderNamespace)
  uid: com.microsoft.azure.management.resources.Providers.unregister(String)
- fullName: com.microsoft.azure.management.resources.Providers.unregisterAsync(String resourceProviderNamespace)
  name: unregisterAsync(String resourceProviderNamespace)
  nameWithType: Providers.unregisterAsync(String resourceProviderNamespace)
  parameters:
  - description: <p>Namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call returning the unregistered Provider if successful </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Unregisters provider from a subscription asynchronously.</p>

    <p></p>
  syntax: public Observable<Provider> unregisterAsync(String resourceProviderNamespace)
  uid: com.microsoft.azure.management.resources.Providers.unregisterAsync(String)
- fullName: com.microsoft.azure.management.resources.Providers.unregisterAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  name: unregisterAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  nameWithType: Providers.unregisterAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  parameters:
  - description: <p>namespace of the resource provider </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure with the ProviderInner object wrapped as parameter if successful </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.resources.Provider?alt=com.microsoft.azure.management.resources.Provider&text=Provider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Unregisters provider from a subscription asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Provider> unregisterAsync(String resourceProviderNamespace, ServiceCallback<Provider> callback)
  uid: com.microsoft.azure.management.resources.Providers.unregisterAsync(String,ServiceCallback<Provider>)
nameWithType: Providers
syntax: public interface Providers extends SupportsListing<Provider>,SupportsGettingByName<Provider>
type: interface
uid: com.microsoft.azure.management.resources.Providers
fullName: com.microsoft.azure.management.resources.Providers
name: Providers
package: com.microsoft.azure.management.resources
summary: <p>Entry point to providers management API. </p>
metadata: {}
