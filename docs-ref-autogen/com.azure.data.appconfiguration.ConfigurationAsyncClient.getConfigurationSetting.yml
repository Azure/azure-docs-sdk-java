### YamlMime:JavaMember
uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting*"
fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting"
name: "getConfigurationSetting"
nameWithType: "ConfigurationAsyncClient.getConfigurationSetting"
members:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  name: "getConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label)"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nclient.getConfigurationSetting(\"prodDBConnection\", null)\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label)"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  name: "getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  nameWithType: "ConfigurationAsyncClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\" and a time that one minute before now at UTC-Zone\n\n```java\nclient.getConfigurationSetting(\n     \"prodDBConnection\", null, OffsetDateTime.now(ZoneOffset.UTC).minusMinutes(1))\n     .subscriberContext(Context.of(key1, value1, key2, value2))\n     .subscribe(response -> System.out.printf(\"Key: %s, Label: %s, Value: %s\",\n         response.getKey(), response.getLabel(), response.getValue()));\n```"
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ConfigurationSetting> getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.1.8
