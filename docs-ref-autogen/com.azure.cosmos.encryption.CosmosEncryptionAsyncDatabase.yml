### YamlMime:JavaType
uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase"
fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase"
name: "CosmosEncryptionAsyncDatabase"
nameWithType: "CosmosEncryptionAsyncDatabase"
summary: "Cosmos<wbr>Encryption<wbr>Async<wbr>Database with encryption capabilities."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosEncryptionAsyncDatabase"
methods:
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.createClientEncryptionKey(java.lang.String,java.lang.String,com.azure.cosmos.models.EncryptionKeyWrapMetadata)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  name: "createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  nameWithType: "CosmosEncryptionAsyncDatabase.createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  summary: "Creates a client encryption key after subscription the operation will be performed."
  parameters:
  - description: "Client Encryption Key id."
    name: "clientEncryptionKeyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption Algorithm."
    name: "encryptionAlgorithm"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "EncryptionKeyWrapMetadata."
    name: "encryptionKeyWrapMetadata"
    type: "<xref href=\"com.azure.cosmos.models.EncryptionKeyWrapMetadata?alt=com.azure.cosmos.models.EncryptionKeyWrapMetadata&text=EncryptionKeyWrapMetadata\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosClientEncryptionKeyResponse> createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  desc: "Creates a client encryption key after subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created client encryption key. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n created cosmos client encryption key or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyResponse?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyResponse&text=CosmosClientEncryptionKeyResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getClientEncryptionKey(java.lang.String)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getClientEncryptionKey(String id)"
  name: "getClientEncryptionKey(String id)"
  nameWithType: "CosmosEncryptionAsyncDatabase.getClientEncryptionKey(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>Client<wbr>Encryption<wbr>Key object without making a service call"
  parameters:
  - description: "id of the clientEncryptionKey"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncClientEncryptionKey getClientEncryptionKey(String id)"
  desc: "Gets a CosmosAsyncClientEncryptionKey object without making a service call"
  returns:
    description: "Cosmos ClientEncryptionKey"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClientEncryptionKey?alt=com.azure.cosmos.CosmosAsyncClientEncryptionKey&text=CosmosAsyncClientEncryptionKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosAsyncDatabase()"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosAsyncDatabase()"
  name: "getCosmosAsyncDatabase()"
  nameWithType: "CosmosEncryptionAsyncDatabase.getCosmosAsyncDatabase()"
  summary: "Gets a regular async database object."
  syntax: "public CosmosAsyncDatabase getCosmosAsyncDatabase()"
  desc: "Gets a regular async database object."
  returns:
    description: "regular async database object"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncDatabase?alt=com.azure.cosmos.CosmosAsyncDatabase&text=CosmosAsyncDatabase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(com.azure.cosmos.CosmosAsyncContainer)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(CosmosAsyncContainer container)"
  name: "getCosmosEncryptionAsyncContainer(CosmosAsyncContainer container)"
  nameWithType: "CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(CosmosAsyncContainer container)"
  summary: "Gets a Container with Encryption capabilities"
  parameters:
  - description: "original container"
    name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosEncryptionAsyncContainer getCosmosEncryptionAsyncContainer(CosmosAsyncContainer container)"
  desc: "Gets a Container with Encryption capabilities"
  returns:
    description: "container with encryption capabilities"
    type: "<xref href=\"com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer?alt=com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer&text=CosmosEncryptionAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(java.lang.String)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(String containerId)"
  name: "getCosmosEncryptionAsyncContainer(String containerId)"
  nameWithType: "CosmosEncryptionAsyncDatabase.getCosmosEncryptionAsyncContainer(String containerId)"
  summary: "Gets a Container with Encryption capabilities"
  parameters:
  - description: "original container id"
    name: "containerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosEncryptionAsyncContainer getCosmosEncryptionAsyncContainer(String containerId)"
  desc: "Gets a Container with Encryption capabilities"
  returns:
    description: "container with encryption capabilities"
    type: "<xref href=\"com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer?alt=com.azure.cosmos.encryption.CosmosEncryptionAsyncContainer&text=CosmosEncryptionAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.readAllClientEncryptionKeys()"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.readAllClientEncryptionKeys()"
  name: "readAllClientEncryptionKeys()"
  nameWithType: "CosmosEncryptionAsyncDatabase.readAllClientEncryptionKeys()"
  summary: "Reads all cosmos client encryption keys in a database."
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> readAllClientEncryptionKeys()"
  desc: "Reads all cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read cosmos client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n read cosmos client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.rewrapClientEncryptionKey(java.lang.String,com.azure.cosmos.models.EncryptionKeyWrapMetadata)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionAsyncDatabase.rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  name: "rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  nameWithType: "CosmosEncryptionAsyncDatabase.rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  summary: "Rewrap a cosmos client encryption key"
  parameters:
  - description: "the client encryption key properties to create."
    name: "clientEncryptionKeyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "EncryptionKeyWrapMetadata."
    name: "newEncryptionKeyWrapMetadata"
    type: "<xref href=\"com.azure.cosmos.models.EncryptionKeyWrapMetadata?alt=com.azure.cosmos.models.EncryptionKeyWrapMetadata&text=EncryptionKeyWrapMetadata\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosClientEncryptionKeyResponse> rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  desc: "Rewrap a cosmos client encryption key"
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the read client encryption key or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyResponse?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyResponse&text=CosmosClientEncryptionKeyResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "CosmosEncryptionAsyncDatabase with encryption capabilities."
metadata: {}
package: "com.azure.cosmos.encryption"
artifact: com.azure:azure-cosmos-encryption:1.4.1
