### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  id: BlobContainersImpl
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation
  children:
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl(com.azure.resourcemanager.storage.StorageManager)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer(java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy(java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync(java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager()
  - com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  langs:
  - java
  name: BlobContainersImpl
  nameWithType: BlobContainersImpl
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  type: Class
  package: com.azure.resourcemanager.storage.implementation
  syntax:
    content: public class BlobContainersImpl extends WrapperImpl<BlobContainersClient> implements BlobContainers
  inheritance:
  - java.lang.Object
  - com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl
  implements:
  - com.azure.resourcemanager.storage.models.BlobContainers
  inheritedMembers:
  - com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.innerModel()
  - com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.setInner(InnerT)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl(com.azure.resourcemanager.storage.StorageManager)
  id: BlobContainersImpl(com.azure.resourcemanager.storage.StorageManager)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: BlobContainersImpl(StorageManager manager)
  nameWithType: BlobContainersImpl.BlobContainersImpl(StorageManager manager)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl(StorageManager manager)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl*
  type: Constructor
  package: com.azure.resourcemanager.storage.implementation
  syntax:
    content: public BlobContainersImpl(StorageManager manager)
    parameters:
    - id: manager
      type: com.azure.resourcemanager.storage.StorageManager
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  id: clearLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: clearLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  nameWithType: BlobContainersImpl.clearLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
  syntax:
    content: public Mono<LegalHold> clearLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: tags
      type: java.util.List<java.lang.String>
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.LegalHold>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer(java.lang.String)
  id: defineContainer(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: defineContainer(String name)
  nameWithType: BlobContainersImpl.defineContainer(String name)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer(String name)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Begins definition for a new Container resource.
  syntax:
    content: public BlobContainerImpl defineContainer(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.azure.resourcemanager.storage.implementation.BlobContainerImpl
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy(java.lang.String)
  id: defineImmutabilityPolicy(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: defineImmutabilityPolicy(String name)
  nameWithType: BlobContainersImpl.defineImmutabilityPolicy(String name)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy(String name)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Begins definition for a new ImmutabilityPolicy resource.
  syntax:
    content: public ImmutabilityPolicyImpl defineImmutabilityPolicy(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.azure.resourcemanager.storage.implementation.ImmutabilityPolicyImpl
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: deleteAsync(String resourceGroupName, String accountName, String containerName)
  nameWithType: BlobContainersImpl.deleteAsync(String resourceGroupName, String accountName, String containerName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync(String resourceGroupName, String accountName, String containerName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Deletes specified container under its account.
  syntax:
    content: public Mono<Void> deleteAsync(String resourceGroupName, String accountName, String containerName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  id: deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  nameWithType: BlobContainersImpl.deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
  syntax:
    content: public Mono<Void> deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  id: deleteImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  nameWithType: BlobContainersImpl.deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
  syntax:
    content: public Mono<Void> deleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: eTagValue
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean)
  id: extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites)
  nameWithType: BlobContainersImpl.extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
  syntax:
    content: public Mono<ImmutabilityPolicy> extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: immutabilityPeriodSinceCreationInDays
      type: int
    - id: allowProtectedAppendWrites
      type: java.lang.Boolean
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean,java.lang.String)
  id: extendImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Boolean,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites, String eTagValue)
  nameWithType: BlobContainersImpl.extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites, String eTagValue)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites, String eTagValue)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
  syntax:
    content: public Mono<ImmutabilityPolicy> extendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, int immutabilityPeriodSinceCreationInDays, Boolean allowProtectedAppendWrites, String eTagValue)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: immutabilityPeriodSinceCreationInDays
      type: int
    - id: allowProtectedAppendWrites
      type: java.lang.Boolean
    - id: eTagValue
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: getAsync(String resourceGroupName, String accountName, String containerName)
  nameWithType: BlobContainersImpl.getAsync(String resourceGroupName, String accountName, String containerName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync(String resourceGroupName, String accountName, String containerName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Gets properties of a specified container.
  syntax:
    content: public Mono<BlobContainer> getAsync(String resourceGroupName, String accountName, String containerName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.BlobContainer>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  id: getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  nameWithType: BlobContainersImpl.getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Gets the existing immutability policy along with the corresponding ETag in response headers and body.
  syntax:
    content: public Mono<ImmutabilityPolicy> getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  id: getImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  nameWithType: BlobContainersImpl.getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Gets the existing immutability policy along with the corresponding ETag in response headers and body.
  syntax:
    content: public Mono<ImmutabilityPolicy> getImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: eTagValue
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync(java.lang.String,java.lang.String)
  id: listAsync(java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: listAsync(String resourceGroupName, String accountName)
  nameWithType: BlobContainersImpl.listAsync(String resourceGroupName, String accountName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync(String resourceGroupName, String accountName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
  syntax:
    content: public PagedFlux<ListContainerItemInner> listAsync(String resourceGroupName, String accountName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  id: lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  nameWithType: BlobContainersImpl.lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
  syntax:
    content: public Mono<ImmutabilityPolicy> lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  id: lockImmutabilityPolicyAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  nameWithType: BlobContainersImpl.lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
  syntax:
    content: public Mono<ImmutabilityPolicy> lockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String eTagValue)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: eTagValue
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager()
  id: manager()
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: manager()
  nameWithType: BlobContainersImpl.manager()
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager()
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  syntax:
    content: public StorageManager manager()
    return:
      type: com.azure.resourcemanager.storage.StorageManager
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  id: setLegalHoldAsync(java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-storage:2.1.0
  parent: com.azure.resourcemanager.storage.implementation.BlobContainersImpl
  langs:
  - java
  name: setLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  nameWithType: BlobContainersImpl.setLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
  overload: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync*
  type: Method
  package: com.azure.resourcemanager.storage.implementation
  summary: Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
  syntax:
    content: public Mono<LegalHold> setLegalHoldAsync(String resourceGroupName, String accountName, String containerName, List<String> tags)
    parameters:
    - id: resourceGroupName
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: containerName
      type: java.lang.String
    - id: tags
      type: java.util.List<java.lang.String>
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.LegalHold>
references:
- uid: com.azure.resourcemanager.storage.StorageManager
  name: StorageManager
  nameWithType: StorageManager
  fullName: com.azure.resourcemanager.storage.StorageManager
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl*
  name: BlobContainersImpl
  nameWithType: BlobContainersImpl.BlobContainersImpl
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.BlobContainersImpl
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager*
  name: manager
  nameWithType: BlobContainersImpl.manager
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.manager
  package: com.azure.resourcemanager.storage.implementation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.resourcemanager.storage.implementation.BlobContainerImpl
  spec.java:
  - uid: com.azure.resourcemanager.storage.implementation.BlobContainerImpl
    name: BlobContainerImpl
    fullName: com.azure.resourcemanager.storage.implementation.BlobContainerImpl
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer*
  name: defineContainer
  nameWithType: BlobContainersImpl.defineContainer
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineContainer
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.storage.implementation.ImmutabilityPolicyImpl
  spec.java:
  - uid: com.azure.resourcemanager.storage.implementation.ImmutabilityPolicyImpl
    name: ImmutabilityPolicyImpl
    fullName: com.azure.resourcemanager.storage.implementation.ImmutabilityPolicyImpl
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy*
  name: defineImmutabilityPolicy
  nameWithType: BlobContainersImpl.defineImmutabilityPolicy
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.defineImmutabilityPolicy
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.core.http.rest.PagedFlux<com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner
    name: ListContainerItemInner
    fullName: com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync*
  name: listAsync
  nameWithType: BlobContainersImpl.listAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.listAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.BlobContainer>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.storage.models.BlobContainer
    name: BlobContainer
    fullName: com.azure.resourcemanager.storage.models.BlobContainer
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync*
  name: getAsync
  nameWithType: BlobContainersImpl.getAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync*
  name: deleteAsync
  nameWithType: BlobContainersImpl.deleteAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.LegalHold>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.storage.models.LegalHold
    name: LegalHold
    fullName: com.azure.resourcemanager.storage.models.LegalHold
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync*
  name: setLegalHoldAsync
  nameWithType: BlobContainersImpl.setLegalHoldAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.setLegalHoldAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync*
  name: clearLegalHoldAsync
  nameWithType: BlobContainersImpl.clearLegalHoldAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.clearLegalHoldAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: reactor.core.publisher.Mono<com.azure.resourcemanager.storage.models.ImmutabilityPolicy>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.storage.models.ImmutabilityPolicy
    name: ImmutabilityPolicy
    fullName: com.azure.resourcemanager.storage.models.ImmutabilityPolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync*
  name: getImmutabilityPolicyAsync
  nameWithType: BlobContainersImpl.getImmutabilityPolicyAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.getImmutabilityPolicyAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync*
  name: deleteImmutabilityPolicyAsync
  nameWithType: BlobContainersImpl.deleteImmutabilityPolicyAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.deleteImmutabilityPolicyAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync*
  name: lockImmutabilityPolicyAsync
  nameWithType: BlobContainersImpl.lockImmutabilityPolicyAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.lockImmutabilityPolicyAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync*
  name: extendImmutabilityPolicyAsync
  nameWithType: BlobContainersImpl.extendImmutabilityPolicyAsync
  fullName: com.azure.resourcemanager.storage.implementation.BlobContainersImpl.extendImmutabilityPolicyAsync
  package: com.azure.resourcemanager.storage.implementation
- uid: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl<com.azure.resourcemanager.storage.fluent.BlobContainersClient>
  name: WrapperImpl<BlobContainersClient>
  nameWithType: WrapperImpl<BlobContainersClient>
  fullName: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl<com.azure.resourcemanager.storage.fluent.BlobContainersClient>
- uid: com.azure.resourcemanager.storage.models.BlobContainers
  name: BlobContainers
  nameWithType: BlobContainers
  fullName: com.azure.resourcemanager.storage.models.BlobContainers
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.innerModel()
  name: WrapperImpl.innerModel()
  nameWithType: WrapperImpl.innerModel()
  fullName: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.innerModel()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.setInner(InnerT)
  name: WrapperImpl.setInner(InnerT)
  nameWithType: WrapperImpl.setInner(InnerT)
  fullName: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl.setInner(InnerT)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner
  name: ListContainerItemInner
  nameWithType: ListContainerItemInner
  fullName: com.azure.resourcemanager.storage.fluent.models.ListContainerItemInner
- uid: com.azure.resourcemanager.storage.models.BlobContainer
  name: BlobContainer
  nameWithType: BlobContainer
  fullName: com.azure.resourcemanager.storage.models.BlobContainer
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.resourcemanager.storage.models.LegalHold
  name: LegalHold
  nameWithType: LegalHold
  fullName: com.azure.resourcemanager.storage.models.LegalHold
- uid: com.azure.resourcemanager.storage.models.ImmutabilityPolicy
  name: ImmutabilityPolicy
  nameWithType: ImmutabilityPolicy
  fullName: com.azure.resourcemanager.storage.models.ImmutabilityPolicy
- uid: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl
  name: WrapperImpl
  nameWithType: WrapperImpl
  fullName: com.azure.resourcemanager.resources.fluentcore.model.implementation.WrapperImpl
- uid: com.azure.resourcemanager.storage.fluent.BlobContainersClient
  name: BlobContainersClient
  nameWithType: BlobContainersClient
  fullName: com.azure.resourcemanager.storage.fluent.BlobContainersClient
