### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  name: addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  nameWithType: Models.addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model containing the name and words for the new list entity extractor. </p>
    name: closedListModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject&text=ClosedListModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a list entity model to a version of the application.</p>

    <p></p>
  syntax: public UUID addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addClosedList(UUID,String,ClosedListModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  name: addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  nameWithType: Models.addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model containing the name and words for the new list entity extractor. </p>
    name: closedListModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject&text=ClosedListModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a list entity model to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addClosedListAsync(UUID,String,ClosedListModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChild()
  name: addCompositeEntityChild()
  nameWithType: Models.addCompositeEntityChild()
  returns:
    description: <p>the first stage of the addCompositeEntityChild call </p>
    type: <xref href="ModelsAddCompositeEntityChildDefinitionStages.WithAppId?alt=ModelsAddCompositeEntityChildDefinitionStages.WithAppId&text=ModelsAddCompositeEntityChildDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a single child in an existing composite entity model in a version of the application.</p>

    <p></p>
  syntax: public ModelsAddCompositeEntityChildDefinitionStages.WithAppId addCompositeEntityChild()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChild()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  name: addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  nameWithType: Models.addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addCompositeEntityChildOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter&text=AddCompositeEntityChildOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a single child in an existing composite entity model in a version of the application.</p>

    <p></p>
  syntax: public UUID addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChild(UUID,String,UUID,AddCompositeEntityChildOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  name: addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  nameWithType: Models.addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addCompositeEntityChildOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter&text=AddCompositeEntityChildOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a single child in an existing composite entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCompositeEntityChildAsync(UUID,String,UUID,AddCompositeEntityChildOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomain()
  name: addCustomPrebuiltDomain()
  nameWithType: Models.addCustomPrebuiltDomain()
  returns:
    description: <p>the first stage of the addCustomPrebuiltDomain call </p>
    type: <xref href="ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId?alt=ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId&text=ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId addCustomPrebuiltDomain()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomain()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  name: addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  nameWithType: Models.addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addCustomPrebuiltDomainOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter&text=AddCustomPrebuiltDomainModelsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;UUID&gt; object if successful. </p>
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public List<UUID> addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomain(UUID,String,AddCustomPrebuiltDomainModelsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  name: addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  nameWithType: Models.addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addCustomPrebuiltDomainOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter&text=AddCustomPrebuiltDomainModelsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;UUID&gt; object </p>
    type: <xref href="Observable%3CList%3CUUID%3E%3E?alt=Observable%3CList%3CUUID%3E%3E&text=Observable%3CList%3CUUID%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<UUID>> addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltDomainAsync(UUID,String,AddCustomPrebuiltDomainModelsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  name: addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  nameWithType: Models.addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. </p>
    name: prebuiltDomainModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject&text=PrebuiltDomainModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a prebuilt entity model to a version of the application.</p>

    <p></p>
  syntax: public UUID addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltEntity(UUID,String,PrebuiltDomainModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  name: addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  nameWithType: Models.addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. </p>
    name: prebuiltDomainModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject&text=PrebuiltDomainModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a prebuilt entity model to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltEntityAsync(UUID,String,PrebuiltDomainModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  name: addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  nameWithType: Models.addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. </p>
    name: prebuiltDomainModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject&text=PrebuiltDomainModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a customizable prebuilt intent model to a version of the application.</p>

    <p></p>
  syntax: public UUID addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltIntent(UUID,String,PrebuiltDomainModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  name: addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  nameWithType: Models.addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. </p>
    name: prebuiltDomainModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject&text=PrebuiltDomainModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a customizable prebuilt intent model to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addCustomPrebuiltIntentAsync(UUID,String,PrebuiltDomainModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntity(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  name: addEntity(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  nameWithType: Models.addEntity(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the new entity extractor and its children. </p>
    name: entityModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelCreateObject&text=EntityModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an entity extractor to a version of the application.</p>

    <p></p>
  syntax: public UUID addEntity(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntity(UUID,String,EntityModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityAsync(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  name: addEntityAsync(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  nameWithType: Models.addEntityAsync(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the new entity extractor and its children. </p>
    name: entityModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelCreateObject&text=EntityModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an entity extractor to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addEntityAsync(UUID appId, String versionId, EntityModelCreateObject entityModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityAsync(UUID,String,EntityModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityChild(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  name: addEntityChild(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  nameWithType: Models.addEntityChild(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the new child model and its children. </p>
    name: childEntityModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ChildEntityModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ChildEntityModelCreateObject&text=ChildEntityModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a single child in an existing entity model hierarchy in a version of the application.</p>

    <p></p>
  syntax: public UUID addEntityChild(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityChild(UUID,String,UUID,ChildEntityModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityChildAsync(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  name: addEntityChildAsync(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  nameWithType: Models.addEntityChildAsync(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name of the new child model and its children. </p>
    name: childEntityModelCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ChildEntityModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ChildEntityModelCreateObject&text=ChildEntityModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a single child in an existing entity model hierarchy in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addEntityChildAsync(UUID appId, String versionId, UUID entityId, ChildEntityModelCreateObject childEntityModelCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addEntityChildAsync(UUID,String,UUID,ChildEntityModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItem()
  name: addExplicitListItem()
  nameWithType: Models.addExplicitListItem()
  returns:
    description: <p>the first stage of the addExplicitListItem call </p>
    type: <xref href="ModelsAddExplicitListItemDefinitionStages.WithAppId?alt=ModelsAddExplicitListItemDefinitionStages.WithAppId&text=ModelsAddExplicitListItemDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsAddExplicitListItemDefinitionStages.WithAppId addExplicitListItem()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItem()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  name: addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  nameWithType: Models.addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addExplicitListItemOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter&text=AddExplicitListItemOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the int object if successful. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public int addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItem(UUID,String,UUID,AddExplicitListItemOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  name: addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  nameWithType: Models.addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addExplicitListItemOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter&text=AddExplicitListItemOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the int object </p>
    type: <xref href="Observable%3CInteger%3E?alt=Observable%3CInteger%3E&text=Observable%3CInteger%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<Integer> addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addExplicitListItemAsync(UUID,String,UUID,AddExplicitListItemOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntent()
  name: addIntent()
  nameWithType: Models.addIntent()
  returns:
    description: <p>the first stage of the addIntent call </p>
    type: <xref href="ModelsAddIntentDefinitionStages.WithAppId?alt=ModelsAddIntentDefinitionStages.WithAppId&text=ModelsAddIntentDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an intent to a version of the application.</p>

    <p></p>
  syntax: public ModelsAddIntentDefinitionStages.WithAppId addIntent()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntent()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  name: addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  nameWithType: Models.addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter&text=AddIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an intent to a version of the application.</p>

    <p></p>
  syntax: public UUID addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntent(UUID,String,AddIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  name: addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  nameWithType: Models.addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter&text=AddIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an intent to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addIntentAsync(UUID,String,AddIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  name: addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  nameWithType: Models.addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An array of prebuilt entity extractor names. </p>
    name: prebuiltExtractorNames
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PrebuiltEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a list of prebuilt entities to a version of the application.</p>

    <p></p>
  syntax: public List<PrebuiltEntityExtractor> addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addPrebuilt(UUID,String,List<String>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  name: addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  nameWithType: Models.addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An array of prebuilt entity extractor names. </p>
    name: prebuiltExtractorNames
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PrebuiltEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a list of prebuilt entities to a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PrebuiltEntityExtractor>> addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addPrebuiltAsync(UUID,String,List<String>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  name: addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  nameWithType: Models.addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Words list. </p>
    name: wordListCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject&text=WordListObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the long object if successful. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a sublist to an existing list entity in a version of the application.</p>

    <p></p>
  syntax: public long addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addSubList(UUID,String,UUID,WordListObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  name: addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  nameWithType: Models.addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Words list. </p>
    name: wordListCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject&text=WordListObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the long object </p>
    type: <xref href="Observable%3CLong%3E?alt=Observable%3CLong%3E&text=Observable%3CLong%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a sublist to an existing list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<Long> addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.addSubListAsync(UUID,String,UUID,WordListObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRole()
  name: createClosedListEntityRole()
  nameWithType: Models.createClosedListEntityRole()
  returns:
    description: <p>the first stage of the createClosedListEntityRole call </p>
    type: <xref href="ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId&text=ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a list entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId createClosedListEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  name: createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  nameWithType: Models.createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createClosedListEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter&text=CreateClosedListEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a list entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRole(UUID,String,UUID,CreateClosedListEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  name: createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  nameWithType: Models.createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createClosedListEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter&text=CreateClosedListEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createClosedListEntityRoleAsync(UUID,String,UUID,CreateClosedListEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRole()
  name: createCompositeEntityRole()
  nameWithType: Models.createCompositeEntityRole()
  returns:
    description: <p>the first stage of the createCompositeEntityRole call </p>
    type: <xref href="ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId&text=ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a composite entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId createCompositeEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  name: createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  nameWithType: Models.createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createCompositeEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter&text=CreateCompositeEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a composite entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRole(UUID,String,UUID,CreateCompositeEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  name: createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  nameWithType: Models.createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createCompositeEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter&text=CreateCompositeEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCompositeEntityRoleAsync(UUID,String,UUID,CreateCompositeEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRole()
  name: createCustomPrebuiltEntityRole()
  nameWithType: Models.createCustomPrebuiltEntityRole()
  returns:
    description: <p>the first stage of the createCustomPrebuiltEntityRole call </p>
    type: <xref href="ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId&text=ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId createCustomPrebuiltEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  name: createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createCustomPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter&text=CreateCustomPrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRole(UUID,String,UUID,CreateCustomPrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  name: createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createCustomPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter&text=CreateCustomPrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createCustomPrebuiltEntityRoleAsync(UUID,String,UUID,CreateCustomPrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRole()
  name: createEntityRole()
  nameWithType: Models.createEntityRole()
  returns:
    description: <p>the first stage of the createEntityRole call </p>
    type: <xref href="ModelsCreateEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateEntityRoleDefinitionStages.WithAppId&text=ModelsCreateEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create an entity role in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateEntityRoleDefinitionStages.WithAppId createEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  name: createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  nameWithType: Models.createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter&text=CreateEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create an entity role in a version of the application.</p>

    <p></p>
  syntax: public UUID createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRole(UUID,String,UUID,CreateEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  name: createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  nameWithType: Models.createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter&text=CreateEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create an entity role in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createEntityRoleAsync(UUID,String,UUID,CreateEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRole()
  name: createHierarchicalEntityRole()
  nameWithType: Models.createHierarchicalEntityRole()
  returns:
    description: <p>the first stage of the createHierarchicalEntityRole call </p>
    type: <xref href="ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId&text=ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId createHierarchicalEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  name: createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  nameWithType: Models.createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createHierarchicalEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter&text=CreateHierarchicalEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRole(UUID,String,UUID,CreateHierarchicalEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  name: createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  nameWithType: Models.createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createHierarchicalEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter&text=CreateHierarchicalEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createHierarchicalEntityRoleAsync(UUID,String,UUID,CreateHierarchicalEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  name: createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  nameWithType: Models.createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name and explicit list for the new Pattern.Any entity extractor. </p>
    name: extractorCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject&text=PatternAnyModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pattern.any entity extractor to a version of the application.</p>

    <p></p>
  syntax: public UUID createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityModel(UUID,String,PatternAnyModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  name: createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  nameWithType: Models.createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name and explicit list for the new Pattern.Any entity extractor. </p>
    name: extractorCreateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject&text=PatternAnyModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pattern.any entity extractor to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityModelAsync(UUID,String,PatternAnyModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRole()
  name: createPatternAnyEntityRole()
  nameWithType: Models.createPatternAnyEntityRole()
  returns:
    description: <p>the first stage of the createPatternAnyEntityRole call </p>
    type: <xref href="ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId?alt=ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId&text=ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId createPatternAnyEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  name: createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  nameWithType: Models.createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createPatternAnyEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter&text=CreatePatternAnyEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRole(UUID,String,UUID,CreatePatternAnyEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  name: createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  nameWithType: Models.createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createPatternAnyEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter&text=CreatePatternAnyEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPatternAnyEntityRoleAsync(UUID,String,UUID,CreatePatternAnyEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRole()
  name: createPrebuiltEntityRole()
  nameWithType: Models.createPrebuiltEntityRole()
  returns:
    description: <p>the first stage of the createPrebuiltEntityRole call </p>
    type: <xref href="ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId?alt=ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId&text=ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId createPrebuiltEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  name: createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter&text=CreatePrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRole(UUID,String,UUID,CreatePrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  name: createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter&text=CreatePrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createPrebuiltEntityRoleAsync(UUID,String,UUID,CreatePrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  name: createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  nameWithType: Models.createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name and regex pattern for the new regular expression entity extractor. </p>
    name: regexEntityExtractorCreateObj
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject&text=RegexModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a regular expression entity model to a version of the application.</p>

    <p></p>
  syntax: public UUID createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityModel(UUID,String,RegexModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  name: createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  nameWithType: Models.createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name and regex pattern for the new regular expression entity extractor. </p>
    name: regexEntityExtractorCreateObj
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject&text=RegexModelCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a regular expression entity model to a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityModelAsync(UUID,String,RegexModelCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRole()
  name: createRegexEntityRole()
  nameWithType: Models.createRegexEntityRole()
  returns:
    description: <p>the first stage of the createRegexEntityRole call </p>
    type: <xref href="ModelsCreateRegexEntityRoleDefinitionStages.WithAppId?alt=ModelsCreateRegexEntityRoleDefinitionStages.WithAppId&text=ModelsCreateRegexEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsCreateRegexEntityRoleDefinitionStages.WithAppId createRegexEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  name: createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  nameWithType: Models.createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createRegexEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter&text=CreateRegexEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UUID object if successful. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public UUID createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRole(UUID,String,UUID,CreateRegexEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  name: createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  nameWithType: Models.createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity model ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createRegexEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter&text=CreateRegexEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UUID object </p>
    type: <xref href="Observable%3CUUID%3E?alt=Observable%3CUUID%3E&text=Observable%3CUUID%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a role for an regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<UUID> createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.createRegexEntityRoleAsync(UUID,String,UUID,CreateRegexEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedList(UUID appId, String versionId, UUID clEntityId)
  name: deleteClosedList(UUID appId, String versionId, UUID clEntityId)
  nameWithType: Models.deleteClosedList(UUID appId, String versionId, UUID clEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a list entity model from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteClosedList(UUID appId, String versionId, UUID clEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedList(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  name: deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  nameWithType: Models.deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a list entity model from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteClosedListEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  name: deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a composite entity from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  name: deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a composite entity from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  name: deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  nameWithType: Models.deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: cChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a composite entity extractor child from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityChild(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  name: deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  nameWithType: Models.deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: cChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a composite entity extractor child from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityChildAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  name: deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  nameWithType: Models.deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  name: deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  nameWithType: Models.deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCompositeEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName)
  name: deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName)
  nameWithType: Models.deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Domain name. </p>
    name: domainName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a prebuilt domain's models in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomPrebuiltDomain(UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName)
  name: deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName)
  nameWithType: Models.deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Domain name. </p>
    name: domainName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a prebuilt domain's models in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteCustomPrebuiltDomainAsync(UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntity(UUID appId, String versionId, UUID entityId)
  name: deleteEntity(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.deleteEntity(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor or the child entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an entity or a child from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteEntity(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityAsync(UUID appId, String versionId, UUID entityId)
  name: deleteEntityAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.deleteEntityAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor or the child entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes an entity or a child from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteEntityAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityFeature(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  name: deleteEntityFeature(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  nameWithType: Models.deleteEntityFeature(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A feature information object containing the feature relation to delete. </p>
    name: featureRelationDeleteObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a relation from the feature relations used by the entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteEntityFeature(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityFeature(UUID,String,UUID,ModelFeatureInformation)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityFeatureAsync(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  name: deleteEntityFeatureAsync(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  nameWithType: Models.deleteEntityFeatureAsync(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A feature information object containing the feature relation to delete. </p>
    name: featureRelationDeleteObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a relation from the feature relations used by the entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteEntityFeatureAsync(UUID appId, String versionId, UUID entityId, ModelFeatureInformation featureRelationDeleteObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityFeatureAsync(UUID,String,UUID,ModelFeatureInformation)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an entity role in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete an entity role in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  name: deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  nameWithType: Models.deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern.any entity id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item which will be deleted. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteExplicitListItem(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  name: deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  nameWithType: Models.deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern.any entity id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item which will be deleted. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteExplicitListItemAsync(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  name: deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a hierarchical entity from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  name: deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a hierarchical entity from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  name: deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  nameWithType: Models.deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a hierarchical entity extractor child in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityChild(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  name: deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  nameWithType: Models.deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a hierarchical entity extractor child in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityChildAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  name: deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  nameWithType: Models.deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given hierarchical role in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  name: deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  nameWithType: Models.deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given hierarchical role in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteHierarchicalEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntent()
  name: deleteIntent()
  nameWithType: Models.deleteIntent()
  returns:
    description: <p>the first stage of the deleteIntent call </p>
    type: <xref href="ModelsDeleteIntentDefinitionStages.WithAppId?alt=ModelsDeleteIntentDefinitionStages.WithAppId&text=ModelsDeleteIntentDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an intent from a version of the application.</p>

    <p></p>
  syntax: public ModelsDeleteIntentDefinitionStages.WithAppId deleteIntent()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntent()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  name: deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  nameWithType: Models.deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: deleteIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter&text=DeleteIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an intent from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntent(UUID,String,UUID,DeleteIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  name: deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  nameWithType: Models.deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: deleteIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter&text=DeleteIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes an intent from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentAsync(UUID,String,UUID,DeleteIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentFeature(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  name: deleteIntentFeature(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  nameWithType: Models.deleteIntentFeature(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A feature information object containing the feature relation to delete. </p>
    name: featureRelationDeleteObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a relation from the feature relations used by the intent in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteIntentFeature(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentFeature(UUID,String,UUID,ModelFeatureInformation)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentFeatureAsync(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  name: deleteIntentFeatureAsync(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  nameWithType: Models.deleteIntentFeatureAsync(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A feature information object containing the feature relation to delete. </p>
    name: featureRelationDeleteObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a relation from the feature relations used by the intent in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteIntentFeatureAsync(UUID appId, String versionId, UUID intentId, ModelFeatureInformation featureRelationDeleteObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteIntentFeatureAsync(UUID,String,UUID,ModelFeatureInformation)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId)
  name: deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a Pattern.Any entity extractor from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityModel(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId)
  name: deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a Pattern.Any entity extractor from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityModelAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePatternAnyEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuilt(UUID appId, String versionId, UUID prebuiltId)
  name: deletePrebuilt(UUID appId, String versionId, UUID prebuiltId)
  nameWithType: Models.deletePrebuilt(UUID appId, String versionId, UUID prebuiltId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The prebuilt entity extractor ID. </p>
    name: prebuiltId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a prebuilt entity extractor from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deletePrebuilt(UUID appId, String versionId, UUID prebuiltId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuilt(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  name: deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  nameWithType: Models.deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The prebuilt entity extractor ID. </p>
    name: prebuiltId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a prebuilt entity extractor from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role in a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role in a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deletePrebuiltEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId)
  name: deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId)
  nameWithType: Models.deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity extractor ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a regular expression entity from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityModel(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId)
  name: deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId)
  nameWithType: Models.deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity extractor ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a regular expression entity from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityModelAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a role for a given regular expression in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role Id. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Delete a role for a given regular expression in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteRegexEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteSubList(UUID appId, String versionId, UUID clEntityId, long subListId)
  name: deleteSubList(UUID appId, String versionId, UUID clEntityId, long subListId)
  nameWithType: Models.deleteSubList(UUID appId, String versionId, UUID clEntityId, long subListId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The sublist ID. </p>
    name: subListId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a sublist of a specific list entity model from a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteSubList(UUID appId, String versionId, UUID clEntityId, long subListId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteSubList(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId)
  name: deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId)
  nameWithType: Models.deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The sublist ID. </p>
    name: subListId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a sublist of a specific list entity model from a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.deleteSubListAsync(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethod()
  name: examplesMethod()
  nameWithType: Models.examplesMethod()
  returns:
    description: <p>the first stage of the examplesMethod call </p>
    type: <xref href="ModelsExamplesMethodDefinitionStages.WithAppId?alt=ModelsExamplesMethodDefinitionStages.WithAppId&text=ModelsExamplesMethodDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the example utterances for the given intent or entity model in a version of the application.</p>

    <p></p>
  syntax: public ModelsExamplesMethodDefinitionStages.WithAppId examplesMethod()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethod()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  name: examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  nameWithType: Models.examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID (GUID) of the model. </p>
    name: modelId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: examplesMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter&text=ExamplesMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;LabelTextObject&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject&text=LabelTextObject" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the example utterances for the given intent or entity model in a version of the application.</p>

    <p></p>
  syntax: public List<LabelTextObject> examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethod(UUID,String,String,ExamplesMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  name: examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  nameWithType: Models.examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID (GUID) of the model. </p>
    name: modelId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: examplesMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter&text=ExamplesMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;LabelTextObject&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject&text=LabelTextObject" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the example utterances for the given intent or entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<LabelTextObject>> examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.examplesMethodAsync(UUID,String,String,ExamplesMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedList(UUID appId, String versionId, UUID clEntityId)
  name: getClosedList(UUID appId, String versionId, UUID clEntityId)
  nameWithType: Models.getClosedList(UUID appId, String versionId, UUID clEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ClosedListEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor&text=ClosedListEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a list entity in a version of the application.</p>

    <p></p>
  syntax: public ClosedListEntityExtractor getClosedList(UUID appId, String versionId, UUID clEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedList(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  name: getClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  nameWithType: Models.getClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ClosedListEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor&text=ClosedListEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<ClosedListEntityExtractor> getClosedListAsync(UUID appId, String versionId, UUID clEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getClosedListEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  name: getCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.getCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CompositeEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor&text=CompositeEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a composite entity in a version of the application.</p>

    <p></p>
  syntax: public CompositeEntityExtractor getCompositeEntity(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  name: getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CompositeEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor&text=CompositeEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<CompositeEntityExtractor> getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  name: getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  nameWithType: Models.getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  name: getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  nameWithType: Models.getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCompositeEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCustomEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getCustomEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntity(UUID appId, String versionId, UUID entityId)
  name: getEntity(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getEntity(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the NDepthEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor&text=NDepthEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about an entity model in a version of the application.</p>

    <p></p>
  syntax: public NDepthEntityExtractor getEntity(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityAsync(UUID appId, String versionId, UUID entityId)
  name: getEntityAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getEntityAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the NDepthEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor&text=NDepthEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about an entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<NDepthEntityExtractor> getEntityAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityFeatures(UUID appId, String versionId, UUID entityId)
  name: getEntityFeatures(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getEntityFeatures(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ModelFeatureInformation&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information of the features used by the entity in a version of the application.</p>

    <p></p>
  syntax: public List<ModelFeatureInformation> getEntityFeatures(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityFeatures(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityFeaturesAsync(UUID appId, String versionId, UUID entityId)
  name: getEntityFeaturesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getEntityFeaturesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ModelFeatureInformation&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the information of the features used by the entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<ModelFeatureInformation>> getEntityFeaturesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityFeaturesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitList(UUID appId, String versionId, UUID entityId)
  name: getExplicitList(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getExplicitList(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ExplicitListItem&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem&text=ExplicitListItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the explicit (exception) list of the pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public List<ExplicitListItem> getExplicitList(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitList(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListAsync(UUID appId, String versionId, UUID entityId)
  name: getExplicitListAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getExplicitListAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ExplicitListItem&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem&text=ExplicitListItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get the explicit (exception) list of the pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<ExplicitListItem>> getExplicitListAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  name: getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  nameWithType: Models.getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item Id. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ExplicitListItem object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem&text=ExplicitListItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the explicit (exception) list of the pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public ExplicitListItem getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListItem(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  name: getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  nameWithType: Models.getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item Id. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ExplicitListItem object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem&text=ExplicitListItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the explicit (exception) list of the pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<ExplicitListItem> getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getExplicitListItemAsync(UUID,String,UUID,long)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  name: getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the HierarchicalEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor&text=HierarchicalEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public HierarchicalEntityExtractor getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntity(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  name: getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the HierarchicalEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor&text=HierarchicalEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<HierarchicalEntityExtractor> getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  name: getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  nameWithType: Models.getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the HierarchicalChildEntity object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity&text=HierarchicalChildEntity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the child's model contained in an hierarchical entity child model in a version of the application.</p>

    <p></p>
  syntax: public HierarchicalChildEntity getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityChild(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  name: getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  nameWithType: Models.getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the HierarchicalChildEntity object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity&text=HierarchicalChildEntity" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the child's model contained in an hierarchical entity child model in a version of the application.</p>

    <p></p>
  syntax: public Observable<HierarchicalChildEntity> getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityChildAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  name: getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  nameWithType: Models.getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  name: getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  nameWithType: Models.getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getHierarchicalEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntent(UUID appId, String versionId, UUID intentId)
  name: getIntent(UUID appId, String versionId, UUID intentId)
  nameWithType: Models.getIntent(UUID appId, String versionId, UUID intentId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the IntentClassifier object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the intent model in a version of the application.</p>

    <p></p>
  syntax: public IntentClassifier getIntent(UUID appId, String versionId, UUID intentId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntent(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentAsync(UUID appId, String versionId, UUID intentId)
  name: getIntentAsync(UUID appId, String versionId, UUID intentId)
  nameWithType: Models.getIntentAsync(UUID appId, String versionId, UUID intentId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the IntentClassifier object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the intent model in a version of the application.</p>

    <p></p>
  syntax: public Observable<IntentClassifier> getIntentAsync(UUID appId, String versionId, UUID intentId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentFeatures(UUID appId, String versionId, UUID intentId)
  name: getIntentFeatures(UUID appId, String versionId, UUID intentId)
  nameWithType: Models.getIntentFeatures(UUID appId, String versionId, UUID intentId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ModelFeatureInformation&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information of the features used by the intent in a version of the application.</p>

    <p></p>
  syntax: public List<ModelFeatureInformation> getIntentFeatures(UUID appId, String versionId, UUID intentId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentFeatures(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentFeaturesAsync(UUID appId, String versionId, UUID intentId)
  name: getIntentFeaturesAsync(UUID appId, String versionId, UUID intentId)
  nameWithType: Models.getIntentFeaturesAsync(UUID appId, String versionId, UUID intentId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ModelFeatureInformation&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the information of the features used by the intent in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<ModelFeatureInformation>> getIntentFeaturesAsync(UUID appId, String versionId, UUID intentId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getIntentFeaturesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId)
  name: getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PatternAnyEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor&text=PatternAnyEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the Pattern.Any model in a version of the application.</p>

    <p></p>
  syntax: public PatternAnyEntityExtractor getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityInfo(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId)
  name: getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PatternAnyEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor&text=PatternAnyEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the Pattern.Any model in a version of the application.</p>

    <p></p>
  syntax: public Observable<PatternAnyEntityExtractor> getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityInfoAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPatternAnyEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuilt(UUID appId, String versionId, UUID prebuiltId)
  name: getPrebuilt(UUID appId, String versionId, UUID prebuiltId)
  nameWithType: Models.getPrebuilt(UUID appId, String versionId, UUID prebuiltId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The prebuilt entity extractor ID. </p>
    name: prebuiltId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PrebuiltEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a prebuilt entity model in a version of the application.</p>

    <p></p>
  syntax: public PrebuiltEntityExtractor getPrebuilt(UUID appId, String versionId, UUID prebuiltId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuilt(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  name: getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  nameWithType: Models.getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The prebuilt entity extractor ID. </p>
    name: prebuiltId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PrebuiltEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a prebuilt entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<PrebuiltEntityExtractor> getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getPrebuiltEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId)
  name: getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId)
  nameWithType: Models.getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity model ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegexEntityExtractor object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor&text=RegexEntityExtractor" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public RegexEntityExtractor getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityEntityInfo(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId)
  name: getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId)
  nameWithType: Models.getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity model ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegexEntityExtractor object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor&text=RegexEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<RegexEntityExtractor> getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityEntityInfoAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EntityRole object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get one role for a given regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public EntityRole getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityRole(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  name: getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  nameWithType: Models.getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EntityRole object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get one role for a given regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<EntityRole> getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.getRegexEntityRoleAsync(UUID,String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listClosedListEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listClosedListEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a list entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listClosedListEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedLists()
  name: listClosedLists()
  nameWithType: Models.listClosedLists()
  returns:
    description: <p>the first stage of the listClosedLists call </p>
    type: <xref href="ModelsListClosedListsDefinitionStages.WithAppId?alt=ModelsListClosedListsDefinitionStages.WithAppId&text=ModelsListClosedListsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the list entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListClosedListsDefinitionStages.WithAppId listClosedLists()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedLists()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  name: listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  nameWithType: Models.listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listClosedListsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter&text=ListClosedListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ClosedListEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor&text=ClosedListEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the list entity models in a version of the application.</p>

    <p></p>
  syntax: public List<ClosedListEntityExtractor> listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedLists(UUID,String,ListClosedListsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  name: listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  nameWithType: Models.listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listClosedListsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter&text=ListClosedListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ClosedListEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor&text=ClosedListEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the list entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<ClosedListEntityExtractor>> listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listClosedListsAsync(UUID,String,ListClosedListsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntities()
  name: listCompositeEntities()
  nameWithType: Models.listCompositeEntities()
  returns:
    description: <p>the first stage of the listCompositeEntities call </p>
    type: <xref href="ModelsListCompositeEntitiesDefinitionStages.WithAppId?alt=ModelsListCompositeEntitiesDefinitionStages.WithAppId&text=ModelsListCompositeEntitiesDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the composite entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListCompositeEntitiesDefinitionStages.WithAppId listCompositeEntities()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntities()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  name: listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  nameWithType: Models.listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listCompositeEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter&text=ListCompositeEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;CompositeEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor&text=CompositeEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the composite entity models in a version of the application.</p>

    <p></p>
  syntax: public List<CompositeEntityExtractor> listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntities(UUID,String,ListCompositeEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  name: listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  nameWithType: Models.listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listCompositeEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter&text=ListCompositeEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;CompositeEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor&text=CompositeEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the composite entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<CompositeEntityExtractor>> listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntitiesAsync(UUID,String,ListCompositeEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId)
  name: listCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.listCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a composite entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId)
  name: listCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId)
  nameWithType: Models.listCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCompositeEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntities(UUID appId, String versionId)
  name: listCustomPrebuiltEntities(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltEntities(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor&text=EntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all prebuilt entities used in a version of the application.</p>

    <p></p>
  syntax: public List<EntityExtractor> listCustomPrebuiltEntities(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntities(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntitiesAsync(UUID appId, String versionId)
  name: listCustomPrebuiltEntitiesAsync(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltEntitiesAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor&text=EntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all prebuilt entities used in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityExtractor>> listCustomPrebuiltEntitiesAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntitiesAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltIntents(UUID appId, String versionId)
  name: listCustomPrebuiltIntents(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltIntents(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;IntentClassifier&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about customizable prebuilt intents added to a version of the application.</p>

    <p></p>
  syntax: public List<IntentClassifier> listCustomPrebuiltIntents(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltIntents(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltIntentsAsync(UUID appId, String versionId)
  name: listCustomPrebuiltIntentsAsync(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltIntentsAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;IntentClassifier&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about customizable prebuilt intents added to a version of the application.</p>

    <p></p>
  syntax: public Observable<List<IntentClassifier>> listCustomPrebuiltIntentsAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltIntentsAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltModels(UUID appId, String versionId)
  name: listCustomPrebuiltModels(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltModels(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;CustomPrebuiltModel&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel&text=CustomPrebuiltModel" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all prebuilt intent and entity model information used in a version of this application.</p>

    <p></p>
  syntax: public List<CustomPrebuiltModel> listCustomPrebuiltModels(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltModels(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltModelsAsync(UUID appId, String versionId)
  name: listCustomPrebuiltModelsAsync(UUID appId, String versionId)
  nameWithType: Models.listCustomPrebuiltModelsAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;CustomPrebuiltModel&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel&text=CustomPrebuiltModel" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all prebuilt intent and entity model information used in a version of this application.</p>

    <p></p>
  syntax: public Observable<List<CustomPrebuiltModel>> listCustomPrebuiltModelsAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listCustomPrebuiltModelsAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntities()
  name: listEntities()
  nameWithType: Models.listEntities()
  returns:
    description: <p>the first stage of the listEntities call </p>
    type: <xref href="ModelsListEntitiesDefinitionStages.WithAppId?alt=ModelsListEntitiesDefinitionStages.WithAppId&text=ModelsListEntitiesDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the simple entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListEntitiesDefinitionStages.WithAppId listEntities()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntities()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  name: listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  nameWithType: Models.listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter&text=ListEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;NDepthEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor&text=NDepthEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the simple entity models in a version of the application.</p>

    <p></p>
  syntax: public List<NDepthEntityExtractor> listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntities(UUID,String,ListEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  name: listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  nameWithType: Models.listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter&text=ListEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;NDepthEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.NDepthEntityExtractor&text=NDepthEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the simple entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<NDepthEntityExtractor>> listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitiesAsync(UUID,String,ListEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for an entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for an entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestions()
  name: listEntitySuggestions()
  nameWithType: Models.listEntitySuggestions()
  returns:
    description: <p>the first stage of the listEntitySuggestions call </p>
    type: <xref href="ModelsListEntitySuggestionsDefinitionStages.WithAppId?alt=ModelsListEntitySuggestionsDefinitionStages.WithAppId&text=ModelsListEntitySuggestionsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.</p>

    <p></p>
  syntax: public ModelsListEntitySuggestionsDefinitionStages.WithAppId listEntitySuggestions()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestions()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestions(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  name: listEntitySuggestions(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  nameWithType: Models.listEntitySuggestions(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The target entity extractor model to enhance. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listEntitySuggestionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitySuggestionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitySuggestionsOptionalParameter&text=ListEntitySuggestionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntitiesSuggestionExample&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample&text=EntitiesSuggestionExample" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.</p>

    <p></p>
  syntax: public List<EntitiesSuggestionExample> listEntitySuggestions(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestions(UUID,String,UUID,ListEntitySuggestionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  name: listEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  nameWithType: Models.listEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The target entity extractor model to enhance. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listEntitySuggestionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitySuggestionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitySuggestionsOptionalParameter&text=ListEntitySuggestionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntitiesSuggestionExample&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample&text=EntitiesSuggestionExample" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntitiesSuggestionExample>> listEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, ListEntitySuggestionsOptionalParameter listEntitySuggestionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listEntitySuggestionsAsync(UUID,String,UUID,ListEntitySuggestionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntities()
  name: listHierarchicalEntities()
  nameWithType: Models.listHierarchicalEntities()
  returns:
    description: <p>the first stage of the listHierarchicalEntities call </p>
    type: <xref href="ModelsListHierarchicalEntitiesDefinitionStages.WithAppId?alt=ModelsListHierarchicalEntitiesDefinitionStages.WithAppId&text=ModelsListHierarchicalEntitiesDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the hierarchical entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListHierarchicalEntitiesDefinitionStages.WithAppId listHierarchicalEntities()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntities()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  name: listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  nameWithType: Models.listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listHierarchicalEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter&text=ListHierarchicalEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;HierarchicalEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor&text=HierarchicalEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the hierarchical entity models in a version of the application.</p>

    <p></p>
  syntax: public List<HierarchicalEntityExtractor> listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntities(UUID,String,ListHierarchicalEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  name: listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  nameWithType: Models.listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listHierarchicalEntitiesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter&text=ListHierarchicalEntitiesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;HierarchicalEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor&text=HierarchicalEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the hierarchical entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntitiesAsync(UUID,String,ListHierarchicalEntitiesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId)
  name: listHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.listHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId)
  name: listHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId)
  nameWithType: Models.listHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listHierarchicalEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntents()
  name: listIntents()
  nameWithType: Models.listIntents()
  returns:
    description: <p>the first stage of the listIntents call </p>
    type: <xref href="ModelsListIntentsDefinitionStages.WithAppId?alt=ModelsListIntentsDefinitionStages.WithAppId&text=ModelsListIntentsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the intent models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListIntentsDefinitionStages.WithAppId listIntents()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntents()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  name: listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  nameWithType: Models.listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter&text=ListIntentsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;IntentClassifier&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the intent models in a version of the application.</p>

    <p></p>
  syntax: public List<IntentClassifier> listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntents(UUID,String,ListIntentsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  name: listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  nameWithType: Models.listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter&text=ListIntentsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;IntentClassifier&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier&text=IntentClassifier" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the intent models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<IntentClassifier>> listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentsAsync(UUID,String,ListIntentsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestions()
  name: listIntentSuggestions()
  nameWithType: Models.listIntentSuggestions()
  returns:
    description: <p>the first stage of the listIntentSuggestions call </p>
    type: <xref href="ModelsListIntentSuggestionsDefinitionStages.WithAppId?alt=ModelsListIntentSuggestionsDefinitionStages.WithAppId&text=ModelsListIntentSuggestionsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Suggests example utterances that would improve the accuracy of the intent model in a version of the application.</p>

    <p></p>
  syntax: public ModelsListIntentSuggestionsDefinitionStages.WithAppId listIntentSuggestions()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestions()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestions(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  name: listIntentSuggestions(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  nameWithType: Models.listIntentSuggestions(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentSuggestionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentSuggestionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentSuggestionsOptionalParameter&text=ListIntentSuggestionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;IntentsSuggestionExample&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample&text=IntentsSuggestionExample" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Suggests example utterances that would improve the accuracy of the intent model in a version of the application.</p>

    <p></p>
  syntax: public List<IntentsSuggestionExample> listIntentSuggestions(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestions(UUID,String,UUID,ListIntentSuggestionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  name: listIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  nameWithType: Models.listIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentSuggestionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentSuggestionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentSuggestionsOptionalParameter&text=ListIntentSuggestionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;IntentsSuggestionExample&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample&text=IntentsSuggestionExample" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Suggests example utterances that would improve the accuracy of the intent model in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<IntentsSuggestionExample>> listIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, ListIntentSuggestionsOptionalParameter listIntentSuggestionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listIntentSuggestionsAsync(UUID,String,UUID,ListIntentSuggestionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModels()
  name: listModels()
  nameWithType: Models.listModels()
  returns:
    description: <p>the first stage of the listModels call </p>
    type: <xref href="ModelsListModelsDefinitionStages.WithAppId?alt=ModelsListModelsDefinitionStages.WithAppId&text=ModelsListModelsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListModelsDefinitionStages.WithAppId listModels()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModels()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  name: listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  nameWithType: Models.listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listModelsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter&text=ListModelsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ModelInfoResponse&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse&text=ModelInfoResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public List<ModelInfoResponse> listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModels(UUID,String,ListModelsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  name: listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  nameWithType: Models.listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listModelsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter&text=ListModelsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ModelInfoResponse&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse&text=ModelInfoResponse" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the intent and entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<ModelInfoResponse>> listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listModelsAsync(UUID,String,ListModelsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfos()
  name: listPatternAnyEntityInfos()
  nameWithType: Models.listPatternAnyEntityInfos()
  returns:
    description: <p>the first stage of the listPatternAnyEntityInfos call </p>
    type: <xref href="ModelsListPatternAnyEntityInfosDefinitionStages.WithAppId?alt=ModelsListPatternAnyEntityInfosDefinitionStages.WithAppId&text=ModelsListPatternAnyEntityInfosDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get information about the Pattern.Any entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListPatternAnyEntityInfosDefinitionStages.WithAppId listPatternAnyEntityInfos()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfos()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfos(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  name: listPatternAnyEntityInfos(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  nameWithType: Models.listPatternAnyEntityInfos(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPatternAnyEntityInfosOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternAnyEntityInfosOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternAnyEntityInfosOptionalParameter&text=ListPatternAnyEntityInfosOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PatternAnyEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor&text=PatternAnyEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get information about the Pattern.Any entity models in a version of the application.</p>

    <p></p>
  syntax: public List<PatternAnyEntityExtractor> listPatternAnyEntityInfos(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfos(UUID,String,ListPatternAnyEntityInfosOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfosAsync(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  name: listPatternAnyEntityInfosAsync(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  nameWithType: Models.listPatternAnyEntityInfosAsync(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPatternAnyEntityInfosOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternAnyEntityInfosOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternAnyEntityInfosOptionalParameter&text=ListPatternAnyEntityInfosOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PatternAnyEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor&text=PatternAnyEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get information about the Pattern.Any entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PatternAnyEntityExtractor>> listPatternAnyEntityInfosAsync(UUID appId, String versionId, ListPatternAnyEntityInfosOptionalParameter listPatternAnyEntityInfosOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityInfosAsync(UUID,String,ListPatternAnyEntityInfosOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPatternAnyEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntities(UUID appId, String versionId)
  name: listPrebuiltEntities(UUID appId, String versionId)
  nameWithType: Models.listPrebuiltEntities(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;AvailablePrebuiltEntityModel&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel&text=AvailablePrebuiltEntityModel" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the available prebuilt entities in a version of the application.</p>

    <p></p>
  syntax: public List<AvailablePrebuiltEntityModel> listPrebuiltEntities(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntities(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntitiesAsync(UUID appId, String versionId)
  name: listPrebuiltEntitiesAsync(UUID appId, String versionId)
  nameWithType: Models.listPrebuiltEntitiesAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;AvailablePrebuiltEntityModel&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel&text=AvailablePrebuiltEntityModel" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the available prebuilt entities in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntitiesAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a prebuilt entity's roles in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a prebuilt entity's roles in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuilts()
  name: listPrebuilts()
  nameWithType: Models.listPrebuilts()
  returns:
    description: <p>the first stage of the listPrebuilts call </p>
    type: <xref href="ModelsListPrebuiltsDefinitionStages.WithAppId?alt=ModelsListPrebuiltsDefinitionStages.WithAppId&text=ModelsListPrebuiltsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about all the prebuilt entities in a version of the application.</p>

    <p></p>
  syntax: public ModelsListPrebuiltsDefinitionStages.WithAppId listPrebuilts()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuilts()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  name: listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  nameWithType: Models.listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPrebuiltsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter&text=ListPrebuiltsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PrebuiltEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about all the prebuilt entities in a version of the application.</p>

    <p></p>
  syntax: public List<PrebuiltEntityExtractor> listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuilts(UUID,String,ListPrebuiltsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  name: listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  nameWithType: Models.listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPrebuiltsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter&text=ListPrebuiltsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PrebuiltEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor&text=PrebuiltEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about all the prebuilt entities in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PrebuiltEntityExtractor>> listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listPrebuiltsAsync(UUID,String,ListPrebuiltsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfos()
  name: listRegexEntityInfos()
  nameWithType: Models.listRegexEntityInfos()
  returns:
    description: <p>the first stage of the listRegexEntityInfos call </p>
    type: <xref href="ModelsListRegexEntityInfosDefinitionStages.WithAppId?alt=ModelsListRegexEntityInfosDefinitionStages.WithAppId&text=ModelsListRegexEntityInfosDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the regular expression entity models in a version of the application.</p>

    <p></p>
  syntax: public ModelsListRegexEntityInfosDefinitionStages.WithAppId listRegexEntityInfos()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfos()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfos(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  name: listRegexEntityInfos(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  nameWithType: Models.listRegexEntityInfos(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listRegexEntityInfosOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListRegexEntityInfosOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListRegexEntityInfosOptionalParameter&text=ListRegexEntityInfosOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;RegexEntityExtractor&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor&text=RegexEntityExtractor" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the regular expression entity models in a version of the application.</p>

    <p></p>
  syntax: public List<RegexEntityExtractor> listRegexEntityInfos(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfos(UUID,String,ListRegexEntityInfosOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfosAsync(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  name: listRegexEntityInfosAsync(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  nameWithType: Models.listRegexEntityInfosAsync(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listRegexEntityInfosOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListRegexEntityInfosOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListRegexEntityInfosOptionalParameter&text=ListRegexEntityInfosOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;RegexEntityExtractor&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor&text=RegexEntityExtractor" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the regular expression entity models in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<RegexEntityExtractor>> listRegexEntityInfosAsync(UUID appId, String versionId, ListRegexEntityInfosOptionalParameter listRegexEntityInfosOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityInfosAsync(UUID,String,ListRegexEntityInfosOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityRoles(UUID appId, String versionId, UUID entityId)
  name: listRegexEntityRoles(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listRegexEntityRoles(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;EntityRole&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all roles for a regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public List<EntityRole> listRegexEntityRoles(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityRoles(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  name: listRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  nameWithType: Models.listRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>entity Id. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;EntityRole&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole&text=EntityRole" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all roles for a regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<EntityRole>> listRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.listRegexEntityRolesAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedList()
  name: patchClosedList()
  nameWithType: Models.patchClosedList()
  returns:
    description: <p>the first stage of the patchClosedList call </p>
    type: <xref href="ModelsPatchClosedListDefinitionStages.WithAppId?alt=ModelsPatchClosedListDefinitionStages.WithAppId&text=ModelsPatchClosedListDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a batch of sublists to an existing list entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsPatchClosedListDefinitionStages.WithAppId patchClosedList()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedList()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  name: patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  nameWithType: Models.patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: patchClosedListOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter&text=PatchClosedListOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a batch of sublists to an existing list entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedList(UUID,String,UUID,PatchClosedListOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  name: patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  nameWithType: Models.patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: patchClosedListOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter&text=PatchClosedListOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a batch of sublists to an existing list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.patchClosedListAsync(UUID,String,UUID,PatchClosedListOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceEntityFeatures(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  name: replaceEntityFeatures(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  nameWithType: Models.replaceEntityFeatures(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A list of feature information objects containing the new feature relations. </p>
    name: featureRelationsUpdateObject
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the information of the features used by the entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus replaceEntityFeatures(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceEntityFeatures(UUID,String,UUID,List<ModelFeatureInformation>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceEntityFeaturesAsync(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  name: replaceEntityFeaturesAsync(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  nameWithType: Models.replaceEntityFeaturesAsync(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A list of feature information objects containing the new feature relations. </p>
    name: featureRelationsUpdateObject
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the information of the features used by the entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> replaceEntityFeaturesAsync(UUID appId, String versionId, UUID entityId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceEntityFeaturesAsync(UUID,String,UUID,List<ModelFeatureInformation>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceIntentFeatures(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  name: replaceIntentFeatures(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  nameWithType: Models.replaceIntentFeatures(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A list of feature information objects containing the new feature relations. </p>
    name: featureRelationsUpdateObject
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the information of the features used by the intent in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus replaceIntentFeatures(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceIntentFeatures(UUID,String,UUID,List<ModelFeatureInformation>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceIntentFeaturesAsync(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  name: replaceIntentFeaturesAsync(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  nameWithType: Models.replaceIntentFeaturesAsync(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A list of feature information objects containing the new feature relations. </p>
    name: featureRelationsUpdateObject
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelFeatureInformation&text=ModelFeatureInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the information of the features used by the intent in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> replaceIntentFeaturesAsync(UUID appId, String versionId, UUID intentId, List<ModelFeatureInformation> featureRelationsUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.replaceIntentFeaturesAsync(UUID,String,UUID,List<ModelFeatureInformation>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  name: updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  nameWithType: Models.updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The new list entity name and words list. </p>
    name: closedListModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject&text=ClosedListModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the list entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedList(UUID,String,UUID,ClosedListModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  name: updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  nameWithType: Models.updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list model ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The new list entity name and words list. </p>
    name: closedListModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject&text=ClosedListModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListAsync(UUID,String,UUID,ClosedListModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRole()
  name: updateClosedListEntityRole()
  nameWithType: Models.updateClosedListEntityRole()
  returns:
    description: <p>the first stage of the updateClosedListEntityRole call </p>
    type: <xref href="ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId updateClosedListEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  name: updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  nameWithType: Models.updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateClosedListEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter&text=UpdateClosedListEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRole(UUID,String,UUID,UUID,UpdateClosedListEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  name: updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  nameWithType: Models.updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateClosedListEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter&text=UpdateClosedListEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given list entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateClosedListEntityRoleAsync(UUID,String,UUID,UUID,UpdateClosedListEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  name: updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  nameWithType: Models.updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the new entity extractor name and children. </p>
    name: compositeModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel&text=CompositeEntityModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a composite entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntity(UUID,String,UUID,CompositeEntityModel)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  name: updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  nameWithType: Models.updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the new entity extractor name and children. </p>
    name: compositeModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel&text=CompositeEntityModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityAsync(UUID,String,UUID,CompositeEntityModel)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRole()
  name: updateCompositeEntityRole()
  nameWithType: Models.updateCompositeEntityRole()
  returns:
    description: <p>the first stage of the updateCompositeEntityRole call </p>
    type: <xref href="ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId updateCompositeEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  name: updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  nameWithType: Models.updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateCompositeEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter&text=UpdateCompositeEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRole(UUID,String,UUID,UUID,UpdateCompositeEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  name: updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  nameWithType: Models.updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The composite entity extractor ID. </p>
    name: cEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateCompositeEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter&text=UpdateCompositeEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given composite entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCompositeEntityRoleAsync(UUID,String,UUID,UUID,UpdateCompositeEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRole()
  name: updateCustomPrebuiltEntityRole()
  nameWithType: Models.updateCustomPrebuiltEntityRole()
  returns:
    description: <p>the first stage of the updateCustomPrebuiltEntityRole call </p>
    type: <xref href="ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId updateCustomPrebuiltEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  name: updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateCustomPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter&text=UpdateCustomPrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRole(UUID,String,UUID,UUID,UpdateCustomPrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  name: updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateCustomPrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter&text=UpdateCustomPrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateCustomPrebuiltEntityRoleAsync(UUID,String,UUID,UUID,UpdateCustomPrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityChild(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  name: updateEntityChild(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  nameWithType: Models.updateEntityChild(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor or the child entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name new entity extractor or the name and instance of model of a child entity extractor. </p>
    name: entityModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelUpdateObject&text=EntityModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name of an entity extractor or the name and instanceOf model of a child entity extractor.</p>

    <p></p>
  syntax: public OperationStatus updateEntityChild(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityChild(UUID,String,UUID,EntityModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityChildAsync(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  name: updateEntityChildAsync(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  nameWithType: Models.updateEntityChildAsync(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity extractor or the child entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A model object containing the name new entity extractor or the name and instance of model of a child entity extractor. </p>
    name: entityModelUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityModelUpdateObject&text=EntityModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name of an entity extractor or the name and instanceOf model of a child entity extractor.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateEntityChildAsync(UUID appId, String versionId, UUID entityId, EntityModelUpdateObject entityModelUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityChildAsync(UUID,String,UUID,EntityModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRole()
  name: updateEntityRole()
  nameWithType: Models.updateEntityRole()
  returns:
    description: <p>the first stage of the updateEntityRole call </p>
    type: <xref href="ModelsUpdateEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateEntityRoleDefinitionStages.WithAppId updateEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  name: updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  nameWithType: Models.updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter&text=UpdateEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRole(UUID,String,UUID,UUID,UpdateEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  name: updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  nameWithType: Models.updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter&text=UpdateEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateEntityRoleAsync(UUID,String,UUID,UUID,UpdateEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItem()
  name: updateExplicitListItem()
  nameWithType: Models.updateExplicitListItem()
  returns:
    description: <p>the first stage of the updateExplicitListItem call </p>
    type: <xref href="ModelsUpdateExplicitListItemDefinitionStages.WithAppId?alt=ModelsUpdateExplicitListItemDefinitionStages.WithAppId&text=ModelsUpdateExplicitListItemDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateExplicitListItemDefinitionStages.WithAppId updateExplicitListItem()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItem()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  name: updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  nameWithType: Models.updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item ID. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateExplicitListItemOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter&text=UpdateExplicitListItemOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItem(UUID,String,UUID,long,UpdateExplicitListItemOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  name: updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  nameWithType: Models.updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The explicit list item ID. </p>
    name: itemId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateExplicitListItemOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter&text=UpdateExplicitListItemOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateExplicitListItemAsync(UUID,String,UUID,long,UpdateExplicitListItemOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntity()
  name: updateHierarchicalEntity()
  nameWithType: Models.updateHierarchicalEntity()
  returns:
    description: <p>the first stage of the updateHierarchicalEntity call </p>
    type: <xref href="ModelsUpdateHierarchicalEntityDefinitionStages.WithAppId?alt=ModelsUpdateHierarchicalEntityDefinitionStages.WithAppId&text=ModelsUpdateHierarchicalEntityDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name of a hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateHierarchicalEntityDefinitionStages.WithAppId updateHierarchicalEntity()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntity()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  name: updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  nameWithType: Models.updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityOptionalParameter&text=UpdateHierarchicalEntityOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name of a hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntity(UUID,String,UUID,UpdateHierarchicalEntityOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  name: updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  nameWithType: Models.updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityOptionalParameter&text=UpdateHierarchicalEntityOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name of a hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, UpdateHierarchicalEntityOptionalParameter updateHierarchicalEntityOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityAsync(UUID,String,UUID,UpdateHierarchicalEntityOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChild()
  name: updateHierarchicalEntityChild()
  nameWithType: Models.updateHierarchicalEntityChild()
  returns:
    description: <p>the first stage of the updateHierarchicalEntityChild call </p>
    type: <xref href="ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId?alt=ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId&text=ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renames a single child in an existing hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId updateHierarchicalEntityChild()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChild()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  name: updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  nameWithType: Models.updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityChildOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter&text=UpdateHierarchicalEntityChildOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renames a single child in an existing hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChild(UUID,String,UUID,UUID,UpdateHierarchicalEntityChildOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  name: updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  nameWithType: Models.updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor child ID. </p>
    name: hChildId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityChildOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter&text=UpdateHierarchicalEntityChildOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Renames a single child in an existing hierarchical entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityChildAsync(UUID,String,UUID,UUID,UpdateHierarchicalEntityChildOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRole()
  name: updateHierarchicalEntityRole()
  nameWithType: Models.updateHierarchicalEntityRole()
  returns:
    description: <p>the first stage of the updateHierarchicalEntityRole call </p>
    type: <xref href="ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId updateHierarchicalEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  name: updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  nameWithType: Models.updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter&text=UpdateHierarchicalEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRole(UUID,String,UUID,UUID,UpdateHierarchicalEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  name: updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  nameWithType: Models.updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The hierarchical entity extractor ID. </p>
    name: hEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateHierarchicalEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter&text=UpdateHierarchicalEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given hierarchical entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateHierarchicalEntityRoleAsync(UUID,String,UUID,UUID,UpdateHierarchicalEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntent()
  name: updateIntent()
  nameWithType: Models.updateIntent()
  returns:
    description: <p>the first stage of the updateIntent call </p>
    type: <xref href="ModelsUpdateIntentDefinitionStages.WithAppId?alt=ModelsUpdateIntentDefinitionStages.WithAppId&text=ModelsUpdateIntentDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name of an intent in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateIntentDefinitionStages.WithAppId updateIntent()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntent()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  name: updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  nameWithType: Models.updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter&text=UpdateIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name of an intent in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntent(UUID,String,UUID,UpdateIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  name: updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  nameWithType: Models.updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateIntentOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter&text=UpdateIntentOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name of an intent in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateIntentAsync(UUID,String,UUID,UpdateIntentOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  name: updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  nameWithType: Models.updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the explicit list of the Pattern.Any entity. </p>
    name: patternAnyUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject&text=PatternAnyModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityModel(UUID,String,UUID,PatternAnyModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  name: updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  nameWithType: Models.updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Pattern.Any entity extractor ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the explicit list of the Pattern.Any entity. </p>
    name: patternAnyUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject&text=PatternAnyModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityModelAsync(UUID,String,UUID,PatternAnyModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRole()
  name: updatePatternAnyEntityRole()
  nameWithType: Models.updatePatternAnyEntityRole()
  returns:
    description: <p>the first stage of the updatePatternAnyEntityRole call </p>
    type: <xref href="ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId&text=ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId updatePatternAnyEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  name: updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  nameWithType: Models.updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updatePatternAnyEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter&text=UpdatePatternAnyEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRole(UUID,String,UUID,UUID,UpdatePatternAnyEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  name: updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  nameWithType: Models.updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updatePatternAnyEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter&text=UpdatePatternAnyEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given Pattern.any entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePatternAnyEntityRoleAsync(UUID,String,UUID,UUID,UpdatePatternAnyEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRole()
  name: updatePrebuiltEntityRole()
  nameWithType: Models.updatePrebuiltEntityRole()
  returns:
    description: <p>the first stage of the updatePrebuiltEntityRole call </p>
    type: <xref href="ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId&text=ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId updatePrebuiltEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  name: updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updatePrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter&text=UpdatePrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRole(UUID,String,UUID,UUID,UpdatePrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  name: updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  nameWithType: Models.updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updatePrebuiltEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter&text=UpdatePrebuiltEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given prebuilt entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updatePrebuiltEntityRoleAsync(UUID,String,UUID,UUID,UpdatePrebuiltEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  name: updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  nameWithType: Models.updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity extractor ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the new entity name and regex pattern. </p>
    name: regexEntityUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject&text=RegexModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityModel(UUID,String,UUID,RegexModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  name: updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  nameWithType: Models.updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The regular expression entity extractor ID. </p>
    name: regexEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object containing the new entity name and regex pattern. </p>
    name: regexEntityUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject&text=RegexModelUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityModelAsync(UUID,String,UUID,RegexModelUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRole()
  name: updateRegexEntityRole()
  nameWithType: Models.updateRegexEntityRole()
  returns:
    description: <p>the first stage of the updateRegexEntityRole call </p>
    type: <xref href="ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId?alt=ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId&text=ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId updateRegexEntityRole()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRole()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  name: updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  nameWithType: Models.updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateRegexEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter&text=UpdateRegexEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a role for a given regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRole(UUID,String,UUID,UUID,UpdateRegexEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  name: updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  nameWithType: Models.updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The entity ID. </p>
    name: entityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The entity role ID. </p>
    name: roleId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateRegexEntityRoleOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter&text=UpdateRegexEntityRoleOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a role for a given regular expression entity in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateRegexEntityRoleAsync(UUID,String,UUID,UUID,UpdateRegexEntityRoleOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateSubList(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  name: updateSubList(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  nameWithType: Models.updateSubList(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The sublist ID. </p>
    name: subListId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>A sublist update object containing the new canonical form and the list of words. </p>
    name: wordListBaseUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject&text=WordListBaseUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates one of the list entity's sublists in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus updateSubList(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateSubList(UUID,String,UUID,long,WordListBaseUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  name: updateSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  nameWithType: Models.updateSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The list entity extractor ID. </p>
    name: clEntityId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The sublist ID. </p>
    name: subListId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>A sublist update object containing the new canonical form and the list of words. </p>
    name: wordListBaseUpdateObject
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject&text=WordListBaseUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates one of the list entity's sublists in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateSubListAsync(UUID appId, String versionId, UUID clEntityId, long subListId, WordListBaseUpdateObject wordListBaseUpdateObject)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models.updateSubListAsync(UUID,String,UUID,long,WordListBaseUpdateObject)
nameWithType: Models
syntax: public interface Models
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Models
name: Models
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in Models. </p>
metadata: {}
