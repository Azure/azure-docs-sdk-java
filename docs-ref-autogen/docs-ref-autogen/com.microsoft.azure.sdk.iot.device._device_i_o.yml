### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.device._device_i_o
  id: _device_i_o
  parent: com.microsoft.azure.sdk.iot.device
  children:
  - com.microsoft.azure.sdk.iot.device._device_i_o.close()
  - com.microsoft.azure.sdk.iot.device._device_i_o.getProtocol()
  - com.microsoft.azure.sdk.iot.device._device_i_o.getReceivePeriodInMilliseconds()
  - com.microsoft.azure.sdk.iot.device._device_i_o.getSendPeriodInMilliseconds()
  - com.microsoft.azure.sdk.iot.device._device_i_o.isEmpty()
  - com.microsoft.azure.sdk.iot.device._device_i_o.isOpen()
  - com.microsoft.azure.sdk.iot.device._device_i_o.open()
  - com.microsoft.azure.sdk.iot.device._device_i_o.registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  - com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync(Message,IotHubEventCallback,Object)
  - com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync(Message,IotHubResponseCallback,Object)
  - com.microsoft.azure.sdk.iot.device._device_i_o.setReceivePeriodInMilliseconds(long)
  - com.microsoft.azure.sdk.iot.device._device_i_o.setSendPeriodInMilliseconds(long)
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: DeviceIO
  nameWithType: DeviceIO
  fullName: com.microsoft.azure.sdk.iot.device.DeviceIO
  type: Class
  source:
    remote: &o0
      path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 66
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Implement the standard I/O interface with the IoTHub. <verbatim>+-------------------------------------+                  +-----------------------------------+

    |                                     |                  |                                   |

    |             DeviceClient            |------------------+        DeviceClientConfig         |

    |                                     |                  |                                   |

    +-------------------------------------+                  +-----------------------------------+

       |                        |

       |                       \/

       |  +---------------------------------------------------------------------------------------------+

       |  | Services                                                                                    |

       |  |  +-----------+    +------------+    +--------------+                        +------------+  |

       |  |  | Telemetry |    | DeviceTwin |    | DeviceMethod |                        | FileUpload |  |

       |  |  +-----------+    +------------+    +--------------+                        +---------+--+  |

       |  +---------------------------------------------------------------------------------------|-----+

       |                                    |                                                     |

      \/                                   \/                                                     |

    #####################################################################################         |

    # DeviceIO                                                                          #         |

    #  +----------------+    +-------------------------------------+    +------------+  #         |

    #  |                |    |                open                 |    |            |  #         |

    #  | sendEventAsync |    |                   +---------------+ |    |   close    |  #         |

    #  |                |    |                   | taskScheduler | |    |            |  #         |

    #  +--------+-------+    +--+----------------+--+---------+--+-+    +--------+---+  #         |

    ############|###############|###################|#########|##################|#######         |

                |               |                   |         |                  |                |

                |               |                  \/        \/                  |                |

                |               |    +----------------+   +-------------------+  |                |

                |               |    | IoTHubSendTask |   | IoTHubReceiveTask |  |                |

                |               |    |   +--------+   |   |    +---------+    |  |                |

                |               |    |   |   Run  |   |   |    |   Run   |    |  |                |

                |               |    +---+---+----+---+   +----+----+----+----+  |                |

    </verbatim> IotHubTransport | | | | | | +------<mdash></mdash>|------------<mdash></mdash>|---------<mdash></mdash>|-------------------<mdash></mdash>|---------<mdash></mdash>|-----<mdash></mdash>+ +-------------------------------------------<mdash></mdash>+ | \/ \/ \/ \/ \/ | | IoTHubTransportManager | | +---------<mdash></mdash>+ +---------<mdash></mdash>+ +-----------<mdash></mdash>+ +------------<mdash></mdash>+ +------<mdash></mdash>+ | | +---<mdash></mdash>+ +----<mdash></mdash>+ +---<mdash></mdash>+ +------<mdash></mdash>+ | | | addMessage | | Open | | sendMessages | | handleMessage | | Close | | | | Open | | Close | | send | | receive | | | +---------<mdash></mdash>+ +---------<mdash></mdash>+ +-----------<mdash></mdash>+ +------------<mdash></mdash>+ +------<mdash></mdash>+ | | +---<mdash></mdash>+ +----<mdash></mdash>+ +---<mdash></mdash>+ +------<mdash></mdash>+ | +-------<mdash></mdash>+-----------------------------<mdash></mdash>+----------------------<mdash></mdash>+----------<mdash></mdash>+ +<mdash></mdash>+---------------------------------------<mdash></mdash>+ | | | | \/ \/ \/ \/ +----------------------<mdash></mdash>+ +----------------------<mdash></mdash>+ +---------------<mdash></mdash>+ +--------------------<mdash></mdash>+ | AmqpsTransport | | MqttTransport | | HttpsTransport | | HttpsTransportManager | +----------------------<mdash></mdash>+ +----------------------<mdash></mdash>+ +------------------------------------------<mdash></mdash>+ | AmqpsIotHubConnection | | MqttIotHubConnection | | HttpsIotHubConnection | +----------------------<mdash></mdash>+ +----------------------<mdash></mdash>+ +------------------------------------------<mdash></mdash>+ </p>
  syntax:
    content: public class DeviceIO
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.close()
  id: close()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: close()
  nameWithType: DeviceIO.close()
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.close()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.close*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 240
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Completes all current outstanding requests and closes the IoT Hub client. Must be called to terminate the background thread that is sending data to IoT Hub. After<programlisting><codeline><highlight class="normal">close()<sp></sp></highlight></codeline></programlisting> is called, the IoT Hub client is no longer usable. If the client is already closed, the function shall do nothing.</p>

    <p></p>
  syntax:
    content: public void close()
  exceptions:
  - type: cbf33bbe
    description: <p>if the connection to an IoT Hub cannot be closed. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getProtocol()
  id: getProtocol()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: getProtocol()
  nameWithType: DeviceIO.getProtocol()
  fullName: IotHubClientProtocol com.microsoft.azure.sdk.iot.device.DeviceIO.getProtocol()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.getProtocol*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 422
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Getter for the transport protocol.</p>

    <p></p>
  syntax:
    content: public IotHubClientProtocol getProtocol()
    return:
      type: com.microsoft.azure.sdk.iot.device._iot_hub_client_protocol
      description: <p>a protocol for transport. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getReceivePeriodInMilliseconds()
  id: getReceivePeriodInMilliseconds()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: getReceivePeriodInMilliseconds()
  nameWithType: DeviceIO.getReceivePeriodInMilliseconds()
  fullName: long com.microsoft.azure.sdk.iot.device.DeviceIO.getReceivePeriodInMilliseconds()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.getReceivePeriodInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 336
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Getter for the receive period in milliseconds.</p>

    <p></p>
  syntax:
    content: public long getReceivePeriodInMilliseconds()
    return:
      type: 0364520f
      description: <p>a long with the number of milliseconds between receives. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getSendPeriodInMilliseconds()
  id: getSendPeriodInMilliseconds()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: getSendPeriodInMilliseconds()
  nameWithType: DeviceIO.getSendPeriodInMilliseconds()
  fullName: long com.microsoft.azure.sdk.iot.device.DeviceIO.getSendPeriodInMilliseconds()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.getSendPeriodInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 379
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Getter for the send period in milliseconds.</p>

    <p></p>
  syntax:
    content: public long getSendPeriodInMilliseconds()
    return:
      type: 0364520f
      description: <p>a long with the number of milliseconds between sends. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.isEmpty()
  id: isEmpty()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: isEmpty()
  nameWithType: DeviceIO.isEmpty()
  fullName: boolean com.microsoft.azure.sdk.iot.device.DeviceIO.isEmpty()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.isEmpty*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 443
  package: com.microsoft.azure.sdk.iot.device
  summary: <p>Getter for the transport empty queue. </p>
  syntax:
    content: public boolean isEmpty()
    return:
      type: 4fc6e284
      description: <p>a boolean true if the transport queue is empty, or false if there is messages to send. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.isOpen()
  id: isOpen()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: isOpen()
  nameWithType: DeviceIO.isOpen()
  fullName: boolean com.microsoft.azure.sdk.iot.device.DeviceIO.isOpen()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.isOpen*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 433
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Getter for the connection state.</p>

    <p></p>
  syntax:
    content: public boolean isOpen()
    return:
      type: 4fc6e284
      description: <p>a boolean true if the connection is open, or false if it is closed. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.open()
  id: open()
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: open()
  nameWithType: DeviceIO.open()
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.open()
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.open*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 157
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Starts asynchronously sending and receiving messages from an IoT Hub. If the client is already open, the function shall do nothing.</p>

    <p></p>
  syntax:
    content: public void open()
  exceptions:
  - type: cbf33bbe
    description: <p>if a connection to an IoT Hub is cannot be established. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  id: registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  nameWithType: DeviceIO.registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.registerConnectionStateCallback*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 456
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Registers a callback with the configured transport to be executed whenever the connection to the device is lost or established.</p>

    <p></p>
  syntax:
    content: public void registerConnectionStateCallback(IotHubConnectionStateCallback callback, Object callbackContext)
    parameters:
    - id: callback
      type: com.microsoft.azure.sdk.iot.device._iot_hub_connection_state_callback
      description: <p>the callback to be called. </p>
    - id: callbackContext
      type: "79317049"
      description: <p>a context to be passed to the callback. Can be <programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> if no callback is provided. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync(Message,IotHubEventCallback,Object)
  id: sendEventAsync(Message,IotHubEventCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  nameWithType: DeviceIO.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 271
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Asynchronously sends an event message to the IoT Hub.</p>

    <p></p>
  syntax:
    content: public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device._message
      description: <p>the message to be sent. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device._iot_hub_event_callback
      description: <p>the callback to be invoked when a response is received. Can be<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> . </p>
    - id: callbackContext
      type: "79317049"
      description: <p>a context to be passed to the callback. Can be <programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> if no callback is provided.</p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the message provided is<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> . </p>
  - type: 12fe80de
    description: <p>if the client has not been opened yet or is already closed. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync(Message,IotHubResponseCallback,Object)
  id: sendEventAsync(Message,IotHubResponseCallback,Object)
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: sendEventAsync(Message message, IotHubResponseCallback callback, Object callbackContext)
  nameWithType: DeviceIO.sendEventAsync(Message message, IotHubResponseCallback callback, Object callbackContext)
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.sendEventAsync(Message message, IotHubResponseCallback callback, Object callbackContext)
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 308
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Asynchronously sends an event message to the IoT Hub. Use <xref href="com.microsoft.azure.sdk.iot.device._iot_hub_response_callback" data-throw-if-not-resolved="false"></xref> if you need the message payload received as a response for a sent message, together with the status.</p>

    <p></p>
  syntax:
    content: public void sendEventAsync(Message message, IotHubResponseCallback callback, Object callbackContext)
    parameters:
    - id: message
      type: com.microsoft.azure.sdk.iot.device._message
      description: <p>the message to be sent. </p>
    - id: callback
      type: com.microsoft.azure.sdk.iot.device._iot_hub_response_callback
      description: <p>the callback to be invoked when a response is received. Can be<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> . </p>
    - id: callbackContext
      type: "79317049"
      description: <p>a context to be passed to the callback. Can be <programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> if no callback is provided.</p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the message provided is<programlisting><codeline><highlight class="normal">null<sp></sp></highlight></codeline></programlisting> . </p>
  - type: 12fe80de
    description: <p>if the client has not been opened yet or is already closed. </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.setReceivePeriodInMilliseconds(long)
  id: setReceivePeriodInMilliseconds(long)
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: setReceivePeriodInMilliseconds(long newIntervalInMilliseconds)
  nameWithType: DeviceIO.setReceivePeriodInMilliseconds(long newIntervalInMilliseconds)
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.setReceivePeriodInMilliseconds(long newIntervalInMilliseconds)
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.setReceivePeriodInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 349
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Setter for the receive period in milliseconds.</p>

    <p></p>
  syntax:
    content: public void setReceivePeriodInMilliseconds(long newIntervalInMilliseconds)
    parameters:
    - id: newIntervalInMilliseconds
      type: 0364520f
      description: <p>is the new interval in milliseconds. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>if the task schedule exist but there is no receive task function to call. </p>
  - type: 3c87bd19
    description: <p>if the provided interval is invalid (zero or negative). </p>
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.setSendPeriodInMilliseconds(long)
  id: setSendPeriodInMilliseconds(long)
  parent: com.microsoft.azure.sdk.iot.device._device_i_o
  href: com.microsoft.azure.sdk.iot.device._device_i_o.yml
  langs:
  - java
  name: setSendPeriodInMilliseconds(long newIntervalInMilliseconds)
  nameWithType: DeviceIO.setSendPeriodInMilliseconds(long newIntervalInMilliseconds)
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.setSendPeriodInMilliseconds(long newIntervalInMilliseconds)
  overload: com.microsoft.azure.sdk.iot.device._device_i_o.setSendPeriodInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java
    startLine: 392
  package: com.microsoft.azure.sdk.iot.device
  summary: >-
    <p>Setter for the send period in milliseconds.</p>

    <p></p>
  syntax:
    content: public void setSendPeriodInMilliseconds(long newIntervalInMilliseconds)
    parameters:
    - id: newIntervalInMilliseconds
      type: 0364520f
      description: <p>is the new interval in milliseconds. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>if the task schedule exist but there is no send task function to call. </p>
  - type: 3c87bd19
    description: <p>if the provided interval is invalid (zero or negative). </p>
references:
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.open*
  name: open
  nameWithType: DeviceIO.open
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.open
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.close*
  name: close
  nameWithType: DeviceIO.close
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.close
  package: com.microsoft.azure.sdk.iot.device
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: 12fe80de
  spec.java:
  - name: IllegalStateException
    fullName: IllegalStateException
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.sendEventAsync*
  name: sendEventAsync
  nameWithType: DeviceIO.sendEventAsync
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.sendEventAsync
  package: com.microsoft.azure.sdk.iot.device
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getReceivePeriodInMilliseconds*
  name: getReceivePeriodInMilliseconds
  nameWithType: DeviceIO.getReceivePeriodInMilliseconds
  fullName: long com.microsoft.azure.sdk.iot.device.DeviceIO.getReceivePeriodInMilliseconds
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.setReceivePeriodInMilliseconds*
  name: setReceivePeriodInMilliseconds
  nameWithType: DeviceIO.setReceivePeriodInMilliseconds
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.setReceivePeriodInMilliseconds
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getSendPeriodInMilliseconds*
  name: getSendPeriodInMilliseconds
  nameWithType: DeviceIO.getSendPeriodInMilliseconds
  fullName: long com.microsoft.azure.sdk.iot.device.DeviceIO.getSendPeriodInMilliseconds
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.setSendPeriodInMilliseconds*
  name: setSendPeriodInMilliseconds
  nameWithType: DeviceIO.setSendPeriodInMilliseconds
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.setSendPeriodInMilliseconds
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.getProtocol*
  name: getProtocol
  nameWithType: DeviceIO.getProtocol
  fullName: IotHubClientProtocol com.microsoft.azure.sdk.iot.device.DeviceIO.getProtocol
  package: com.microsoft.azure.sdk.iot.device
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.isOpen*
  name: isOpen
  nameWithType: DeviceIO.isOpen
  fullName: boolean com.microsoft.azure.sdk.iot.device.DeviceIO.isOpen
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.isEmpty*
  name: isEmpty
  nameWithType: DeviceIO.isEmpty
  fullName: boolean com.microsoft.azure.sdk.iot.device.DeviceIO.isEmpty
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._device_i_o.registerConnectionStateCallback*
  name: registerConnectionStateCallback
  nameWithType: DeviceIO.registerConnectionStateCallback
  fullName: void com.microsoft.azure.sdk.iot.device.DeviceIO.registerConnectionStateCallback
  package: com.microsoft.azure.sdk.iot.device
- uid: com.microsoft.azure.sdk.iot.device._custom_logger
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._custom_logger.yml
  name: CustomLogger
  nameWithType: CustomLogger
  fullName: com.microsoft.azure.sdk.iot.device.CustomLogger
  type: Class
  syntax:
    content: public class CustomLogger
- uid: com.microsoft.azure.sdk.iot.device.transport._iot_hub_transport
  parent: com.microsoft.azure.sdk.iot.device.transport
  href: com.microsoft.azure.sdk.iot.device.transport._iot_hub_transport.yml
  name: IotHubTransport
  nameWithType: IotHubTransport
  fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport
  type: Interface
  summary: <p>An interface for an IoT Hub transport. </p>
  syntax:
    content: public interface IotHubTransport
- uid: com.microsoft.azure.sdk.iot.device._device_client_config
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._device_client_config.yml
  name: DeviceClientConfig
  nameWithType: DeviceClientConfig
  fullName: com.microsoft.azure.sdk.iot.device.DeviceClientConfig
  type: Class
  summary: <p>Configuration settings for an IoT Hub client. Validates all user-defined settings. </p>
  syntax:
    content: public class DeviceClientConfig
- uid: com.microsoft.azure.sdk.iot.device.transport._iot_hub_send_task
  parent: com.microsoft.azure.sdk.iot.device.transport
  href: com.microsoft.azure.sdk.iot.device.transport._iot_hub_send_task.yml
  name: IotHubSendTask
  nameWithType: IotHubSendTask
  fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubSendTask
  type: Class
  summary: <p>Sends batched messages and invokes callbacks on completed requests. Meant to be used with an executor that continuously calls run(). </p>
  syntax:
    content: public class IotHubSendTask
- uid: com.microsoft.azure.sdk.iot.device.transport._iot_hub_receive_task
  parent: com.microsoft.azure.sdk.iot.device.transport
  href: com.microsoft.azure.sdk.iot.device.transport._iot_hub_receive_task.yml
  name: IotHubReceiveTask
  nameWithType: IotHubReceiveTask
  fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubReceiveTask
  type: Class
  summary: <p>Polls an IoT Hub for messages and invokes a callback if one is found. Meant to be used with an executor that continuously calls run(). </p>
  syntax:
    content: public class IotHubReceiveTask
- uid: com.microsoft.azure.sdk.iot.device._iot_hub_client_protocol
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._iot_hub_client_protocol.yml
  name: IotHubClientProtocol
  nameWithType: IotHubClientProtocol
  fullName: com.microsoft.azure.sdk.iot.device.IotHubClientProtocol
  type: Enum
  summary: <p>The application-layer protocol used by the client to communicate with an IoT Hub. </p>
  syntax:
    content: public enum IotHubClientProtocol
- uid: com.microsoft.azure.sdk.iot.device._device_i_o._iot_hub_client_state
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._device_i_o._iot_hub_client_state.yml
  name: DeviceIO.IotHubClientState
  nameWithType: DeviceIO.IotHubClientState
  fullName: com.microsoft.azure.sdk.iot.device.DeviceIO.IotHubClientState
  type: Enum
  summary: <p>The state of the IoT Hub client's connection with the IoT Hub. </p>
  syntax:
    content: protected enum IotHubClientState
- uid: com.microsoft.azure.sdk.iot.device._message
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._message.yml
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.sdk.iot.device.Message
  type: Class
  syntax:
    content: public class Message
- uid: com.microsoft.azure.sdk.iot.device._iot_hub_event_callback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._iot_hub_event_callback.yml
  name: IotHubEventCallback
  nameWithType: IotHubEventCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubEventCallback
  type: Interface
  summary: >-
    <p>An interface for an IoT Hub event callback.</p>

    <p>Developers are expected to create an implementation of this interface, and the transport will call <xref href="com.microsoft.azure.sdk.iot.device._iot_hub_event_callback.execute(IotHubStatusCode,Object)" data-throw-if-not-resolved="false"></xref> upon receiving a response from an IoT Hub. </p>
  syntax:
    content: public interface IotHubEventCallback
- uid: com.microsoft.azure.sdk.iot.device._iot_hub_response_callback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._iot_hub_response_callback.yml
  name: IotHubResponseCallback
  nameWithType: IotHubResponseCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubResponseCallback
  type: Interface
  summary: >-
    <p>An interface for an IoT Hub response callback.</p>

    <p>Developers are expected to create an implementation of this interface, and the transport will call <xref href="com.microsoft.azure.sdk.iot.device._iot_hub_response_callback.execute(ResponseMessage,Object)" data-throw-if-not-resolved="false"></xref> upon receiving a response from an IoT Hub. </p>
  syntax:
    content: public interface IotHubResponseCallback
- uid: com.microsoft.azure.sdk.iot.device._iot_hub_connection_state_callback
  parent: com.microsoft.azure.sdk.iot.device
  href: com.microsoft.azure.sdk.iot.device._iot_hub_connection_state_callback.yml
  name: IotHubConnectionStateCallback
  nameWithType: IotHubConnectionStateCallback
  fullName: com.microsoft.azure.sdk.iot.device.IotHubConnectionStateCallback
  type: Interface
  summary: >-
    <p>An interface for an IoT Hub connection state callback.</p>

    <p>Developers are expected to create an implementation of this interface, and the transport will call <ref refid="" kindref="compound">IotHubConnectionStateCallback#execute(IotHubConnectionState, Object)</ref> passing in the connection status (down, success, etc.). </p>
  syntax:
    content: public interface IotHubConnectionStateCallback
