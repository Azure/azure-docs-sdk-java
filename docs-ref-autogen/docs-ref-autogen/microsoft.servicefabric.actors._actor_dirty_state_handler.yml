### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors._actor_dirty_state_handler
  id: _actor_dirty_state_handler
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
  href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
  langs:
  - java
  name: ActorDirtyStateHandler
  nameWithType: ActorDirtyStateHandler
  fullName: microsoft.servicefabric.actors.ActorDirtyStateHandler
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
    startLine: 8
  package: microsoft.servicefabric.actors
  summary: <p>If the state of the actor was dirty, it needs to be handled before a call is allowed to it </p>
  syntax:
    content: public interface ActorDirtyStateHandler
- uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle(ActorBase)
  id: handle(ActorBase)
  parent: microsoft.servicefabric.actors._actor_dirty_state_handler
  href: microsoft.servicefabric.actors._actor_dirty_state_handler.yml
  langs:
  - java
  name: handle(ActorBase actor)
  nameWithType: ActorDirtyStateHandler.handle(ActorBase actor)
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle(ActorBase actor)
  overload: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorDirtyStateHandler.java
    startLine: 10
  package: microsoft.servicefabric.actors
  syntax:
    content: public CompletableFuture<?> handle(ActorBase actor)
    parameters:
    - id: actor
      type: microsoft.servicefabric.actors._actor_base
    return:
      type: 16409f84
references:
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: microsoft.servicefabric.actors._actor_dirty_state_handler.handle*
  name: handle
  nameWithType: ActorDirtyStateHandler.handle
  fullName: CompletableFuture<?> microsoft.servicefabric.actors.ActorDirtyStateHandler.handle
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.actors._actor_base
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_base.yml
  name: ActorBase
  nameWithType: ActorBase
  fullName: microsoft.servicefabric.actors.ActorBase
  type: Class
  summary: >-
    <p>Represents base class for actors. <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref></p>

    <p>

      <bold>Remarks:</bold>This is a base type for actor, it provides the functionality that is common across actors implemented by actor deriving from <xref href="microsoft.servicefabric.actors._actor" data-throw-if-not-resolved="false"></xref> The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref href="microsoft.servicefabric.actors._actor_state_provider" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class ActorBase
