### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient"
fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient"
name: "DataLakeLeaseAsyncClient"
nameWithType: "DataLakeLeaseAsyncClient"
summary: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\">file systems</xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\">files</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">directories</xref>. This client acts as a supplement to those clients and only handles leasing operations.\n\n**Instantiating a DataLakeLeaseAsyncClient**\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileAsyncClient(fileAsyncClient)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .directoryAsyncClient(directoryAsyncClient)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileSystemAsyncClient(dataLakeFileSystemAsyncClient)\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client.\n\nFor more information about leasing see the [file system leasing][] or [path leasing][] documentation.\n\n\n[file system leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n[path leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeLeaseAsyncClient"
methods:
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLease(int)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLease(java.lang.String)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getAccountName()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getLeaseId()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getResourceUrl()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake.specialized"
artifact: com.azure:azure-storage-file-datalake:12.2.0
