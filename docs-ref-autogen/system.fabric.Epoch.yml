### YamlMime:JavaType
constructors:
- fullName: system.fabric.Epoch.Epoch(long dataLossNumber, long configurationNumber)
  name: Epoch(long dataLossNumber, long configurationNumber)
  nameWithType: Epoch.Epoch(long dataLossNumber, long configurationNumber)
  parameters:
  - description: <p>A long representing an increasing value which is updated whenever data loss is suspected. </p>
    name: dataLossNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>A long representing an increasing value that is updated whenever the configuration of this replica set changes. </p>
    name: configurationNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> class with the specified data loss number and configuration number.</p>

    <p></p>
  syntax: public Epoch(long dataLossNumber, long configurationNumber)
  uid: system.fabric.Epoch.Epoch(long,long)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.Epoch.compareTo(Epoch other)
  name: compareTo(Epoch other)
  nameWithType: Epoch.compareTo(Epoch other)
  parameters:
  - description: <p>another <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
    name: other
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>0, if they are equal, -1 if first is less than other. 1 if fist is greater that passed <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Compares two <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> objects. </p>
  syntax: public int compareTo(Epoch other)
  uid: system.fabric.Epoch.compareTo(Epoch)
- fullName: system.fabric.Epoch.equals(Object obj)
  name: equals(Object obj)
  nameWithType: Epoch.equals(Object obj)
  parameters:
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
    name: obj
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: '<p>boolean value: true, if they are equal. false otherwise. </p>'
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Compares the current <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object with the passed <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
  syntax: public boolean equals(Object obj)
  uid: system.fabric.Epoch.equals(Object)
- fullName: system.fabric.Epoch.getConfigurationNumber()
  name: getConfigurationNumber()
  nameWithType: Epoch.getConfigurationNumber()
  returns:
    description: <p>A long representing the configuration number. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the current configuration number property in this <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref>.</p>

    <p>

      <b>Remarks:</b>The configuration number is an increasing value that is updated whenever the configuration of this replica set changes. The services are informed of the current configuration number only when <xref uid="system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Replicator#updateEpochAsync(system.fabric.Epoch, system.fabric.CancellationToken)"></xref> method is called as a result of an attempt to change the Primary replica of the replica set. </p>
  syntax: public long getConfigurationNumber()
  uid: system.fabric.Epoch.getConfigurationNumber()
- fullName: system.fabric.Epoch.getDataLossNumber()
  name: getDataLossNumber()
  nameWithType: Epoch.getDataLossNumber()
  returns:
    description: <p>A long representing the current data loss number. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the current data loss number in this <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref>.</p>

    <p>

      <b>Remarks:</b>The data loss number property is an increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica. </p>
  syntax: public long getDataLossNumber()
  uid: system.fabric.Epoch.getDataLossNumber()
- fullName: system.fabric.Epoch.hashCode()
  name: hashCode()
  nameWithType: Epoch.hashCode()
  returns:
    description: <p>integer value representing hashCode of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the hashCode of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref> object. </p>
  syntax: public int hashCode()
  uid: system.fabric.Epoch.hashCode()
- fullName: system.fabric.Epoch.setConfigurationNumber(long configurationNumber)
  name: setConfigurationNumber(long configurationNumber)
  nameWithType: Epoch.setConfigurationNumber(long configurationNumber)
  parameters:
  - description: <p>A long representing the configuration number. </p>
    name: configurationNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the current configuration number property in this <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref>.</p>

    <p>

      <b>Remarks:</b>The configuration number is an increasing value that is updated whenever the configuration of this replica set changes. The services are informed of the current configuration number only when <xref uid="system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Replicator#updateEpochAsync(system.fabric.Epoch, system.fabric.CancellationToken)"></xref> method is called as a result of an attempt to change the Primary replica of the replica set. </p>
  syntax: public void setConfigurationNumber(long configurationNumber)
  uid: system.fabric.Epoch.setConfigurationNumber(long)
- fullName: system.fabric.Epoch.setDataLossNumber(long dataLossNumber)
  name: setDataLossNumber(long dataLossNumber)
  nameWithType: Epoch.setDataLossNumber(long dataLossNumber)
  parameters:
  - description: <p>A long representing the current data loss number. </p>
    name: dataLossNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the current data loss number in this <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Epoch"></xref>.</p>

    <p>

      <b>Remarks:</b>The data loss number property is a monotonically increasing value which is updated whenever data loss is suspected, as when loss of a quorum of replicas in the replica set that includes the Primary replica. </p>
  syntax: public void setDataLossNumber(long dataLossNumber)
  uid: system.fabric.Epoch.setDataLossNumber(long)
nameWithType: Epoch
syntax: public class Epoch
type: class
uid: system.fabric.Epoch
fullName: system.fabric.Epoch
name: Epoch
package: system.fabric
summary: >-
  <p>Represents the current version of the partition in Service Fabric. </p>

  <p>

    <b>Remarks:</b>An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica. The fact that the Primary has changed is not directly visible to Secondary replicas, which are usually unaffected by the failure that affected the original Primary replica. To track that the Primary replica has changed has to be communicated to the Secondary replica. This communication occurs via the <xref uid="system.fabric.StateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider#updateEpochAsync(system.fabric.Epoch, system.fabric.SequenceNumber, system.fabric.CancellationToken)"></xref> method. Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed and to compare Epochs to determine relative ordering of operations and events in the system. Comparison operations are provided for this purpose. </p>
metadata: {}
