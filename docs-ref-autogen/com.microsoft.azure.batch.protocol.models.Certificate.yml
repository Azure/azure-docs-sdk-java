### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.Certificate"
fullName: "com.microsoft.azure.batch.protocol.models.Certificate"
name: "Certificate"
nameWithType: "Certificate"
summary: "A Certificate that can be installed on Compute Nodes and can be used to authenticate operations on the machine."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class Certificate"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.Certificate()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.Certificate()"
  name: "Certificate()"
  nameWithType: "Certificate.Certificate()"
  syntax: "public Certificate()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.deleteCertificateError()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.deleteCertificateError()"
  name: "deleteCertificateError()"
  nameWithType: "Certificate.deleteCertificateError()"
  summary: "Get this property is set only if the Certificate is in the Delete<wbr>Failed state."
  syntax: "public DeleteCertificateError deleteCertificateError()"
  desc: "Get this property is set only if the Certificate is in the DeleteFailed state."
  returns:
    description: "the deleteCertificateError value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DeleteCertificateError?alt=com.microsoft.azure.batch.protocol.models.DeleteCertificateError&text=DeleteCertificateError\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.previousState()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.previousState()"
  name: "previousState()"
  nameWithType: "Certificate.previousState()"
  summary: "Get this property is not set if the Certificate is in its initial active state."
  syntax: "public CertificateState previousState()"
  desc: "Get this property is not set if the Certificate is in its initial active state. Possible values include: 'active', 'deleting', 'deleteFailed'."
  returns:
    description: "the previousState value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateState?alt=com.microsoft.azure.batch.protocol.models.CertificateState&text=CertificateState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.previousStateTransitionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.previousStateTransitionTime()"
  name: "previousStateTransitionTime()"
  nameWithType: "Certificate.previousStateTransitionTime()"
  summary: "Get this property is not set if the Certificate is in its initial Active state."
  syntax: "public DateTime previousStateTransitionTime()"
  desc: "Get this property is not set if the Certificate is in its initial Active state."
  returns:
    description: "the previousStateTransitionTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.publicData()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.publicData()"
  name: "publicData()"
  nameWithType: "Certificate.publicData()"
  summary: "Get the public<wbr>Data value."
  syntax: "public String publicData()"
  desc: "Get the publicData value."
  returns:
    description: "the publicData value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.state()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.state()"
  name: "state()"
  nameWithType: "Certificate.state()"
  summary: "Get possible values include: 'active', 'deleting', 'delete<wbr>Failed'."
  syntax: "public CertificateState state()"
  desc: "Get possible values include: 'active', 'deleting', 'deleteFailed'."
  returns:
    description: "the state value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateState?alt=com.microsoft.azure.batch.protocol.models.CertificateState&text=CertificateState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.stateTransitionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.stateTransitionTime()"
  name: "stateTransitionTime()"
  nameWithType: "Certificate.stateTransitionTime()"
  summary: "Get the state<wbr>Transition<wbr>Time value."
  syntax: "public DateTime stateTransitionTime()"
  desc: "Get the stateTransitionTime value."
  returns:
    description: "the stateTransitionTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.thumbprint()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.thumbprint()"
  name: "thumbprint()"
  nameWithType: "Certificate.thumbprint()"
  summary: "Get the thumbprint value."
  syntax: "public String thumbprint()"
  desc: "Get the thumbprint value."
  returns:
    description: "the thumbprint value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.thumbprintAlgorithm()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.thumbprintAlgorithm()"
  name: "thumbprintAlgorithm()"
  nameWithType: "Certificate.thumbprintAlgorithm()"
  summary: "Get the thumbprint<wbr>Algorithm value."
  syntax: "public String thumbprintAlgorithm()"
  desc: "Get the thumbprintAlgorithm value."
  returns:
    description: "the thumbprintAlgorithm value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.url()"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.url()"
  name: "url()"
  nameWithType: "Certificate.url()"
  summary: "Get the url value."
  syntax: "public String url()"
  desc: "Get the url value."
  returns:
    description: "the url value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withDeleteCertificateError(com.microsoft.azure.batch.protocol.models.DeleteCertificateError)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withDeleteCertificateError(DeleteCertificateError deleteCertificateError)"
  name: "withDeleteCertificateError(DeleteCertificateError deleteCertificateError)"
  nameWithType: "Certificate.withDeleteCertificateError(DeleteCertificateError deleteCertificateError)"
  summary: "Set this property is set only if the Certificate is in the Delete<wbr>Failed state."
  parameters:
  - description: "the deleteCertificateError value to set"
    name: "deleteCertificateError"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.DeleteCertificateError?alt=com.microsoft.azure.batch.protocol.models.DeleteCertificateError&text=DeleteCertificateError\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withDeleteCertificateError(DeleteCertificateError deleteCertificateError)"
  desc: "Set this property is set only if the Certificate is in the DeleteFailed state."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withPreviousState(com.microsoft.azure.batch.protocol.models.CertificateState)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withPreviousState(CertificateState previousState)"
  name: "withPreviousState(CertificateState previousState)"
  nameWithType: "Certificate.withPreviousState(CertificateState previousState)"
  summary: "Set this property is not set if the Certificate is in its initial active state."
  parameters:
  - description: "the previousState value to set"
    name: "previousState"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateState?alt=com.microsoft.azure.batch.protocol.models.CertificateState&text=CertificateState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withPreviousState(CertificateState previousState)"
  desc: "Set this property is not set if the Certificate is in its initial active state. Possible values include: 'active', 'deleting', 'deleteFailed'."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withPreviousStateTransitionTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  name: "withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  nameWithType: "Certificate.withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  summary: "Set this property is not set if the Certificate is in its initial Active state."
  parameters:
  - description: "the previousStateTransitionTime value to set"
    name: "previousStateTransitionTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withPreviousStateTransitionTime(DateTime previousStateTransitionTime)"
  desc: "Set this property is not set if the Certificate is in its initial Active state."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withPublicData(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withPublicData(String publicData)"
  name: "withPublicData(String publicData)"
  nameWithType: "Certificate.withPublicData(String publicData)"
  summary: "Set the public<wbr>Data value."
  parameters:
  - description: "the publicData value to set"
    name: "publicData"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withPublicData(String publicData)"
  desc: "Set the publicData value."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withState(com.microsoft.azure.batch.protocol.models.CertificateState)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withState(CertificateState state)"
  name: "withState(CertificateState state)"
  nameWithType: "Certificate.withState(CertificateState state)"
  summary: "Set possible values include: 'active', 'deleting', 'delete<wbr>Failed'."
  parameters:
  - description: "the state value to set"
    name: "state"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateState?alt=com.microsoft.azure.batch.protocol.models.CertificateState&text=CertificateState\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withState(CertificateState state)"
  desc: "Set possible values include: 'active', 'deleting', 'deleteFailed'."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withStateTransitionTime(org.joda.time.DateTime)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withStateTransitionTime(DateTime stateTransitionTime)"
  name: "withStateTransitionTime(DateTime stateTransitionTime)"
  nameWithType: "Certificate.withStateTransitionTime(DateTime stateTransitionTime)"
  summary: "Set the state<wbr>Transition<wbr>Time value."
  parameters:
  - description: "the stateTransitionTime value to set"
    name: "stateTransitionTime"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withStateTransitionTime(DateTime stateTransitionTime)"
  desc: "Set the stateTransitionTime value."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withThumbprint(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withThumbprint(String thumbprint)"
  name: "withThumbprint(String thumbprint)"
  nameWithType: "Certificate.withThumbprint(String thumbprint)"
  summary: "Set the thumbprint value."
  parameters:
  - description: "the thumbprint value to set"
    name: "thumbprint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withThumbprint(String thumbprint)"
  desc: "Set the thumbprint value."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withThumbprintAlgorithm(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withThumbprintAlgorithm(String thumbprintAlgorithm)"
  name: "withThumbprintAlgorithm(String thumbprintAlgorithm)"
  nameWithType: "Certificate.withThumbprintAlgorithm(String thumbprintAlgorithm)"
  summary: "Set the thumbprint<wbr>Algorithm value."
  parameters:
  - description: "the thumbprintAlgorithm value to set"
    name: "thumbprintAlgorithm"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withThumbprintAlgorithm(String thumbprintAlgorithm)"
  desc: "Set the thumbprintAlgorithm value."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.Certificate.withUrl(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.models.Certificate.withUrl(String url)"
  name: "withUrl(String url)"
  nameWithType: "Certificate.withUrl(String url)"
  summary: "Set the url value."
  parameters:
  - description: "the url value to set"
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Certificate withUrl(String url)"
  desc: "Set the url value."
  returns:
    description: "the Certificate object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.Certificate?alt=com.microsoft.azure.batch.protocol.models.Certificate&text=Certificate\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A Certificate that can be installed on Compute Nodes and can be used to authenticate operations on the machine."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
