items:
- uid: microsoft.servicefabric.services.remoting._method_dispatcher
  id: _method_dispatcher
  parent: microsoft.servicefabric.services.remoting
  children:
  - microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)
  - microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object)
  - microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
  - microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
  href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
  langs:
  - java
  name: MethodDispatcher
  nameWithType: MethodDispatcher
  fullName: microsoft.servicefabric.services.remoting.MethodDispatcher
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
    startLine: 4
  package: microsoft.servicefabric.services.remoting
  syntax:
    content: public interface MethodDispatcher
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch(Object,int,Object)
  id: dispatch(Object,int,Object)
  parent: microsoft.servicefabric.services.remoting._method_dispatcher
  href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
  langs:
  - java
  name: dispatch(Object objectImplementation, int methodId, Object requestBody)
  nameWithType: MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)
  fullName: void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch(Object objectImplementation, int methodId, Object requestBody)
  overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
    startLine: 10
  package: microsoft.servicefabric.services.remoting
  syntax:
    content: public void dispatch(Object objectImplementation, int methodId, Object requestBody)
    parameters:
    - id: objectImplementation
      type: "79317049"
    - id: methodId
      type: f75371fa
    - id: requestBody
      type: "79317049"
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync(Object,int,Object)
  id: dispatchAsync(Object,int,Object)
  parent: microsoft.servicefabric.services.remoting._method_dispatcher
  href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
  langs:
  - java
  name: dispatchAsync(Object objectImplementation, int methodId, Object requestBody)
  nameWithType: MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody)
  fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync(Object objectImplementation, int methodId, Object requestBody)
  overload: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
    startLine: 8
  package: microsoft.servicefabric.services.remoting
  syntax:
    content: public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestBody)
    parameters:
    - id: objectImplementation
      type: "79317049"
    - id: methodId
      type: f75371fa
    - id: requestBody
      type: "79317049"
    return:
      type: 55aa5245
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId()
  id: getInterfaceId()
  parent: microsoft.servicefabric.services.remoting._method_dispatcher
  href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
  langs:
  - java
  name: getInterfaceId()
  nameWithType: MethodDispatcher.getInterfaceId()
  fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId()
  overload: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
    startLine: 6
  package: microsoft.servicefabric.services.remoting
  syntax:
    content: public int getInterfaceId()
    return:
      type: f75371fa
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName(int)
  id: getMethodName(int)
  parent: microsoft.servicefabric.services.remoting._method_dispatcher
  href: microsoft.servicefabric.services.remoting._method_dispatcher.yml
  langs:
  - java
  name: getMethodName(int methodId)
  nameWithType: MethodDispatcher.getMethodName(int methodId)
  fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName(int methodId)
  overload: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/remoting/MethodDispatcher.java
    startLine: 12
  package: microsoft.servicefabric.services.remoting
  syntax:
    content: public String getMethodName(int methodId)
    parameters:
    - id: methodId
      type: f75371fa
    return:
      type: "26831127"
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.getInterfaceId*
  name: getInterfaceId
  nameWithType: MethodDispatcher.getInterfaceId
  fullName: int microsoft.servicefabric.services.remoting.MethodDispatcher.getInterfaceId
  package: microsoft.servicefabric.services.remoting
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: 55aa5245
  spec.java:
  - name: CompletableFuture<Object>
    fullName: CompletableFuture<Object>
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatchAsync*
  name: dispatchAsync
  nameWithType: MethodDispatcher.dispatchAsync
  fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.MethodDispatcher.dispatchAsync
  package: microsoft.servicefabric.services.remoting
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.dispatch*
  name: dispatch
  nameWithType: MethodDispatcher.dispatch
  fullName: void microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch
  package: microsoft.servicefabric.services.remoting
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.services.remoting._method_dispatcher.getMethodName*
  name: getMethodName
  nameWithType: MethodDispatcher.getMethodName
  fullName: String microsoft.servicefabric.services.remoting.MethodDispatcher.getMethodName
  package: microsoft.servicefabric.services.remoting
- uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
  parent: microsoft.servicefabric.services.remoting.builder
  href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
  name: MethodDispatcherBase
  nameWithType: MethodDispatcherBase
  fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
  type: Class
  summary: <p>The base class used by remoting code generator to generate the type that dispatches requests from the client to the right interface and method of the remoted object. </p>
  syntax:
    content: public class MethodDispatcherBase
- uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getInterfaceId()
  parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
  href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
  name: getInterfaceId()
  nameWithType: MethodDispatcherBase.getInterfaceId()
  fullName: int microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
  type: Method
  summary: >-
    <p>Interface Id is used to identify remoting Interfaces.</p>

    <p></p>
  syntax:
    content: public int getInterfaceId()
    return:
      type: f75371fa
      description: <p>interface id. </p>
- uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatchAsync(Object,int,Object)
  parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
  href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
  name: dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody)
  nameWithType: MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody)
  fullName: CompletableFuture<Object> microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody)
  type: Method
  summary: >-
    <p>This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Object> dispatchAsync(Object objectImplementation, int methodId, Object requestMsgBody)
    parameters:
    - id: objectImplementation
      type: "79317049"
      description: <p>The remoted object instance </p>
    - id: methodId
      type: f75371fa
      description: <p>id of the method </p>
    - id: requestMsgBody
      type: "79317049"
      description: <p>The request body </p>
    return:
      type: 55aa5245
      description: <p>A <ref refid="" kindref="compound">java.util.concurrent.CompletableFuture</ref> that represents outstanding operation. The result of the task is the return value from the method. </p>
- uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.dispatch(Object,int,Object)
  parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
  href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
  name: dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  nameWithType: MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  fullName: void microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  type: Method
  summary: >-
    <p>This method is used to dispatch one way messages to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax:
    content: public void dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
    parameters:
    - id: objectImplementation
      type: "79317049"
      description: <p>remoted object Implementation. </p>
    - id: methodId
      type: f75371fa
      description: <p>methodId of the interface implemented by the remoted object. </p>
    - id: requestMsgBody
      type: "79317049"
      description: <p>message body. </p>
- uid: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.getMethodName(int)
  parent: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base
  href: microsoft.servicefabric.services.remoting.builder._method_dispatcher_base.yml
  name: getMethodName(int methodId)
  nameWithType: MethodDispatcherBase.getMethodName(int methodId)
  fullName: String microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int methodId)
  type: Method
  syntax:
    content: public String getMethodName(int methodId)
    parameters:
    - id: methodId
      type: f75371fa
    return:
      type: "26831127"
