### YamlMime:JavaType
uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase"
fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase"
name: "CosmosEncryptionDatabase"
nameWithType: "CosmosEncryptionDatabase"
summary: "Cosmos<wbr>Encryption<wbr>Database with encryption capabilities."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosEncryptionDatabase"
methods:
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.createClientEncryptionKey(java.lang.String,java.lang.String,com.azure.cosmos.models.EncryptionKeyWrapMetadata)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  name: "createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  nameWithType: "CosmosEncryptionDatabase.createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  summary: "Creates a client encryption key after subscription the operation will be performed."
  parameters:
  - description: "Client Encryption Key id."
    name: "clientEncryptionKeyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption Algorithm."
    name: "encryptionAlgorithm"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "EncryptionKeyWrapMetadata."
    name: "encryptionKeyWrapMetadata"
    type: "<xref href=\"com.azure.cosmos.models.EncryptionKeyWrapMetadata?alt=com.azure.cosmos.models.EncryptionKeyWrapMetadata&text=EncryptionKeyWrapMetadata\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosClientEncryptionKeyResponse createClientEncryptionKey(String clientEncryptionKeyId, String encryptionAlgorithm, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata)"
  desc: "Creates a client encryption key after subscription the operation will be performed."
  returns:
    description: "the resource response with the\n created cosmos client encryption key or an error."
    type: "<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyResponse?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyResponse&text=CosmosClientEncryptionKeyResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getClientEncryptionKey(java.lang.String)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getClientEncryptionKey(String id)"
  name: "getClientEncryptionKey(String id)"
  nameWithType: "CosmosEncryptionDatabase.getClientEncryptionKey(String id)"
  summary: "Gets a Cosmos<wbr>Client<wbr>Encryption<wbr>Key object without making a service call"
  parameters:
  - description: "id of the clientEncryptionKey"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosClientEncryptionKey getClientEncryptionKey(String id)"
  desc: "Gets a CosmosClientEncryptionKey object without making a service call"
  returns:
    description: "Cosmos ClientEncryptionKey"
    type: "<xref href=\"com.azure.cosmos.CosmosClientEncryptionKey?alt=com.azure.cosmos.CosmosClientEncryptionKey&text=CosmosClientEncryptionKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosDatabase()"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosDatabase()"
  name: "getCosmosDatabase()"
  nameWithType: "CosmosEncryptionDatabase.getCosmosDatabase()"
  summary: "Gets a Cosmos<wbr>Database."
  syntax: "public CosmosDatabase getCosmosDatabase()"
  desc: "Gets a CosmosDatabase."
  returns:
    description: "cosmos database"
    type: "<xref href=\"com.azure.cosmos.CosmosDatabase?alt=com.azure.cosmos.CosmosDatabase&text=CosmosDatabase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosEncryptionContainer(com.azure.cosmos.CosmosContainer)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosEncryptionContainer(CosmosContainer container)"
  name: "getCosmosEncryptionContainer(CosmosContainer container)"
  nameWithType: "CosmosEncryptionDatabase.getCosmosEncryptionContainer(CosmosContainer container)"
  summary: "Gets a Container with Encryption capabilities"
  parameters:
  - description: "original container"
    name: "container"
    type: "<xref href=\"com.azure.cosmos.CosmosContainer?alt=com.azure.cosmos.CosmosContainer&text=CosmosContainer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosEncryptionContainer getCosmosEncryptionContainer(CosmosContainer container)"
  desc: "Gets a Container with Encryption capabilities"
  returns:
    description: "container with encryption capabilities"
    type: "<xref href=\"com.azure.cosmos.encryption.CosmosEncryptionContainer?alt=com.azure.cosmos.encryption.CosmosEncryptionContainer&text=CosmosEncryptionContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosEncryptionContainer(java.lang.String)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.getCosmosEncryptionContainer(String containerId)"
  name: "getCosmosEncryptionContainer(String containerId)"
  nameWithType: "CosmosEncryptionDatabase.getCosmosEncryptionContainer(String containerId)"
  summary: "Gets a Container with Encryption capabilities"
  parameters:
  - description: "original container id"
    name: "containerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosEncryptionContainer getCosmosEncryptionContainer(String containerId)"
  desc: "Gets a Container with Encryption capabilities"
  returns:
    description: "container with encryption capabilities"
    type: "<xref href=\"com.azure.cosmos.encryption.CosmosEncryptionContainer?alt=com.azure.cosmos.encryption.CosmosEncryptionContainer&text=CosmosEncryptionContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.readAllClientEncryptionKeys()"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.readAllClientEncryptionKeys()"
  name: "readAllClientEncryptionKeys()"
  nameWithType: "CosmosEncryptionDatabase.readAllClientEncryptionKeys()"
  summary: "Reads all cosmos client encryption keys in a database."
  syntax: "public CosmosPagedIterable<CosmosClientEncryptionKeyProperties> readAllClientEncryptionKeys()"
  desc: "Reads all cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref> will contain one or several feed response of the read cosmos client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedIterable\"></xref>."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedIterable?alt=com.azure.cosmos.util.CosmosPagedIterable&text=CosmosPagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.rewrapClientEncryptionKey(java.lang.String,com.azure.cosmos.models.EncryptionKeyWrapMetadata)"
  fullName: "com.azure.cosmos.encryption.CosmosEncryptionDatabase.rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  name: "rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  nameWithType: "CosmosEncryptionDatabase.rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  summary: "Rewrap a cosmos client encryption key"
  parameters:
  - description: "the client encryption key properties to create."
    name: "clientEncryptionKeyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "EncryptionKeyWrapMetadata."
    name: "newEncryptionKeyWrapMetadata"
    type: "<xref href=\"com.azure.cosmos.models.EncryptionKeyWrapMetadata?alt=com.azure.cosmos.models.EncryptionKeyWrapMetadata&text=EncryptionKeyWrapMetadata\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosClientEncryptionKeyResponse rewrapClientEncryptionKey(String clientEncryptionKeyId, EncryptionKeyWrapMetadata newEncryptionKeyWrapMetadata)"
  desc: "Rewrap a cosmos client encryption key"
  returns:
    description: "the resource response with the read client encryption key or an error."
    type: "<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyResponse?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyResponse&text=CosmosClientEncryptionKeyResponse\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "CosmosEncryptionDatabase with encryption capabilities."
metadata: {}
package: "com.azure.cosmos.encryption"
artifact: com.azure:azure-cosmos-encryption:1.5.0
