### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  id: SimpleReactiveCosmosRepository
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support
  children:
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>save(S)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(java.lang.Iterable<S>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(org.reactivestreams.Publisher<S>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.SimpleReactiveCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>,com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.count()
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.delete(T)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll()
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(java.lang.Iterable<? extends T>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(org.reactivestreams.Publisher<? extends T>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(org.reactivestreams.Publisher<K>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(K)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(org.reactivestreams.Publisher<K>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll()
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(org.springframework.data.domain.Sort)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(java.lang.Iterable<K>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(org.reactivestreams.Publisher<K>)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(org.reactivestreams.Publisher<K>)
  langs:
  - java
  name: SimpleReactiveCosmosRepository<T,K>
  nameWithType: SimpleReactiveCosmosRepository<T,K>
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>
  type: Class
  package: com.azure.spring.data.cosmos.repository.support
  summary: Repository class for simple reactive Cosmos operation
  syntax:
    content: public class SimpleReactiveCosmosRepository<T,K> implements ReactiveCosmosRepository<T,K>
    typeParameters:
    - id: T
    - id: K
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>save(S)
  id: <S>save(S)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: <S>save(S entity)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.<S>save(S entity)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.<S>save(S entity)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.save*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<S> <S>save(S entity)
    parameters:
    - id: entity
      type: S
    return:
      type: reactor.core.publisher.Mono<S>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(java.lang.Iterable<S>)
  id: <S>saveAll(java.lang.Iterable<S>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: <S>saveAll(Iterable<S> entities)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.<S>saveAll(Iterable<S> entities)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.<S>saveAll(Iterable<S> entities)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.saveAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<S> <S>saveAll(Iterable<S> entities)
    parameters:
    - id: entities
      type: java.lang.Iterable<S>
    return:
      type: reactor.core.publisher.Flux<S>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(org.reactivestreams.Publisher<S>)
  id: <S>saveAll(org.reactivestreams.Publisher<S>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: <S>saveAll(Publisher<S> entityStream)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.<S>saveAll(Publisher<S> entityStream)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.<S>saveAll(Publisher<S> entityStream)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.saveAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<S> <S>saveAll(Publisher<S> entityStream)
    parameters:
    - id: entityStream
      type: org.reactivestreams.Publisher<S>
    return:
      type: reactor.core.publisher.Flux<S>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.SimpleReactiveCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>,com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  id: SimpleReactiveCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>,com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.SimpleReactiveCosmosRepository*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.support
  summary: Initialization with metadata and reactiveCosmosOperations
  syntax:
    content: public SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)
    parameters:
    - id: metadata
      type: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>
      description: for entityInformation
    - id: reactiveCosmosOperations
      type: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
      description: for cosmosOperations
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.count()
  id: count()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: count()
  nameWithType: SimpleReactiveCosmosRepository<T,K>.count()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.count()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.count*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Long> count()
    return:
      type: reactor.core.publisher.Mono<java.lang.Long>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.delete(T)
  id: delete(T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: delete(T entity)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.delete(T entity)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.delete(T entity)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.delete*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> delete(T entity)
    parameters:
    - id: entity
      type: T
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll()
  id: deleteAll()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteAll()
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteAll()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> deleteAll()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(java.lang.Iterable<? extends T>)
  id: deleteAll(java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteAll(Iterable<? extends T> entities)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteAll(Iterable<? extends T> entities)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll(Iterable<? extends T> entities)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> deleteAll(Iterable<? extends T> entities)
    parameters:
    - id: entities
      type: java.lang.Iterable<? extends T>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(org.reactivestreams.Publisher<? extends T>)
  id: deleteAll(org.reactivestreams.Publisher<? extends T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteAll(Publisher<? extends T> entityStream)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteAll(Publisher<? extends T> entityStream)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll(Publisher<? extends T> entityStream)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> deleteAll(Publisher<? extends T> entityStream)
    parameters:
    - id: entityStream
      type: org.reactivestreams.Publisher<? extends T>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K)
  id: deleteById(K)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteById(K id)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteById(K id)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(K id)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> deleteById(K id)
    parameters:
    - id: id
      type: K
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)
  id: deleteById(K,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteById(K id, PartitionKey partitionKey)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Deletes an entity by its id and partition key.
  syntax:
    content: public Mono<Void> deleteById(K id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: K
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(org.reactivestreams.Publisher<K>)
  id: deleteById(org.reactivestreams.Publisher<K>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: deleteById(Publisher<K> publisher)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteById(Publisher<K> publisher)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(Publisher<K> publisher)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Void> deleteById(Publisher<K> publisher)
    parameters:
    - id: publisher
      type: org.reactivestreams.Publisher<K>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(K)
  id: existsById(K)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: existsById(K id)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.existsById(K id)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.existsById(K id)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Boolean> existsById(K id)
    parameters:
    - id: id
      type: K
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(org.reactivestreams.Publisher<K>)
  id: existsById(org.reactivestreams.Publisher<K>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: existsById(Publisher<K> publisher)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.existsById(Publisher<K> publisher)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.existsById(Publisher<K> publisher)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<Boolean> existsById(Publisher<K> publisher)
    parameters:
    - id: publisher
      type: org.reactivestreams.Publisher<K>
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll()
  id: findAll()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findAll()
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAll()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<T> findAll()
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  id: findAll(com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findAll(PartitionKey partitionKey)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Returns Flux of items in a specific partition
  syntax:
    content: public Flux<T> findAll(PartitionKey partitionKey)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(org.springframework.data.domain.Sort)
  id: findAll(org.springframework.data.domain.Sort)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findAll(Sort sort)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAll(Sort sort)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll(Sort sort)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<T> findAll(Sort sort)
    parameters:
    - id: sort
      type: org.springframework.data.domain.Sort
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(java.lang.Iterable<K>)
  id: findAllById(java.lang.Iterable<K>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findAllById(Iterable<K> ids)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAllById(Iterable<K> ids)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAllById(Iterable<K> ids)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<T> findAllById(Iterable<K> ids)
    parameters:
    - id: ids
      type: java.lang.Iterable<K>
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(org.reactivestreams.Publisher<K>)
  id: findAllById(org.reactivestreams.Publisher<K>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findAllById(Publisher<K> ids)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAllById(Publisher<K> ids)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAllById(Publisher<K> ids)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Flux<T> findAllById(Publisher<K> ids)
    parameters:
    - id: ids
      type: org.reactivestreams.Publisher<K>
    return:
      type: reactor.core.publisher.Flux<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K)
  id: findById(K)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findById(K id)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findById(K id)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(K id)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<T> findById(K id)
    parameters:
    - id: id
      type: K
    return:
      type: reactor.core.publisher.Mono<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)
  id: findById(K,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findById(K id, PartitionKey partitionKey)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Retrieves an entity by its id and partition key.
  syntax:
    content: public Mono<T> findById(K id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: K
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: reactor.core.publisher.Mono<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(org.reactivestreams.Publisher<K>)
  id: findById(org.reactivestreams.Publisher<K>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository
  langs:
  - java
  name: findById(Publisher<K> publisher)
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findById(Publisher<K> publisher)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(Publisher<K> publisher)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public Mono<T> findById(Publisher<K> publisher)
    parameters:
    - id: publisher
      type: org.reactivestreams.Publisher<K>
    return:
      type: reactor.core.publisher.Mono<T>
references:
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>
  spec.java:
  - uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
    name: CosmosEntityInformation
    fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  name: ReactiveCosmosOperations
  nameWithType: ReactiveCosmosOperations
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.SimpleReactiveCosmosRepository*
  name: SimpleReactiveCosmosRepository
  nameWithType: SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.domain.Sort
  spec.java:
  - uid: org.springframework.data.domain.Sort
    name: Sort
    fullName: org.springframework.data.domain.Sort
- uid: reactor.core.publisher.Flux<T>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll*
  name: findAll
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: S
  spec.java:
  - uid: S
    name: S
    fullName: S
- uid: reactor.core.publisher.Mono<S>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.save*
  name: <S>save
  nameWithType: SimpleReactiveCosmosRepository<T,K>.<S>save
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.<S>save
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<S>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Flux<S>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.saveAll*
  name: <S>saveAll
  nameWithType: SimpleReactiveCosmosRepository<T,K>.<S>saveAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.<S>saveAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.reactivestreams.Publisher<S>
  spec.java:
  - uid: org.reactivestreams.Publisher
    name: Publisher
    fullName: org.reactivestreams.Publisher
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById*
  name: findById
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.reactivestreams.Publisher<K>
  spec.java:
  - uid: org.reactivestreams.Publisher
    name: Publisher
    fullName: org.reactivestreams.Publisher
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById*
  name: existsById
  nameWithType: SimpleReactiveCosmosRepository<T,K>.existsById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.existsById
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<K>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById*
  name: findAllById
  nameWithType: SimpleReactiveCosmosRepository<T,K>.findAllById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAllById
  package: com.azure.spring.data.cosmos.repository.support
- uid: reactor.core.publisher.Mono<java.lang.Long>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.count*
  name: count
  nameWithType: SimpleReactiveCosmosRepository<T,K>.count
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.count
  package: com.azure.spring.data.cosmos.repository.support
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById*
  name: deleteById
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById
  package: com.azure.spring.data.cosmos.repository.support
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.delete*
  name: delete
  nameWithType: SimpleReactiveCosmosRepository<T,K>.delete
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.delete
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll*
  name: deleteAll
  nameWithType: SimpleReactiveCosmosRepository<T,K>.deleteAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.reactivestreams.Publisher<? extends T>
  spec.java:
  - uid: org.reactivestreams.Publisher
    name: Publisher
    fullName: org.reactivestreams.Publisher
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>
  name: ReactiveCosmosRepository<T,K>
  nameWithType: ReactiveCosmosRepository<T,K>
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository<T,K>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: T,K
  name: T,K
  nameWithType: T,K
  fullName: T,K
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  name: CosmosEntityInformation
  nameWithType: CosmosEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: org.reactivestreams.Publisher
  name: Publisher
  nameWithType: Publisher
  fullName: org.reactivestreams.Publisher
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
  name: ReactiveCosmosRepository
  nameWithType: ReactiveCosmosRepository
  fullName: com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository
