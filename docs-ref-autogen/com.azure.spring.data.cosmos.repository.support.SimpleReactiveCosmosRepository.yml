### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository"
fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>"
name: "SimpleReactiveCosmosRepository<T,K>"
nameWithType: "SimpleReactiveCosmosRepository<T,K>"
summary: "Repository class for simple reactive Cosmos operation"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **SimpleReactiveCosmosRepository<T,K>**</br> implements <xref href=\"com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository?alt=com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository&text=ReactiveCosmosRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.SimpleReactiveCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,K>,com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)"
  name: "SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)"
  summary: "Initialization with metadata and reactive<wbr>Cosmos<wbr>Operations"
  parameters:
  - description: "for entityInformation"
    name: "metadata"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "for cosmosOperations"
    name: "reactiveCosmosOperations"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.ReactiveCosmosOperations?alt=com.azure.spring.data.cosmos.core.ReactiveCosmosOperations&text=ReactiveCosmosOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SimpleReactiveCosmosRepository(CosmosEntityInformation<T,K> metadata, ReactiveCosmosOperations reactiveCosmosOperations)"
  desc: "Initialization with metadata and reactiveCosmosOperations"
methods:
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>save(K,com.azure.cosmos.models.PartitionKey,java.lang.Class<S>,com.azure.cosmos.models.CosmosPatchOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  name: "save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  summary: "Patches an entity by its id and partition key with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<S> <S>save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations)"
  desc: "Patches an entity by its id and partition key with CosmosPatchItemRequestOptions"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>save(K,com.azure.cosmos.models.PartitionKey,java.lang.Class<S>,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  name: "save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  summary: "Patches an entity by its id and partition key with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<S> <S>save(K id, PartitionKey partitionKey, Class<S> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  desc: "Patches an entity by its id and partition key with CosmosPatchItemRequestOptions"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>save(S)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.save(S entity)"
  name: "save(S entity)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.save(S entity)"
  parameters:
  - name: "entity"
    type: "<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<S> <S>save(S entity)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(java.lang.Iterable<S>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.saveAll(Iterable<S> entities)"
  name: "saveAll(Iterable<S> entities)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.saveAll(Iterable<S> entities)"
  parameters:
  - name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<S> <S>saveAll(Iterable<S> entities)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.<S>saveAll(org.reactivestreams.Publisher<S>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.saveAll(Publisher<S> entityStream)"
  name: "saveAll(Publisher<S> entityStream)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.saveAll(Publisher<S> entityStream)"
  parameters:
  - name: "entityStream"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<S> <S>saveAll(Publisher<S> entityStream)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.count()"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.count()"
  name: "count()"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.count()"
  syntax: "public Mono<Long> count()"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html\">Long</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.delete(T)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.delete(T entity)"
  name: "delete(T entity)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.delete(T entity)"
  parameters:
  - name: "entity"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> delete(T entity)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll()"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll()"
  name: "deleteAll()"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteAll()"
  syntax: "public Mono<Void> deleteAll()"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(java.lang.Iterable<? extends T>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll(Iterable<? extends T> entities)"
  name: "deleteAll(Iterable<? extends T> entities)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteAll(Iterable<? extends T> entities)"
  parameters:
  - name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> deleteAll(Iterable<? extends T> entities)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAll(org.reactivestreams.Publisher<? extends T>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAll(Publisher<? extends T> entityStream)"
  name: "deleteAll(Publisher<? extends T> entityStream)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteAll(Publisher<? extends T> entityStream)"
  parameters:
  - name: "entityStream"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> deleteAll(Publisher<? extends T> entityStream)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteAllById(java.lang.Iterable<? extends K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteAllById(Iterable<? extends K> ids)"
  name: "deleteAllById(Iterable<? extends K> ids)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteAllById(Iterable<? extends K> ids)"
  parameters:
  - name: "ids"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"? extends K?alt=? extends K&text=? extends K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> deleteAllById(Iterable<? extends K> ids)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(K id)"
  name: "deleteById(K id)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteById(K id)"
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteById(K id)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(K,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)"
  name: "deleteById(K id, PartitionKey partitionKey)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteById(K id, PartitionKey partitionKey)"
  summary: "Deletes an entity by its id and partition key."
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteById(K id, PartitionKey partitionKey)"
  desc: "Deletes an entity by its id and partition key."
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.deleteById(org.reactivestreams.Publisher<K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.deleteById(Publisher<K> publisher)"
  name: "deleteById(Publisher<K> publisher)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.deleteById(Publisher<K> publisher)"
  parameters:
  - name: "publisher"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> deleteById(Publisher<K> publisher)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(K)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.existsById(K id)"
  name: "existsById(K id)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.existsById(K id)"
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> existsById(K id)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.existsById(org.reactivestreams.Publisher<K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.existsById(Publisher<K> publisher)"
  name: "existsById(Publisher<K> publisher)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.existsById(Publisher<K> publisher)"
  parameters:
  - name: "publisher"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Boolean> existsById(Publisher<K> publisher)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll()"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll()"
  name: "findAll()"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findAll()"
  syntax: "public Flux<T> findAll()"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)"
  name: "findAll(PartitionKey partitionKey)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findAll(PartitionKey partitionKey)"
  summary: "Returns Flux of items in a specific partition"
  parameters:
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<T> findAll(PartitionKey partitionKey)"
  desc: "Returns Flux of items in a specific partition"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAll(org.springframework.data.domain.Sort)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAll(Sort sort)"
  name: "findAll(Sort sort)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findAll(Sort sort)"
  parameters:
  - name: "sort"
    type: "<xref href=\"org.springframework.data.domain.Sort?alt=org.springframework.data.domain.Sort&text=Sort\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<T> findAll(Sort sort)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(java.lang.Iterable<K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAllById(Iterable<K> ids)"
  name: "findAllById(Iterable<K> ids)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findAllById(Iterable<K> ids)"
  parameters:
  - name: "ids"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> findAllById(Iterable<K> ids)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findAllById(org.reactivestreams.Publisher<K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findAllById(Publisher<K> ids)"
  name: "findAllById(Publisher<K> ids)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findAllById(Publisher<K> ids)"
  parameters:
  - name: "ids"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<T> findAllById(Publisher<K> ids)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(K id)"
  name: "findById(K id)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findById(K id)"
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> findById(K id)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(K,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)"
  name: "findById(K id, PartitionKey partitionKey)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findById(K id, PartitionKey partitionKey)"
  summary: "Retrieves an entity by its id and partition key."
  parameters:
  - name: "id"
    type: "<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />"
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<T> findById(K id, PartitionKey partitionKey)"
  desc: "Retrieves an entity by its id and partition key."
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository.findById(org.reactivestreams.Publisher<K>)"
  fullName: "com.azure.spring.data.cosmos.repository.support.SimpleReactiveCosmosRepository<T,K>.findById(Publisher<K> publisher)"
  name: "findById(Publisher<K> publisher)"
  nameWithType: "SimpleReactiveCosmosRepository<T,K>.findById(Publisher<K> publisher)"
  parameters:
  - name: "publisher"
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> findById(Publisher<K> publisher)"
  returns:
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- name: "T"
- name: "K"
desc: "Repository class for simple reactive Cosmos operation"
implements:
- "<xref href=\"com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository?alt=com.azure.spring.data.cosmos.repository.ReactiveCosmosRepository&text=ReactiveCosmosRepository\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.spring.data.cosmos.repository.support"
artifact: com.azure:azure-spring-data-cosmos:3.47.0
