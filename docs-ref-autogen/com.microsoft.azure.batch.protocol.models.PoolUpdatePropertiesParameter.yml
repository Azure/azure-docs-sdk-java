### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter"
fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter"
name: "PoolUpdatePropertiesParameter"
nameWithType: "PoolUpdatePropertiesParameter"
summary: "The set of changes to be made to a Pool."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PoolUpdatePropertiesParameter"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.PoolUpdatePropertiesParameter()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.PoolUpdatePropertiesParameter()"
  name: "PoolUpdatePropertiesParameter()"
  nameWithType: "PoolUpdatePropertiesParameter.PoolUpdatePropertiesParameter()"
  syntax: "public PoolUpdatePropertiesParameter()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.applicationPackageReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.applicationPackageReferences()"
  name: "applicationPackageReferences()"
  nameWithType: "PoolUpdatePropertiesParameter.applicationPackageReferences()"
  summary: "Get the list replaces any existing Application Package references on the Pool."
  syntax: "public List<ApplicationPackageReference> applicationPackageReferences()"
  desc: "Get the list replaces any existing Application Package references on the Pool. Changes to Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or if you specify an empty collection, any existing Application Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool."
  returns:
    description: "the applicationPackageReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.certificateReferences()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.certificateReferences()"
  name: "certificateReferences()"
  nameWithType: "PoolUpdatePropertiesParameter.certificateReferences()"
  summary: "Get this list replaces any existing Certificate references configured on the Pool."
  syntax: "public List<CertificateReference> certificateReferences()"
  desc: "Get this list replaces any existing Certificate references configured on the Pool. If you specify an empty collection, any existing Certificate references are removed from the Pool. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the certificateReferences value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.metadata()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.metadata()"
  name: "metadata()"
  nameWithType: "PoolUpdatePropertiesParameter.metadata()"
  summary: "Get this list replaces any existing metadata configured on the Pool."
  syntax: "public List<MetadataItem> metadata()"
  desc: "Get this list replaces any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the Pool."
  returns:
    description: "the metadata value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.startTask()"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.startTask()"
  name: "startTask()"
  nameWithType: "PoolUpdatePropertiesParameter.startTask()"
  summary: "Get if this element is present, it overwrites any existing Start<wbr>Task."
  syntax: "public StartTask startTask()"
  desc: "Get if this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool."
  returns:
    description: "the startTask value"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withApplicationPackageReferences(java.util.List<com.microsoft.azure.batch.protocol.models.ApplicationPackageReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  name: "withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  nameWithType: "PoolUpdatePropertiesParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  summary: "Set the list replaces any existing Application Package references on the Pool."
  parameters:
  - description: "the applicationPackageReferences value to set"
    name: "applicationPackageReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolUpdatePropertiesParameter withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)"
  desc: "Set the list replaces any existing Application Package references on the Pool. Changes to Application Package references affect all new Compute Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Application Package references on any given Pool. If omitted, or if you specify an empty collection, any existing Application Packages references are removed from the Pool. A maximum of 10 references may be specified on a given Pool."
  returns:
    description: "the PoolUpdatePropertiesParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withCertificateReferences(java.util.List<com.microsoft.azure.batch.protocol.models.CertificateReference>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withCertificateReferences(List<CertificateReference> certificateReferences)"
  name: "withCertificateReferences(List<CertificateReference> certificateReferences)"
  nameWithType: "PoolUpdatePropertiesParameter.withCertificateReferences(List<CertificateReference> certificateReferences)"
  summary: "Set this list replaces any existing Certificate references configured on the Pool."
  parameters:
  - description: "the certificateReferences value to set"
    name: "certificateReferences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolUpdatePropertiesParameter withCertificateReferences(List<CertificateReference> certificateReferences)"
  desc: "Set this list replaces any existing Certificate references configured on the Pool. If you specify an empty collection, any existing Certificate references are removed from the Pool. For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ\\_BATCH\\_CERTIFICATES\\_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/\\{user-name\\}/certs) and Certificates are placed in that directory."
  returns:
    description: "the PoolUpdatePropertiesParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withMetadata(java.util.List<com.microsoft.azure.batch.protocol.models.MetadataItem>)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withMetadata(List<MetadataItem> metadata)"
  name: "withMetadata(List<MetadataItem> metadata)"
  nameWithType: "PoolUpdatePropertiesParameter.withMetadata(List<MetadataItem> metadata)"
  summary: "Set this list replaces any existing metadata configured on the Pool."
  parameters:
  - description: "the metadata value to set"
    name: "metadata"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PoolUpdatePropertiesParameter withMetadata(List<MetadataItem> metadata)"
  desc: "Set this list replaces any existing metadata configured on the Pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the Pool."
  returns:
    description: "the PoolUpdatePropertiesParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withStartTask(com.microsoft.azure.batch.protocol.models.StartTask)"
  fullName: "com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withStartTask(StartTask startTask)"
  name: "withStartTask(StartTask startTask)"
  nameWithType: "PoolUpdatePropertiesParameter.withStartTask(StartTask startTask)"
  summary: "Set if this element is present, it overwrites any existing Start<wbr>Task."
  parameters:
  - description: "the startTask value to set"
    name: "startTask"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PoolUpdatePropertiesParameter withStartTask(StartTask startTask)"
  desc: "Set if this element is present, it overwrites any existing StartTask. If omitted, any existing StartTask is removed from the Pool."
  returns:
    description: "the PoolUpdatePropertiesParameter object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The set of changes to be made to a Pool."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
