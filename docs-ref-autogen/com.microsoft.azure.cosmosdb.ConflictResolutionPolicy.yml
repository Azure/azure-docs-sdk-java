### YamlMime:JavaType
constructors:
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.ConflictResolutionPolicy(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cosmosdb.JsonSerializable?alt=com.microsoft.azure.cosmosdb.JsonSerializable&text=JsonSerializable" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.cosmosdb.JsonSerializable.get(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getBoolean(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getCollection(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getDouble(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getHashMap()
- com.microsoft.azure.cosmosdb.JsonSerializable.getInt(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getLogger()
- com.microsoft.azure.cosmosdb.JsonSerializable.getLong(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getMapper()
- com.microsoft.azure.cosmosdb.JsonSerializable.getObject(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getObjectByPath(List<String>)
- com.microsoft.azure.cosmosdb.JsonSerializable.getString(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.has(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable()
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable(String,ObjectMapper)
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.remove(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.toJson()
- com.microsoft.azure.cosmosdb.JsonSerializable.toJson(SerializationFormattingPolicy)
- com.microsoft.azure.cosmosdb.JsonSerializable.toString()
methods:
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy()
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy(String)
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy()
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy(String)
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionMode()
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionPath()
- com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionProcedure()
nameWithType: ConflictResolutionPolicy
syntax: public class ConflictResolutionPolicy extends JsonSerializable
type: class
uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy
fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy
name: ConflictResolutionPolicy
package: com.microsoft.azure.cosmosdb
summary: "<p>Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on documents in the collection in the Azure Cosmos DB service.</p>\r\n<p>A collection with custom conflict resolution with no user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy();\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>\r\n<p>A collection with custom conflict resolution with a user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy(conflictResolutionSprocName);\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>\r\n<p>A collection with last writer wins conflict resolution, based on a path in the conflicting documents. A collection with custom conflict resolution with a user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createLastWriterWinsPolicy(\"/path/for/conflict/resolution\");\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>"
metadata: {}
