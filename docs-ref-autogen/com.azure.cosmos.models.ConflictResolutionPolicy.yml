### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.models.ConflictResolutionPolicy
  id: ConflictResolutionPolicy
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models
  children:
  - com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy()
  - com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy(java.lang.String)
  - com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy()
  - com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy(java.lang.String)
  - com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath()
  - com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure()
  - com.azure.cosmos.models.ConflictResolutionPolicy.getMode()
  langs:
  - java
  name: ConflictResolutionPolicy
  nameWithType: ConflictResolutionPolicy
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy
  type: Class
  package: com.azure.cosmos.models
  summary: >-
    Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on items in the container in the Azure Cosmos DB service. Refer to: https://docs.microsoft.com/en-us/azure/cosmos-db/conflict-resolution-policies


    A container with custom conflict resolution with no user-registered stored procedure.


    ```java

    CosmosContainerProperties containerProperties =
          new CosmosContainerProperties("Multi-master container", "Multi-master container partition key");
     containerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy.createCustomPolicy());

     CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();
     CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();
    ```


    A container with custom conflict resolution with a user-registered stored procedure.


    ```java

    CosmosContainerProperties containerProperties =
          new CosmosContainerProperties("Multi-master container", "Multi-master container partition key");

     ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy(conflictResolutionSprocName);
     containerProperties.setConflictResolutionPolicy(policy);

     CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();
     CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();
    ```


    A container with last writer wins conflict resolution, based on a path in the conflicting items. A container with custom conflict resolution with a user-registered stored procedure.


    ```java

    CosmosContainerProperties containerProperties =
          new CosmosContainerProperties("Multi-master container", "Multi-master container partition key");

     ConflictResolutionPolicy policy = ConflictResolutionPolicy.createLastWriterWinsPolicy("/path/for/conflict/resolution");
     containerProperties.setConflictResolutionPolicy(policy);

     CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();
     CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();
    ```
  syntax:
    content: public final class ConflictResolutionPolicy
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy()
  id: ConflictResolutionPolicy()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: ConflictResolutionPolicy()
  nameWithType: ConflictResolutionPolicy.ConflictResolutionPolicy()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy*
  type: Constructor
  package: com.azure.cosmos.models
  summary: Initializes a new instance of the <xref uid="com.azure.cosmos.models.ConflictResolutionPolicy" data-throw-if-not-resolved="false">ConflictResolutionPolicy</xref> class for the Azure Cosmos DB service.
  syntax:
    content: " ConflictResolutionPolicy()"
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy(com.fasterxml.jackson.databind.node.ObjectNode)
  id: ConflictResolutionPolicy(com.fasterxml.jackson.databind.node.ObjectNode)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: ConflictResolutionPolicy(ObjectNode objectNode)
  nameWithType: ConflictResolutionPolicy.ConflictResolutionPolicy(ObjectNode objectNode)
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy(ObjectNode objectNode)
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy*
  type: Constructor
  package: com.azure.cosmos.models
  summary: Instantiates a new Conflict resolution policy.
  syntax:
    content: " ConflictResolutionPolicy(ObjectNode objectNode)"
    parameters:
    - id: objectNode
      type: com.fasterxml.jackson.databind.node.ObjectNode
      description: the object node.
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy(java.lang.String)
  id: ConflictResolutionPolicy(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: ConflictResolutionPolicy(String jsonString)
  nameWithType: ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy*
  type: Constructor
  package: com.azure.cosmos.models
  summary: Instantiates a new Conflict resolution policy.
  syntax:
    content: " ConflictResolutionPolicy(String jsonString)"
    parameters:
    - id: jsonString
      type: java.lang.String
      description: the json string
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy()
  id: createCustomPolicy()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: createCustomPolicy()
  nameWithType: ConflictResolutionPolicy.createCustomPolicy()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Creates a CUSTOM <xref uid="com.azure.cosmos.models.ConflictResolutionPolicy" data-throw-if-not-resolved="false">ConflictResolutionPolicy</xref> without any <xref uid="com.azure.cosmos.implementation.StoredProcedure" data-throw-if-not-resolved="false">StoredProcedure</xref>. User manually should resolve conflicts.


    The conflicts will be registered in the conflicts feed and the user should manually resolve them.
  syntax:
    content: public static ConflictResolutionPolicy createCustomPolicy()
    return:
      type: com.azure.cosmos.models.ConflictResolutionPolicy
      description: ConflictResolutionPolicy.
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy(java.lang.String)
  id: createCustomPolicy(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: createCustomPolicy(String conflictResolutionStoredProcName)
  nameWithType: ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionStoredProcName)
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionStoredProcName)
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Creates a CUSTOM <xref uid="com.azure.cosmos.models.ConflictResolutionPolicy" data-throw-if-not-resolved="false">ConflictResolutionPolicy</xref> which uses the specified stored procedure to perform conflict resolution


    This stored procedure may be created after the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref> is created and can be changed as required.

     *  In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed
     *  The user can provide the stored procedure @see <xref uid="com.azure.cosmos.implementation.Resource.getId*" data-throw-if-not-resolved="false">Resource#getId()</xref>
  syntax:
    content: public static ConflictResolutionPolicy createCustomPolicy(String conflictResolutionStoredProcName)
    parameters:
    - id: conflictResolutionStoredProcName
      type: java.lang.String
      description: stored procedure to perform conflict resolution.
    return:
      type: com.azure.cosmos.models.ConflictResolutionPolicy
      description: ConflictResolutionPolicy.
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy()
  id: createLastWriterWinsPolicy()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: createLastWriterWinsPolicy()
  nameWithType: ConflictResolutionPolicy.createLastWriterWinsPolicy()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Creates a LAST\_WRITER\_WINS <xref uid="com.azure.cosmos.models.ConflictResolutionPolicy" data-throw-if-not-resolved="false">ConflictResolutionPolicy</xref> with "/\_ts" as the resolution path.


    In case of a conflict occurring on an item, the item with the higher integer value in the default path <xref uid="com.azure.cosmos.implementation.Resource.getTimestamp*" data-throw-if-not-resolved="false">Resource#getTimestamp()</xref> ()\}, i.e., "/\_ts" will be used. <xref uid="com.azure.cosmos.implementation.Resource.getTimestamp*" data-throw-if-not-resolved="false">Resource#getTimestamp()</xref>, i.e., "/\_ts" will be used.
  syntax:
    content: public static ConflictResolutionPolicy createLastWriterWinsPolicy()
    return:
      type: com.azure.cosmos.models.ConflictResolutionPolicy
      description: ConflictResolutionPolicy.
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy(java.lang.String)
  id: createLastWriterWinsPolicy(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: createLastWriterWinsPolicy(String conflictResolutionPath)
  nameWithType: ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Creates a LAST\_WRITER\_WINS <xref uid="com.azure.cosmos.models.ConflictResolutionPolicy" data-throw-if-not-resolved="false">ConflictResolutionPolicy</xref> with path as the resolution path.


    The specified path must be present in each item and must be an integer value. In case of a conflict occurring on an item, the item with the higher integer value in the specified path will be picked.
  syntax:
    content: public static ConflictResolutionPolicy createLastWriterWinsPolicy(String conflictResolutionPath)
    parameters:
    - id: conflictResolutionPath
      type: java.lang.String
      description: >-
        The path to check values for last-writer wins conflict resolution.
         That path is a rooted path of the property in the item, such as "/name/first".
    return:
      type: com.azure.cosmos.models.ConflictResolutionPolicy
      description: ConflictResolutionPolicy.
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath()
  id: getConflictResolutionPath()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: getConflictResolutionPath()
  nameWithType: ConflictResolutionPolicy.getConflictResolutionPath()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Gets the path which is present in each item in the Azure Cosmos DB service for last writer wins conflict-resolution. This path must be present in each item and must be an integer value. In case of a conflict occurring on an item, the item with the higher integer value in the specified path will be picked. If the path is unspecified, by default the <xref uid="com.azure.cosmos.implementation.Resource.getTimestamp*" data-throw-if-not-resolved="false">Resource#getTimestamp()</xref> ()\} path will be used.


    This value should only be set when using <xref uid="com.azure.cosmos.models.ConflictResolutionMode.LAST_WRITER_WINS" data-throw-if-not-resolved="false">ConflictResolutionMode#LAST_WRITER_WINS</xref>
  syntax:
    content: public String getConflictResolutionPath()
    return:
      type: java.lang.String
      description: >-
        The path to check values for last-writer wins conflict resolution.
         That path is a rooted path of the property in the item, such as "/name/first".
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure()
  id: getConflictResolutionProcedure()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: getConflictResolutionProcedure()
  nameWithType: ConflictResolutionPolicy.getConflictResolutionProcedure()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure*
  type: Method
  package: com.azure.cosmos.models
  summary: >-
    Gets the <xref uid="com.azure.cosmos.implementation.StoredProcedure" data-throw-if-not-resolved="false">StoredProcedure</xref> which is used for conflict resolution in the Azure Cosmos DB service. This stored procedure may be created after the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref> is created and can be changed as required.

     *  This value should only be set when using <xref uid="com.azure.cosmos.models.ConflictResolutionMode.CUSTOM" data-throw-if-not-resolved="false">ConflictResolutionMode#CUSTOM</xref>
     *  In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed
     *  The user can provide the stored procedure @see <xref uid="com.azure.cosmos.implementation.Resource.getId*" data-throw-if-not-resolved="false">Resource#getId()</xref> ()\}

    \*
  syntax:
    content: public String getConflictResolutionProcedure()
    return:
      type: java.lang.String
      description: the stored procedure to perform conflict resolution.]
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getMode()
  id: getMode()
  artifact: com.azure:azure-cosmos:4.3.1
  parent: com.azure.cosmos.models.ConflictResolutionPolicy
  langs:
  - java
  name: getMode()
  nameWithType: ConflictResolutionPolicy.getMode()
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getMode()
  overload: com.azure.cosmos.models.ConflictResolutionPolicy.getMode*
  type: Method
  package: com.azure.cosmos.models
  summary: Gets the <xref uid="com.azure.cosmos.models.ConflictResolutionMode" data-throw-if-not-resolved="false">ConflictResolutionMode</xref> in the Azure Cosmos DB service. By default it is <xref uid="com.azure.cosmos.models.ConflictResolutionMode.LAST_WRITER_WINS" data-throw-if-not-resolved="false">ConflictResolutionMode#LAST_WRITER_WINS</xref>.
  syntax:
    content: public ConflictResolutionMode getMode()
    return:
      type: com.azure.cosmos.models.ConflictResolutionMode
      description: ConflictResolutionMode.
references:
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy*
  name: ConflictResolutionPolicy
  nameWithType: ConflictResolutionPolicy.ConflictResolutionPolicy
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.ConflictResolutionPolicy
  package: com.azure.cosmos.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  spec.java:
  - uid: com.fasterxml.jackson.databind.node.ObjectNode
    name: ObjectNode
    fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy*
  name: createLastWriterWinsPolicy
  nameWithType: ConflictResolutionPolicy.createLastWriterWinsPolicy
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy
  package: com.azure.cosmos.models
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy*
  name: createCustomPolicy
  nameWithType: ConflictResolutionPolicy.createCustomPolicy
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy
  package: com.azure.cosmos.models
- uid: com.azure.cosmos.models.ConflictResolutionMode
  name: ConflictResolutionMode
  nameWithType: ConflictResolutionMode
  fullName: com.azure.cosmos.models.ConflictResolutionMode
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getMode*
  name: getMode
  nameWithType: ConflictResolutionPolicy.getMode
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getMode
  package: com.azure.cosmos.models
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath*
  name: getConflictResolutionPath
  nameWithType: ConflictResolutionPolicy.getConflictResolutionPath
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath
  package: com.azure.cosmos.models
- uid: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure*
  name: getConflictResolutionProcedure
  nameWithType: ConflictResolutionPolicy.getConflictResolutionProcedure
  fullName: com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure
  package: com.azure.cosmos.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
