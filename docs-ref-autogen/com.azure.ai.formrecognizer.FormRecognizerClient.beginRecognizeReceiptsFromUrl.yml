### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl"
name: "beginRecognizeReceiptsFromUrl"
nameWithType: "FormRecognizerClient.beginRecognizeReceiptsFromUrl"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)"
  name: "beginRecognizeReceiptsFromUrl(String receiptUrl)"
  nameWithType: "FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)"
  summary: "Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{file_source_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl)\n     .getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n         FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                 String merchantName = merchantNameField.getValue().asString();\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                 String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                 LocalDate transactionDate = transactionDateField.getValue().asDate();\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                 List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                 receiptItems.stream()\n                     .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                     .map(formField -> formField.getValue().asMap())\n                     .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                         if (\"Quantity\".equals(key)) {\n                             if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                 Float quantity = formField.getValue().asFloat();\n                                 System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                     quantity, formField.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  parameters:
  - description: "The URL of the receipt to analyze."
    name: "receiptUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize receipt operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a List of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)"
  name: "beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)"
  nameWithType: "FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)"
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receipt_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n     new RecognizeReceiptsOptions()\n         .setPollInterval(Duration.ofSeconds(5))\n         .setFieldElementsIncluded(true), Context.NONE).getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n         FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                 String merchantName = merchantNameField.getValue().asString();\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                 String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                 LocalDate transactionDate = transactionDateField.getValue().asDate();\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                 List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                 receiptItems.stream()\n                     .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                     .map(formField -> formField.getValue().asMap())\n                     .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                         if (\"Quantity\".equals(key)) {\n                             if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                 Float quantity = formField.getValue().asFloat();\n                                 System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                     quantity, formField.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n     });\n```"
  parameters:
  - description: "The source URL to the input receipt."
    name: "receiptUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a receipt."
    name: "recognizeReceiptsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions&text=RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize receipt operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a List of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.0.4
