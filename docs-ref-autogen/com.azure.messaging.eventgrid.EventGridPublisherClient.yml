### YamlMime:JavaType
uid: "com.azure.messaging.eventgrid.EventGridPublisherClient"
fullName: "com.azure.messaging.eventgrid.EventGridPublisherClient<T>"
name: "EventGridPublisherClient<T>"
nameWithType: "EventGridPublisherClient<T>"
summary: "A service client that publishes events to an EventGrid topic or domain. Use <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherClientBuilder\"></xref> to create an instance of this client. Note that this is simply a synchronous convenience layer over the <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherAsyncClient\"></xref>, which has more efficient asynchronous functionality and is recommended.\n\n**Create EventGridPublisherClient for CloudEvent Samples**\n\n```java\n// Create a client to send events of CloudEvent schema (com.azure.core.models.CloudEvent)\n EventGridPublisherClient<CloudEvent> cloudEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_ENDPOINT\"))  // make sure it accepts CloudEvent\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_KEY\")))\n     .buildCloudEventPublisherClient();\n```\n\n**Send CloudEvent Samples**\n\n```java\n// Create a com.azure.models.CloudEvent.\n User user = new User(\"Stephen\", \"James\");\n CloudEvent cloudEventDataObject = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(user), CloudEventDataFormat.JSON, \"application/json\");\n \n // Send a single CloudEvent\n cloudEventPublisherClient.sendEvent(cloudEventDataObject);\n \n // Send a list of CloudEvents to the EventGrid service altogether.\n // This has better performance than sending one by one.\n cloudEventPublisherClient.sendEvents(Arrays.asList(\n     cloudEventDataObject\n     // add more CloudEvents objects\n ));\n```\n\n**Create EventGridPublisherClient for EventGridEvent Samples**\n\n```java\n// Create a client to send events of EventGridEvent schema\n EventGridPublisherClient<EventGridEvent> eventGridEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_EVENTGRID_EVENT_ENDPOINT\"))  // make sure it accepts EventGridEvent\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_EVENT_KEY\")))\n     .buildEventGridEventPublisherClient();\n```\n\n**Send EventGridEvent Samples**\n\n```java\n// Create an EventGridEvent\n User user = new User(\"John\", \"James\");\n EventGridEvent eventGridEvent = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(user), \"0.1\");\n \n // Send a single EventGridEvent\n eventGridEventPublisherClient.sendEvent(eventGridEvent);\n \n // Send a list of EventGridEvents to the EventGrid service altogether.\n // This has better performance than sending one by one.\n eventGridEventPublisherClient.sendEvents(Arrays.asList(\n     eventGridEvent\n     // add more EventGridEvents objects\n ));\n```\n\n**Create EventGridPublisherClient for Custom Event Schema Samples**\n\n```java\n// Create a client to send events of custom event\n EventGridPublisherClient<BinaryData> customEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_CUSTOM_EVENT_ENDPOINT\"))  // make sure it accepts custom events\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_CUSTOM_EVENT_KEY\")))\n     .buildCustomEventPublisherClient();\n```\n\n**Send Custom Event Schema Samples**\n\n```java\n// Create an custom event object\n Map<String, Object> customEvent = new HashMap<String, Object>() {\n     {\n         put(\"id\", UUID.randomUUID().toString());\n         put(\"subject\", \"Test\");\n         put(\"foo\", \"bar\");\n         put(\"type\", \"Microsoft.MockPublisher.TestEvent\");\n         put(\"data\", 100.0);\n         put(\"dataVersion\", \"0.1\");\n     }\n };\n \n // Send a single custom event\n customEventPublisherClient.sendEvent(BinaryData.fromObject(customEvent));\n \n // Send a list of custom events to the EventGrid service altogether.\n // This has better performance than sending one by one.\n customEventPublisherClient.sendEvents(Arrays.asList(\n     BinaryData.fromObject(customEvent)\n     // add more custom events in BinaryData\n ));\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class EventGridPublisherClient<T>"
methods:
- "com.azure.messaging.eventgrid.EventGridPublisherClient.generateSas(java.lang.String,com.azure.core.credential.AzureKeyCredential,java.time.OffsetDateTime)"
- "com.azure.messaging.eventgrid.EventGridPublisherClient.generateSas(java.lang.String,com.azure.core.credential.AzureKeyCredential,java.time.OffsetDateTime,com.azure.messaging.eventgrid.EventGridServiceVersion)"
- "com.azure.messaging.eventgrid.EventGridPublisherClient.sendEvent(T)"
- "com.azure.messaging.eventgrid.EventGridPublisherClient.sendEvents(java.lang.Iterable<T>)"
- "com.azure.messaging.eventgrid.EventGridPublisherClient.sendEventsWithResponse(java.lang.Iterable<T>,com.azure.core.util.Context)"
type: "class"
typeParameters:
- name: "T"
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.2.0
