### YamlMime:JavaMember
uid: "com.azure.core.models.CloudEvent.CloudEvent*"
fullName: "com.azure.core.models.CloudEvent.CloudEvent"
name: "CloudEvent"
nameWithType: "CloudEvent.CloudEvent"
members:
- uid: "com.azure.core.models.CloudEvent.CloudEvent(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.models.CloudEventDataFormat,java.lang.String)"
  fullName: "com.azure.core.models.CloudEvent.CloudEvent(String source, String type, BinaryData data, CloudEventDataFormat format, String dataContentType)"
  name: "CloudEvent(String source, String type, BinaryData data, CloudEventDataFormat format, String dataContentType)"
  nameWithType: "CloudEvent.CloudEvent(String source, String type, BinaryData data, CloudEventDataFormat format, String dataContentType)"
  summary: "Create an instance of <xref uid=\"com.azure.core.models.CloudEvent\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEvent\"></xref>.\n\n`source`, `type`, `id`, and `specversion` are required attributes according to the [CNCF CloudEvent spec][]. You must set the `source` and `type` when using this constructor. For convenience, `id` and `specversion` are automatically assigned. You can change the `id` by using <xref uid=\"com.azure.core.models.CloudEvent.setId(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#setId(String)\"></xref> after you create a CloudEvent. But you can not change `specversion` because this class is specifically for CloudEvent 1.0 schema.\n\nFor the CloudEvent data payload, this constructor accepts `data` of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> as the CloudEvent payload. The `data` can be created from objects of type String, bytes, boolean, null, array or other types. A CloudEvent will be serialized to its Json String representation to be sent out. Use param `format` to indicate whether the `data` will be serialized as bytes, or Json. When <xref uid=\"com.azure.core.models.CloudEventDataFormat.BYTES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEventDataFormat#BYTES\"></xref> is used, the data payload will be serialized to base64 bytes and stored in attribute *data\\_base64* of the CloudEvent's Json representation. When <xref uid=\"com.azure.core.models.CloudEventDataFormat.JSON\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEventDataFormat#JSON\"></xref> is used, the data payload will be serialized as Json data and stored in attribute *data* of the CloudEvent's Json representation.\n\n**Create CloudEvent Samples**\n\n```java\n// Use BinaryData.fromBytes() to create data in format CloudEventDataFormat.BYTES\n byte[] exampleBytes = \"Hello World\".getBytes(StandardCharsets.UTF_8);\n CloudEvent cloudEvent = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromBytes(exampleBytes), CloudEventDataFormat.BYTES, \"application/octet-stream\");\n \n // Use BinaryData.fromObject() to create CloudEvent data in format CloudEventDataFormat.JSON\n // From a model class\n User user = new User(\"Stephen\", \"James\");\n CloudEvent cloudEventDataObject = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(user), CloudEventDataFormat.JSON, \"application/json\");\n \n // From a String\n CloudEvent cloudEventDataStr = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(\"Hello World\"), CloudEventDataFormat.JSON, \"text/plain\");\n \n // From an Integer\n CloudEvent cloudEventDataInt = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(1), CloudEventDataFormat.JSON, \"int\");\n \n // From a Boolean\n CloudEvent cloudEventDataBool = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(true), CloudEventDataFormat.JSON, \"bool\");\n \n // From null\n CloudEvent cloudEventDataNull = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(null), CloudEventDataFormat.JSON, \"null\");\n \n // Use BinaryData.fromString() if you have a Json String for the CloudEvent data.\n String jsonStringForData = \"\\\"Hello World\\\"\";  // A json String.\n CloudEvent cloudEventDataJsonStr = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromString(jsonStringForData), CloudEventDataFormat.JSON, \"text/plain\");\n```\n\n\n[CNCF CloudEvent spec]: https://github.com/cloudevents/spec/blob/v1.0.1/spec.md"
  parameters:
  - description: "Identifies the context in which an event happened. The combination of id and source must be unique\n               for each distinct event."
    name: "source"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type of event related to the originating occurrence."
    name: "type"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> that wraps the original data, which can be a String, byte[], or model class."
    name: "data"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "Set to <xref uid=\"com.azure.core.models.CloudEventDataFormat.BYTES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEventDataFormat#BYTES\"></xref> to serialize the data to base64 format, or\n               <xref uid=\"com.azure.core.models.CloudEventDataFormat.JSON\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CloudEventDataFormat#JSON\"></xref> to serialize the data to JSON value."
    name: "format"
    type: "<xref href=\"com.azure.core.models.CloudEventDataFormat?alt=com.azure.core.models.CloudEventDataFormat&text=CloudEventDataFormat\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content type of the data. It has no impact on how the data is serialized but tells\n                        the event subscriber how to use the data. Typically the value is of MIME types such as\n                        \"application/json\", \"text/plain\", \"text/xml\", \"avro/binary\", etc. It can be null."
    name: "dataContentType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CloudEvent(String source, String type, BinaryData data, CloudEventDataFormat format, String dataContentType)"
type: "constructor"
metadata: {}
package: "com.azure.core.models"
artifact: com.azure:azure-core:1.15.0
