### YamlMime:JavaPackage
uid: "com.azure.monitor.query"
fullName: "com.azure.monitor.query"
name: "com.azure.monitor.query"
summary: "<p>Azure Monitor Query service is a powerful tool that allows you to query and analyze log data from various sources\n in Azure."
classes:
- "com.azure.monitor.query.LogsQueryAsyncClient"
- "com.azure.monitor.query.LogsQueryClient"
- "com.azure.monitor.query.LogsQueryClientBuilder"
- "com.azure.monitor.query.MetricsAsyncClient"
- "com.azure.monitor.query.MetricsClient"
- "com.azure.monitor.query.MetricsClientBuilder"
- "com.azure.monitor.query.MetricsQueryAsyncClient"
- "com.azure.monitor.query.MetricsQueryClient"
- "com.azure.monitor.query.MetricsQueryClientBuilder"
enums:
- "com.azure.monitor.query.LogsQueryServiceVersion"
- "com.azure.monitor.query.MetricsQueryServiceVersion"
- "com.azure.monitor.query.MetricsServiceVersion"
desc: "<p>Azure Monitor Query service is a powerful tool that allows you to query and analyze log data from various sources\n in Azure. It is built on top of the Kusto Query Language (KQL), which is a powerful query language that allows you\n to perform complex queries on large datasets. With Azure Monitor Query, you can easily search and analyze\n log data from various sources, including virtual machines, containers, and applications.</p>\n\n <p>Azure Monitor Query java client library is a library that allows you to execute read-only queries against\n Azure Monitor\\u2019s two data platforms: Logs and Metrics. The library provides both synchronous and asynchronous forms\n of the clients.</p>\n\n <ul>\n     <li><a href=\"https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs\">Logs</a> - Collects and\n     organizes log and performance data from monitored resources. Data from different sources such as platform logs\n     from Azure services, log and performance data from virtual machines agents, and usage and performance data from\n     apps can be consolidated into a single <a href=\"https://learn.microsoft.com/azure/azure-monitor/logs/data-platform-logs#log-analytics-and-workspaces\">Azure Log Analytics workspace</a>.\n     The various data types can be analyzed together using the Kusto Query Language.</li>\n\n     <li><a href=\"https://learn.microsoft.com/azure/azure-monitor/essentials/data-platform-metrics\">Metrics</a> - Collects\n     numeric data from monitored resources into a time series database. Metrics are numerical values that are\n     collected at regular intervals and describe some aspect of a system at a particular time. Metrics are lightweight\n     and capable of supporting near real-time scenarios, making them particularly useful for alerting and fast\n     detection of issues.</li>\n </ul>\n\n <h2>Getting Started</h2>\n\n <p>In order to interact with the Monitor service you'll need to create an instance of the\n <xref uid=\"com.azure.monitor.query.LogsQueryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.LogsQueryClient\"></xref> or <xref uid=\"com.azure.monitor.query.MetricsQueryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.MetricsQueryClient\"></xref> class. To make\n this possible you'll need to use AAD authentication via\n <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\"> Azure Identity</a>\n to connect to the service.</p>\n\n <p><strong>Sample: Construct Asynchronous Clients</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.monitor.query.LogsQueryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.LogsQueryAsyncClient\"></xref>\n using the <xref uid=\"com.azure.monitor.query.LogsQueryClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.LogsQueryClientBuilder\"></xref>.</p>\n\n <!-- src_embed com.azure.monitor.query.LogsQueryAsyncClient.instantiation -->\n <pre>\n LogsQueryAsyncClient logsQueryAsyncClient = new LogsQueryClientBuilder&#40;&#41;\n         .credential&#40;tokenCredential&#41;\n         .buildAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.monitor.query.LogsQueryAsyncClient.instantiation -->\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.monitor.query.MetricsQueryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.MetricsQueryAsyncClient\"></xref>\n using the <xref uid=\"com.azure.monitor.query.MetricsQueryClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.MetricsQueryClientBuilder\"></xref>.</p>\n\n <!-- src_embed com.azure.monitor.query.MetricsQueryAsyncClient.instantiation -->\n <pre>\n MetricsQueryAsyncClient metricsQueryAsyncClient = new MetricsQueryClientBuilder&#40;&#41;\n         .credential&#40;tokenCredential&#41;\n         .buildAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.monitor.query.MetricsQueryAsyncClient.instantiation -->\n\n <p><strong>Sample: Construct Synchronous Clients</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.monitor.query.LogsQueryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.LogsQueryClient\"></xref>\n using the <xref uid=\"com.azure.monitor.query.LogsQueryClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.LogsQueryClientBuilder\"></xref>.</p>\n\n <!-- src_embed com.azure.monitor.query.LogsQueryClient.instantiation -->\n <pre>\n LogsQueryClient logsQueryClient = new LogsQueryClientBuilder&#40;&#41;\n         .credential&#40;tokenCredential&#41;\n         .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.monitor.query.LogsQueryClient.instantiation -->\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.monitor.query.MetricsQueryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.MetricsQueryClient\"></xref>\n using the <xref uid=\"com.azure.monitor.query.MetricsQueryClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.monitor.query.MetricsQueryClientBuilder\"></xref>.</p>\n\n <!-- src_embed com.azure.monitor.query.MetricsQueryClient.instantiation -->\n <pre>\n MetricsQueryClient metricsQueryClient = new MetricsQueryClientBuilder&#40;&#41;\n         .credential&#40;tokenCredential&#41;\n         .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.monitor.query.MetricsQueryClient.instantiation -->\n\n <br/>\n\n <hr/>\n\n <h2>Query Workspace</h2>\n\n <p>The <xref uid=\"com.azure.monitor.query.LogsQueryClient#queryWorkspace(java.lang.String, java.lang.String, com.azure.monitor.query.models.QueryTimeInterval)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Query Workspace API\"></xref> method can be used to\n query logs from a given workspace.</p>\n\n <p>The sample below shows how to query logs from the last 24 hours</p>\n\n <!-- src_embed com.azure.monitor.query.LogsQueryClient.query#String-String-QueryTimeInterval -->\n <pre>\n LogsQueryResult queryResult = logsQueryClient.queryWorkspace&#40;&quot;&#123;workspace-id&#125;&quot;, &quot;&#123;kusto-query&#125;&quot;,\n         QueryTimeInterval.LAST_DAY&#41;;\n for &#40;LogsTableRow row : queryResult.getTable&#40;&#41;.getRows&#40;&#41;&#41; &#123;\n     System.out.println&#40;row.getRow&#40;&#41;\n             .stream&#40;&#41;\n             .map&#40;LogsTableCell::getValueAsString&#41;\n             .collect&#40;Collectors.joining&#40;&quot;,&quot;&#41;&#41;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.monitor.query.LogsQueryClient.query#String-String-QueryTimeInterval -->\n\n\n <p><strong>Note:</strong> For asynchronous sample, refer to <xref uid=\"com.azure.monitor.query.LogsQueryAsyncClient#queryWorkspace(java.lang.String, java.lang.String, com.azure.monitor.query.models.QueryTimeInterval)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryWorkspace Async API\"></xref>.</p>\n\n <br/>\n\n <hr/>"
metadata: {}
package: "com.azure.monitor.query"
artifact: com.azure:azure-monitor-query:1.3.2
