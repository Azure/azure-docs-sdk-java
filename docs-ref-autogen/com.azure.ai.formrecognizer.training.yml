### YamlMime:JavaPackage
uid: "com.azure.ai.formrecognizer.training"
fullName: "com.azure.ai.formrecognizer.training"
name: "com.azure.ai.formrecognizer.training"
summary: "[Azure Form Recognizer][] is a cloud-based service provided by Microsoft Azure that utilizes machine learning to extract information from various types of forms.\n\n\n[Azure Form Recognizer]: https://aka.ms/form-recognizer-3.0.0"
classes:
- "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient"
- "com.azure.ai.formrecognizer.training.FormTrainingClient"
- "com.azure.ai.formrecognizer.training.FormTrainingClientBuilder"
desc: "[Azure Form Recognizer][] is a cloud-based service provided by Microsoft Azure that utilizes machine learning to extract information from various types of forms. It is designed to automate the process of form recognition, data extraction, and form understanding. Azure Form Recognizer can handle structured forms, such as invoices, receipts, and surveys, as well as unstructured form data, such as contracts, agreements, and financial reports.\n\nThe service uses advanced optical character recognition (OCR) technology to extract text and key-value pairs from custom forms, enabling organizations to automate data entry tasks that would otherwise require manual effort. It can recognize and extract information like dates, addresses, invoice numbers, line items, and other relevant data points from forms.\n\nThe Azure Form Recognizer client library allows Java developers to interact with the Azure Form Recognizer service. It provides a set of classes and methods that abstract the underlying RESTful API of Azure Form Recognizer, making it easier to integrate the service into Java applications.\n\nThe Azure Form Recognizer client library provides the following capabilities:\n\n1.  Form recognizing: It allows you to submit forms to extract information like text, key-value pairs, tables, and form fields. You can analyze both structured and unstructured documents.\n2.  Model Management: It enables you to train custom models by providing labeled training data. You can also list and delete existing models.\n3.  Recognize Results: It provides methods to retrieve and interpret analysis results, including extracted text and field values, confidence scores, and form layout information.\n4.  Polling and Callbacks: It includes mechanisms for polling the service to check the status of an analysis operation or registering callbacks to receive notifications when the analysis is complete.\n\n## Getting Started ##\n\nThe Azure Form Recognizer library provides analysis clients like <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref> and <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref> to connect to the Form Recognizer Azure Cognitive Service to analyze information from documents and extract it into structured data. It also provides training clients like <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.training.FormTrainingClient\"></xref> and <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient\"></xref> to build and manage models from custom documents.\n\n**Note:** This client only supports <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion.V2_1\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion#V2_1\"></xref> and lower. Recommended to use a newer service version, <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\"></xref> and <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\"></xref>.\n\n**Refer to the [Migration guide][] to use API versions 2022-08-31 and up.**\n\nService clients are the point of interaction for developers to use Azure Form Recognizer. <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref> is the synchronous service client and <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref> is the asynchronous service client. The examples shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using [managed identity][] for authentication in production environments. You can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation\"][Azure Identity documentation].\n\n**Sample: Construct a FormTrainingClient with DefaultAzureCredential**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.training.FormTrainingClient\"></xref>, using the \\`DefaultAzureCredentialBuilder\\` to configure it.\n\n```java\nFormTrainingClient client = new FormTrainingClientBuilder()\n     .endpoint(\"{endpoint}\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```\n\nFurther, see the code sample below to use <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref> for client creation.\n\n```java\nFormTrainingClient formTrainingClient = new FormTrainingClientBuilder()\n     .credential(new AzureKeyCredential(\"{key}\"))\n     .endpoint(\"{endpoint}\")\n     .buildClient();\n```\n\nLet's take a look at the analysis client scenarios and their respective usage below.\n\n\n--------------------\n\n## Train a model ##\n\nA trained model can output structured data that includes the relationships in the original form document. For instructions on setting up forms for training in an Azure Blob Storage Container, see \n\nYou can train custom models to recognize specific fields and values you specify by labeling your custom forms.\n\n**Sample: Train a model with your own data**\n\nThe following code sample demonstrates how to train a model with your own data.\n\n```java\nString trainingFilesUrl = \"{SAS_URL_of_your_container_in_blob_storage}\";\n SyncPoller<FormRecognizerOperationResult, CustomFormModel> trainingPoller =\n     formTrainingClient.beginTraining(trainingFilesUrl,\n         false,\n         new TrainingOptions()\n             .setModelName(\"my model trained without labels\"),\n         Context.NONE);\n\n CustomFormModel customFormModel = trainingPoller.getFinalResult();\n\n // Model Info\n System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n System.out.printf(\"Model name given by user: %s%n\", customFormModel.getModelName());\n System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n System.out.printf(\"Training started on: %s%n\", customFormModel.getTrainingStartedOn());\n System.out.printf(\"Training completed on: %s%n%n\", customFormModel.getTrainingCompletedOn());\n\n System.out.println(\"Recognized Fields:\");\n // looping through the subModels, which contains the fields they were trained on\n // Since the given training documents are unlabeled, we still group them but they do not have a label.\n customFormModel.getSubmodels().forEach(customFormSubmodel -> {\n     System.out.printf(\"Submodel Id: %s%n: \", customFormSubmodel.getModelId());\n     // Since the training data is unlabeled, we are unable to return the accuracy of this model\n     customFormSubmodel.getFields().forEach((field, customFormModelField) ->\n         System.out.printf(\"Field: %s Field Label: %s%n\",\n             field, customFormModelField.getLabel()));\n });\n```\n\nPlease note that models can also be trained using a graphical user interface such as the [Form Recognizer Labeling Tool][].\n\n\n--------------------\n\n## Manage custom models ##\n\nOperations that can be executed are:\n\n1.  Check the number of models in the FormRecognizer resource account, and the maximum number of models that can be stored.\n2.  List the models currently stored in the resource account.\n3.  Get a specific model using the model's Id.\n4.  Delete a model from the resource account.\n\n**Sample: Manage custom models stored in your account.**\n\nThis sample demonstrates how to manage the custom models stored in your account.\n\n```java\n// First, we see how many custom models we have, and what our limit is\n AccountProperties accountProperties = formTrainingClient.getAccountProperties();\n System.out.printf(\"The account has %d custom models, and we can have at most %d custom models\",\n     accountProperties.getCustomModelCount(), accountProperties.getCustomModelLimit());\n\n // Next, we get a paged list of all of our custom models\n PagedIterable<CustomFormModelInfo> customModels = formTrainingClient.listCustomModels();\n System.out.println(\"We have following models in the account:\");\n customModels.forEach(customFormModelInfo -> {\n     System.out.printf(\"Model Id: %s%n\", customFormModelInfo.getModelId());\n     // get specific custom model info\n     CustomFormModel customModel = formTrainingClient.getCustomModel(customFormModelInfo.getModelId());\n     System.out.printf(\"Model Status: %s%n\", customModel.getModelStatus());\n     System.out.printf(\"Training started on: %s%n\", customModel.getTrainingStartedOn());\n     System.out.printf(\"Training completed on: %s%n\", customModel.getTrainingCompletedOn());\n     customModel.getSubmodels().forEach(customFormSubmodel -> {\n         System.out.printf(\"Custom Model Form type: %s%n\", customFormSubmodel.getFormType());\n         System.out.printf(\"Custom Model Accuracy: %f%n\", customFormSubmodel.getAccuracy());\n         if (customFormSubmodel.getFields() != null) {\n             customFormSubmodel.getFields().forEach((fieldText, customFormModelField) -> {\n                 System.out.printf(\"Field Text: %s%n\", fieldText);\n                 System.out.printf(\"Field Accuracy: %f%n\", customFormModelField.getAccuracy());\n             });\n         }\n     });\n });\n\n // Delete Custom Model\n formTrainingClient.deleteModel(\"{modelId}\");\n```\n\nFor a suggested approach to extracting information from custom forms with known fields, see [strongly-typing a recognized form][].\n\n\n[Azure Form Recognizer]: https://aka.ms/form-recognizer-3.0.0\n[Migration guide]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/migration-guide.md\n[managed identity]: https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\n[Azure Identity documentation]: https://learn.microsoft.com/java/api/overview/azure/identity-readme\n[Form Recognizer Labeling Tool]: https://docs.microsoft.com/azure/cognitive-services/form-recognizer/label-tool?tabs=v2-1\n[strongly-typing a recognized form]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/v3/StronglyTypedRecognizedForm.java"
metadata: {}
package: "com.azure.ai.formrecognizer.training"
artifact: com.azure:azure-ai-formrecognizer:4.1.11
