### YamlMime:JavaMember
nameWithType: HealthInformation.setRemoveWhenExpired
type: method
members:
- fullName: system.fabric.health.HealthInformation.setRemoveWhenExpired(boolean removeWhenExpired)
  name: setRemoveWhenExpired(boolean removeWhenExpired)
  nameWithType: HealthInformation.setRemoveWhenExpired(boolean removeWhenExpired)
  parameters:
  - description: <p>true if the report should be removed from health store when expired; otherwise, false. </p>
    name: removeWhenExpired
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a value that indicates whetherÂ the report is removed from health store when it expires. If set to false, the report is treated as an error when expired. false by default.</p>

    <p>

      <b>Remarks:</b>When clients report periodically, they should set RemoveWhenExpired false (default). This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the health report expires, and this will flag the entity as <xref uid="" data-throw-if-not-resolved="false">system.fabric.health.HealthState#Error</xref>. Periodic health clients should send reports with higher frequency than time to live to account for delays due to health client batching, message transport over the wire and health store processing. </p>
  syntax: public void setRemoveWhenExpired(boolean removeWhenExpired)
  uid: system.fabric.health.HealthInformation.setRemoveWhenExpired(boolean)
uid: system.fabric.health.HealthInformation.setRemoveWhenExpired*
fullName: system.fabric.health.HealthInformation.setRemoveWhenExpired(boolean removeWhenExpired)
name: setRemoveWhenExpired(boolean removeWhenExpired)
package: system.fabric.health
metadata: {}
