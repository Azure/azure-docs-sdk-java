### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange"
fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange"
name: "TaskIdRange"
nameWithType: "TaskIdRange"
summary: "A range of Task IDs that a Task can depend on."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class TaskIdRange"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange.TaskIdRange()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange.TaskIdRange()"
  name: "TaskIdRange()"
  nameWithType: "TaskIdRange.TaskIdRange()"
  syntax: "public TaskIdRange()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange.end()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange.end()"
  name: "end()"
  nameWithType: "TaskIdRange.end()"
  summary: "Get the end value."
  syntax: "public int end()"
  desc: "Get the end value."
  returns:
    description: "the end value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange.start()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange.start()"
  name: "start()"
  nameWithType: "TaskIdRange.start()"
  summary: "Get the start value."
  syntax: "public int start()"
  desc: "Get the start value."
  returns:
    description: "the start value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange.withEnd(int)"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange.withEnd(int end)"
  name: "withEnd(int end)"
  nameWithType: "TaskIdRange.withEnd(int end)"
  summary: "Set the end value."
  parameters:
  - description: "the end value to set"
    name: "end"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TaskIdRange withEnd(int end)"
  desc: "Set the end value."
  returns:
    description: "the TaskIdRange object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskIdRange?alt=com.microsoft.azure.batch.protocol.models.TaskIdRange&text=TaskIdRange\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskIdRange.withStart(int)"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskIdRange.withStart(int start)"
  name: "withStart(int start)"
  nameWithType: "TaskIdRange.withStart(int start)"
  summary: "Set the start value."
  parameters:
  - description: "the start value to set"
    name: "start"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TaskIdRange withStart(int start)"
  desc: "Set the start value."
  returns:
    description: "the TaskIdRange object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskIdRange?alt=com.microsoft.azure.batch.protocol.models.TaskIdRange&text=TaskIdRange\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A range of Task IDs that a Task can depend on. All Tasks with IDs in the range must complete successfully before the dependent Task can be scheduled. The start and end of the range are inclusive. For example, if a range has start 9 and end 12, then it represents Tasks '9', '10', '11' and '12'."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
