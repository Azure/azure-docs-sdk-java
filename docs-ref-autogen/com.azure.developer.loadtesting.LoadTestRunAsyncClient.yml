### YamlMime:JavaType
uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient"
fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient"
name: "LoadTestRunAsyncClient"
nameWithType: "LoadTestRunAsyncClient"
summary: "Initializes a new instance of the asynchronous Load<wbr>Testing<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **LoadTestRunAsyncClient**"
methods:
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.beginTestRun(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.beginTestRun(String testRunId, BinaryData body, RequestOptions testRunRequestOptions)"
  name: "beginTestRun(String testRunId, BinaryData body, RequestOptions testRunRequestOptions)"
  nameWithType: "LoadTestRunAsyncClient.beginTestRun(String testRunId, BinaryData body, RequestOptions testRunRequestOptions)"
  summary: "Starts a test run and polls the status of the test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Load test run model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the file upload HTTP request before HTTP client sends it."
    name: "testRunRequestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginTestRun(String testRunId, BinaryData body, RequestOptions testRunRequestOptions)"
  desc: "Starts a test run and polls the status of the test run."
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> to poll on and retrieve the test run\n     status(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE)."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.createOrUpdateAppComponentsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.createOrUpdateAppComponentsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateAppComponentsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.createOrUpdateAppComponentsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  summary: "Associate an app component (collection of azure resources) to a test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "App Component model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  desc: "Associate an app component (collection of azure resources) to a test run.\n\n**Request Body Schema**\n\n```java\n{\n     components (Required): {\n         String (Required): {\n             resourceId: String (Optional)\n             resourceName: String (Optional)\n             resourceType: String (Optional)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testRunId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     components (Required): {\n         String (Required): {\n             resourceId: String (Optional)\n             resourceName: String (Optional)\n             resourceType: String (Optional)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testRunId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test run app component along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.createOrUpdateServerMetricsConfigWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateServerMetricsConfigWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  summary: "Configure server metrics for a test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Server metric configuration model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponse(String testRunId, BinaryData body, RequestOptions requestOptions)"
  desc: "Configure server metrics for a test run.\n\n**Request Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricNamespace: String (Required)\n             displayDescription: String (Optional)\n             name: String (Required)\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricNamespace: String (Required)\n             displayDescription: String (Optional)\n             name: String (Required)\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test run server metrics configuration along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.deleteTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Delete a test run by its name."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Delete a test run by its name."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getAppComponentsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getAppComponentsWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getAppComponentsWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getAppComponentsWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Get associated app component (collection of azure resources) for the given test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAppComponentsWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Get associated app component (collection of azure resources) for the given test run.\n\n**Response Body Schema**\n\n```java\n{\n     components (Required): {\n         String (Required): {\n             resourceId: String (Optional)\n             resourceName: String (Optional)\n             resourceType: String (Optional)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n     testRunId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "associated app component (collection of azure resources) for the given test run along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getMetricDefinitionsWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getMetricDefinitionsWithResponse(String testRunId, String metricNamespace, RequestOptions requestOptions)"
  name: "getMetricDefinitionsWithResponse(String testRunId, String metricNamespace, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getMetricDefinitionsWithResponse(String testRunId, String metricNamespace, RequestOptions requestOptions)"
  summary: "List the metric definitions for a load test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Metric namespace to query metric definitions for."
    name: "metricNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMetricDefinitionsWithResponse(String testRunId, String metricNamespace, RequestOptions requestOptions)"
  desc: "List the metric definitions for a load test run.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             dimensions (Optional): [\n                  (Optional){\n                     description: String (Optional)\n                     name: String (Optional)\n                 }\n             ]\n             description: String (Optional)\n             name: String (Optional)\n             namespace: String (Optional)\n             primaryAggregationType: String(Average/Count/None/Total/Percentile90/Percentile95/Percentile99) (Optional)\n             supportedAggregationTypes (Optional): [\n                 String (Optional)\n             ]\n             unit: String(NotSpecified/Percent/Count/Seconds/Milliseconds/Bytes/BytesPerSecond/CountPerSecond) (Optional)\n             metricAvailabilities (Optional): [\n                  (Optional){\n                     timeGrain: String(PT5S/PT10S/PT1M/PT5M/PT1H) (Optional)\n                 }\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "represents collection of metric definitions along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n     <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getMetricNamespacesWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getMetricNamespacesWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getMetricNamespacesWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getMetricNamespacesWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "List the metric namespaces for a load test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMetricNamespacesWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "List the metric namespaces for a load test run.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             description: String (Optional)\n             name: String (Optional)\n         }\n     ]\n }\n```"
  returns:
    description: "represents collection of metric namespaces along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getServerMetricsConfigWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getServerMetricsConfigWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getServerMetricsConfigWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getServerMetricsConfigWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "List server metrics configuration for the given test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getServerMetricsConfigWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "List server metrics configuration for the given test run.\n\n**Response Body Schema**\n\n```java\n{\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricNamespace: String (Required)\n             displayDescription: String (Optional)\n             name: String (Required)\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test run server metrics configuration along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getTestRunFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getTestRunFileWithResponse(String testRunId, String fileName, RequestOptions requestOptions)"
  name: "getTestRunFileWithResponse(String testRunId, String fileName, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getTestRunFileWithResponse(String testRunId, String fileName, RequestOptions requestOptions)"
  summary: "Get test run file by file name."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Test run file name with file extension."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestRunFileWithResponse(String testRunId, String fileName, RequestOptions requestOptions)"
  desc: "Get test run file by file name.\n\n**Response Body Schema**\n\n```java\n{\n     url: String (Optional)\n     fileName: String (Optional)\n     fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS) (Optional)\n     expireDateTime: OffsetDateTime (Optional)\n     validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n     validationFailureDetails: String (Optional)\n }\n```"
  returns:
    description: "test run file by file name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Get test run details by name."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Get test run details by name.\n\n**Response Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p90/p95/p99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     errorDetails (Optional): [\n          (Optional){\n             message: String (Optional)\n         }\n     ]\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Integer (Optional)\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Optional): {\n             configFileInfo (Optional): {\n                 url: String (Optional)\n                 fileName: String (Optional)\n                 fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS) (Optional)\n                 expireDateTime: OffsetDateTime (Optional)\n                 validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n                 validationFailureDetails: String (Optional)\n             }\n             testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n             userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n             inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n             additionalFileInfo (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultFileInfo (Optional): (recursive schema, see resultFileInfo above)\n             logsFileInfo (Optional): (recursive schema, see logsFileInfo above)\n         }\n     }\n     testResult: String(PASSED/NOT_APPLICABLE/FAILED) (Optional)\n     virtualUsers: Integer (Optional)\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     description: String (Optional)\n     status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     executedDateTime: OffsetDateTime (Optional)\n     portalUrl: String (Optional)\n     duration: Long (Optional)\n     subnetId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "test run details by name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listMetricDimensionValues(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listMetricDimensionValues(String testRunId, String name, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  name: "listMetricDimensionValues(String testRunId, String name, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.listMetricDimensionValues(String testRunId, String name, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  summary: "List the dimension values for the given metric dimension name."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Dimension name."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Metric name."
    name: "metricName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Metric namespace to query metric definitions for."
    name: "metricNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The timespan of the query. It is a string with the following format\n     'startDateTime_ISO/endDateTime_ISO'."
    name: "timespan"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listMetricDimensionValues(String testRunId, String name, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  desc: "List the dimension values for the given metric dimension name.\n\n**Query Parameters**\n\n    | -------- | ------ | -------- | ---------------------------------------------------------------------------------------------------- |\n    | Name     | Type   | Required | Description                                                                                          |\n    | interval | String | No       | The interval (i.e. timegrain) of the query. Allowed values: \"PT5S\", \"PT10S\", \"PT1M\", \"PT5M\", \"PT1H\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n         String (Optional)\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "metrics dimension values as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listMetrics(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listMetrics(String testRunId, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  name: "listMetrics(String testRunId, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.listMetrics(String testRunId, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  summary: "List the metric values for a load test run."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Metric name."
    name: "metricName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Metric namespace to query metric definitions for."
    name: "metricNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The timespan of the query. It is a string with the following format\n     'startDateTime_ISO/endDateTime_ISO'."
    name: "timespan"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listMetrics(String testRunId, String metricName, String metricNamespace, String timespan, RequestOptions requestOptions)"
  desc: "List the metric values for a load test run.\n\n**Query Parameters**\n\n    | ----------- | ------ | -------- | ---------------------------------------------------------------------------------------------------- |\n    | Name        | Type   | Required | Description                                                                                          |\n    | aggregation | String | No       | The aggregation                                                                                      |\n    | interval    | String | No       | The interval (i.e. timegrain) of the query. Allowed values: \"PT5S\", \"PT10S\", \"PT1M\", \"PT5M\", \"PT1H\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     filters (Optional): [\n          (Optional){\n             name: String (Optional)\n             values (Optional): [\n                 String (Optional)\n             ]\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n          (Optional){\n             data (Optional): [\n                  (Optional){\n                     timestamp: String (Optional)\n                     value: Double (Optional)\n                 }\n             ]\n             dimensionValues (Optional): [\n                  (Optional){\n                     name: String (Optional)\n                     value: String (Optional)\n                 }\n             ]\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "the response to a metrics query as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listTestRuns(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.listTestRuns(RequestOptions requestOptions)"
  name: "listTestRuns(RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.listTestRuns(RequestOptions requestOptions)"
  summary: "Get all test runs with given filters."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTestRuns(RequestOptions requestOptions)"
  desc: "Get all test runs with given filters.\n\n**Query Parameters**\n\n    | ------------- | -------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name          | Type           | Required | Description                                                                                                                                                                             |\n    | orderby       | String         | No       | Sort on the supported fields in (field asc/desc) format. eg: executedDateTime asc. Supported fields - executedDateTime                                                                  |\n    | search        | String         | No       | Prefix based, case sensitive search on searchable fields - description, executedUser. For example, to search for a test run, with description 500 VUs, the search parameter can be 500. |\n    | testId        | String         | No       | Unique name of an existing load test.                                                                                                                                                   |\n    | executionFrom | OffsetDateTime | No       | Start DateTime(ISO 8601 literal format) of test-run execution time filter range.                                                                                                        |\n    | executionTo   | OffsetDateTime | No       | End DateTime(ISO 8601 literal format) of test-run execution time filter range.                                                                                                          |\n    | status        | String         | No       | Comma separated list of test run status.                                                                                                                                                |\n    | maxpagesize   | Integer        | No       | Number of results in response.                                                                                                                                                          |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             passFailCriteria (Optional): {\n                 passFailMetrics (Optional): {\n                     String (Optional): {\n                         clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                         aggregate: String(count/percentage/avg/p50/p90/p95/p99/min/max) (Optional)\n                         condition: String (Optional)\n                         requestName: String (Optional)\n                         value: Double (Optional)\n                         action: String(continue/stop) (Optional)\n                         actualValue: Double (Optional)\n                         result: String(passed/undetermined/failed) (Optional)\n                     }\n                 }\n             }\n             secrets (Optional): {\n                 String (Optional): {\n                     value: String (Optional)\n                     type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n                 }\n             }\n             certificate (Optional): {\n                 value: String (Optional)\n                 type: String(AKV_CERT_URI) (Optional)\n                 name: String (Optional)\n             }\n             environmentVariables (Optional): {\n                 String: String (Optional)\n             }\n             errorDetails (Optional): [\n                  (Optional){\n                     message: String (Optional)\n                 }\n             ]\n             testRunStatistics (Optional): {\n                 String (Optional): {\n                     transaction: String (Optional)\n                     sampleCount: Double (Optional)\n                     errorCount: Double (Optional)\n                     errorPct: Double (Optional)\n                     meanResTime: Double (Optional)\n                     medianResTime: Double (Optional)\n                     maxResTime: Double (Optional)\n                     minResTime: Double (Optional)\n                     pct1ResTime: Double (Optional)\n                     pct2ResTime: Double (Optional)\n                     pct3ResTime: Double (Optional)\n                     throughput: Double (Optional)\n                     receivedKBytesPerSec: Double (Optional)\n                     sentKBytesPerSec: Double (Optional)\n                 }\n             }\n             loadTestConfiguration (Optional): {\n                 engineInstances: Integer (Optional)\n                 splitAllCSVs: Boolean (Optional)\n                 quickStartTest: Boolean (Optional)\n                 optionalLoadTestConfig (Optional): {\n                     endpointUrl: String (Optional)\n                     virtualUsers: Integer (Optional)\n                     rampUpTime: Integer (Optional)\n                     duration: Integer (Optional)\n                 }\n             }\n             testArtifacts (Optional): {\n                 inputArtifacts (Optional): {\n                     configFileInfo (Optional): {\n                         url: String (Optional)\n                         fileName: String (Optional)\n                         fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS) (Optional)\n                         expireDateTime: OffsetDateTime (Optional)\n                         validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n                         validationFailureDetails: String (Optional)\n                     }\n                     testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n                     userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n                     inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n                     additionalFileInfo (Optional): [\n                         (recursive schema, see above)\n                     ]\n                 }\n                 outputArtifacts (Optional): {\n                     resultFileInfo (Optional): (recursive schema, see resultFileInfo above)\n                     logsFileInfo (Optional): (recursive schema, see logsFileInfo above)\n                 }\n             }\n             testResult: String(PASSED/NOT_APPLICABLE/FAILED) (Optional)\n             virtualUsers: Integer (Optional)\n             testRunId: String (Optional)\n             displayName: String (Optional)\n             testId: String (Optional)\n             description: String (Optional)\n             status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Optional)\n             startDateTime: OffsetDateTime (Optional)\n             endDateTime: OffsetDateTime (Optional)\n             executedDateTime: OffsetDateTime (Optional)\n             portalUrl: String (Optional)\n             duration: Long (Optional)\n             subnetId: String (Optional)\n             createdDateTime: OffsetDateTime (Optional)\n             createdBy: String (Optional)\n             lastModifiedDateTime: OffsetDateTime (Optional)\n             lastModifiedBy: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "all test runs with given filters as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.stopTestRunWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestRunAsyncClient.stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  name: "stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  nameWithType: "LoadTestRunAsyncClient.stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  summary: "Stop test run by name."
  parameters:
  - description: "Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore\n     or hyphen characters."
    name: "testRunId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> stopTestRunWithResponse(String testRunId, RequestOptions requestOptions)"
  desc: "Stop test run by name.\n\n**Response Body Schema**\n\n```java\n{\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientMetric: String(response_time_ms/latency/error/requests/requests_per_sec) (Optional)\n                 aggregate: String(count/percentage/avg/p50/p90/p95/p99/min/max) (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String(continue/stop) (Optional)\n                 actualValue: Double (Optional)\n                 result: String(passed/undetermined/failed) (Optional)\n             }\n         }\n     }\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String(AKV_SECRET_URI/SECRET_VALUE) (Optional)\n         }\n     }\n     certificate (Optional): {\n         value: String (Optional)\n         type: String(AKV_CERT_URI) (Optional)\n         name: String (Optional)\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     errorDetails (Optional): [\n          (Optional){\n             message: String (Optional)\n         }\n     ]\n     testRunStatistics (Optional): {\n         String (Optional): {\n             transaction: String (Optional)\n             sampleCount: Double (Optional)\n             errorCount: Double (Optional)\n             errorPct: Double (Optional)\n             meanResTime: Double (Optional)\n             medianResTime: Double (Optional)\n             maxResTime: Double (Optional)\n             minResTime: Double (Optional)\n             pct1ResTime: Double (Optional)\n             pct2ResTime: Double (Optional)\n             pct3ResTime: Double (Optional)\n             throughput: Double (Optional)\n             receivedKBytesPerSec: Double (Optional)\n             sentKBytesPerSec: Double (Optional)\n         }\n     }\n     loadTestConfiguration (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n         quickStartTest: Boolean (Optional)\n         optionalLoadTestConfig (Optional): {\n             endpointUrl: String (Optional)\n             virtualUsers: Integer (Optional)\n             rampUpTime: Integer (Optional)\n             duration: Integer (Optional)\n         }\n     }\n     testArtifacts (Optional): {\n         inputArtifacts (Optional): {\n             configFileInfo (Optional): {\n                 url: String (Optional)\n                 fileName: String (Optional)\n                 fileType: String(JMX_FILE/USER_PROPERTIES/ADDITIONAL_ARTIFACTS) (Optional)\n                 expireDateTime: OffsetDateTime (Optional)\n                 validationStatus: String(NOT_VALIDATED/VALIDATION_SUCCESS/VALIDATION_FAILURE/VALIDATION_INITIATED/VALIDATION_NOT_REQUIRED) (Optional)\n                 validationFailureDetails: String (Optional)\n             }\n             testScriptFileInfo (Optional): (recursive schema, see testScriptFileInfo above)\n             userPropFileInfo (Optional): (recursive schema, see userPropFileInfo above)\n             inputArtifactsZipFileInfo (Optional): (recursive schema, see inputArtifactsZipFileInfo above)\n             additionalFileInfo (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n         outputArtifacts (Optional): {\n             resultFileInfo (Optional): (recursive schema, see resultFileInfo above)\n             logsFileInfo (Optional): (recursive schema, see logsFileInfo above)\n         }\n     }\n     testResult: String(PASSED/NOT_APPLICABLE/FAILED) (Optional)\n     virtualUsers: Integer (Optional)\n     testRunId: String (Optional)\n     displayName: String (Optional)\n     testId: String (Optional)\n     description: String (Optional)\n     status: String(ACCEPTED/NOTSTARTED/PROVISIONING/PROVISIONED/CONFIGURING/CONFIGURED/EXECUTING/EXECUTED/DEPROVISIONING/DEPROVISIONED/DONE/CANCELLING/CANCELLED/FAILED/VALIDATION_SUCCESS/VALIDATION_FAILURE) (Optional)\n     startDateTime: OffsetDateTime (Optional)\n     endDateTime: OffsetDateTime (Optional)\n     executedDateTime: OffsetDateTime (Optional)\n     portalUrl: String (Optional)\n     duration: Long (Optional)\n     subnetId: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n }\n```"
  returns:
    description: "load test run model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous LoadTestingClient type."
metadata: {}
package: "com.azure.developer.loadtesting"
artifact: com.azure:azure-developer-loadtesting:1.0.1
