### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.ProxyGeneratorBuilder(CodeBuilder codeBuilder, Class<?> proxyBaseType)
  name: ProxyGeneratorBuilder(CodeBuilder codeBuilder, Class<?> proxyBaseType)
  nameWithType: ProxyGeneratorBuilder.ProxyGeneratorBuilder(CodeBuilder codeBuilder, Class<?> proxyBaseType)
  parameters:
  - name: codeBuilder
    type: <xref href="microsoft.servicefabric.services.remoting.builder.CodeBuilder?alt=microsoft.servicefabric.services.remoting.builder.CodeBuilder&text=CodeBuilder" data-throw-if-not-resolved="False"/>
  - name: proxyBaseType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public ProxyGeneratorBuilder(CodeBuilder codeBuilder, Class<?> proxyBaseType)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.ProxyGeneratorBuilder(CodeBuilder,Class<?>)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.CodeBuilderModule" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.builder.CodeBuilderModule.CodeBuilderModule(CodeBuilder)
- microsoft.servicefabric.services.remoting.builder.CodeBuilderModule.getCodeBuilder()
methods:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.addAdditionalImplementations(ClassWriter cw, Class<?> interfaceType)
  name: addAdditionalImplementations(ClassWriter cw, Class<?> interfaceType)
  nameWithType: ProxyGeneratorBuilder.addAdditionalImplementations(ClassWriter cw, Class<?> interfaceType)
  parameters:
  - name: cw
    type: <xref href="ClassWriter?alt=ClassWriter&text=ClassWriter" data-throw-if-not-resolved="False"/>
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: protected abstract void addAdditionalImplementations(ClassWriter cw, Class<?> interfaceType)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.addAdditionalImplementations(ClassWriter,Class<?>)
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  name: build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  nameWithType: ProxyGeneratorBuilder.build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - name: interfaceDescriptions
    type: <xref href="InterfaceDescription+%5B%5D?alt=InterfaceDescription+%5B%5D&text=InterfaceDescription+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult?alt=microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuildResult&text=ProxyGeneratorBuildResult" data-throw-if-not-resolved="False"/>
  syntax: public ProxyGeneratorBuildResult build(Class<?> interfaceType, InterfaceDescription[] interfaceDescriptions)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.build(Class<?>,InterfaceDescription [])
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  name: createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  nameWithType: ProxyGeneratorBuilder.createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  parameters:
  - name: interfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - name: proxyActivatorType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: abstract <xref href="microsoft.servicefabric.services.remoting.builder.ProxyGenerator?alt=microsoft.servicefabric.services.remoting.builder.ProxyGenerator&text=ProxyGenerator" data-throw-if-not-resolved="False"/>
  syntax: protected abstract ProxyGenerator createProxyGenerator(Class<?> interfaceType, Class<?> proxyActivatorType)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder.createProxyGenerator(Class<?>,Class<?>)
nameWithType: ProxyGeneratorBuilder
syntax: public class ProxyGeneratorBuilder
type: class
uid: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder
fullName: microsoft.servicefabric.services.remoting.builder.ProxyGeneratorBuilder
name: ProxyGeneratorBuilder
package: microsoft.servicefabric.services.remoting.builder
summary: <p>Abstract Proxy Generator builder class from which Actor and Services Proxy Generator classes extend. For internal use only. </p>
metadata: {}
