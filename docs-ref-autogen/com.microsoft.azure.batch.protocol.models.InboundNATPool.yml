### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool
  id: InboundNATPool
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.name()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol()
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort(int)
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd(int)
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart(int)
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withName(java.lang.String)
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules(java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>)
  - com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol(com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol)
  langs:
  - java
  name: InboundNATPool
  nameWithType: InboundNATPool
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: A inbound NAT Pool that can be used to address specific ports on Compute Nodes in a Batch Pool externally.
  syntax:
    content: public class InboundNATPool
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool()
  id: InboundNATPool()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: InboundNATPool()
  nameWithType: InboundNATPool.InboundNATPool()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public InboundNATPool()
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort()
  id: backendPort()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: backendPort()
  nameWithType: InboundNATPool.backendPort()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get this must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
  syntax:
    content: public int backendPort()
    return:
      type: int
      description: the backendPort value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd()
  id: frontendPortRangeEnd()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: frontendPortRangeEnd()
  nameWithType: InboundNATPool.frontendPortRangeEnd()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
  syntax:
    content: public int frontendPortRangeEnd()
    return:
      type: int
      description: the frontendPortRangeEnd value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart()
  id: frontendPortRangeStart()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: frontendPortRangeStart()
  nameWithType: InboundNATPool.frontendPortRangeStart()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
  syntax:
    content: public int frontendPortRangeStart()
    return:
      type: int
      description: the frontendPortRangeStart value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.name()
  id: name()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: name()
  nameWithType: InboundNATPool.name()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.name()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.name*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
  syntax:
    content: public String name()
    return:
      type: java.lang.String
      description: the name value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules()
  id: networkSecurityGroupRules()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: networkSecurityGroupRules()
  nameWithType: InboundNATPool.networkSecurityGroupRules()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
  syntax:
    content: public List<NetworkSecurityGroupRule> networkSecurityGroupRules()
    return:
      type: java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>
      description: the networkSecurityGroupRules value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol()
  id: protocol()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: protocol()
  nameWithType: InboundNATPool.protocol()
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol()
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Get possible values include: 'tcp', 'udp'."
  syntax:
    content: public InboundEndpointProtocol protocol()
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol
      description: the protocol value
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort(int)
  id: withBackendPort(int)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withBackendPort(int backendPort)
  nameWithType: InboundNATPool.withBackendPort(int backendPort)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort(int backendPort)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set this must be unique within a Batch Pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
  syntax:
    content: public InboundNATPool withBackendPort(int backendPort)
    parameters:
    - id: backendPort
      type: int
      description: the backendPort value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd(int)
  id: withFrontendPortRangeEnd(int)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withFrontendPortRangeEnd(int frontendPortRangeEnd)
  nameWithType: InboundNATPool.withFrontendPortRangeEnd(int frontendPortRangeEnd)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd(int frontendPortRangeEnd)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
  syntax:
    content: public InboundNATPool withFrontendPortRangeEnd(int frontendPortRangeEnd)
    parameters:
    - id: frontendPortRangeEnd
      type: int
      description: the frontendPortRangeEnd value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart(int)
  id: withFrontendPortRangeStart(int)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withFrontendPortRangeStart(int frontendPortRangeStart)
  nameWithType: InboundNATPool.withFrontendPortRangeStart(int frontendPortRangeStart)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart(int frontendPortRangeStart)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a Pool must be distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
  syntax:
    content: public InboundNATPool withFrontendPortRangeStart(int frontendPortRangeStart)
    parameters:
    - id: frontendPortRangeStart
      type: int
      description: the frontendPortRangeStart value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withName(java.lang.String)
  id: withName(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withName(String name)
  nameWithType: InboundNATPool.withName(String name)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withName(String name)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withName*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the name must be unique within a Batch Pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. If any invalid values are provided the request fails with HTTP status code 400.
  syntax:
    content: public InboundNATPool withName(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: the name value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules(java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>)
  id: withNetworkSecurityGroupRules(java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  nameWithType: InboundNATPool.withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the maximum number of rules that can be specified across all the endpoints on a Batch Pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
  syntax:
    content: public InboundNATPool withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
    parameters:
    - id: networkSecurityGroupRules
      type: java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>
      description: the networkSecurityGroupRules value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol(com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol)
  id: withProtocol(com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.InboundNATPool
  langs:
  - java
  name: withProtocol(InboundEndpointProtocol protocol)
  nameWithType: InboundNATPool.withProtocol(InboundEndpointProtocol protocol)
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol(InboundEndpointProtocol protocol)
  overload: com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Set possible values include: 'tcp', 'udp'."
  syntax:
    content: public InboundNATPool withProtocol(InboundEndpointProtocol protocol)
    parameters:
    - id: protocol
      type: com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol
      description: the protocol value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.InboundNATPool
      description: the InboundNATPool object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool*
  name: InboundNATPool
  nameWithType: InboundNATPool.InboundNATPool
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.InboundNATPool
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.name*
  name: name
  nameWithType: InboundNATPool.name
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.name
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withName*
  name: withName
  nameWithType: InboundNATPool.withName
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withName
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol
  name: InboundEndpointProtocol
  nameWithType: InboundEndpointProtocol
  fullName: com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol*
  name: protocol
  nameWithType: InboundNATPool.protocol
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.protocol
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol*
  name: withProtocol
  nameWithType: InboundNATPool.withProtocol
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withProtocol
  package: com.microsoft.azure.batch.protocol.models
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort*
  name: backendPort
  nameWithType: InboundNATPool.backendPort
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.backendPort
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort*
  name: withBackendPort
  nameWithType: InboundNATPool.withBackendPort
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withBackendPort
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart*
  name: frontendPortRangeStart
  nameWithType: InboundNATPool.frontendPortRangeStart
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeStart
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart*
  name: withFrontendPortRangeStart
  nameWithType: InboundNATPool.withFrontendPortRangeStart
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeStart
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd*
  name: frontendPortRangeEnd
  nameWithType: InboundNATPool.frontendPortRangeEnd
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.frontendPortRangeEnd
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd*
  name: withFrontendPortRangeEnd
  nameWithType: InboundNATPool.withFrontendPortRangeEnd
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withFrontendPortRangeEnd
  package: com.microsoft.azure.batch.protocol.models
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule
    name: NetworkSecurityGroupRule
    fullName: com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules*
  name: networkSecurityGroupRules
  nameWithType: InboundNATPool.networkSecurityGroupRules
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.networkSecurityGroupRules
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules*
  name: withNetworkSecurityGroupRules
  nameWithType: InboundNATPool.withNetworkSecurityGroupRules
  fullName: com.microsoft.azure.batch.protocol.models.InboundNATPool.withNetworkSecurityGroupRules
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule
  name: NetworkSecurityGroupRule
  nameWithType: NetworkSecurityGroupRule
  fullName: com.microsoft.azure.batch.protocol.models.NetworkSecurityGroupRule
