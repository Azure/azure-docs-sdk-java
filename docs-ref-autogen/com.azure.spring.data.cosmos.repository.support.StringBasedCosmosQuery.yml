### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery"
fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery"
name: "StringBasedCosmosQuery"
nameWithType: "StringBasedCosmosQuery"
summary: "Cosmos query class to handle the annotated queries."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery&text=AbstractCosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery&text=createQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute(java.lang.Object[])?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute&text=execute\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.repository.query.ReturnedType)?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getExecution&text=getExecution\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.getQueryMethod&text=getQueryMethod\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCollectionQuery&text=isCollectionQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCountQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCountQuery&text=isCountQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery&text=isDeleteQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery&text=isExistsQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isPageQuery&text=isPageQuery\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isSliceQuery()?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isSliceQuery&text=isSliceQuery\" data-throw-if-not-resolved=\"False\" />"
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **StringBasedCosmosQuery**</br> extends <xref href=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery?alt=com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery&text=AbstractCosmosQuery\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.StringBasedCosmosQuery(com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod,com.azure.spring.data.cosmos.core.CosmosOperations)"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations)"
  name: "StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations)"
  nameWithType: "StringBasedCosmosQuery.StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations)"
  summary: "Constructor"
  parameters:
  - description: "the CosmosQueryMethod"
    name: "queryMethod"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod?alt=com.azure.spring.data.cosmos.repository.query.CosmosQueryMethod&text=CosmosQueryMethod\" data-throw-if-not-resolved=\"False\" />"
  - description: "the CosmosOperations"
    name: "dbOperations"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.CosmosOperations?alt=com.azure.spring.data.cosmos.core.CosmosOperations&text=CosmosOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StringBasedCosmosQuery(CosmosQueryMethod queryMethod, CosmosOperations dbOperations)"
  desc: "Constructor"
methods:
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.createQuery(CosmosParameterAccessor accessor)"
  name: "createQuery(CosmosParameterAccessor accessor)"
  nameWithType: "StringBasedCosmosQuery.createQuery(CosmosParameterAccessor accessor)"
  summary: "Creates a query."
  modifiers:
  - "protected"
  overridden: "com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.createQuery(com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor)"
  parameters:
  - name: "accessor"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor?alt=com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor&text=CosmosParameterAccessor\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected CosmosQuery createQuery(CosmosParameterAccessor accessor)"
  desc: "Creates a query."
  returns:
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.execute(java.lang.Object[])"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.execute(Object[] parameters)"
  name: "execute(Object[] parameters)"
  nameWithType: "StringBasedCosmosQuery.execute(Object[] parameters)"
  summary: "Executes the <xref uid=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AbstractCosmosQuery\"></xref> with the given parameters."
  overridden: "com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.execute(java.lang.Object[])"
  parameters:
  - name: "parameters"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>[]"
  syntax: "public Object execute(Object[] parameters)"
  desc: "Executes the <xref uid=\"com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AbstractCosmosQuery\"></xref> with the given parameters."
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isCountQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isCountQuery()"
  name: "isCountQuery()"
  nameWithType: "StringBasedCosmosQuery.isCountQuery()"
  modifiers:
  - "protected"
  overridden: "com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isCountQuery()"
  syntax: "protected boolean isCountQuery()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isDeleteQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isDeleteQuery()"
  name: "isDeleteQuery()"
  nameWithType: "StringBasedCosmosQuery.isDeleteQuery()"
  modifiers:
  - "protected"
  overridden: "com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isDeleteQuery()"
  syntax: "protected boolean isDeleteQuery()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isExistsQuery()"
  fullName: "com.azure.spring.data.cosmos.repository.support.StringBasedCosmosQuery.isExistsQuery()"
  name: "isExistsQuery()"
  nameWithType: "StringBasedCosmosQuery.isExistsQuery()"
  modifiers:
  - "protected"
  overridden: "com.azure.spring.data.cosmos.repository.query.AbstractCosmosQuery.isExistsQuery()"
  syntax: "protected boolean isExistsQuery()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Cosmos query class to handle the annotated queries. This overrides the execution and runs the query directly"
metadata: {}
package: "com.azure.spring.data.cosmos.repository.support"
artifact: com.azure:azure-spring-data-cosmos:3.47.0
