### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy*"
fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy"
name: "getAttestationPolicy"
nameWithType: "AttestationAdministrationAsyncClient.getAttestationPolicy"
members:
- uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(com.azure.security.attestation.models.AttestationType)"
  fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(AttestationType attestationType)"
  name: "getAttestationPolicy(AttestationType attestationType)"
  nameWithType: "AttestationAdministrationAsyncClient.getAttestationPolicy(AttestationType attestationType)"
  summary: "Retrieves the current policy for an attestation type.\n\n**NOTE:** The `getAttestationPolicy` API returns the underlying attestation policy specified by the user. This is NOT the full attestation policy maintained by the attestation service. Specifically it does not include the signing certificates used to verify the attestation policy.\n\nTo retrieve the signing certificates used to sign the policy, use the <xref uid=\"com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationTokenValidationOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationAdministrationAsyncClient#getAttestationPolicyWithResponse(AttestationType, AttestationTokenValidationOptions)\"></xref> API. The <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> object is an instance of an <xref uid=\"com.azure.security.attestation.models.AttestationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.models.AttestationResponse\"></xref> object and the caller can retrieve the full information maintained by the service by calling the <xref uid=\"com.azure.security.attestation.models.AttestationResponse.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationResponse#getToken()\"></xref> method. The returned <xref uid=\"com.azure.security.attestation.models.AttestationToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.models.AttestationToken\"></xref> object will be the value stored by the attestation service.\n\n**Retrieve the current attestation policy for SGX enclaves.**\n\n```java\nMono<String> policyMono = client.getAttestationPolicy(AttestationType.SGX_ENCLAVE);\n policyMono.subscribe(policy -> System.out.printf(\"Current SGX policy: %s\\n\", policy));\n```"
  parameters:
  - description: "Specifies the trusted execution environment to be used to validate the evidence."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> getAttestationPolicy(AttestationType attestationType)"
  returns:
    description: "the response to an attestation policy operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationTokenValidationOptions)"
  fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(AttestationType attestationType, AttestationTokenValidationOptions options)"
  name: "getAttestationPolicy(AttestationType attestationType, AttestationTokenValidationOptions options)"
  nameWithType: "AttestationAdministrationAsyncClient.getAttestationPolicy(AttestationType attestationType, AttestationTokenValidationOptions options)"
  summary: "Retrieves the current policy for an attestation type.\n\n**NOTE:** The `getAttestationPolicy` API returns the underlying attestation policy specified by the user. This is NOT the full attestation policy maintained by the attestation service. Specifically it does not include the signing certificates used to verify the attestation policy.\n\nTo retrieve the signing certificates used to sign the policy, use the <xref uid=\"com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationTokenValidationOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationAdministrationAsyncClient#getAttestationPolicyWithResponse(AttestationType, AttestationTokenValidationOptions)\"></xref> API. The <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> object is an instance of an <xref uid=\"com.azure.security.attestation.models.AttestationResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.models.AttestationResponse\"></xref> object and the caller can retrieve the full information maintained by the service by calling the <xref uid=\"com.azure.security.attestation.models.AttestationResponse.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationResponse#getToken()\"></xref> method. The returned <xref uid=\"com.azure.security.attestation.models.AttestationToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.models.AttestationToken\"></xref> object will be the value stored by the attestation service.\n\n**Retrieve the current attestation policy for SGX enclaves.**\n\n```java\nMono<String> policyMono2 = client.getAttestationPolicy(AttestationType.SGX_ENCLAVE,\n     new AttestationTokenValidationOptions()\n         .setValidationSlack(Duration.ofSeconds(10)));\n policyMono2.subscribe(policy -> System.out.printf(\"Current SGX policy: %s\\n\", policy));\n```"
  parameters:
  - description: "Specifies the trusted execution environment to be used to validate the evidence."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Token validation options to validate returned attestation token."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationTokenValidationOptions?alt=com.azure.security.attestation.models.AttestationTokenValidationOptions&text=AttestationTokenValidationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> getAttestationPolicy(AttestationType attestationType, AttestationTokenValidationOptions options)"
  returns:
    description: "the response to an attestation policy operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
