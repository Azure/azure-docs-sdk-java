### YamlMime:ManagedReference
items:
- uid: com.microsoft.identity.client.PublicClientApplication
  id: PublicClientApplication
  parent: com.microsoft.identity.client
  children:
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@Nullable final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],final String,final UiBehavior,@Nullable final List<Pair<String, String>>,final String [],final String,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@Nullable final String,final boolean,@NonNull final AuthenticationCallback)
  - com.microsoft.identity.client.PublicClientApplication.getAccount(final String)
  - com.microsoft.identity.client.PublicClientApplication.getAccounts()
  - com.microsoft.identity.client.PublicClientApplication.getConfiguration()
  - com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
  - com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)
  - com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context)
  - com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,@NonNull final String)
  - com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,@NonNull final String,@NonNull final String)
  - com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,final int)
  - com.microsoft.identity.client.PublicClientApplication.removeAccount(final IAccount)
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: PublicClientApplication
  nameWithType: PublicClientApplication
  fullName: com.microsoft.identity.client.PublicClientApplication
  type: Class
  source:
    remote: &o0
      path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
      branch: master
      repo: https://github.com/AzureAD/microsoft-authentication-library-for-android
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 130
  package: com.microsoft.identity.client
  summary: "<p>This is the entry point for developer to create public native applications and make API calls to acquire tokens. </p>\r\n<p>\r\n  <b>Client ID:</b> The clientID of your application is a unique identifier which can be obtained from the app registration portal.</p>\r\n<p>\r\n  <b>AuthorityMetadata:</b> A URL indicating a directory that MSAL can use to obtain tokens. In Azure AD it is of the form <a href=\"https://\">https://</a>&lt;[nstance]/[tenant], where [instance] is the directory host (e.g. <a href=\"https://login.microsoftonline.com\">https://login.microsoftonline.com</a>) and [tenant] is an identifier within the directory itself (e.g. a domain associated to the tenant, such as contoso.onmicrosoft.com, or the GUID representing the TenantID property of the directory) For B2C, it is of the form <a href=\"https://\">https://</a>[instance]/tfp/[tenant]/[policy] where instance and tenant are same as Azure AD, and [policy] is a string like signup</p>\r\n<p>MSAL <xref uid=\"com.microsoft.identity.client.PublicClientApplication\" data-throw-if-not-resolved=\"false\">PublicClientApplication</xref> provides three constructors allowing the client id to be set either via AndroidManifest.xml metadata or using constructor parameters. Similarly, if developer chooses not to use the default authority <a href=\"https://login.microsoftonline.com,\">https://login.microsoftonline.com,</a> an alternate can also be configured using the manifest, constructor parameters, or in acquire token calls. </p>\r\n<p>Redirect is auto-generated in the library in the format of msal&lt;client-id&gt;://auth, and it cannot be overridden. </p>\r\n<p>Developer <b>MUST</b> have <xref uid=\"com.microsoft.identity.client.BrowserTabActivity\" data-throw-if-not-resolved=\"false\">BrowserTabActivity</xref> declared in their manifest, which must have the correct intent-filter configured. If the wrong scheme and host is provided, the sdk will fail the <xref uid=\"com.microsoft.identity.client.PublicClientApplication\" data-throw-if-not-resolved=\"false\">PublicClientApplication</xref> creation. </p>\r\n<p>Expected format will be: <pre>\r\n&lt;activity\r\n    android:name=\"com.microsoft.identity.client.BrowserTabActivity\"&gt;\r\n    &lt;intent-filter&gt;\r\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\r\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\r\n        &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\r\n        &lt;data android:scheme=\"msal&amp;lt;AppClientId&amp;gt;\"\r\n             android:host=\"auth\" /&gt;\r\n    &lt;/intent-filter&gt;\r\n&lt;/activity&gt;\r\n</pre></p>\r\n<p>Other Terminology:</p>\r\n<p>\r\n  <b>Scopes:</b>Permissions that the developers wants included in the access token received . Not all scopes are guaranteed to be included in the access token returned. </p>\r\n<p>\r\n  <b>Login Hint:</b> Usually an email, to pass to the service at the beginning of the interactive authentication flow. </p>\r\n<p>\r\n  <b>Extra Scopes to Consent:</b> Permissions you want the user to consent to in the same authentication flow, but won't be included in the returned access token. </p>"
  syntax: &o1
    content: public class PublicClientApplication
  inheritance:
  - java.lang.Object
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 432
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that is used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All apps doing an interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 575
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that will be used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All the apps doing interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: account
      type: 9a7d2fbdcom.microsoft.identity.client.IAccount
      description: <p>Optional. If provided, will be used to force the session continuation. If user tries to sign in with a different user, error will be returned. </p>
    - id: uiBehavior
      type: d6b37550com.microsoft.identity.client.UiBehavior
      description: <p>The <xref uid="com.microsoft.identity.client.UiBehavior" data-throw-if-not-resolved="false">UiBehavior</xref> for prompting behavior. By default, the sdk use <xref uid="com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT" data-throw-if-not-resolved="false">UiBehavior#SELECT_ACCOUNT</xref>. </p>
    - id: extraQueryParameters
      type: 49327aac
      description: <p>Optional. The extra query parameter sent to authorize endpoint. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@Nullable final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final IAccount,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@Nullable final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @Nullable final String[] extraScopesToConsent, @Nullable final String authority, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @Nullable final String[] extraScopesToConsent, @Nullable final String authority, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @Nullable final String[] extraScopesToConsent, @Nullable final String authority, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 689
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final IAccount account, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @Nullable final String[] extraScopesToConsent, @Nullable final String authority, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that will be used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All the apps doing interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: account
      type: 9a7d2fbdcom.microsoft.identity.client.IAccount
      description: <p>Optional. If provided, will be used to force the session continuation. If user tries to sign in with a different user, error will be returned. </p>
    - id: uiBehavior
      type: d6b37550com.microsoft.identity.client.UiBehavior
      description: <p>The <xref uid="com.microsoft.identity.client.UiBehavior" data-throw-if-not-resolved="false">UiBehavior</xref> for prompting behavior. By default, the sdk use <xref uid="com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT" data-throw-if-not-resolved="false">UiBehavior#SELECT_ACCOUNT</xref>. </p>
    - id: extraQueryParameters
      type: 49327aac
      description: <p>Optional. The extra query parameter sent to authorize endpoint. </p>
    - id: extraScopesToConsent
      type: 9aad4ff7
      description: <p>Optional. The extra scopes to request consent. </p>
    - id: authority
      type: b868e8dd
      description: <p>Optional. Can be passed to override the configured authority. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 477
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that will be used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All the apps doing interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: loginHint
      type: b868e8dd
      description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final UiBehavior,@Nullable final List<Pair<String, String>>,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 525
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that will be used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All the apps doing interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: loginHint
      type: b868e8dd
      description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    - id: uiBehavior
      type: d6b37550com.microsoft.identity.client.UiBehavior
      description: <p>The <xref uid="com.microsoft.identity.client.UiBehavior" data-throw-if-not-resolved="false">UiBehavior</xref> for prompting behavior. By default, the sdk use <xref uid="com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT" data-throw-if-not-resolved="false">UiBehavior#SELECT_ACCOUNT</xref>. </p>
    - id: extraQueryParameters
      type: 49327aac
      description: <p>Optional. The extra query parameters sent to authorize endpoint. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],final String,final UiBehavior,@Nullable final List<Pair<String, String>>,final String [],final String,@NonNull final AuthenticationCallback)
  id: acquireToken(@NonNull final Activity,@NonNull final String [],final String,final UiBehavior,@Nullable final List<Pair<String, String>>,final String [],final String,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, final String loginHint, final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, final String[] extraScopesToConsent, final String authority, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, final String loginHint, final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, final String[] extraScopesToConsent, final String authority, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, final String loginHint, final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, final String[] extraScopesToConsent, final String authority, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 635
  package: com.microsoft.identity.client
  summary: "<p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid=\"com.microsoft.identity.client.UiBehavior\" data-throw-if-not-resolved=\"false\">UiBehavior</xref> is <xref uid=\"com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT\" data-throw-if-not-resolved=\"false\">UiBehavior#SELECT_ACCOUNT</xref>.</p>\r\n<p></p>"
  syntax:
    content: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, final String loginHint, final UiBehavior uiBehavior, @Nullable final List<Pair<String, String>> extraQueryParameters, final String[] extraScopesToConsent, final String authority, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: activity
      type: "97576948"
      description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false">Activity</xref> that will be used as the parent activity for launching the <xref uid="com.microsoft.identity.client.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref>. All the apps doing interactive request are required to call the <xref uid="com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)" data-throw-if-not-resolved="false">PublicClientApplication#handleInteractiveRequestRedirect(int, int, Intent)</xref> within the calling activity <xref uid="" data-throw-if-not-resolved="false">Activity#onActivityResult(int, int, Intent)</xref>. </p>
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: loginHint
      type: 3d93591e
      description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    - id: uiBehavior
      type: 93de0ef9com.microsoft.identity.client.UiBehavior
      description: <p>The <xref uid="com.microsoft.identity.client.UiBehavior" data-throw-if-not-resolved="false">UiBehavior</xref> for prompting behavior. By default, the sdk use <xref uid="com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT" data-throw-if-not-resolved="false">UiBehavior#SELECT_ACCOUNT</xref>. </p>
    - id: extraQueryParameters
      type: 49327aac
      description: <p>Optional. The extra query parameter sent to authorize endpoint. </p>
    - id: extraScopesToConsent
      type: 3e8f7ba4
      description: <p>Optional. The extra scopes to request consent. </p>
    - id: authority
      type: 3d93591e
      description: <p>Optional. Can be passed to override the configured authority. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false">AuthenticationCallback#onCancel()</xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">AuthenticationCallback#onError(MsalException)</xref>. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@NonNull final AuthenticationCallback)
  id: acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 738
  package: com.microsoft.identity.client
  summary: "<p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>\r\n<p></p>"
  syntax:
    content: public void acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: account
      type: d6b37550com.microsoft.identity.client.IAccount
      description: >-
        <p>

          <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false">IAccount</xref> represents the account to silently request tokens. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: >-
        <p>

          <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">}. </xref></p>
- uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@Nullable final String,final boolean,@NonNull final AuthenticationCallback)
  id: acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@Nullable final String,final boolean,@NonNull final AuthenticationCallback)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @Nullable final String authority, final boolean forceRefresh, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @Nullable final String authority, final boolean forceRefresh, @NonNull final AuthenticationCallback callback)
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @Nullable final String authority, final boolean forceRefresh, @NonNull final AuthenticationCallback callback)
  overload: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 779
  package: com.microsoft.identity.client
  summary: "<p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>\r\n<p></p>"
  syntax:
    content: public void acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @Nullable final String authority, final boolean forceRefresh, @NonNull final AuthenticationCallback callback)
    parameters:
    - id: scopes
      type: e5895f1f
      description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    - id: account
      type: d6b37550com.microsoft.identity.client.IAccount
      description: >-
        <p>

          <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false">IAccount</xref> represents the account to silently request tokens. </p>
    - id: authority
      type: b868e8dd
      description: <p>Optional. Can be passed to override the configured authority. </p>
    - id: forceRefresh
      type: 4dda0764
      description: <p>True if the request is forced to refresh, false otherwise. </p>
    - id: callback
      type: d6b37550com.microsoft.identity.client.AuthenticationCallback
      description: >-
        <p>

          <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false">AuthenticationCallback</xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)" data-throw-if-not-resolved="false">AuthenticationCallback#onSuccess(AuthenticationResult)</xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false">}. </xref></p>
- uid: com.microsoft.identity.client.PublicClientApplication.getAccount(final String)
  id: getAccount(final String)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: getAccount(final String homeAccountIdentifier)
  nameWithType: PublicClientApplication.getAccount(final String homeAccountIdentifier)
  fullName: com.microsoft.identity.client.PublicClientApplication.getAccount(final String homeAccountIdentifier)
  overload: com.microsoft.identity.client.PublicClientApplication.getAccount*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 348
  package: com.microsoft.identity.client
  summary: "<p>Returns the IAccount object matching the supplied home_account_id.</p>\r\n<p></p>"
  syntax:
    content: public IAccount getAccount(final String homeAccountIdentifier)
    parameters:
    - id: homeAccountIdentifier
      type: 3d93591e
      description: <p>The home_account_id of the sought IAccount. </p>
    return:
      type: com.microsoft.identity.client.IAccount
      description: <p>The IAccount stored in the cache or null, if no such matching entry exists. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.getAccounts()
  id: getAccounts()
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: getAccounts()
  nameWithType: PublicClientApplication.getAccounts()
  fullName: com.microsoft.identity.client.PublicClientApplication.getAccounts()
  overload: com.microsoft.identity.client.PublicClientApplication.getAccounts*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 324
  package: com.microsoft.identity.client
  summary: "<p>Returns a List of <xref uid=\"com.microsoft.identity.client.IAccount\" data-throw-if-not-resolved=\"false\">IAccount</xref> objects for which this application has RefreshTokens.</p>\r\n<p></p>"
  syntax:
    content: public List<IAccount> getAccounts()
    return:
      type: 5618da2dcom.microsoft.identity.client.IAccounta08ddfce
      description: <p>An immutable List of IAccount objects - empty if no IAccounts exist. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.getConfiguration()
  id: getConfiguration()
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: getConfiguration()
  nameWithType: PublicClientApplication.getConfiguration()
  fullName: com.microsoft.identity.client.PublicClientApplication.getConfiguration()
  overload: com.microsoft.identity.client.PublicClientApplication.getConfiguration*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 315
  package: com.microsoft.identity.client
  summary: "<p>Returns the PublicClientConfiguration for this instance of PublicClientApplication Configuration is based on the defaults established for MSAl and can be overridden by creating the PublicClientApplication using <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context, int)</xref></p>\r\n<p></p>"
  syntax:
    content: public PublicClientApplicationConfiguration getConfiguration()
    return:
      type: com.microsoft.identity.client.PublicClientApplicationConfiguration
- uid: com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
  id: getSdkVersion()
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: getSdkVersion()
  nameWithType: PublicClientApplication.getSdkVersion()
  fullName: com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
  overload: com.microsoft.identity.client.PublicClientApplication.getSdkVersion*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 304
  package: com.microsoft.identity.client
  syntax:
    content: public static String getSdkVersion()
    return:
      type: "26831127"
      description: <p>The current version for the sdk. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)
  id: handleInteractiveRequestRedirect(final int,final int,final Intent)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  nameWithType: PublicClientApplication.handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  fullName: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  overload: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 408
  package: com.microsoft.identity.client
  summary: "<p>MSAL requires the calling app to pass an <xref uid=\"\" data-throw-if-not-resolved=\"false\">Activity</xref> which <b> MUST </b> call this method to get the auth code passed back correctly.</p>\r\n<p></p>"
  syntax: &o2
    content: public void handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
    parameters:
    - id: requestCode
      type: cd225469
      description: <p>The request code for interactive request. </p>
    - id: resultCode
      type: cd225469
      description: <p>The result code for the request to get auth code. </p>
    - id: data
      type: afc0a73e
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">Intent</xref> either contains the url with auth code as query string or the errors. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context)
  id: PublicClientApplication(@NonNull final Context)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: PublicClientApplication(@NonNull final Context context)
  nameWithType: PublicClientApplication.PublicClientApplication(@NonNull final Context context)
  fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context context)
  overload: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication*
  type: Constructor
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 183
  package: com.microsoft.identity.client
  summary: "<p>\r\nNote: The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Context</xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000025\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>This constructor has been replaced with one that leverages a configuration file. </p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>\r\n<p>Use <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context, int)</xref></p>\r\n<p>instead. </p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context)</xref> will read the client id (which must be set) from manifest, and if authority is not set, default authority(<a href=\"https://login.microsoftonline.com/common\">https://login.microsoftonline.com/common</a>) will be used. </p>\r\n<p>Client id <b>MUST</b> be set in the manifest as the meta data(<xref uid=\"\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref> will be thrown if client id is not provided), name for client id in the metadata is: \"com.microsoft.identity.client.ClientId\". </p>\r\n<p>Redirect uri <b>MUST</b> be set in the manifest as the meta data(<xref uid=\"\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref> will be thrown if client id is not provided), name for redirect uri in metadata is: \"com.microsoft.identity.client.RedirectUri\". </p>\r\n<p>AuthorityMetadata can be set in the meta data, if not provided, the sdk will use the default authority <a href=\"https://login.microsoftonline.com/common\">https://login.microsoftonline.com/common</a>. </p>"
  syntax:
    content: public PublicClientApplication(@NonNull final Context context)
    parameters:
    - id: context
      type: 3c9b8ebf
      description: <p>Application's <xref uid="" data-throw-if-not-resolved="false">Context</xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref>. Cannot be null. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,@NonNull final String)
  id: PublicClientApplication(@NonNull final Context,@NonNull final String)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: PublicClientApplication(@NonNull final Context context, @NonNull final String clientId)
  nameWithType: PublicClientApplication.PublicClientApplication(@NonNull final Context context, @NonNull final String clientId)
  fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context context, @NonNull final String clientId)
  overload: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication*
  type: Constructor
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 239
  package: com.microsoft.identity.client
  summary: "<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context, String)</xref> allows the client id to be passed instead of providing through the AndroidManifest metadata. If this constructor is called, the default authority <a href=\"https://login.microsoftonline.com/common\">https://login.microsoftonline.com/common</a> will be used.</p>\r\n<p>\r\nNote: The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Context</xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>\r\n<p></p>"
  syntax:
    content: public PublicClientApplication(@NonNull final Context context, @NonNull final String clientId)
    parameters:
    - id: context
      type: 3c9b8ebf
      description: <p>Application's <xref uid="" data-throw-if-not-resolved="false">Context</xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref>. Cannot be null. </p>
    - id: clientId
      type: 8789feb4
      description: <p>The application's client id. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,@NonNull final String,@NonNull final String)
  id: PublicClientApplication(@NonNull final Context,@NonNull final String,@NonNull final String)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: PublicClientApplication(@NonNull final Context context, @NonNull final String clientId, @NonNull final String authority)
  nameWithType: PublicClientApplication.PublicClientApplication(@NonNull final Context context, @NonNull final String clientId, @NonNull final String authority)
  fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context context, @NonNull final String clientId, @NonNull final String authority)
  overload: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication*
  type: Constructor
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 270
  package: com.microsoft.identity.client
  summary: "<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context, String, String)</xref> allows the client id and authority to be passed instead of providing them through metadata.</p>\r\n<p>\r\nNote: The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Context</xref> should be the application context instead of an running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>\r\n<p></p>"
  syntax:
    content: public PublicClientApplication(@NonNull final Context context, @NonNull final String clientId, @NonNull final String authority)
    parameters:
    - id: context
      type: 3c9b8ebf
      description: <p>Application's <xref uid="" data-throw-if-not-resolved="false">Context</xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref>. Cannot be null. </p>
    - id: clientId
      type: 8789feb4
      description: <p>The application client id. </p>
    - id: authority
      type: 8789feb4
      description: <p>The default authority to be used for the authority. </p>
- uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context,final int)
  id: PublicClientApplication(@NonNull final Context,final int)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: PublicClientApplication(@NonNull final Context context, final int configFileResourceId)
  nameWithType: PublicClientApplication.PublicClientApplication(@NonNull final Context context, final int configFileResourceId)
  fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final Context context, final int configFileResourceId)
  overload: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication*
  type: Constructor
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 216
  package: com.microsoft.identity.client
  summary: "<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">PublicClientApplication#PublicClientApplication(Context, int)</xref> will read the client id and other configuration settings from the file included in your applications resources. </p>\r\n<p>For more information on adding configuration files to your applications resources please</p>\r\n<p>\r\nNote: The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Context</xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>\r\n<p>\r\nFor more information on the schema of the MSAL config json please </p>"
  syntax:
    content: public PublicClientApplication(@NonNull final Context context, final int configFileResourceId)
    parameters:
    - id: context
      type: 3c9b8ebf
      description: <p>Application's <xref uid="" data-throw-if-not-resolved="false">Context</xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref>. Cannot be null. </p>
    - id: configFileResourceId
      type: cd225469
      description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication </p>
- uid: com.microsoft.identity.client.PublicClientApplication.removeAccount(final IAccount)
  id: removeAccount(final IAccount)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  langs:
  - java
  name: removeAccount(final IAccount account)
  nameWithType: PublicClientApplication.removeAccount(final IAccount account)
  fullName: com.microsoft.identity.client.PublicClientApplication.removeAccount(final IAccount account)
  overload: com.microsoft.identity.client.PublicClientApplication.removeAccount*
  type: Method
  source:
    remote: *o0
    path: msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java
    startLine: 380
  package: com.microsoft.identity.client
  summary: "<p>Removes the Account and Credentials (tokens) for the supplied IAccount.</p>\r\n<p></p>"
  syntax:
    content: public boolean removeAccount(final IAccount account)
    parameters:
    - id: account
      type: 93de0ef9com.microsoft.identity.client.IAccount
      description: <p>The IAccount whose entry and associated tokens should be removed. </p>
    return:
      type: 4fc6e284
      description: <p>True, if the account was removed. False otherwise. </p>
references:
- uid: 3c9b8ebf
  spec.java:
  - name: '@NonNull final Context'
    fullName: '@NonNull final Context'
- uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication*
  name: PublicClientApplication
  nameWithType: PublicClientApplication.PublicClientApplication
  fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication
  package: com.microsoft.identity.client
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 8789feb4
  spec.java:
  - name: '@NonNull final String'
    fullName: '@NonNull final String'
- uid: com.microsoft.identity.client.PublicClientApplication.getConfiguration*
  name: getConfiguration
  nameWithType: PublicClientApplication.getConfiguration
  fullName: com.microsoft.identity.client.PublicClientApplication.getConfiguration
  package: com.microsoft.identity.client
- uid: 5618da2dcom.microsoft.identity.client.IAccounta08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.identity.client.IAccount
    name: IAccount
    fullName: com.microsoft.identity.client.IAccount
    href: com.microsoft.identity.client.IAccount.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.identity.client.PublicClientApplication.getAccounts*
  name: getAccounts
  nameWithType: PublicClientApplication.getAccounts
  fullName: com.microsoft.identity.client.PublicClientApplication.getAccounts
  package: com.microsoft.identity.client
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: com.microsoft.identity.client.PublicClientApplication.getAccount*
  name: getAccount
  nameWithType: PublicClientApplication.getAccount
  fullName: com.microsoft.identity.client.PublicClientApplication.getAccount
  package: com.microsoft.identity.client
- uid: 93de0ef9com.microsoft.identity.client.IAccount
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.identity.client.IAccount
    name: IAccount
    fullName: com.microsoft.identity.client.IAccount
    href: com.microsoft.identity.client.IAccount.yml
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.identity.client.PublicClientApplication.removeAccount*
  name: removeAccount
  nameWithType: PublicClientApplication.removeAccount
  fullName: com.microsoft.identity.client.PublicClientApplication.removeAccount
  package: com.microsoft.identity.client
- uid: afc0a73e
  spec.java:
  - name: final Intent
    fullName: final Intent
- uid: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect*
  name: handleInteractiveRequestRedirect
  nameWithType: PublicClientApplication.handleInteractiveRequestRedirect
  fullName: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect
  package: com.microsoft.identity.client
- uid: "97576948"
  spec.java:
  - name: '@NonNull final Activity'
    fullName: '@NonNull final Activity'
- uid: e5895f1f
  spec.java:
  - name: '@NonNull final String []'
    fullName: '@NonNull final String []'
- uid: d6b37550com.microsoft.identity.client.AuthenticationCallback
  spec.java:
  - name: '@NonNull final '
    fullName: '@NonNull final '
  - uid: com.microsoft.identity.client.AuthenticationCallback
    name: AuthenticationCallback
    fullName: com.microsoft.identity.client.AuthenticationCallback
    href: com.microsoft.identity.client.AuthenticationCallback.yml
- uid: com.microsoft.identity.client.PublicClientApplication.acquireToken*
  name: acquireToken
  nameWithType: PublicClientApplication.acquireToken
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken
  package: com.microsoft.identity.client
- uid: b868e8dd
  spec.java:
  - name: '@Nullable final String'
    fullName: '@Nullable final String'
- uid: d6b37550com.microsoft.identity.client.UiBehavior
  spec.java:
  - name: '@NonNull final '
    fullName: '@NonNull final '
  - uid: com.microsoft.identity.client.UiBehavior
    name: UiBehavior
    fullName: com.microsoft.identity.client.UiBehavior
    href: com.microsoft.identity.client.UiBehavior.yml
- uid: 49327aac
  spec.java:
  - name: '@Nullable final List<Pair<String, String>>'
    fullName: '@Nullable final List<Pair<String, String>>'
- uid: 9a7d2fbdcom.microsoft.identity.client.IAccount
  spec.java:
  - name: '@Nullable final '
    fullName: '@Nullable final '
  - uid: com.microsoft.identity.client.IAccount
    name: IAccount
    fullName: com.microsoft.identity.client.IAccount
    href: com.microsoft.identity.client.IAccount.yml
- uid: 93de0ef9com.microsoft.identity.client.UiBehavior
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.identity.client.UiBehavior
    name: UiBehavior
    fullName: com.microsoft.identity.client.UiBehavior
    href: com.microsoft.identity.client.UiBehavior.yml
- uid: 3e8f7ba4
  spec.java:
  - name: final String []
    fullName: final String []
- uid: 9aad4ff7
  spec.java:
  - name: '@Nullable final String []'
    fullName: '@Nullable final String []'
- uid: d6b37550com.microsoft.identity.client.IAccount
  spec.java:
  - name: '@NonNull final '
    fullName: '@NonNull final '
  - uid: com.microsoft.identity.client.IAccount
    name: IAccount
    fullName: com.microsoft.identity.client.IAccount
    href: com.microsoft.identity.client.IAccount.yml
- uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync*
  name: acquireTokenSilentAsync
  nameWithType: PublicClientApplication.acquireTokenSilentAsync
  fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync
  package: com.microsoft.identity.client
- uid: 4dda0764
  spec.java:
  - name: final boolean
    fullName: final boolean
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.identity.client.PublicClientApplication.getSdkVersion*
  name: getSdkVersion
  nameWithType: PublicClientApplication.getSdkVersion
  fullName: com.microsoft.identity.client.PublicClientApplication.getSdkVersion
  package: com.microsoft.identity.client
- uid: com.microsoft.identity.client.PublicClientApplicationConfiguration
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.PublicClientApplicationConfiguration.yml
  name: PublicClientApplicationConfiguration
  nameWithType: PublicClientApplicationConfiguration
  fullName: com.microsoft.identity.client.PublicClientApplicationConfiguration
  type: Class
  syntax:
    content: public class PublicClientApplicationConfiguration
- uid: com.microsoft.identity.client.PublicClientApplication
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.PublicClientApplication.yml
  name: PublicClientApplication
  nameWithType: PublicClientApplication
  fullName: com.microsoft.identity.client.PublicClientApplication
  type: Class
  summary: "<p>This is the entry point for developer to create public native applications and make API calls to acquire tokens. </p>\r\n<p>\r\n  <b>Client ID:</b> The clientID of your application is a unique identifier which can be obtained from the app registration portal.</p>\r\n<p>\r\n  <b>AuthorityMetadata:</b> A URL indicating a directory that MSAL can use to obtain tokens. In Azure AD it is of the form <a href=\"https://\">https://</a>&lt;[nstance]/[tenant], where [instance] is the directory host (e.g. <a href=\"https://login.microsoftonline.com\">https://login.microsoftonline.com</a>) and [tenant] is an identifier within the directory itself (e.g. a domain associated to the tenant, such as contoso.onmicrosoft.com, or the GUID representing the TenantID property of the directory) For B2C, it is of the form <a href=\"https://\">https://</a>[instance]/tfp/[tenant]/[policy] where instance and tenant are same as Azure AD, and [policy] is a string like signup</p>\r\n<p>MSAL <xref uid=\"com.microsoft.identity.client.PublicClientApplication\" data-throw-if-not-resolved=\"false\">PublicClientApplication</xref> provides three constructors allowing the client id to be set either via AndroidManifest.xml metadata or using constructor parameters. Similarly, if developer chooses not to use the default authority <a href=\"https://login.microsoftonline.com,\">https://login.microsoftonline.com,</a> an alternate can also be configured using the manifest, constructor parameters, or in acquire token calls. </p>\r\n<p>Redirect is auto-generated in the library in the format of msal&lt;client-id&gt;://auth, and it cannot be overridden. </p>\r\n<p>Developer <b>MUST</b> have <xref uid=\"com.microsoft.identity.client.BrowserTabActivity\" data-throw-if-not-resolved=\"false\">BrowserTabActivity</xref> declared in their manifest, which must have the correct intent-filter configured. If the wrong scheme and host is provided, the sdk will fail the <xref uid=\"com.microsoft.identity.client.PublicClientApplication\" data-throw-if-not-resolved=\"false\">PublicClientApplication</xref> creation. </p>\r\n<p>Expected format will be: <pre>\r\n&lt;activity\r\n    android:name=\"com.microsoft.identity.client.BrowserTabActivity\"&gt;\r\n    &lt;intent-filter&gt;\r\n        &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\r\n        &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\r\n        &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\r\n        &lt;data android:scheme=\"msal&amp;lt;AppClientId&amp;gt;\"\r\n             android:host=\"auth\" /&gt;\r\n    &lt;/intent-filter&gt;\r\n&lt;/activity&gt;\r\n</pre></p>\r\n<p>Other Terminology:</p>\r\n<p>\r\n  <b>Scopes:</b>Permissions that the developers wants included in the access token received . Not all scopes are guaranteed to be included in the access token returned. </p>\r\n<p>\r\n  <b>Login Hint:</b> Usually an email, to pass to the service at the beginning of the interactive authentication flow. </p>\r\n<p>\r\n  <b>Extra Scopes to Consent:</b> Permissions you want the user to consent to in the same authentication flow, but won't be included in the returned access token. </p>"
  syntax: *o1
- uid: com.microsoft.identity.client.IAccount
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.IAccount.yml
  name: IAccount
  nameWithType: IAccount
  fullName: com.microsoft.identity.client.IAccount
  type: Interface
  summary: "<p>Interface describing MSAL's externally-exposed Account representation. </p>"
  syntax:
    content: public interface IAccount
- uid: com.microsoft.identity.client.AuthenticationCallback
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.AuthenticationCallback.yml
  name: AuthenticationCallback
  nameWithType: AuthenticationCallback
  fullName: com.microsoft.identity.client.AuthenticationCallback
  type: Interface
  summary: "<p>Callback passed with token acquisition. <xref uid=\"com.microsoft.identity.client.AuthenticationResult\" data-throw-if-not-resolved=\"false\">AuthenticationResult</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">MsalException</xref> will be returned back via callback. </p>"
  syntax:
    content: public interface AuthenticationCallback
- uid: com.microsoft.identity.client.UiBehavior
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.UiBehavior.yml
  name: UiBehavior
  nameWithType: UiBehavior
  fullName: com.microsoft.identity.client.UiBehavior
  type: Enum
  summary: "<p>The UI options that developer can pass during interactive token acquisition requests. </p>"
  syntax:
    content: public enum UiBehavior
- uid: com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT
  parent: com.microsoft.identity.client.UiBehavior
  href: com.microsoft.identity.client.UiBehavior.yml
  name: SELECT_ACCOUNT
  nameWithType: UiBehavior.SELECT_ACCOUNT
  fullName: com.microsoft.identity.client.UiBehavior.SELECT_ACCOUNT
  type: Field
  summary: "<p>acquireToken will send prompt=select_account to the authorize endpoint. Shows a list of users from which can be selected for authentication. </p>"
  syntax:
    content: public SELECT_ACCOUNT
- uid: com.microsoft.identity.client.AuthenticationActivity
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.AuthenticationActivity.yml
  name: AuthenticationActivity
  nameWithType: AuthenticationActivity
  fullName: com.microsoft.identity.client.AuthenticationActivity
  type: Class
  summary: "<p>Custom tab requires the device to have a browser with custom tab support, chrome with version&gt;= 45 comes with the support and is available on all devices with API version&gt;= 16 . The sdk use chrome custom tab, and before launching chrome custom tab, we need to check if chrome package is in the device. If it is, it's safe to launch the chrome custom tab; Otherwise the sdk will launch chrome. AuthenticationActivity will be responsible for checking if it's safe to launch chrome custom tab, if not, will go with chrome browser, if chrome is not installed, we throw error back. </p>"
  syntax:
    content: public class AuthenticationActivity
- uid: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int,final int,final Intent)
  parent: com.microsoft.identity.client.PublicClientApplication
  href: com.microsoft.identity.client.PublicClientApplication.yml
  name: handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  nameWithType: PublicClientApplication.handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  fullName: com.microsoft.identity.client.PublicClientApplication.handleInteractiveRequestRedirect(final int requestCode, final int resultCode, final Intent data)
  type: Method
  summary: "<p>MSAL requires the calling app to pass an <xref uid=\"\" data-throw-if-not-resolved=\"false\">Activity</xref> which <b> MUST </b> call this method to get the auth code passed back correctly.</p>\r\n<p></p>"
  syntax: *o2
- uid: com.microsoft.identity.client.AuthenticationCallback.onCancel()
  parent: com.microsoft.identity.client.AuthenticationCallback
  href: com.microsoft.identity.client.AuthenticationCallback.yml
  name: onCancel()
  nameWithType: AuthenticationCallback.onCancel()
  fullName: com.microsoft.identity.client.AuthenticationCallback.onCancel()
  type: Method
  summary: "<p>Will be called if user cancels the flow. </p>"
  syntax:
    content: public void onCancel()
- uid: com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult)
  parent: com.microsoft.identity.client.AuthenticationCallback
  href: com.microsoft.identity.client.AuthenticationCallback.yml
  name: onSuccess(final AuthenticationResult authenticationResult)
  nameWithType: AuthenticationCallback.onSuccess(final AuthenticationResult authenticationResult)
  fullName: com.microsoft.identity.client.AuthenticationCallback.onSuccess(final AuthenticationResult authenticationResult)
  type: Method
  summary: "<p>Authentication finishes successfully.</p>\r\n<p></p>"
  syntax:
    content: public void onSuccess(final AuthenticationResult authenticationResult)
    parameters:
    - id: authenticationResult
      type: 93de0ef9com.microsoft.identity.client.AuthenticationResult
      description: >-
        <p>

          <xref uid="com.microsoft.identity.client.AuthenticationResult" data-throw-if-not-resolved="false">AuthenticationResult</xref> that contains the success response. </p>
- uid: com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException)
  parent: com.microsoft.identity.client.AuthenticationCallback
  href: com.microsoft.identity.client.AuthenticationCallback.yml
  name: onError(final MsalException exception)
  nameWithType: AuthenticationCallback.onError(final MsalException exception)
  fullName: com.microsoft.identity.client.AuthenticationCallback.onError(final MsalException exception)
  type: Method
  summary: "<p>Error occurs during the authentication.</p>\r\n<p></p>"
  syntax:
    content: public void onError(final MsalException exception)
    parameters:
    - id: exception
      type: 93de0ef9com.microsoft.identity.client.exception.MsalException
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">MsalException</xref> contains the error code, error message and cause if applicable. The exception returned in the callback could be <xref uid="" data-throw-if-not-resolved="false">MsalClientException</xref>, <xref uid="" data-throw-if-not-resolved="false">MsalServiceException</xref> or <xref uid="" data-throw-if-not-resolved="false">MsalUiRequiredException</xref>. </p>
- uid: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenSilentOperationParameters
  parent: com.microsoft.identity.client.internal.controllers
  href: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenSilentOperationParameters.yml
  name: MSALAcquireTokenSilentOperationParameters
  nameWithType: MSALAcquireTokenSilentOperationParameters
  fullName: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenSilentOperationParameters
  type: Class
  syntax:
    content: public class MSALAcquireTokenSilentOperationParameters extends MSALOperationParameters
- uid: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenOperationParameters
  parent: com.microsoft.identity.client.internal.controllers
  href: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenOperationParameters.yml
  name: MSALAcquireTokenOperationParameters
  nameWithType: MSALAcquireTokenOperationParameters
  fullName: com.microsoft.identity.client.internal.controllers.MSALAcquireTokenOperationParameters
  type: Class
  syntax:
    content: public class MSALAcquireTokenOperationParameters extends MSALOperationParameters
- uid: com.microsoft.identity.client.BrowserTabActivity
  parent: com.microsoft.identity.client
  href: com.microsoft.identity.client.BrowserTabActivity.yml
  name: BrowserTabActivity
  nameWithType: BrowserTabActivity
  fullName: com.microsoft.identity.client.BrowserTabActivity
  type: Class
  summary: "<p>MSAL activity class (needs to be public in order to be discoverable by the os) to get the browser redirect with auth code from authorize endpoint. This activity has to be exposed by \"android:exported=true\", and intent filter has to be declared in the manifest for the activity. </p>\r\n<p>When chrome custom tab is launched, and we're redirected back with the redirect uri (the redirect must be unique across apps on a device), the os will fire an intent with the redirect, and the BrowserTabActivity will be launched. <pre>\r\n&lt;intent-filter&gt;\r\n    &lt;action android:name=\"android.intent.action.VIEW\" /&gt;</pre></p>\r\n<p>\r\n  <pre>    To receive implicit intents, have to put the activity in the category of default.\r\n    &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;</pre>\r\n</p>\r\n<p>\r\n  <pre>    The target activity allows itself to be started by a web browser to display data.\r\n    &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;</pre>\r\n</p>\r\n<p>\r\n  <pre>    BrowserTabActivity will be launched when matching the custom url scheme.\r\n    &lt;data android:scheme=\"msalclientid\" android:host=\"auth\" /&gt;\r\n&lt;/intent-filter&gt;\r\n</pre>\r\n</p>"
  syntax:
    content: public class BrowserTabActivity
