### YamlMime:JavaType
constructors:
- com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration)
fields:
- com.microsoft.identity.client.PublicClientApplication.homeAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.localAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.mPublicClientConfiguration
- com.microsoft.identity.client.PublicClientApplication.mTokenShareUtility
- com.microsoft.identity.client.PublicClientApplication.usernameMatcher
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.IPublicClientApplication?alt=com.microsoft.identity.client.IPublicClientApplication&text=IPublicClientApplication" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.saveMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.saveOrgIdFamilyRefreshToken(String)
methods:
- com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String [],@NonNull final IAccount,@NonNull final String,final boolean,@Nullable final ClaimsRequest,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final String,@Nullable final String,@NonNull final String,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@Nullable final File,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final int)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@Nullable final File)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.getCommandCallback(@NonNull final SilentAuthenticationCallback,@NonNull final TokenParameters)
- com.microsoft.identity.client.PublicClientApplication.getConfiguration()
- com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
- com.microsoft.identity.client.PublicClientApplication.isSharedDevice()
- com.microsoft.identity.client.PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult,@NonNull final TokenParameters,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters)
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters)
nameWithType: PublicClientApplication
syntax: public class PublicClientApplication implements IPublicClientApplication,ITokenShare
type: class
uid: com.microsoft.identity.client.PublicClientApplication
fullName: com.microsoft.identity.client.PublicClientApplication
name: PublicClientApplication
package: com.microsoft.identity.client
summary: >-
  <p>This is the entry point for developer to create public native applications and make API calls to acquire tokens. </p>

  <p>

    <b>Client ID:</b> The clientID of your application is a unique identifier which can be obtained from the app registration portal.</p>

  <p>

    <b>AuthorityMetadata:</b> A URL indicating a directory that MSAL can use to obtain tokens. In Azure AD it is of the form <a href="https://">https://</a>&lt;[nstance]/[tenant], where [instance] is the directory host (e.g. <a href="https://login.microsoftonline.com">https://login.microsoftonline.com</a>) and [tenant] is an identifier within the directory itself (e.g. a domain associated to the tenant, such as contoso.onmicrosoft.com, or the GUID representing the TenantID property of the directory) </p>

  <p>For B2C, it is of the form <a href="https://">https://</a>[instance]/tfp/[tenant]/[policy] where instance and tenant are same as Azure AD, and [policy] is a string like signup</p>

  <p>MSAL <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref> provides three constructors allowing the client id to be set either via AndroidManifest.xml metadata or using constructor parameters. Similarly, if developer chooses not to use the default authority <a href="https://login.microsoftonline.com,">https://login.microsoftonline.com,</a> an alternate can also be configured using the manifest, constructor parameters, or in acquire token calls. </p>

  <p>Redirect is auto-generated in the library in the format of msal&lt;client-id&gt;://auth, and it cannot be overridden. </p>

  <p>Developer <b>MUST</b> have <xref uid="com.microsoft.identity.client.BrowserTabActivity" data-throw-if-not-resolved="false">BrowserTabActivity</xref> declared in their manifest, which must have the correct intent-filter configured. If the wrong scheme and host is provided, the sdk will fail the <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false">PublicClientApplication</xref> creation. </p>

  <p>Expected format will be: <pre>

  &lt;activity

      android:name="com.microsoft.identity.client.BrowserTabActivity"&gt;

      &lt;intent-filter&gt;

          &lt;action android:name="android.intent.action.VIEW" /&gt;

          &lt;category android:name="android.intent.category.DEFAULT" /&gt;

          &lt;category android:name="android.intent.category.BROWSABLE" /&gt;

          &lt;data android:scheme="msal&amp;lt;AppClientId&amp;gt;"

               android:host="auth" /&gt;

      &lt;/intent-filter&gt;

  &lt;/activity&gt;

  </pre></p>

  <p>Other Terminology:</p>

  <p>

    <b>Scopes:</b>Permissions that the developers wants included in the access token received . Not all scopes are guaranteed to be included in the access token returned. </p>

  <p>

    <b>Login Hint:</b> Usually an email, to pass to the service at the beginning of the interactive authentication flow. </p>

  <p>

    <b>Extra Scopes to Consent:</b> Permissions you want the user to consent to in the same authentication flow, but won't be included in the returned access token. </p>
metadata: {}
