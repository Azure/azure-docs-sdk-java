### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.DefaultShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  name: DefaultShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  nameWithType: DefaultShardMapper.DefaultShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  parameters:
  - description: <p>Reference to ShardMapManager. </p>
    name: shardMapManager
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager?alt=com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager&text=ShardMapManager" data-throw-if-not-resolved="False"/>
  - description: <p>Containing shard map. </p>
    name: sm
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Default shard mapper, which just manages Shards.</p>

    <p></p>
  syntax: public DefaultShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.DefaultShardMapper(ShardMapManager,ShardMap)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper?alt=com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper&text=BaseShardMapper" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.add(MappingT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.add(MappingT)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.BaseShardMapper(ShardMapManager,ShardMap)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.DEFAULT_OWNER
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.ensureMappingBelongsToShardMap(MappingT,String,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getLockOwnerForMapping(MappingT,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getMappingsForRange(Range,Shard,LookupOptions,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getShardMap()
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getShardMapManager()
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.lockOrUnlockMappings(MappingT,UUID,LockOwnerIdOpType,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.lookup(KeyT,LookupOptions,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.lookup(ValueT,LookupOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKey(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKey(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKey(ValueT,String)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKey(ValueT,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKeyAsync(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKeyAsync(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKeyAsync(ValueT,String)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKeyAsync(ValueT,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.remove(MappingT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.remove(MappingT,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.setStatus(MappingT,StatusT,Function<StatusT, StatusT>,Function<StatusT, UpdateT>,ActionGeneric3Param<MappingT, UpdateT, UUID, MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.setStatus(MappingT,StatusT,Function<StatusT, StatusT>,Function<StatusT, UpdateT>,ActionGeneric3Param<MappingT, UpdateT, UUID, MappingT>,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.shardMap
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.shardMapManager
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.tryLookup(ValueT,LookupOptions,ReferenceObjectHelper<MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.update(MappingT,UpdateT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,Function<StatusT, Integer>,Function<Integer, StatusT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.update(MappingT,UpdateT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,Function<StatusT, Integer>,Function<Integer, StatusT>,UUID)
methods:
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.add(Shard shard)
  name: add(Shard shard)
  nameWithType: DefaultShardMapper.add(Shard shard)
  parameters:
  - description: <p>Shard being added. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The added shard object. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a shard.</p>

    <p></p>
  syntax: public Shard add(Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.add(Shard)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.getShardByLocation(ShardLocation location)
  name: getShardByLocation(ShardLocation location)
  nameWithType: DefaultShardMapper.getShardByLocation(ShardLocation location)
  parameters:
  - description: <p>Input location. </p>
    name: location
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardLocation?alt=com.microsoft.azure.elasticdb.shard.base.ShardLocation&text=ShardLocation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Shard belonging to ShardMap. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets shard object based on given location.</p>

    <p></p>
  syntax: public Shard getShardByLocation(ShardLocation location)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.getShardByLocation(ShardLocation)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.getShards()
  name: getShards()
  nameWithType: DefaultShardMapper.getShards()
  returns:
    description: <p>All the shards belonging to the shard map. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all shards for a shard map.</p>

    <p></p>
  syntax: public List<Shard> getShards()
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.getShards()
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.lookup(Shard shard, LookupOptions lookupOptions)
  name: lookup(Shard shard, LookupOptions lookupOptions)
  nameWithType: DefaultShardMapper.lookup(Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Input shard. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to use cache and/or storage for lookups. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the shard after verifying that it is present in mapper. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Looks up the given shard in the mapper.</p>

    <p></p>
  syntax: public Shard lookup(Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.lookup(Shard,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKey(Shard key, String connectionString)
  name: openConnectionForKey(Shard key, String connectionString)
  nameWithType: DefaultShardMapper.openConnectionForKey(Shard key, String connectionString)
  parameters:
  - description: <p>Input shard. </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An opened SqlConnection. </p>
    type: <xref href="Connection?alt=Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a shard, obtains a SqlConnection to the shard. The shard must exist in the mapper.</p>

    <p></p>
  syntax: public Connection openConnectionForKey(Shard key, String connectionString)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKey(Shard,String)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKey(Shard key, String connectionString, ConnectionOptions options)
  name: openConnectionForKey(Shard key, String connectionString, ConnectionOptions options)
  nameWithType: DefaultShardMapper.openConnectionForKey(Shard key, String connectionString, ConnectionOptions options)
  parameters:
  - description: <p>Input shard. </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Options for validation operations to perform on opened connection. </p>
    name: options
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions?alt=com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions&text=ConnectionOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An opened SqlConnection. </p>
    type: <xref href="Connection?alt=Connection&text=Connection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a shard, obtains a SqlConnection to the shard. The shard must exist in the mapper.</p>

    <p></p>
  syntax: public Connection openConnectionForKey(Shard key, String connectionString, ConnectionOptions options)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKey(Shard,String,ConnectionOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKeyAsync(Shard key, String connectionString)
  name: openConnectionForKeyAsync(Shard key, String connectionString)
  nameWithType: DefaultShardMapper.openConnectionForKeyAsync(Shard key, String connectionString)
  parameters:
  - description: <p>Input shard. </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An opened SqlConnection. </p>
    type: <xref href="Callable%3CConnection%3E?alt=Callable%3CConnection%3E&text=Callable%3CConnection%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a shard, asynchronously obtains a SqlConnection to the shard. The shard must exist in the mapper.</p>

    <p></p>
  syntax: public Callable<Connection> openConnectionForKeyAsync(Shard key, String connectionString)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKeyAsync(Shard,String)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKeyAsync(Shard key, String connectionString, ConnectionOptions options)
  name: openConnectionForKeyAsync(Shard key, String connectionString, ConnectionOptions options)
  nameWithType: DefaultShardMapper.openConnectionForKeyAsync(Shard key, String connectionString, ConnectionOptions options)
  parameters:
  - description: <p>Input shard. </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Options for validation operations to perform on opened connection. </p>
    name: options
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions?alt=com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions&text=ConnectionOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An opened SqlConnection. </p>
    type: <xref href="Callable%3CConnection%3E?alt=Callable%3CConnection%3E&text=Callable%3CConnection%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a shard, asynchronously obtains a SqlConnection to the shard. The shard must exist in the mapper.</p>

    <p></p>
  syntax: public Callable<Connection> openConnectionForKeyAsync(Shard key, String connectionString, ConnectionOptions options)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.openConnectionForKeyAsync(Shard,String,ConnectionOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.remove(Shard shard)
  name: remove(Shard shard)
  nameWithType: DefaultShardMapper.remove(Shard shard)
  parameters:
  - description: <p>Shard being removed. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes a shard.</p>

    <p></p>
  syntax: public void remove(Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.remove(Shard)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.remove(Shard shard, UUID lockOwnerId)
  name: remove(Shard shard, UUID lockOwnerId)
  nameWithType: DefaultShardMapper.remove(Shard shard, UUID lockOwnerId)
  parameters:
  - description: <p>Shard being removed. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes a shard.</p>

    <p></p>
  syntax: public void remove(Shard shard, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.remove(Shard,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.tryLookup(Shard key, LookupOptions lookupOptions, ReferenceObjectHelper<Shard> shard)
  name: tryLookup(Shard key, LookupOptions lookupOptions, ReferenceObjectHelper<Shard> shard)
  nameWithType: DefaultShardMapper.tryLookup(Shard key, LookupOptions lookupOptions, ReferenceObjectHelper<Shard> shard)
  parameters:
  - description: <p>Input shard. </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to use cache and/or storage for lookups. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  - description: <p>Shard that contains the key value. </p>
    name: shard
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if shard is found, <code>false</code> otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to looks up the key value and returns the corresponding mapping.</p>

    <p></p>
  syntax: public boolean tryLookup(Shard key, LookupOptions lookupOptions, ReferenceObjectHelper<Shard> shard)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.tryLookup(Shard,LookupOptions,ReferenceObjectHelper<Shard>)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.updateShard(Shard currentShard, ShardUpdate update)
  name: updateShard(Shard currentShard, ShardUpdate update)
  nameWithType: DefaultShardMapper.updateShard(Shard currentShard, ShardUpdate update)
  parameters:
  - description: <p>Shard to be updated. </p>
    name: currentShard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Updated properties of the Shard. </p>
    name: update
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardUpdate?alt=com.microsoft.azure.elasticdb.shard.base.ShardUpdate&text=ShardUpdate" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>New Shard instance with updated information. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Allows for update to a shard with the updates provided in the <em>update</em>  parameter.</p>

    <p></p>
  syntax: public Shard updateShard(Shard currentShard, ShardUpdate update)
  uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper.updateShard(Shard,ShardUpdate)
nameWithType: DefaultShardMapper
syntax: public class DefaultShardMapper extends BaseShardMapper implements IShardMapper<Shard, Shard>
type: class
uid: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper
fullName: com.microsoft.azure.elasticdb.shard.mapper.DefaultShardMapper
name: DefaultShardMapper
package: com.microsoft.azure.elasticdb.shard.mapper
summary: <p>Default shard mapper, that basically is a container of shards with no keys. </p>
metadata: {}
