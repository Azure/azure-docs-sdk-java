### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  id: ActorRemotingExceptionHandler
  parent: microsoft.servicefabric.actors.remoting.client
  children:
  - microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler(String)
  - microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)
  href: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.yml
  langs:
  - java
  name: ActorRemotingExceptionHandler
  nameWithType: ActorRemotingExceptionHandler
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
    startLine: 66
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>This class provide handling of exceptions encountered in communicating with service fabric actors over remoted actor interfaces.</p>\r\n<p>\r\n  <b>Remarks:</b> This exception handler handles exceptions related to the following scenarios: </p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>&lt;cite&gt;Duplicate Messages:&lt;/cite&gt; </p>\r\n      <p>Operations performed on the actor are retried from the client based on the exception handling logic. These exceptions represent various error condition including service failover. Therefore it is possible for the actors to receive duplicate messages. If a duplicate message is received while previous message is being processed by the actor, runtime return an internal exception to the client. The client then retries the operation to get the result back from the actor. From the actor's perspective duplicate operation will be performed by the clients and it should handle it in the similar manner as if the operation was already processed and then a duplicate message arrived. </p>\r\n      <p></p>\r\n      <p></p>\r\n    </li>\r\n    <li>\r\n      <p>&lt;cite&gt;<xref uid=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ActorConcurrencyLockTimeoutException\"></xref>:&lt;/cite&gt; </p>\r\n      <p>Operations on the actors are performed using a turn based concurrency lock ( <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ActorConcurrencySettings\"></xref>) that supports logical call context based reentrancy. In case of the long running actor operations it is possible for acquisition of this lock to time out. The acquisition of the lock can also time out in case of the deadlock situations (actor A and actor B calling each other almost at the same time). </p>\r\n      <p></p>\r\n      <p>The exception related to concurrency lock timeout is handled by returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref> from the <xref uid=\"microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandler#handleException(ExceptionInformation, OperationRetrySettings)\"></xref> method if the client performing the operation is not another actor. The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult#isTransient\"></xref> property of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref> is set to true, the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref>'s retryDelay property is set to a random value up to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OperationRetrySettings\"></xref>'s MaxRetryBackoffIntervalOnTransientErrors and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref>'s MaxRetryCount property is set to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#MAX_VALUE\"></xref>. </p>\r\n      <p></p>\r\n      <p>The exception related to concurrency lock timeout is handled by returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingThrowResult\"></xref> from the <xref uid=\"microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandler#handleException(ExceptionInformation, OperationRetrySettings)\"></xref> method, if the client performing the operation is another actor. In the deadlock situations this allows the call chain to unwind all the way back to the original client and the operation is then retried from there. </p>\r\n      <p></p>\r\n    </li>\r\n  </ul>\r\n</p>"
  syntax:
    content: public class ActorRemotingExceptionHandler extends ServiceRemotingExceptionHandler
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.services.communication.client.ExceptionHandler
  - microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler
  inheritedMembers:
  - microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler.ServiceRemotingExceptionHandler(String)
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler(String)
  id: ActorRemotingExceptionHandler(String)
  parent: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  href: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.yml
  langs:
  - java
  name: ActorRemotingExceptionHandler(String traceId)
  nameWithType: ActorRemotingExceptionHandler.ActorRemotingExceptionHandler(String traceId)
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler(String traceId)
  overload: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
    startLine: 74
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Constructs a ActorRemotingExceptionHandler with a specified trace id.</p>\r\n<p></p>"
  syntax:
    content: public ActorRemotingExceptionHandler(String traceId)
    parameters:
    - id: traceId
      type: "26831127"
      description: <p>Id to use in diagnostics traces from this component. </p>
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)
  id: handleException(ExceptionInformation,OperationRetrySettings)
  parent: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  href: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.yml
  langs:
  - java
  name: handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  nameWithType: ActorRemotingExceptionHandler.handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  overload: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
    startLine: 88
  package: microsoft.servicefabric.actors.remoting.client
  summary: "<p>Method that examines the exception and determines how that exception can be handled.</p>\r\n<p></p>"
  syntax:
    content: public ExceptionHandlingResult handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
    parameters:
    - id: exceptionInformation
      type: microsoft.servicefabric.services.communication.client.ExceptionInformation
      description: <p>Information about the exception. </p>
    - id: retrySettings
      type: microsoft.servicefabric.services.communication.client.OperationRetrySettings
      description: <p>The operation retry preferences. </p>
    return:
      type: microsoft.servicefabric.services.communication.client.ExceptionHandlingResult
      description: <p>Result of the exception handling. </p>
  overridden: microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler*
  name: ActorRemotingExceptionHandler
  nameWithType: ActorRemotingExceptionHandler.ActorRemotingExceptionHandler
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.ActorRemotingExceptionHandler
  package: microsoft.servicefabric.actors.remoting.client
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException*
  name: handleException
  nameWithType: ActorRemotingExceptionHandler.handleException
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.handleException
  package: microsoft.servicefabric.actors.remoting.client
- uid: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler.ServiceRemotingExceptionHandler(String)
  parent: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler
  href: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler.yml
  name: ServiceRemotingExceptionHandler(String traceId)
  nameWithType: ServiceRemotingExceptionHandler.ServiceRemotingExceptionHandler(String traceId)
  fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler.ServiceRemotingExceptionHandler(String traceId)
  type: Constructor
  summary: "<p>Constructs a ServiceRemotingExceptionHandler with a specified trace id.</p>\r\n<p></p>"
  syntax:
    content: public ServiceRemotingExceptionHandler(String traceId)
    parameters:
    - id: traceId
      type: "26831127"
      description: <p>Id to use in diagnostics traces from this component. </p>
- uid: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler.yml
  name: ServiceRemotingExceptionHandler
  nameWithType: ServiceRemotingExceptionHandler
  fullName: microsoft.servicefabric.services.remoting.client.ServiceRemotingExceptionHandler
  type: Class
  summary: "<p>This class provide handling of exceptions encountered in communicating with a service fabric service over remoted interfaces. ServiceRemotingExceptionHandler </p>"
  syntax:
    content: public class ServiceRemotingExceptionHandler
- uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingResult
  parent: microsoft.servicefabric.services.communication.client
  href: microsoft.servicefabric.services.communication.client.ExceptionHandlingResult.yml
  name: ExceptionHandlingResult
  nameWithType: ExceptionHandlingResult
  fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingResult
  type: Class
  summary: "<p>Specifies the base class for the result from handling an exception during client to service communication. </p>"
  syntax:
    content: public class ExceptionHandlingResult
- uid: microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)
  parent: microsoft.servicefabric.services.communication.client.ExceptionHandler
  href: microsoft.servicefabric.services.communication.client.ExceptionHandler.yml
  name: handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  nameWithType: ExceptionHandler.handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  fullName: microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  type: Method
  summary: "<p>Method that examines the exception and determines how that exception can be handled.</p>\r\n<p></p>"
  syntax:
    content: public ExceptionHandlingResult handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
    parameters:
    - id: exceptionInformation
      type: microsoft.servicefabric.services.communication.client.ExceptionInformation
      description: <p>Information about the exception. </p>
    - id: retrySettings
      type: microsoft.servicefabric.services.communication.client.OperationRetrySettings
      description: <p>The operation retry preferences. </p>
    return:
      type: microsoft.servicefabric.services.communication.client.ExceptionHandlingResult
      description: <p>true if the exception is handled, false otherwise </p>
- uid: microsoft.servicefabric.services.communication.client.ExceptionInformation
  parent: microsoft.servicefabric.services.communication.client
  href: microsoft.servicefabric.services.communication.client.ExceptionInformation.yml
  name: ExceptionInformation
  nameWithType: ExceptionInformation
  fullName: microsoft.servicefabric.services.communication.client.ExceptionInformation
  type: Class
  summary: "<p>Specifies the class that encapsulates the exception seen on the communication channel and additional information required to handle that exception. </p>"
  syntax:
    content: public class ExceptionInformation
- uid: microsoft.servicefabric.services.communication.client.OperationRetrySettings
  parent: microsoft.servicefabric.services.communication.client
  href: microsoft.servicefabric.services.communication.client.OperationRetrySettings.yml
  name: OperationRetrySettings
  nameWithType: OperationRetrySettings
  fullName: microsoft.servicefabric.services.communication.client.OperationRetrySettings
  type: Class
  syntax:
    content: public class OperationRetrySettings
- uid: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException.yml
  name: ActorConcurrencyLockTimeoutException
  nameWithType: ActorConcurrencyLockTimeoutException
  fullName: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException
  type: Class
  summary: "<p>Exception thrown by actor runtime when runtime cannot acquire the turn based concurrency lock to dispatch the method. </p>"
  syntax:
    content: public class ActorConcurrencyLockTimeoutException extends FabricException
