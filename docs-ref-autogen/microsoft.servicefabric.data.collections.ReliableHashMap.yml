### YamlMime:JavaType
constructors:
- microsoft.servicefabric.data.collections.ReliableHashMap.ReliableHashMap(long,long,String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.freeTStore(long)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeAddAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeContainsKeyAsync(long,long,String,int,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeEnumeratorAsync(long,long,long,int)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeGetAsync(long,long,String,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeGetCount(long)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeKeyEnumeratorAsync(long,long,long,int)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativePutAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativePutIfAbsentAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeRemoveAsync(long,long,String,long,long,int,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableCollectionsNativeAPIs.nativeUpdateAsync(long,long,String,byte [],int,long,long,int,int,CancellationToken)
methods:
- microsoft.servicefabric.data.collections.ReliableHashMap.clearAsync()
- microsoft.servicefabric.data.collections.ReliableHashMap.close()
- microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>)
- microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.computeIfAbsentAsync(Transaction,K,Function<? super K, ? extends V>)
- microsoft.servicefabric.data.collections.ReliableHashMap.computeIfAbsentAsync(Transaction,K,Function<? super K, ? extends V>,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.computeIfPresentAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>)
- microsoft.servicefabric.data.collections.ReliableHashMap.computeIfPresentAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K)
- microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,LockMode)
- microsoft.servicefabric.data.collections.ReliableHashMap.containsKeyAsync(Transaction,K,LockMode,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.elementsAsync(Transaction)
- microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K)
- microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.getCount()
- microsoft.servicefabric.data.collections.ReliableHashMap.getName()
- microsoft.servicefabric.data.collections.ReliableHashMap.keysAsync(Transaction)
- microsoft.servicefabric.data.collections.ReliableHashMap.keyValuesAsync(Transaction)
- microsoft.servicefabric.data.collections.ReliableHashMap.putAsync(Transaction,K,V)
- microsoft.servicefabric.data.collections.ReliableHashMap.putAsync(Transaction,K,V,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.putIfAbsentAsync(Transaction,K,V)
- microsoft.servicefabric.data.collections.ReliableHashMap.putIfAbsentAsync(Transaction,K,V,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.removeAsync(Transaction,K)
- microsoft.servicefabric.data.collections.ReliableHashMap.removeAsync(Transaction,K,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.replaceAsync(Transaction,K,V)
- microsoft.servicefabric.data.collections.ReliableHashMap.replaceAsync(Transaction,K,V,Duration,CancellationToken)
- microsoft.servicefabric.data.collections.ReliableHashMap.size()
nameWithType: ReliableHashMap<K,V>
syntax: public class ReliableHashMap<K extends String,V> implements ReliableCollection
type: class
typeParameters:
- name: K
- name: V
uid: microsoft.servicefabric.data.collections.ReliableHashMap
fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K,V>
name: ReliableHashMap<K,V>
package: microsoft.servicefabric.data.collections
metadata: {}
