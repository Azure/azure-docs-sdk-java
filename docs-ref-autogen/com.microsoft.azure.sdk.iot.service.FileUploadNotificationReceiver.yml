### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver"
fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver"
name: "FileUploadNotificationReceiver"
nameWithType: "FileUploadNotificationReceiver"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.service.Receiver?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()"
- "com.microsoft.azure.sdk.iot.service.Receiver.openAsync()"
- "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()"
- "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class FileUploadNotificationReceiver extends Receiver"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.close()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.close()"
  name: "close()"
  nameWithType: "FileUploadNotificationReceiver.close()"
  summary: "Close Amqp<wbr>Receive object"
  syntax: "public void close()"
  exceptions:
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Close AmqpReceive object"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.closeAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.closeAsync()"
  name: "closeAsync()"
  nameWithType: "FileUploadNotificationReceiver.closeAsync()"
  summary: "Async wrapper for close() operation"
  overridden: "com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()"
  syntax: "public CompletableFuture<Void> closeAsync()"
  desc: "Async wrapper for close() operation"
  returns:
    description: "The future object for the requested operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.open()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.open()"
  name: "open()"
  nameWithType: "FileUploadNotificationReceiver.open()"
  summary: "Open Amqp<wbr>Receive object"
  syntax: "public void open()"
  exceptions:
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Open AmqpReceive object"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.openAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.openAsync()"
  name: "openAsync()"
  nameWithType: "FileUploadNotificationReceiver.openAsync()"
  summary: "Async wrapper for open() operation"
  overridden: "com.microsoft.azure.sdk.iot.service.Receiver.openAsync()"
  syntax: "public CompletableFuture<Void> openAsync()"
  desc: "Async wrapper for open() operation"
  returns:
    description: "The future object for the requested operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receive()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receive()"
  name: "receive()"
  nameWithType: "FileUploadNotificationReceiver.receive()"
  summary: "Receive File<wbr>Upload<wbr>Notification with default timeout QoS for receiving file upload notifications is at least once This function is synchronized internally so that only one receive operation is allowed at a time."
  syntax: "public FileUploadNotification receive()"
  exceptions:
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive FileUploadNotification with default timeout QoS for receiving file upload notifications is at least once This function is synchronized internally so that only one receive operation is allowed at a time. In order to do more receive operations at a time, you will need to instantiate another FileUploadNotificationReceiver instance."
  returns:
    description: "The received FileUploadNotification object"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.FileUploadNotification&text=FileUploadNotification\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receive(long)"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receive(long timeoutMs)"
  name: "receive(long timeoutMs)"
  nameWithType: "FileUploadNotificationReceiver.receive(long timeoutMs)"
  summary: "Receive File<wbr>Upload<wbr>Notification with specific timeout QoS for receiving file upload notifications is at least once This function is synchronized internally so that only one receive operation is allowed at a time."
  parameters:
  - description: "The timeout in milliseconds"
    name: "timeoutMs"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public FileUploadNotification receive(long timeoutMs)"
  exceptions:
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "This exception is thrown if the input AmqpReceive object is null"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Receive FileUploadNotification with specific timeout QoS for receiving file upload notifications is at least once This function is synchronized internally so that only one receive operation is allowed at a time. In order to do more receive operations at a time, you will need to instantiate another FileUploadNotificationReceiver instance."
  returns:
    description: "The received FileUploadNotification object"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.FileUploadNotification&text=FileUploadNotification\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receiveAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receiveAsync()"
  name: "receiveAsync()"
  nameWithType: "FileUploadNotificationReceiver.receiveAsync()"
  summary: "Async wrapper for receive() operation with default timeout QoS for receiving file upload notifications is at least once"
  overridden: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()"
  syntax: "public CompletableFuture<FileUploadNotification> receiveAsync()"
  desc: "Async wrapper for receive() operation with default timeout QoS for receiving file upload notifications is at least once"
  returns:
    description: "The future object for the requested operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.FileUploadNotification&text=FileUploadNotification\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receiveAsync(long)"
  fullName: "com.microsoft.azure.sdk.iot.service.FileUploadNotificationReceiver.receiveAsync(long timeoutMs)"
  name: "receiveAsync(long timeoutMs)"
  nameWithType: "FileUploadNotificationReceiver.receiveAsync(long timeoutMs)"
  summary: "Async wrapper for receive() operation with specific timeout QoS for receiving file upload notifications is at least once"
  overridden: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)"
  parameters:
  - name: "timeoutMs"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<FileUploadNotification> receiveAsync(long timeoutMs)"
  desc: "Async wrapper for receive() operation with specific timeout QoS for receiving file upload notifications is at least once"
  returns:
    description: "The future object for the requested operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.FileUploadNotification?alt=com.microsoft.azure.sdk.iot.service.FileUploadNotification&text=FileUploadNotification\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.service"
artifact: com.microsoft.azure.sdk.iot:iot-service-client:1.30.0
