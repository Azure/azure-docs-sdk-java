### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  id: "ExecuteTask"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  children:
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.ExecuteTask(com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<ResultT>)"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.beforeGroupInvoke()"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAfterPostRunAsync(boolean)"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAsync(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.isHot()"
  - "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.result()"
  langs:
  - "java"
  name: "ExecuteTask<ResultT>"
  nameWithType: "ExecuteTask<ResultT>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>"
  type: "Class"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "A <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskItem\" data-throw-if-not-resolved=\"false\">TaskItem</xref> type, when invoked it execute a work using the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Executor</xref> it composes."
  syntax:
    content: "public class ExecuteTask<ResultT> implements TaskItem"
    typeParameters:
    - id: "ResultT"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskItem"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.ExecuteTask(com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<ResultT>)"
  id: "ExecuteTask(com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<ResultT>)"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "ExecuteTask(ExecuteTask.Executor<ResultT> executor)"
  nameWithType: "ExecuteTask<ResultT>.ExecuteTask(ExecuteTask.Executor<ResultT> executor)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.ExecuteTask(ExecuteTask.Executor<ResultT> executor)"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.ExecuteTask*"
  type: "Constructor"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  summary: "Creates ExecuteTask."
  syntax:
    content: "public ExecuteTask(ExecuteTask.Executor<ResultT> executor)"
    parameters:
    - id: "executor"
      type: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<ResultT>"
      description: "executor used by this TaskItem to execute the work when invoked."
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.beforeGroupInvoke()"
  id: "beforeGroupInvoke()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "beforeGroupInvoke()"
  nameWithType: "ExecuteTask<ResultT>.beforeGroupInvoke()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.beforeGroupInvoke()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.beforeGroupInvoke*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public void beforeGroupInvoke()"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAfterPostRunAsync(boolean)"
  id: "invokeAfterPostRunAsync(boolean)"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "invokeAfterPostRunAsync(boolean isGroupFaulted)"
  nameWithType: "ExecuteTask<ResultT>.invokeAfterPostRunAsync(boolean isGroupFaulted)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.invokeAfterPostRunAsync(boolean isGroupFaulted)"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAfterPostRunAsync*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public Completable invokeAfterPostRunAsync(boolean isGroupFaulted)"
    parameters:
    - id: "isGroupFaulted"
      type: "boolean"
    return:
      type: "rx.Completable"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAsync(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  id: "invokeAsync(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "invokeAsync(TaskGroup.InvocationContext context)"
  nameWithType: "ExecuteTask<ResultT>.invokeAsync(TaskGroup.InvocationContext context)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.invokeAsync(TaskGroup.InvocationContext context)"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAsync*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public Observable<Indexable> invokeAsync(TaskGroup.InvocationContext context)"
    parameters:
    - id: "context"
      type: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
    return:
      type: "rx.Observable<com.microsoft.azure.management.resources.fluentcore.model.Indexable>"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.isHot()"
  id: "isHot()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "isHot()"
  nameWithType: "ExecuteTask<ResultT>.isHot()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.isHot()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.isHot*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public boolean isHot()"
    return:
      type: "boolean"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.result()"
  id: "result()"
  parent: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask"
  langs:
  - "java"
  name: "result()"
  nameWithType: "ExecuteTask<ResultT>.result()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.result()"
  overload: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.result*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
  syntax:
    content: "public ResultT result()"
    return:
      type: "ResultT"
references:
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<ResultT>"
  spec.java:
  - uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
    name: "Executor"
    fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  - name: "<"
    fullName: "<"
  - uid: "ResultT"
    name: "ResultT"
    fullName: "ResultT"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.ExecuteTask*"
  name: "ExecuteTask"
  nameWithType: "ExecuteTask<ResultT>.ExecuteTask"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.ExecuteTask"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "ResultT"
  spec.java:
  - uid: "ResultT"
    name: "ResultT"
    fullName: "ResultT"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.result*"
  name: "result"
  nameWithType: "ExecuteTask<ResultT>.result"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.result"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.beforeGroupInvoke*"
  name: "beforeGroupInvoke"
  nameWithType: "ExecuteTask<ResultT>.beforeGroupInvoke"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.beforeGroupInvoke"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.isHot*"
  name: "isHot"
  nameWithType: "ExecuteTask<ResultT>.isHot"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.isHot"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
  name: "TaskGroup.InvocationContext"
  nameWithType: "TaskGroup.InvocationContext"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
- uid: "rx.Observable<com.microsoft.azure.management.resources.fluentcore.model.Indexable>"
  spec.java:
  - uid: "rx.Observable"
    name: "Observable"
    fullName: "rx.Observable"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
    name: "Indexable"
    fullName: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAsync*"
  name: "invokeAsync"
  nameWithType: "ExecuteTask<ResultT>.invokeAsync"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.invokeAsync"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "rx.Completable"
  spec.java:
  - uid: "rx.Completable"
    name: "Completable"
    fullName: "rx.Completable"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.invokeAfterPostRunAsync*"
  name: "invokeAfterPostRunAsync"
  nameWithType: "ExecuteTask<ResultT>.invokeAfterPostRunAsync"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask<ResultT>.invokeAfterPostRunAsync"
  package: "com.microsoft.azure.management.resources.fluentcore.model.implementation"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskItem"
  name: "TaskItem"
  nameWithType: "TaskItem"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskItem"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor"
  name: "ExecuteTask.Executor<T>"
  nameWithType: "ExecuteTask.Executor<T>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.implementation.ExecuteTask.Executor<T>"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
  name: "Indexable"
  nameWithType: "Indexable"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
- uid: "rx.Observable"
  name: "Observable"
  nameWithType: "Observable"
  fullName: "rx.Observable"
