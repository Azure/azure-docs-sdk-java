### YamlMime:JavaType
uid: "com.azure.security.attestation.models.AttestationResult"
fullName: "com.azure.security.attestation.models.AttestationResult"
name: "AttestationResult"
nameWithType: "AttestationResult"
summary: "An AttestationResult contains the defined claims included in a Microsoft Azure Attestation Token. An AttestationResult is an IETF RFC 7519 JSON Web Token, and implements many of the claims in IETF Draft-ietf-rats-eat."
syntax: "public interface AttestationResult"
methods:
- uid: "com.azure.security.attestation.models.AttestationResult.getEnclaveHeldData()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getEnclaveHeldData()"
  name: "getEnclaveHeldData()"
  nameWithType: "AttestationResult.getEnclaveHeldData()"
  summary: "Get the enclaveHeldData property: A copy of the RuntimeData specified as an input to the call to attest if the <xref uid=\"com.azure.security.attestation.models.AttestationDataInterpretation.BINARY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationDataInterpretation#BINARY\"></xref> data interpretation was set on the <xref uid=\"com.azure.security.attestation.models.AttestationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationData\"></xref> passed to the <xref uid=\"com.azure.security.attestation.models.AttestationOptions.setRunTimeData(com.azure.security.attestation.models.AttestationData)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions#setRunTimeData(AttestationData)\"></xref> API."
  modifiers:
  - "abstract"
  syntax: "public abstract BinaryData getEnclaveHeldData()"
  returns:
    description: "the enclaveHeldData value."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getExpiresOn()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getExpiresOn()"
  name: "getExpiresOn()"
  nameWithType: "AttestationResult.getExpiresOn()"
  summary: "Get the ExpiresOn property: The expiration time after which the token is no longer valid. The ExpiresOn property corresponds to the \"exp\" claim in a Json Web Token. See [RFC 7519 section 4.1.4][]\n\n\n[RFC 7519 section 4.1.4]: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4"
  modifiers:
  - "abstract"
  syntax: "public abstract OffsetDateTime getExpiresOn()"
  returns:
    description: "the expiration time for the token."
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getInitTimeClaims()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getInitTimeClaims()"
  name: "getInitTimeClaims()"
  nameWithType: "AttestationResult.getInitTimeClaims()"
  summary: "Get the initTimeClaims property: InitTime Claims.\nIf <xref uid=\"com.azure.security.attestation.models.AttestationDataInterpretation.JSON\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationDataInterpretation#JSON\"></xref> was specified in the <xref uid=\"com.azure.security.attestation.models.AttestationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationData\"></xref> for the InitTime data this will contain the input InitTimeData as JSON elements."
  modifiers:
  - "abstract"
  syntax: "public abstract Object getInitTimeClaims()"
  returns:
    description: "the initTimeClaims value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getIssuedAt()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getIssuedAt()"
  name: "getIssuedAt()"
  nameWithType: "AttestationResult.getIssuedAt()"
  summary: "Get the Issued At property: The time at which the token was issued. The IssuedAt property corresponds to the \"iat\" claim in a Json Web Token. See [RFC 7519 section 4.1.6][] for more information.\n\n\n[RFC 7519 section 4.1.6]: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6"
  modifiers:
  - "abstract"
  syntax: "public abstract OffsetDateTime getIssuedAt()"
  returns:
    description: "the IssuedAt value."
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getIssuer()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getIssuer()"
  name: "getIssuer()"
  nameWithType: "AttestationResult.getIssuer()"
  summary: "Retrieve the issuer of the attestation token. The issuer corresponds to the \"iss\" claim in a Json Web Token. See [RFC 7519 section 4.1.1][] for more information. The issuer will always be the same as the attestation service instance endpoint URL.\n\n\n[RFC 7519 section 4.1.1]: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1"
  modifiers:
  - "abstract"
  syntax: "public abstract String getIssuer()"
  returns:
    description: "the iss value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getMrEnclave()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getMrEnclave()"
  name: "getMrEnclave()"
  nameWithType: "AttestationResult.getMrEnclave()"
  summary: "Get the mrEnclave property: The HEX encoded SGX MRENCLAVE value for the enclave. Represents the HEX encoded MRENCLAVE Measure Register. This is the hash of the binary loaded into the enclave."
  modifiers:
  - "abstract"
  syntax: "public abstract String getMrEnclave()"
  returns:
    description: "the mrEnclave value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getMrSigner()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getMrSigner()"
  name: "getMrSigner()"
  nameWithType: "AttestationResult.getMrSigner()"
  summary: "Get the mrSigner property: The HEX encoded SGX MRSIGNER value for the enclave. Represents the HEX encoded MRSIGNER Measure Register. This is the hash of the signer of the code loaded into the enclave."
  modifiers:
  - "abstract"
  syntax: "public abstract String getMrSigner()"
  returns:
    description: "the mrSigner value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getNonce()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getNonce()"
  name: "getNonce()"
  nameWithType: "AttestationResult.getNonce()"
  summary: "Returns the Nonce input to the attestation request, if provided. The Nonce claim corresponds to the \"nonce\" claim defined in [draft-ietf-rats-eat-10, section 3.3][draft-ietf-rats-eat-10_ section 3.3]\n\n\n[draft-ietf-rats-eat-10_ section 3.3]: https://datatracker.ietf.org/doc/html/draft-ietf-rats-eat-10#section-3.3"
  modifiers:
  - "abstract"
  syntax: "public abstract String getNonce()"
  returns:
    description: "the nonce value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getNotBefore()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getNotBefore()"
  name: "getNotBefore()"
  nameWithType: "AttestationResult.getNotBefore()"
  summary: "Get the NotBefore property: The time before which a token cannot be considered valid. The ExpiresOn property corresponds to the \"exp\" claim in a Json Web Token. See [RFC 7519 section 4.1.4][]\n\n\n[RFC 7519 section 4.1.4]: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4"
  modifiers:
  - "abstract"
  syntax: "public abstract OffsetDateTime getNotBefore()"
  returns:
    description: "the time before which the token is invalid."
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getPolicyClaims()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getPolicyClaims()"
  name: "getPolicyClaims()"
  nameWithType: "AttestationResult.getPolicyClaims()"
  summary: "Get the policyClaims property: Policy Generated Claims. This element contains all claims in the token which were generated by customer specified attestation policies."
  modifiers:
  - "abstract"
  syntax: "public abstract Object getPolicyClaims()"
  returns:
    description: "the policyClaims value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getPolicyHash()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getPolicyHash()"
  name: "getPolicyHash()"
  nameWithType: "AttestationResult.getPolicyHash()"
  summary: "Get the policyHash property: The SHA256 hash of the BASE64URL encoded policy text used for attestation."
  modifiers:
  - "abstract"
  syntax: "public abstract BinaryData getPolicyHash()"
  returns:
    description: "the policyHash value."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getPolicySigner()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getPolicySigner()"
  name: "getPolicySigner()"
  nameWithType: "AttestationResult.getPolicySigner()"
  summary: "Get the policySigner property: If the attestation policy was signed, this will contain the certificate used to sign the policy object."
  modifiers:
  - "abstract"
  syntax: "public abstract AttestationSigner getPolicySigner()"
  returns:
    description: "the policySigner value."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationSigner?alt=com.azure.security.attestation.models.AttestationSigner&text=AttestationSigner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getProductId()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getProductId()"
  name: "getProductId()"
  nameWithType: "AttestationResult.getProductId()"
  summary: "Get the productId property: The SGX Product ID for the enclave. The Product ID represents the ISVPRODID value from the enclave. See [oe\\_identity::product\\_id][oe_identity_product_id] for more information.\n\n\n[oe_identity_product_id]: https://openenclave.github.io/openenclave/api/struct__oe__identity_a7e04eefe0f0302d2f8c71dc3d06fd476.html"
  modifiers:
  - "abstract"
  syntax: "public abstract int getProductId()"
  returns:
    description: "the productId value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getRuntimeClaims()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getRuntimeClaims()"
  name: "getRuntimeClaims()"
  nameWithType: "AttestationResult.getRuntimeClaims()"
  summary: "Get the runtimeClaims property: Runtime Claims. If <xref uid=\"com.azure.security.attestation.models.AttestationDataInterpretation.JSON\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationDataInterpretation#JSON\"></xref> was specified in the <xref uid=\"com.azure.security.attestation.models.AttestationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationData\"></xref> for the RunTime data this will contain the input RunTimeData as JSON elements."
  modifiers:
  - "abstract"
  syntax: "public abstract Object getRuntimeClaims()"
  returns:
    description: "the RunTimeClaims value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getSgxCollateral()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getSgxCollateral()"
  name: "getSgxCollateral()"
  nameWithType: "AttestationResult.getSgxCollateral()"
  summary: "Get the sgxCollateral property: The SGX SVN value for the enclave. The SGX Collateral contains the HEX encoded SHA256 hash of each of the inputs to the attestation token."
  modifiers:
  - "abstract"
  syntax: "public abstract Object getSgxCollateral()"
  returns:
    description: "the sgxCollateral value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getSvn()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getSvn()"
  name: "getSvn()"
  nameWithType: "AttestationResult.getSvn()"
  summary: "Get the svn property: The SGX SVN value for the enclave. The SVN for the enclave should be incremented on every security update."
  modifiers:
  - "abstract"
  syntax: "public abstract int getSvn()"
  returns:
    description: "the svn value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getUniqueIdentifier()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getUniqueIdentifier()"
  name: "getUniqueIdentifier()"
  nameWithType: "AttestationResult.getUniqueIdentifier()"
  summary: "Get the Unique Identifier property: The Unique Identifier corresponds to the \"jti\" claim in a Json Web Token."
  modifiers:
  - "abstract"
  syntax: "public abstract String getUniqueIdentifier()"
  returns:
    description: "the jti value. See <a href=\"https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7\">RFC 7519 section 4.1.7</a>\n for more information."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getVerifierType()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getVerifierType()"
  name: "getVerifierType()"
  nameWithType: "AttestationResult.getVerifierType()"
  summary: "Get the verifierType property: The Attestation Type being attested. Normally this will be one of \"sgx\", or \"tpm\""
  modifiers:
  - "abstract"
  syntax: "public abstract String getVerifierType()"
  returns:
    description: "the verifierType value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.getVersion()"
  fullName: "com.azure.security.attestation.models.AttestationResult.getVersion()"
  name: "getVersion()"
  nameWithType: "AttestationResult.getVersion()"
  summary: "Get the version property: The Schema version of this structure. Current Value: 1.0."
  modifiers:
  - "abstract"
  syntax: "public abstract String getVersion()"
  returns:
    description: "the version value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.attestation.models.AttestationResult.isDebuggable()"
  fullName: "com.azure.security.attestation.models.AttestationResult.isDebuggable()"
  name: "isDebuggable()"
  nameWithType: "AttestationResult.isDebuggable()"
  summary: "Get the isDebuggable property: True if the enclave can be debugged, false otherwise. If the attestation evidence came from OpenEnclave, this corresponds to the OE\\_REPORT\\_ATTRIBUTES\\_DEBUG flag in the generated OpenEnclave report ([oe\\_identity::attributes][oe_identity_attributes] If the attestation evidence came from the Intel SGX SDK, this corresponds to the SGX\\_FLAGS\\_DEBUG flag.\n\n\n[oe_identity_attributes]: https://openenclave.io/apidocs/v0.17/struct__oe__identity_aaf1cd8db46a5f4f4156c97bfe265d3cd.html"
  modifiers:
  - "abstract"
  syntax: "public abstract Boolean isDebuggable()"
  returns:
    description: "the isDebuggable value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
metadata: {}
package: "com.azure.security.attestation.models"
artifact: com.azure:azure-security-attestation:1.1.1
