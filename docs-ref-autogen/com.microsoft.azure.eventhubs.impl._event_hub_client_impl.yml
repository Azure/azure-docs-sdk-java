### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  id: _event_hub_client_impl
  parent: com.microsoft.azure.eventhubs.impl
  children:
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create(final String,final RetryPolicy,final Executor)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createBatch(BatchOptions)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver(final String,final String,final EventPosition,final long)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createPartitionSender(final String)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver(final String,final String,final EventPosition)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getEventHubName()
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getPartitionRuntimeInformation(String)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation()
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.onClose()
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventDataBatch)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final Iterable<EventData>)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final Iterable<EventData>,final String)
  - com.microsoft.azure.eventhubs.impl._event_hub_client_impl.USER_AGENT
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: EventHubClientImpl
  nameWithType: EventHubClientImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventHubClientImpl
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 35
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public class EventHubClientImpl implements EventHubClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.eventhubs.impl.ClientEntity
  inheritedMembers:
  - com.microsoft.azure.eventhubs.impl._client_entity.ClientEntity(final String,final ClientEntity,final Executor)
  - com.microsoft.azure.eventhubs.impl._client_entity.close()
  - com.microsoft.azure.eventhubs._event_hub_client.close()
  - com.microsoft.azure.eventhubs.impl._client_entity.closeSync()
  - com.microsoft.azure.eventhubs._event_hub_client.closeSync()
  - com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
  - com.microsoft.azure.eventhubs._event_hub_client.createBatch()
  - com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiverSync(final String,final String,final EventPosition,final long)
  - com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiverSync(final String,final String,final EventPosition,final long,final ReceiverOptions)
  - com.microsoft.azure.eventhubs._event_hub_client.createPartitionSenderSync(final String)
  - com.microsoft.azure.eventhubs._event_hub_client.createReceiverSync(final String,final String,final EventPosition)
  - com.microsoft.azure.eventhubs._event_hub_client.createReceiverSync(final String,final String,final EventPosition,final ReceiverOptions)
  - com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)
  - com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final RetryPolicy,final Executor)
  - com.microsoft.azure.eventhubs._event_hub_client.DEFAULT_CONSUMER_GROUP_NAME
  - com.microsoft.azure.eventhubs.impl._client_entity.executor
  - com.microsoft.azure.eventhubs.impl._client_entity.getClientId()
  - com.microsoft.azure.eventhubs.impl._client_entity.getLastKnownError()
  - com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventData)
  - com.microsoft.azure.eventhubs._event_hub_client.sendSync(final Iterable<EventData>)
  - com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventDataBatch)
  - com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventData,final String)
  - com.microsoft.azure.eventhubs._event_hub_client.sendSync(final Iterable<EventData>,final String)
  - com.microsoft.azure.eventhubs.impl._client_entity.setClosed()
  - com.microsoft.azure.eventhubs.impl._client_entity.throwIfClosed()
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create(final String,final RetryPolicy,final Executor)
  id: create(final String,final RetryPolicy,final Executor)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  nameWithType: EventHubClientImpl.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 64
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> methods.</p>

    <p></p>
  syntax: &o4
    content: public static CompletableFuture<EventHubClient> create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: retryPolicy
      type: 93de0ef9com.microsoft.azure.eventhubs._retry_policy
      description: <p>A custom <xref uid="com.microsoft.azure.eventhubs._retry_policy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final RetryPolicy,final Executor)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>If Service Bus service encountered problems during connection creation. </p>
  - type: cbf33bbe
    description: <p>If the underlying Proton-J layer encounter network errors. </p>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createBatch(BatchOptions)
  id: createBatch(BatchOptions)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClientImpl.createBatch(BatchOptions options)
  fullName: final EventDataBatch com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch(BatchOptions options)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createBatch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 81
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.</p>

    <p></p>
  syntax:
    content: public final EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs._batch_options
      description: <p>see <xref uid="com.microsoft.azure.eventhubs._batch_options" data-throw-if-not-resolved="false">BatchOptions</xref> for more details </p>
    return:
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createBatch(BatchOptions)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if the Microsoft Azure Event Hubs service encountered problems during the operation. </p>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver(final String,final String,final EventPosition,final long)
  id: createEpochReceiver(final String,final String,final EventPosition,final long)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClientImpl.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 201
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <itemizedlist><listitem><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></listitem><listitem><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></listitem><listitem><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get <xref uid="com.microsoft.azure.eventhubs._receiver_disconnected_exception" data-throw-if-not-resolved="false">ReceiverDisconnectedException</xref> for all operations from that receiver. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> when it is completed. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if Service Bus service encountered problems during the operation. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_receiver
    description: PartitionReceiver
  - type: com.microsoft.azure.eventhubs._receiver_disconnected_exception
    description: ReceiverDisconnectedException
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
  id: createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClientImpl.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 207
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <itemizedlist><listitem><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></listitem><listitem><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></listitem><listitem><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get <xref uid="com.microsoft.azure.eventhubs._receiver_disconnected_exception" data-throw-if-not-resolved="false">ReceiverDisconnectedException</xref> for all operations from that receiver. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> when it is completed. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if Service Bus service encountered problems during the operation. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_receiver
    description: PartitionReceiver
  - type: com.microsoft.azure.eventhubs._receiver_disconnected_exception
    description: ReceiverDisconnectedException
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createPartitionSender(final String)
  id: createPartitionSender(final String)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createPartitionSender(final String partitionId)
  nameWithType: EventHubClientImpl.createPartitionSender(final String partitionId)
  fullName: final CompletableFuture<PartitionSender> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender(final String partitionId)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createPartitionSender*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 183
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Create a <xref uid="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false">PartitionSender</xref> which can publish <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s directly to a specific EventHub partition (sender type iii. in the below list). </p>

    <p>There are 3 patterns/ways to send to EventHubs: <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionSender> createPartitionSender(final String partitionId)
    parameters:
    - id: partitionId
      type: 3d93591e
      description: <p>partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to </p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_sendera08ddfce
      description: <p>a CompletableFuture that would result in a PartitionSenderImpl when it is completed. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if Service Bus service encountered problems during connection creation. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_sender
    description: PartitionSender
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver(final String,final String,final EventPosition)
  id: createReceiver(final String,final String,final EventPosition)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClientImpl.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 189
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance when it is completed. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if Service Bus service encountered problems during the operation. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_receiver
    description: PartitionReceiver
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
  id: createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClientImpl.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 195
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax:
    content: public final CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance when it is completed. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
  exceptions:
  - type: com.microsoft.azure.eventhubs._event_hub_exception
    description: <p>if Service Bus service encountered problems during the operation. </p>
  see:
  - type: com.microsoft.azure.eventhubs._partition_receiver
    description: PartitionReceiver
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getEventHubName()
  id: getEventHubName()
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: getEventHubName()
  nameWithType: EventHubClientImpl.getEventHubName()
  fullName: String com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName()
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getEventHubName*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 60
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public String getEventHubName()
    return:
      type: "26831127"
      description: <p>the name of the Event Hub this client is connected to. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.getEventHubName()
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getPartitionRuntimeInformation(String)
  id: getPartitionRuntimeInformation(String)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: getPartitionRuntimeInformation(String partitionId)
  nameWithType: EventHubClientImpl.getPartitionRuntimeInformation(String partitionId)
  fullName: CompletableFuture<PartitionRuntimeInformation> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation(String partitionId)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getPartitionRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 282
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Retrieves dynamic information about a partition of an event hub (see <xref uid="com.microsoft.azure.eventhubs._partition_runtime_information" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> for details. Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionRuntimeInformation> getPartitionRuntimeInformation(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition to get information about. Must be one of the partition ids returned by <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation()" data-throw-if-not-resolved="false">getRuntimeInformation</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_runtime_informationa08ddfce
      description: <p>CompletableFuture which returns an <xref uid="com.microsoft.azure.eventhubs._partition_runtime_information" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> on success, or null on timeout. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.getPartitionRuntimeInformation(String)
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation()
  id: getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: EventHubClientImpl.getRuntimeInformation()
  fullName: CompletableFuture<EventHubRuntimeInformation> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 252
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs._event_hub_runtime_information" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax: &o5
    content: public CompletableFuture<EventHubRuntimeInformation> getRuntimeInformation()
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_runtime_informationa08ddfce
      description: <p>CompletableFuture which returns an <xref uid="com.microsoft.azure.eventhubs._event_hub_runtime_information" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> on success, or null on timeout. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.getRuntimeInformation()
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.onClose()
  id: onClose()
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: onClose()
  nameWithType: EventHubClientImpl.onClose()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose()
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.onClose*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 213
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public CompletableFuture<Void> onClose()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)
  id: send(final EventData)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: send(final EventData data)
  nameWithType: EventHubClientImpl.send(final EventData data)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventData data)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 102
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <itemizedlist><listitem><p><xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></p></listitem></itemizedlist></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax: &o1
    content: public final CompletableFuture<Void> send(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)
  see:
  - type: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)
    description: send(EventData, String)
  - type: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
    description: PartitionSender::send(EventData)
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)
  id: send(final EventData,final String)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClientImpl.send(final EventData eventData, final String partitionKey)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventData eventData, final String partitionKey)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 142
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax: &o3
    content: public final CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)
  see:
  - type: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)
    description: send(EventData)
  - type: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
    description: PartitionSender::send(EventData)
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventDataBatch)
  id: send(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClientImpl.send(final EventDataBatch eventDatas)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 130
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax: &o2
    content: public final CompletableFuture<Void> send(final EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to send to EventHub </p>
    return:
      type: fc984e6f
      description: <p>a CompleteableFuture that can be completed when the send operations are done </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)
  see:
  - type: com.microsoft.azure.eventhubs._event_data_batch
    description: EventDataBatch
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final Iterable<EventData>)
  id: send(final Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: send(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClientImpl.send(final Iterable<EventData> eventDatas)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 116
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Send a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.  Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii. Send multiple <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().<xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create(final String,final RetryPolicy,final Executor)" data-throw-if-not-resolved="false">create()</xref>;

    <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> client = <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)" data-throw-if-not-resolved="false">EventHubClient.createSync</xref>("__connection__");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;} events = new LinkedList{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;}();}

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> sendEvent = new EventData(payloadBytes);

            Map{&lt;}String, String{&gt;} applicationProperties = new HashMap{&lt;}String, String{&gt;}();

            applicationProperties.put("from", "javaClient");

            sendEvent.setProperties(applicationProperties);

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    client.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p>for Exceptions refer to <xref uid="" data-throw-if-not-resolved="false">sendSync(Iterable)</xref></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<Void> send(final Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.send(final Iterable<EventData>)
  see:
  - type: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)
    description: send(EventData, String)
  - type: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
    description: PartitionSender::send(EventData)
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final Iterable<EventData>,final String)
  id: send(final Iterable<EventData>,final String)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: send(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClientImpl.send(final Iterable<EventData> eventDatas, final String partitionKey)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final Iterable<EventData> eventDatas, final String partitionKey)
  overload: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 160
  package: com.microsoft.azure.eventhubs.impl
  summary: >-
    <p>Send a 'batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.  Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.

    ii. Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).

    </pre></p>

    <p></p>
  syntax:
    content: public final CompletableFuture<Void> send(final Iterable<EventData> eventDatas, final String partitionKey)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>the batch of events to send to EventHub </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: fc984e6f
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
  overridden: com.microsoft.azure.eventhubs._event_hub_client.send(final Iterable<EventData>,final String)
  see:
  - type: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)
    description: send(EventData)
  - type: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
    description: PartitionSender::send(EventData)
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.USER_AGENT
  id: USER_AGENT
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  langs:
  - java
  name: USER_AGENT
  nameWithType: EventHubClientImpl.USER_AGENT
  fullName: String com.microsoft.azure.eventhubs.impl.EventHubClientImpl.USER_AGENT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventHubClientImpl.java
    startLine: 40
  package: com.microsoft.azure.eventhubs.impl
  summary: <p>It will be truncated to 128 characters </p>
  syntax:
    content: public static String USER_AGENT= null
    return:
      type: "26831127"
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getEventHubName*
  name: getEventHubName
  nameWithType: EventHubClientImpl.getEventHubName
  fullName: String com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getEventHubName
  package: com.microsoft.azure.eventhubs.impl
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_data_batch
    name: EventDataBatch
    fullName: com.microsoft.azure.eventhubs.EventDataBatch
    href: com.microsoft.azure.eventhubs._event_data_batch.yml
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createBatch*
  name: createBatch
  nameWithType: EventHubClientImpl.createBatch
  fullName: final EventDataBatch com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createBatch
  package: com.microsoft.azure.eventhubs.impl
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_data
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
- uid: fc984e6f
  spec.java:
  - name: final CompletableFuture<Void>
    fullName: final CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send*
  name: send
  nameWithType: EventHubClientImpl.send
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send
  package: com.microsoft.azure.eventhubs.impl
- uid: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: final Iterable<
    fullName: final Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 9971d449com.microsoft.azure.eventhubs._partition_sendera08ddfce
  spec.java:
  - name: final CompletableFuture<
    fullName: final CompletableFuture<
  - uid: com.microsoft.azure.eventhubs._partition_sender
    name: PartitionSender
    fullName: com.microsoft.azure.eventhubs.PartitionSender
    href: com.microsoft.azure.eventhubs._partition_sender.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createPartitionSender*
  name: createPartitionSender
  nameWithType: EventHubClientImpl.createPartitionSender
  fullName: final CompletableFuture<PartitionSender> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createPartitionSender
  package: com.microsoft.azure.eventhubs.impl
- uid: 93de0ef9com.microsoft.azure.eventhubs._event_position
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._event_position
    name: EventPosition
    fullName: com.microsoft.azure.eventhubs.EventPosition
    href: com.microsoft.azure.eventhubs._event_position.yml
- uid: 9971d449com.microsoft.azure.eventhubs._partition_receivera08ddfce
  spec.java:
  - name: final CompletableFuture<
    fullName: final CompletableFuture<
  - uid: com.microsoft.azure.eventhubs._partition_receiver
    name: PartitionReceiver
    fullName: com.microsoft.azure.eventhubs.PartitionReceiver
    href: com.microsoft.azure.eventhubs._partition_receiver.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createReceiver*
  name: createReceiver
  nameWithType: EventHubClientImpl.createReceiver
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createReceiver
  package: com.microsoft.azure.eventhubs.impl
- uid: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._receiver_options
    name: ReceiverOptions
    fullName: com.microsoft.azure.eventhubs.ReceiverOptions
    href: com.microsoft.azure.eventhubs._receiver_options.yml
- uid: 4c60ae65
  spec.java:
  - name: final long
    fullName: final long
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.createEpochReceiver*
  name: createEpochReceiver
  nameWithType: EventHubClientImpl.createEpochReceiver
  fullName: final CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.createEpochReceiver
  package: com.microsoft.azure.eventhubs.impl
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.onClose*
  name: onClose
  nameWithType: EventHubClientImpl.onClose
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.onClose
  package: com.microsoft.azure.eventhubs.impl
- uid: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_runtime_informationa08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.eventhubs._event_hub_runtime_information
    name: EventHubRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
    href: com.microsoft.azure.eventhubs._event_hub_runtime_information.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: EventHubClientImpl.getRuntimeInformation
  fullName: CompletableFuture<EventHubRuntimeInformation> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation
  package: com.microsoft.azure.eventhubs.impl
- uid: 9cdf14d0com.microsoft.azure.eventhubs._partition_runtime_informationa08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.eventhubs._partition_runtime_information
    name: PartitionRuntimeInformation
    fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
    href: com.microsoft.azure.eventhubs._partition_runtime_information.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getPartitionRuntimeInformation*
  name: getPartitionRuntimeInformation
  nameWithType: EventHubClientImpl.getPartitionRuntimeInformation
  fullName: CompletableFuture<PartitionRuntimeInformation> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getPartitionRuntimeInformation
  package: com.microsoft.azure.eventhubs.impl
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: 93de0ef9com.microsoft.azure.eventhubs._retry_policy
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs._retry_policy
    name: RetryPolicy
    fullName: com.microsoft.azure.eventhubs.RetryPolicy
    href: com.microsoft.azure.eventhubs._retry_policy.yml
- uid: 506a8fe9
  spec.java:
  - name: final Executor
    fullName: final Executor
- uid: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.eventhubs._event_hub_client
    name: EventHubClient
    fullName: com.microsoft.azure.eventhubs.EventHubClient
    href: com.microsoft.azure.eventhubs._event_hub_client.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create*
  name: create
  nameWithType: EventHubClientImpl.create
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl._client_entity.ClientEntity(final String,final ClientEntity,final Executor)
- uid: com.microsoft.azure.eventhubs.impl._client_entity.close()
- uid: com.microsoft.azure.eventhubs._event_hub_client.close()
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: close()
  nameWithType: EventHubClient.close()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.close()
  type: Method
  syntax:
    content: public CompletableFuture<Void> close()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs.impl._client_entity.closeSync()
- uid: com.microsoft.azure.eventhubs._event_hub_client.closeSync()
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: closeSync()
  nameWithType: EventHubClient.closeSync()
  fullName: void com.microsoft.azure.eventhubs.EventHubClient.closeSync()
  type: Method
  syntax:
    content: public void closeSync()
- uid: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: create(final String connectionString, final Executor executor)
  nameWithType: EventHubClient.create(final String connectionString, final Executor executor)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.EventHubClient.create(final String connectionString, final Executor executor)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> methods.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<EventHubClient> create(final String connectionString, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createBatch()
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createBatch()
  nameWithType: EventHubClient.createBatch()
  fullName: default EventDataBatch com.microsoft.azure.eventhubs.EventHubClient.createBatch()
  type: Method
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.</p>

    <p></p>
  syntax:
    content: public default EventDataBatch createBatch()
    return:
      type: c0f98273com.microsoft.azure.eventhubs._event_data_batch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiverSync(final String,final String,final EventPosition,final long)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  fullName: default PartitionReceiver com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)" data-throw-if-not-resolved="false">createEpochReceiver(String, String, EventPosition, long)</xref>.</p>

    <p></p>
  syntax:
    content: public default PartitionReceiver createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    return:
      type: c0f98273com.microsoft.azure.eventhubs._partition_receiver
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiverSync(final String,final String,final EventPosition,final long,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  fullName: default PartitionReceiver com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)" data-throw-if-not-resolved="false">createEpochReceiver(String, String, EventPosition, long)</xref>.</p>

    <p></p>
  syntax:
    content: public default PartitionReceiver createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: c0f98273com.microsoft.azure.eventhubs._partition_receiver
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createPartitionSenderSync(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createPartitionSenderSync(final String partitionId)
  nameWithType: EventHubClient.createPartitionSenderSync(final String partitionId)
  fullName: default PartitionSender com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(final String partitionId)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)" data-throw-if-not-resolved="false">createPartitionSender(String)</xref>.</p>

    <p></p>
  syntax:
    content: public default PartitionSender createPartitionSenderSync(final String partitionId)
    parameters:
    - id: partitionId
      type: 3d93591e
      description: <p>partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to </p>
    return:
      type: c0f98273com.microsoft.azure.eventhubs._partition_sender
      description: <p>PartitionSenderImpl which can be used to send events to a specific partition. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiverSync(final String,final String,final EventPosition)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  fullName: default PartitionReceiver com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)" data-throw-if-not-resolved="false">createReceiver(String, String, EventPosition)</xref>.</p>

    <p></p>
  syntax:
    content: public default PartitionReceiver createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    return:
      type: c0f98273com.microsoft.azure.eventhubs._partition_receiver
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiverSync(final String,final String,final EventPosition,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  fullName: default PartitionReceiver com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)" data-throw-if-not-resolved="false">createReceiver(String, String, EventPosition)</xref>.</p>

    <p></p>
  syntax:
    content: public default PartitionReceiver createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: c0f98273com.microsoft.azure.eventhubs._partition_receiver
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createSync(final String connectionString, final Executor executor)
  nameWithType: EventHubClient.createSync(final String connectionString, final Executor executor)
  fullName: static EventHubClient com.microsoft.azure.eventhubs.EventHubClient.createSync(final String connectionString, final Executor executor)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)" data-throw-if-not-resolved="false">create(String, Executor)</xref>.</p>

    <p></p>
  syntax:
    content: public static EventHubClient createSync(final String connectionString, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: com.microsoft.azure.eventhubs._event_hub_client
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final RetryPolicy,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createSync(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  nameWithType: EventHubClient.createSync(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  fullName: static EventHubClient com.microsoft.azure.eventhubs.EventHubClient.createSync(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)" data-throw-if-not-resolved="false">create(String, Executor)</xref>.</p>

    <p></p>
  syntax:
    content: public static EventHubClient createSync(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: retryPolicy
      type: 93de0ef9com.microsoft.azure.eventhubs._retry_policy
      description: <p>A custom <xref uid="com.microsoft.azure.eventhubs._retry_policy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: com.microsoft.azure.eventhubs._event_hub_client
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.DEFAULT_CONSUMER_GROUP_NAME
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: DEFAULT_CONSUMER_GROUP_NAME
  nameWithType: EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  fullName: String com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  type: Field
  syntax:
    content: public String DEFAULT_CONSUMER_GROUP_NAME= "$Default"
    return:
      type: "26831127"
- uid: com.microsoft.azure.eventhubs.impl._client_entity.executor
- uid: com.microsoft.azure.eventhubs.impl._client_entity.getClientId()
- uid: com.microsoft.azure.eventhubs.impl._client_entity.getLastKnownError()
- uid: com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventData)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: sendSync(final EventData data)
  nameWithType: EventHubClient.sendSync(final EventData data)
  fullName: default void com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData data)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>.</p>

    <p></p>
  syntax:
    content: public default void sendSync(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: d3846f97
- uid: com.microsoft.azure.eventhubs._event_hub_client.sendSync(final Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: sendSync(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.sendSync(final Iterable<EventData> eventDatas)
  fullName: default void com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData> eventDatas)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>.</p>

    <p></p>
  syntax:
    content: public default void sendSync(final Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: d3846f97
- uid: com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: sendSync(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.sendSync(final EventDataBatch eventDatas)
  fullName: default void com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref>.</p>

    <p></p>
  syntax:
    content: public default void sendSync(final EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to send to EventHub </p>
    return:
      type: d3846f97
- uid: com.microsoft.azure.eventhubs._event_hub_client.sendSync(final EventData,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: sendSync(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.sendSync(final EventData eventData, final String partitionKey)
  fullName: default void com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData eventData, final String partitionKey)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref>.</p>

    <p></p>
  syntax:
    content: public default void sendSync(final EventData eventData, final String partitionKey)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: d3846f97
- uid: com.microsoft.azure.eventhubs._event_hub_client.sendSync(final Iterable<EventData>,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClient.sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  fullName: default void com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  type: Method
  summary: >-
    <p>Synchronous version of <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>.</p>

    <p></p>
  syntax:
    content: public default void sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>the batch of events to send to EventHub </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: d3846f97
- uid: com.microsoft.azure.eventhubs.impl._client_entity.setClosed()
- uid: com.microsoft.azure.eventhubs.impl._client_entity.throwIfClosed()
- uid: com.microsoft.azure.eventhubs._event_hub_client
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: com.microsoft.azure.eventhubs.EventHubClient
  type: Interface
  summary: >-
    <p>Anchor class - all EventHub client operations STARTS here.</p>

    <p></p>
  syntax:
    content: public interface EventHubClient
- uid: com.microsoft.azure.eventhubs.impl._messaging_factory
  parent: com.microsoft.azure.eventhubs.impl
  href: com.microsoft.azure.eventhubs.impl._messaging_factory.yml
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.eventhubs.impl.MessagingFactory
  type: Class
  summary: <p>Abstracts all amqp related details and exposes <xref uid="com.microsoft.azure.eventhubs.impl._amqp_connection" data-throw-if-not-resolved="false">AmqpConnection</xref> object Manages connection life-cycle </p>
  syntax:
    content: public class MessagingFactory
- uid: com.microsoft.azure.eventhubs.impl._message_sender
  parent: com.microsoft.azure.eventhubs.impl
  href: com.microsoft.azure.eventhubs.impl._message_sender.yml
  name: MessageSender
  nameWithType: MessageSender
  fullName: com.microsoft.azure.eventhubs.impl.MessageSender
  type: Class
  summary: <p>Abstracts all amqp related details translates event-driven reactor model into async send Api </p>
  syntax:
    content: public class MessageSender
- uid: com.microsoft.azure.eventhubs._connection_string_builder
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._connection_string_builder.yml
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.eventhubs.ConnectionStringBuilder
  type: Class
  summary: "<p>\r\n  <xref uid=\"com.microsoft.azure.eventhubs._connection_string_builder\" data-throw-if-not-resolved=\"false\">ConnectionStringBuilder</xref> can be used to construct a connection string which can establish communication with Event Hub instances. In addition to constructing a connection string, the <xref uid=\"com.microsoft.azure.eventhubs._connection_string_builder\" data-throw-if-not-resolved=\"false\">ConnectionStringBuilder</xref> can be used to modify an existing connection string. </p>\r\n<p>Sample Code: <pre><code>// Construct a new connection string\r\n       ConnectionStringBuilder connectionStringBuilder = new ConnectionStringBuilder()\r\n           .setNamespaceName(\"EventHubsNamespaceName\")\r\n           .setEventHubName(\"EventHubsEntityName\")\r\n           .setSasKeyName(\"SharedAccessSignatureKeyName\")\r\n           .setSasKey(\"SharedAccessSignatureKey\")\r\n    \r\n    string connString = connectionStringBuilder.build();\r\n    \r\n    // Modify an existing connection string\r\n    ConnectionStringBuilder connectionStringBuilder = new ConnectionStringBuilder(existingConnectionString)\r\n        .setEventHubName(\"SomeOtherEventHubsName\")\r\n        .setOperationTimeout(Duration.ofSeconds(30)\r\n    \r\n    string connString = connectionStringBuilder.build();\r\n    </code></pre></p>\r\n<p>A connection string is basically a string consisting of key-value pairs separated by \";\". The basic format is {{ &lt;}key{&gt;}={ &lt;}value{&gt;}[;{ &lt;}key{&gt;}={ &lt;}value{&gt;}]} where supported key name are as follow: <itemizedlist><listitem><p>Endpoint - the URL that contains the EventHubs namespace </p></listitem><listitem><p>EntityPath - the EventHub name which you are connecting to </p></listitem><listitem><p>SharedAccessKeyName - the key name to the corresponding shared access policy rule for the namespace, or entity. </p></listitem><listitem><p>SharedAccessKey - the key for the corresponding shared access policy rule of the namespace or entity. </p></listitem></itemizedlist></p>"
  syntax:
    content: public class ConnectionStringBuilder
- uid: com.microsoft.azure.eventhubs._illegal_entity_exception
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._illegal_entity_exception.yml
  name: IllegalEntityException
  nameWithType: IllegalEntityException
  fullName: com.microsoft.azure.eventhubs.IllegalEntityException
  type: Class
  summary: >-
    <p>This exception is thrown for the following reasons: <itemizedlist><listitem><p>When the entity user attempted to connect does not exist </p></listitem><listitem><p>The entity user wants to connect is disabled </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public class IllegalEntityException
- uid: com.microsoft.azure.eventhubs._event_hub_client.getEventHubName()
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: getEventHubName()
  nameWithType: EventHubClient.getEventHubName()
  fullName: String com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
  type: Method
  syntax:
    content: public String getEventHubName()
    return:
      type: "26831127"
      description: <p>the name of the Event Hub this client is connected to. </p>
- uid: com.microsoft.azure.eventhubs._event_data_batch
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data_batch.yml
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
  type: Interface
  summary: <p>Helper for creating a batch/collection of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> objects to be used while Sending to EventHubs </p>
  syntax:
    content: public interface EventDataBatch
- uid: com.microsoft.azure.eventhubs._event_hub_client.createBatch(BatchOptions)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClient.createBatch(BatchOptions options)
  fullName: EventDataBatch com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions options)
  type: Method
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>.</p>

    <p></p>
  syntax:
    content: public EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs._batch_options
      description: <p>see <xref uid="com.microsoft.azure.eventhubs._batch_options" data-throw-if-not-resolved="false">BatchOptions</xref> for more details </p>
    return:
      type: com.microsoft.azure.eventhubs._event_data_batch
      description: <p>the empty <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service </p>
- uid: com.microsoft.azure.eventhubs._batch_options
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._batch_options.yml
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
  type: Class
  summary: "<p>\r\n  <xref uid=\"com.microsoft.azure.eventhubs._batch_options\" data-throw-if-not-resolved=\"false\">BatchOptions</xref> is used to create <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es.</p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es with <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client\" data-throw-if-not-resolved=\"false\">EventHubClient</xref>, then you can set a partitionKey and maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct <xref uid=\"com.microsoft.azure.eventhubs._batch_options\" data-throw-if-not-resolved=\"false\">BatchOptions</xref> with the void constructor. Default settings:<itemizedlist><listitem><p>partitionKey is null</p></listitem><listitem><p>maxMessageSize is the maximum allowed size</p></listitem></itemizedlist></p>\r\n<p>If you're creating <xref uid=\"com.microsoft.azure.eventhubs._event_data_batch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>es with <xref uid=\"com.microsoft.azure.eventhubs._partition_sender\" data-throw-if-not-resolved=\"false\">PartitionSender</xref>, then you can only set a maxMessageSize using the .with() method. Alternatively, if you'd like the default settings, simply construct <xref uid=\"com.microsoft.azure.eventhubs._batch_options\" data-throw-if-not-resolved=\"false\">BatchOptions</xref> with the void constructor. Default settings:<itemizedlist><listitem><p>maxMessageSize is the maximum allowed size</p></listitem><listitem><p>Note: if you set a partition key, an <xref uid=\"\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref> will be thrown.</p></listitem></itemizedlist></p>\r\n<p>To construct either type of batch, create a <xref uid=\"com.microsoft.azure.eventhubs._batch_options\" data-throw-if-not-resolved=\"false\">BatchOptions</xref> object and pass it into the appropriate createBatch method. If using <xref uid=\"com.microsoft.azure.eventhubs._partition_sender\" data-throw-if-not-resolved=\"false\">PartitionSender</xref>, then use (<xref uid=\"com.microsoft.azure.eventhubs._partition_sender.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\">PartitionSender#createBatch(BatchOptions)</xref>. If using <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client\" data-throw-if-not-resolved=\"false\">EventHubClient</xref>, then use <xref uid=\"com.microsoft.azure.eventhubs._event_hub_client.createBatch(BatchOptions)\" data-throw-if-not-resolved=\"false\">EventHubClient#createBatch(BatchOptions)</xref>.</p>\r\n<p>\r\n  <pre>\r\n    <code>// Note: For all examples, 'client' is an instance of EventHubClient. The usage is the same for PartitionSender,\r\n    however, you can NOT set a partition key when using PartitionSender\r\n    \r\n    // Create EventDataBatch with defaults\r\n    EventDataBatch edb1 = client.createBatch();\r\n    \r\n    // Create EventDataBatch with custom partitionKey\r\n    BatchOptions options = new BatchOptions().with( options -&gt; options.partitionKey = \"foo\");\r\n    EventDataBatch edb2 = client.createBatch(options);\r\n    \r\n    // Create EventDataBatch with custom partitionKey and maxMessageSize\r\n    BatchOptions options = new BatchOptions().with ( options -&gt; {\r\n        options.partitionKey = \"foo\";\r\n        options.maxMessageSize = 100 * 1024;\r\n    };\r\n    EventDataBatch edb3 = client.createBatch(options);\r\n    </code>\r\n  </pre>\r\n</p>"
  syntax:
    content: public class BatchOptions
- uid: com.microsoft.azure.eventhubs._event_hub_exception
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_exception.yml
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
  type: Class
  summary: <p>This is the base exception that service bus will produce for all error cases. </p>
  syntax:
    content: public class EventHubException
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false">getBytes()</xref> - if AMQPMessage.Body has Data section

    iii. <xref uid="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.send(final EventDataBatch eventDatas)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data_batch
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompleteableFuture that can be completed when the send operations are done </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData data)
  nameWithType: EventHubClient.send(final EventData data)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <itemizedlist><listitem><p><xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></p></listitem></itemizedlist></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventData data)
    parameters:
    - id: data
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  name: send(final EventData data)
  nameWithType: EventHubClientImpl.send(final EventData data)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventData data)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <itemizedlist><listitem><p><xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventDataBatch)" data-throw-if-not-resolved="false">send(EventDataBatch)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref></p></listitem><listitem><p><xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></p></listitem></itemizedlist></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> send's the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventDataBatch)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClientImpl.send(final EventDataBatch eventDatas)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClientImpl.send(final EventData eventData, final String partitionKey)
  fullName: final CompletableFuture<Void> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.send(final EventData eventData, final String partitionKey)
  type: Method
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax: *o3
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventData)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The target partition is pre-determined when this <xref uid="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false">PartitionSender</xref> was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">EventHubClient#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable)</xref>, <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">EventHubClient#send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender.send(EventDataBatch)
  parent: com.microsoft.azure.eventhubs._partition_sender
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  type: Method
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to a specific EventHub partition. The targeted partition is pre-determined when this <xref uid="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false">PartitionSender</xref> was created. A partitionKey cannot be set when using <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> with a <xref uid="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false">PartitionSender</xref>. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.  Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii. Send multiple <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs._event_data_batch
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventhubs._event_data_batch" data-throw-if-not-resolved="false">EventDataBatch</xref> to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operation is done.. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final Iterable<EventData>)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas)
  type: Method
  summary: >-
    <p>Send a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.  Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii. Send multiple <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().<xref uid="com.microsoft.azure.eventhubs._event_hub_client.create(final String,final Executor)" data-throw-if-not-resolved="false">create()</xref>;

    <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> client = <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createSync(final String,final Executor)" data-throw-if-not-resolved="false">EventHubClient.createSync</xref>("__connection__");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;} events = new LinkedList{&lt;}<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>{&gt;}();}

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> sendEvent = new EventData(payloadBytes);

            Map{&lt;}String, String{&gt;} applicationProperties = new HashMap{&lt;}String, String{&gt;}();

            applicationProperties.put("from", "javaClient");

            sendEvent.setProperties(applicationProperties);

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    client.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p>for Exceptions refer to <xref uid="" data-throw-if-not-resolved="false">sendSync(Iterable)</xref></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>batch of events to send to EventHub </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.create(final String,final RetryPolicy,final Executor)
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  name: create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  nameWithType: EventHubClientImpl.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.impl._event_hub_client_impl.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> methods.</p>

    <p></p>
  syntax: *o4
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.send(final EventData eventData, final String partitionKey)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final EventData eventData, final String partitionKey)
  type: Method
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
    parameters:
    - id: eventData
      type: 93de0ef9com.microsoft.azure.eventhubs._event_data
      description: <p>the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_client.send(final Iterable<EventData>,final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: send(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  type: Method
  summary: >-
    <p>Send a 'batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.  Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.

    ii. Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).

    </pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas, final String partitionKey)
    parameters:
    - id: eventDatas
      type: f42d2527com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>the batch of events to send to EventHub </p>
    - id: partitionKey
      type: 3d93591e
      description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false">EventData.SystemProperties#getPartitionKey()</xref></p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
- uid: com.microsoft.azure.eventhubs._partition_sender
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_sender.yml
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Interface
  summary: >-
    <p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">EventHubClient#send</xref> method.</p>

    <p></p>
  syntax:
    content: public interface PartitionSender
- uid: com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createPartitionSender(final String partitionId)
  nameWithType: EventHubClient.createPartitionSender(final String partitionId)
  fullName: CompletableFuture<PartitionSender> com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(final String partitionId)
  type: Method
  summary: >-
    <p>Create a <xref uid="com.microsoft.azure.eventhubs._partition_sender" data-throw-if-not-resolved="false">PartitionSender</xref> which can publish <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s directly to a specific EventHub partition (sender type iii. in the below list). </p>

    <p>There are 3 patterns/ways to send to EventHubs: <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData,final String)" data-throw-if-not-resolved="false">send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs._partition_sender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref> or <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref></pre></p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionSender> createPartitionSender(final String partitionId)
    parameters:
    - id: partitionId
      type: 3d93591e
      description: <p>partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref>'s to </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_sendera08ddfce
      description: <p>a CompletableFuture that would result in a PartitionSenderImpl when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._partition_receiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_receiver.yml
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  summary: >-
    <p>This is a logical representation of receiving from a EventHub partition. </p>

    <p>A <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> is tied to a ConsumerGroup + EventHub Partition combination. <itemizedlist><listitem><p>If an epoch based <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> (i.e., <xref uid="com.microsoft.azure.eventhubs._partition_receiver.getEpoch()" data-throw-if-not-resolved="false">PartitionReceiver.getEpoch</xref> != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p></listitem><listitem><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public interface PartitionReceiver
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  type: Method
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._event_position
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_position.yml
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
  type: Interface
  summary: <p>Defines a position of an <xref uid="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false">EventData</xref> in the event hub partition. The position can be an Offset, Sequence Number, or EnqueuedTime. </p>
  syntax:
    content: public interface EventPosition
- uid: com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  type: Method
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> instance when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._receiver_options
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._receiver_options.yml
  name: ReceiverOptions
  nameWithType: ReceiverOptions
  fullName: com.microsoft.azure.eventhubs.ReceiverOptions
  type: Class
  summary: <p>Represents various optional behaviors which can be turned on or off during the creation of a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. </p>
  syntax:
    content: public class ReceiverOptions
- uid: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  type: Method
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <itemizedlist><listitem><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></listitem><listitem><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></listitem><listitem><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get <xref uid="com.microsoft.azure.eventhubs._receiver_disconnected_exception" data-throw-if-not-resolved="false">ReceiverDisconnectedException</xref> for all operations from that receiver. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._receiver_disconnected_exception
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._receiver_disconnected_exception.yml
  name: ReceiverDisconnectedException
  nameWithType: ReceiverDisconnectedException
  fullName: com.microsoft.azure.eventhubs.ReceiverDisconnectedException
  type: Class
  summary: >-
    <p>This exception is thrown when a EventHubReceiver is being disconnected because of one of the following reason: <itemizedlist><listitem><p>user attempts to connect a non-epoch receiver to a event hub partition, when there is an epoch receiver connected to the partition. </p></listitem><listitem><p>you are using an epoch receiver for a given partition but another epoch receiver with a higher epoch value connects to the same partition. </p></listitem></itemizedlist>

    User should make sure either all code are using non-epoch receivers, or ensure that there is only one epoch receiver processing a given partition at any given point in time.</p>

    <p></p>
  syntax:
    content: public class ReceiverDisconnectedException
- uid: com.microsoft.azure.eventhubs._event_hub_client.createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  fullName: CompletableFuture<PartitionReceiver> com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  type: Method
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <itemizedlist><listitem><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></listitem><listitem><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></listitem><listitem><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get <xref uid="com.microsoft.azure.eventhubs._receiver_disconnected_exception" data-throw-if-not-resolved="false">ReceiverDisconnectedException</xref> for all operations from that receiver. </p></listitem></itemizedlist></p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
    parameters:
    - id: consumerGroupName
      type: 3d93591e
      description: <p>the consumer group name that this receiver should be grouped under. </p>
    - id: partitionId
      type: 3d93591e
      description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    - id: eventPosition
      type: 93de0ef9com.microsoft.azure.eventhubs._event_position
      description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs._event_position" data-throw-if-not-resolved="false">EventPosition</xref></p>
    - id: epoch
      type: 4c60ae65
      description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    - id: receiverOptions
      type: 93de0ef9com.microsoft.azure.eventhubs._receiver_options
      description: <p>the set of options to enable on the event hubs receiver </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_receivera08ddfce
      description: <p>a CompletableFuture that would result in a <xref uid="com.microsoft.azure.eventhubs._partition_receiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> when it is completed. </p>
- uid: com.microsoft.azure.eventhubs._event_hub_runtime_information
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_hub_runtime_information.yml
  name: EventHubRuntimeInformation
  nameWithType: EventHubRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.EventHubRuntimeInformation
  type: Class
  summary: <p>Holds information about Event Hubs which can come handy while performing data-plane operations like <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createPartitionSender(final String)" data-throw-if-not-resolved="false">EventHubClient#createPartitionSender(String)</xref> and <xref uid="com.microsoft.azure.eventhubs._event_hub_client.createReceiver(final String,final String,final EventPosition)" data-throw-if-not-resolved="false">EventHubClient#createReceiver(String, String, EventPosition)</xref></p>
  syntax:
    content: public class EventHubRuntimeInformation
- uid: com.microsoft.azure.eventhubs._event_hub_client.getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: getRuntimeInformation()
  nameWithType: EventHubClient.getRuntimeInformation()
  fullName: CompletableFuture<EventHubRuntimeInformation> com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
  type: Method
  summary: >-
    <p>Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs._event_hub_runtime_information" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<EventHubRuntimeInformation> getRuntimeInformation()
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_runtime_informationa08ddfce
      description: <p>CompletableFuture which returns an <xref uid="com.microsoft.azure.eventhubs._event_hub_runtime_information" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> on success, or null on timeout. </p>
- uid: com.microsoft.azure.eventhubs._partition_runtime_information
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._partition_runtime_information.yml
  name: PartitionRuntimeInformation
  nameWithType: PartitionRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.PartitionRuntimeInformation
  type: Class
  syntax:
    content: public class PartitionRuntimeInformation
- uid: com.microsoft.azure.eventhubs._event_hub_client.getPartitionRuntimeInformation(String)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: getPartitionRuntimeInformation(String partitionId)
  nameWithType: EventHubClient.getPartitionRuntimeInformation(String partitionId)
  fullName: CompletableFuture<PartitionRuntimeInformation> com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(String partitionId)
  type: Method
  summary: >-
    <p>Retrieves dynamic information about a partition of an event hub (see <xref uid="com.microsoft.azure.eventhubs._partition_runtime_information" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> for details. Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<PartitionRuntimeInformation> getPartitionRuntimeInformation(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition to get information about. Must be one of the partition ids returned by <xref uid="com.microsoft.azure.eventhubs._event_hub_client.getRuntimeInformation()" data-throw-if-not-resolved="false">getRuntimeInformation</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._partition_runtime_informationa08ddfce
      description: <p>CompletableFuture which returns an <xref uid="com.microsoft.azure.eventhubs._partition_runtime_information" data-throw-if-not-resolved="false">PartitionRuntimeInformation</xref> on success, or null on timeout. </p>
- uid: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs.impl._event_hub_client_impl
  href: com.microsoft.azure.eventhubs.impl._event_hub_client_impl.yml
  name: getRuntimeInformation()
  nameWithType: EventHubClientImpl.getRuntimeInformation()
  fullName: CompletableFuture<EventHubRuntimeInformation> com.microsoft.azure.eventhubs.impl.EventHubClientImpl.getRuntimeInformation()
  type: Method
  summary: >-
    <p>Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs._event_hub_runtime_information" data-throw-if-not-resolved="false">EventHubRuntimeInformation</xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax: *o5
- uid: com.microsoft.azure.eventhubs._event_hub_client.create(final String,final RetryPolicy,final Executor)
  parent: com.microsoft.azure.eventhubs._event_hub_client
  href: com.microsoft.azure.eventhubs._event_hub_client.yml
  name: create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  nameWithType: EventHubClient.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  fullName: static CompletableFuture<EventHubClient> com.microsoft.azure.eventhubs.EventHubClient.create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
  type: Method
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs._event_hub_client.send(final EventData)" data-throw-if-not-resolved="false">send(EventData)</xref> methods.</p>

    <p></p>
  syntax:
    content: public static CompletableFuture<EventHubClient> create(final String connectionString, final RetryPolicy retryPolicy, final Executor executor)
    parameters:
    - id: connectionString
      type: 3d93591e
      description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs._connection_string_builder" data-throw-if-not-resolved="false">ConnectionStringBuilder</xref> to construct a connectionString. </p>
    - id: retryPolicy
      type: 93de0ef9com.microsoft.azure.eventhubs._retry_policy
      description: <p>A custom <xref uid="com.microsoft.azure.eventhubs._retry_policy" data-throw-if-not-resolved="false">RetryPolicy</xref> to be used when communicating with EventHub. </p>
    - id: executor
      type: 506a8fe9
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">Executor</xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs._event_hub_client" data-throw-if-not-resolved="false">EventHubClient</xref>. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventhubs._event_hub_clienta08ddfce
      description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
- uid: com.microsoft.azure.eventhubs._retry_policy
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._retry_policy.yml
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: com.microsoft.azure.eventhubs.RetryPolicy
  type: Class
  syntax:
    content: public class RetryPolicy
