### YamlMime:ManagedReference
items:
- uid: "com.azure.core.amqp.implementation.RetryUtil"
  id: "RetryUtil"
  parent: "com.azure.core.amqp.implementation"
  children:
  - "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(reactor.core.publisher.Flux<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  - "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(reactor.core.publisher.Mono<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  - "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy(com.azure.core.amqp.AmqpRetryOptions)"
  langs:
  - "java"
  name: "RetryUtil"
  nameWithType: "RetryUtil"
  fullName: "com.azure.core.amqp.implementation.RetryUtil"
  type: "Class"
  package: "com.azure.core.amqp.implementation"
  summary: "Helper class to help with retry policies."
  syntax:
    content: "public class RetryUtil"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(reactor.core.publisher.Flux<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  id: "<T>withRetry(reactor.core.publisher.Flux<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  parent: "com.azure.core.amqp.implementation.RetryUtil"
  langs:
  - "java"
  name: "<T>withRetry(Flux<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  nameWithType: "RetryUtil.<T>withRetry(Flux<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(Flux<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  overload: "com.azure.core.amqp.implementation.RetryUtil.withRetry*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Given a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> will apply the retry policy to it when the operation times out."
  syntax:
    content: "public static Flux<T> <T>withRetry(Flux<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
    parameters:
    - id: "source"
      type: "reactor.core.publisher.Flux<T>"
      description: "The publisher to apply the retry policy to."
    - id: "operationTimeout"
      type: "java.time.Duration"
    - id: "retryPolicy"
      type: "com.azure.core.amqp.AmqpRetryPolicy"
    return:
      type: "reactor.core.publisher.Flux<T>"
      description: "A publisher that returns the results of the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> if any of the retry attempts are successful.\n         Otherwise, propagates a <xref uid=\"\" data-throw-if-not-resolved=\"false\">TimeoutException</xref>."
- uid: "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(reactor.core.publisher.Mono<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  id: "<T>withRetry(reactor.core.publisher.Mono<T>,java.time.Duration,com.azure.core.amqp.AmqpRetryPolicy)"
  parent: "com.azure.core.amqp.implementation.RetryUtil"
  langs:
  - "java"
  name: "<T>withRetry(Mono<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  nameWithType: "RetryUtil.<T>withRetry(Mono<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry(Mono<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
  overload: "com.azure.core.amqp.implementation.RetryUtil.withRetry*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Given a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will apply the retry policy to it when the operation times out."
  syntax:
    content: "public static Mono<T> <T>withRetry(Mono<T> source, Duration operationTimeout, AmqpRetryPolicy retryPolicy)"
    parameters:
    - id: "source"
      type: "reactor.core.publisher.Mono<T>"
      description: "The publisher to apply the retry policy to."
    - id: "operationTimeout"
      type: "java.time.Duration"
    - id: "retryPolicy"
      type: "com.azure.core.amqp.AmqpRetryPolicy"
    return:
      type: "reactor.core.publisher.Mono<T>"
      description: "A publisher that returns the results of the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> if any of the retry attempts are successful.\n         Otherwise, propagates a <xref uid=\"\" data-throw-if-not-resolved=\"false\">TimeoutException</xref>."
- uid: "com.azure.core.amqp.implementation.RetryUtil.RetryUtil()"
  id: "RetryUtil()"
  parent: "com.azure.core.amqp.implementation.RetryUtil"
  langs:
  - "java"
  name: "RetryUtil()"
  nameWithType: "RetryUtil.RetryUtil()"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.RetryUtil()"
  overload: "com.azure.core.amqp.implementation.RetryUtil.RetryUtil*"
  type: "Constructor"
  package: "com.azure.core.amqp.implementation"
  syntax:
    content: "private RetryUtil()"
- uid: "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy(com.azure.core.amqp.AmqpRetryOptions)"
  id: "getRetryPolicy(com.azure.core.amqp.AmqpRetryOptions)"
  parent: "com.azure.core.amqp.implementation.RetryUtil"
  langs:
  - "java"
  name: "getRetryPolicy(AmqpRetryOptions options)"
  nameWithType: "RetryUtil.getRetryPolicy(AmqpRetryOptions options)"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy(AmqpRetryOptions options)"
  overload: "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy*"
  type: "Method"
  package: "com.azure.core.amqp.implementation"
  summary: "Given a set of <xref uid=\"com.azure.core.amqp.AmqpRetryOptions\" data-throw-if-not-resolved=\"false\">options</xref>, creates the appropriate retry policy."
  syntax:
    content: "public static AmqpRetryPolicy getRetryPolicy(AmqpRetryOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.core.amqp.AmqpRetryOptions"
      description: "A set of options used to configure the retry policy."
    return:
      type: "com.azure.core.amqp.AmqpRetryPolicy"
      description: "A new retry policy configured with the given <code>options</code>."
references:
- uid: "com.azure.core.amqp.implementation.RetryUtil.RetryUtil*"
  name: "RetryUtil"
  nameWithType: "RetryUtil.RetryUtil"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.RetryUtil"
  package: "com.azure.core.amqp.implementation"
- uid: "com.azure.core.amqp.AmqpRetryOptions"
  name: "AmqpRetryOptions"
  nameWithType: "AmqpRetryOptions"
  fullName: "com.azure.core.amqp.AmqpRetryOptions"
- uid: "com.azure.core.amqp.AmqpRetryPolicy"
  name: "AmqpRetryPolicy"
  nameWithType: "AmqpRetryPolicy"
  fullName: "com.azure.core.amqp.AmqpRetryPolicy"
- uid: "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy*"
  name: "getRetryPolicy"
  nameWithType: "RetryUtil.getRetryPolicy"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.getRetryPolicy"
  package: "com.azure.core.amqp.implementation"
- uid: "reactor.core.publisher.Flux<T>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.core.amqp.implementation.RetryUtil.withRetry*"
  name: "<T>withRetry"
  nameWithType: "RetryUtil.<T>withRetry"
  fullName: "com.azure.core.amqp.implementation.RetryUtil.<T>withRetry"
  package: "com.azure.core.amqp.implementation"
- uid: "reactor.core.publisher.Mono<T>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
