### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.maps.mapcontrol.MapMath
  id: MapMath
  parent: com.microsoft.azure.maps.mapcontrol
  children:
  - com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_FEET_KILO
  - com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_METERS_KILO
  - com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_MILES_KILO
  - com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_NAUT_MILES_KILO
  - com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_YARDS_KILO
  - com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double,@DistanceUnits String,@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double,@DistanceUnits String,@DistanceUnits String,int)
  - com.microsoft.azure.maps.mapcontrol.MapMath.EARTH_RADIUS_SEMI_MAJOR_AXIS
  - com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position,double,double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position,double,double,@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position,Position)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position,Position,@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius()
  - com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius(@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getHeading(Position,Position)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position [])
  - com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position [],@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath(Position [],double,@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,@DistanceUnits String)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,@DistanceUnits String,double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position,Position)
  - com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position,Position,double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.INV_PI_BY_180
  - com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE
  - com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE_RENDER
  - com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LONGITUDE
  - com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE
  - com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE_RENDER
  - com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LONGITUDE
  - com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude(double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude(double)
  - com.microsoft.azure.maps.mapcontrol.MapMath.PI_BY_180
  - com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees(double)
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MapMath
  nameWithType: MapMath
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath
  type: Class
  source:
    remote: &o0
      path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
      branch: master
      repo: https://dev.azure.com/msazure/One/_git/Azure-IoT-Maps-AndroidSDK
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 11
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Geographic math helpers. </p>"
  syntax:
    content: public class MapMath
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_FEET_KILO
  id: CONVERSION_FACTOR_FEET_KILO
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: CONVERSION_FACTOR_FEET_KILO
  nameWithType: MapMath.CONVERSION_FACTOR_FEET_KILO
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_FEET_KILO
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 50
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant conversion factor for feet </p>"
  syntax:
    content: public static final double CONVERSION_FACTOR_FEET_KILO= 3280.8399
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_METERS_KILO
  id: CONVERSION_FACTOR_METERS_KILO
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: CONVERSION_FACTOR_METERS_KILO
  nameWithType: MapMath.CONVERSION_FACTOR_METERS_KILO
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_METERS_KILO
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 45
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant conversion factor for meters </p>"
  syntax:
    content: public static final double CONVERSION_FACTOR_METERS_KILO= 1000
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_MILES_KILO
  id: CONVERSION_FACTOR_MILES_KILO
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: CONVERSION_FACTOR_MILES_KILO
  nameWithType: MapMath.CONVERSION_FACTOR_MILES_KILO
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_MILES_KILO
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 55
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant conversion factor for miles </p>"
  syntax:
    content: public static final double CONVERSION_FACTOR_MILES_KILO= 0.62137119
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_NAUT_MILES_KILO
  id: CONVERSION_FACTOR_NAUT_MILES_KILO
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: CONVERSION_FACTOR_NAUT_MILES_KILO
  nameWithType: MapMath.CONVERSION_FACTOR_NAUT_MILES_KILO
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_NAUT_MILES_KILO
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 65
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant conversion factor for nautical miles </p>"
  syntax:
    content: public static final double CONVERSION_FACTOR_NAUT_MILES_KILO= 0.5399568
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_YARDS_KILO
  id: CONVERSION_FACTOR_YARDS_KILO
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: CONVERSION_FACTOR_YARDS_KILO
  nameWithType: MapMath.CONVERSION_FACTOR_YARDS_KILO
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.CONVERSION_FACTOR_YARDS_KILO
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 60
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant conversion factor for yards </p>"
  syntax:
    content: public static final double CONVERSION_FACTOR_YARDS_KILO= 1093.6133
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double,@DistanceUnits String,@DistanceUnits String)
  id: convertDistance(double,@DistanceUnits String,@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits)
  nameWithType: MapMath.convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 120
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Converts a distance from one distance units to another. Supported units: miles, nauticalMiles, yards, meters, kilometers, feet</p>\r\n<p></p>"
  syntax:
    content: public static double convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits)
    parameters:
    - id: distance
      type: a07dcde8
      description: <p>A number that represents a distance to convert. </p>
    - id: fromUnits
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>The distance units the original distance is in. </p>
    - id: toUnits
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>The desired distance units to convert to. </p>
    return:
      type: a07dcde8
      description: <p>A distance in the new units. No rounding will occur for this result </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double,@DistanceUnits String,@DistanceUnits String,int)
  id: convertDistance(double,@DistanceUnits String,@DistanceUnits String,int)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits, int decimals)
  nameWithType: MapMath.convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits, int decimals)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits, int decimals)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 216
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Converts a distance from one distance units to another. Supported units: miles, nauticalMiles, yards, meters, kilometers, feet and rounds result to n decimals</p>\r\n<p></p>"
  syntax:
    content: public static double convertDistance(double distance, @DistanceUnits String fromUnits, @DistanceUnits String toUnits, int decimals)
    parameters:
    - id: distance
      type: a07dcde8
      description: <p>A number that represents a distance to convert. </p>
    - id: fromUnits
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>The distance units the original distance is in. </p>
    - id: toUnits
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>The desired distance units to convert to. </p>
    - id: decimals
      type: f75371fa
      description: <p>How many decimals to round to </p>
    return:
      type: a07dcde8
      description: <p>A distance in the new units. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.EARTH_RADIUS_SEMI_MAJOR_AXIS
  id: EARTH_RADIUS_SEMI_MAJOR_AXIS
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: EARTH_RADIUS_SEMI_MAJOR_AXIS
  nameWithType: MapMath.EARTH_RADIUS_SEMI_MAJOR_AXIS
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.EARTH_RADIUS_SEMI_MAJOR_AXIS
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 70
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Earth Radius Semi Major Axis in meters </p>"
  syntax:
    content: public static final double EARTH_RADIUS_SEMI_MAJOR_AXIS= 6378137
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position,double,double)
  id: getDestination(Position,double,double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getDestination(Position origin, double heading, double distance)
  nameWithType: MapMath.getDestination(Position origin, double heading, double distance)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position origin, double heading, double distance)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 285
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates a destination position based on a starting position, a heading, a distance in meters </p>"
  syntax:
    content: public static Position getDestination(Position origin, double heading, double distance)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Position that the destination is relative to. </p>
    - id: heading
      type: a07dcde8
      description: <p>A heading angle between 0 - 360 degrees. 0 - North, 90 - East, 180 - South, 270 - West. </p>
    - id: distance
      type: a07dcde8
      description: <p>Distance that destination is away in meters </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>A position that is the specified distance away from the origin. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position,double,double,@DistanceUnits String)
  id: getDestination(Position,double,double,@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getDestination(Position origin, double heading, double distance, @DistanceUnits String units)
  nameWithType: MapMath.getDestination(Position origin, double heading, double distance, @DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination(Position origin, double heading, double distance, @DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 258
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates a destination position based on a starting position, a heading, a distance, and a distance unit type. </p>"
  syntax:
    content: public static Position getDestination(Position origin, double heading, double distance, @DistanceUnits String units)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Position that the destination is relative to. </p>
    - id: heading
      type: a07dcde8
      description: <p>A heading angle between 0 - 360 degrees. 0 - North, 90 - East, 180 - South, 270 - West. </p>
    - id: distance
      type: a07dcde8
      description: <p>Distance that destination is away. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>A position that is the specified distance away from the origin. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position,Position)
  id: getDistanceTo(Position,Position)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getDistanceTo(Position origin, Position destination)
  nameWithType: MapMath.getDistanceTo(Position origin, Position destination)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position origin, Position destination)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 341
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculate the distance between two position objects on the surface of the earth using the Haversine formula with default meters </p>"
  syntax:
    content: public static double getDistanceTo(Position origin, Position destination)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>First position to calculate distance between. </p>
    - id: destination
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Second position to calculate distance between. </p>
    return:
      type: a07dcde8
      description: <p>The shortest distance between two positions in meters </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position,Position,@DistanceUnits String)
  id: getDistanceTo(Position,Position,@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getDistanceTo(Position origin, Position destination, @DistanceUnits String units)
  nameWithType: MapMath.getDistanceTo(Position origin, Position destination, @DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo(Position origin, Position destination, @DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 325
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculate the distance between two position objects on the surface of the earth using the Haversine formula. </p>"
  syntax:
    content: public static double getDistanceTo(Position origin, Position destination, @DistanceUnits String units)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>First position to calculate distance between. </p>
    - id: destination
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Second position to calculate distance between. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. </p>
    return:
      type: a07dcde8
      description: <p>The shortest distance between two positions in the specified units. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius()
  id: getEarthRadius()
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getEarthRadius()
  nameWithType: MapMath.getEarthRadius()
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius()
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 246
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Retrieves the radius of the earth for WGS84 in default meters </p>"
  syntax:
    content: public static double getEarthRadius()
    return:
      type: a07dcde8
      description: <p>A number that represents the radius of the earth in a specific distance unit. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius(@DistanceUnits String)
  id: getEarthRadius(@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getEarthRadius(@DistanceUnits String units)
  nameWithType: MapMath.getEarthRadius(@DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius(@DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 238
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Retrieves the radius of the earth in a specific distance unit for WGS84. </p>"
  syntax:
    content: public static double getEarthRadius(@DistanceUnits String units)
    parameters:
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: '<p>Unit of distance measurement. Default: meters </p>'
    return:
      type: a07dcde8
      description: <p>A number that represents the radius of the earth in a specific distance unit. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getHeading(Position,Position)
  id: getHeading(Position,Position)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getHeading(Position origin, Position destination)
  nameWithType: MapMath.getHeading(Position origin, Position destination)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getHeading(Position origin, Position destination)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getHeading*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 366
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates the heading from one position object to another. </p>"
  syntax:
    content: public static double getHeading(Position origin, Position destination)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Point of origin. </p>
    - id: destination
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Destination to calculate relative heading to. </p>
    return:
      type: a07dcde8
      description: <p>A heading in degrees between 0 and 360. 0 degrees points due North. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position [])
  id: getLengthOfPath(Position [])
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getLengthOfPath(Position[] path)
  nameWithType: MapMath.getLengthOfPath(Position[] path)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position[] path)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 398
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates the distance between all position objects in an array. </p>"
  syntax:
    content: public static double getLengthOfPath(Position[] path)
    parameters:
    - id: path
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>The array of position objects that make up the path to calculate the length of. </p>
    return:
      type: a07dcde8
      description: <p>The distance between all positions in between all position objects in an array on the surface of a earth in meters. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position [],@DistanceUnits String)
  id: getLengthOfPath(Position [],@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getLengthOfPath(Position[] path, @DistanceUnits String units)
  nameWithType: MapMath.getLengthOfPath(Position[] path, @DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath(Position[] path, @DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 383
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates the distance between all position objects in an array. </p>"
  syntax:
    content: public static double getLengthOfPath(Position[] path, @DistanceUnits String units)
    parameters:
    - id: path
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>The array of position objects that make up the path to calculate the length of. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. </p>
    return:
      type: a07dcde8
      description: <p>The distance between all positions in between all position objects in an array on the surface of a earth in the specified units. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath(Position [],double,@DistanceUnits String)
  id: getPositionAlongPath(Position [],double,@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getPositionAlongPath(Position[] path, double distance, @DistanceUnits String units)
  nameWithType: MapMath.getPositionAlongPath(Position[] path, double distance, @DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath(Position[] path, double distance, @DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 410
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates the position object on a path that is a specified distance away from the start of the path. If the specified distance is longer than the length of the path, the last position of the path will be returned. </p>"
  syntax:
    content: public static Position getPositionAlongPath(Position[] path, double distance, @DistanceUnits String units)
    parameters:
    - id: path
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>A polyline or array of position coordinates that form a path. </p>
    - id: distance
      type: a07dcde8
      description: <p>The distance along the path (from the start) to calculate the position for. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. Default is meters. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>A position object that is the specified distance away from the start of the path when following the path. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int)
  id: getRegularPolygonPath(Position,double,int)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getRegularPolygonPath(Position origin, double radius, int numberOfPositions)
  nameWithType: MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 485
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates an array of position objects that are an equal distance away in meters from a central point to create a regular polygon. Rotates the polygon by nothing, when 0 the first position will align with the North </p>"
  syntax:
    content: public static Position [] getRegularPolygonPath(Position origin, double radius, int numberOfPositions)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Center of the regular polygon. </p>
    - id: radius
      type: a07dcde8
      description: <p>Radius of the regular polygon. </p>
    - id: numberOfPositions
      type: f75371fa
      description: <p>Number of positions the polygon should have. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>An array of position objects that form a regular polygon. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,@DistanceUnits String)
  id: getRegularPolygonPath(Position,double,int,@DistanceUnits String)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units)
  nameWithType: MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 472
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates an array of position objects that are an equal distance away from a central point to create a regular polygon. Rotates the polygon by nothing, when 0 the first position will align with the North </p>"
  syntax:
    content: public static Position [] getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Center of the regular polygon. </p>
    - id: radius
      type: a07dcde8
      description: <p>Radius of the regular polygon. </p>
    - id: numberOfPositions
      type: f75371fa
      description: <p>Number of positions the polygon should have. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>An array of position objects that form a regular polygon. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,@DistanceUnits String,double)
  id: getRegularPolygonPath(Position,double,int,@DistanceUnits String,double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units, double offset)
  nameWithType: MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units, double offset)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units, double offset)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 439
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates an array of position objects that are an equal distance away from a central point to create a regular polygon. </p>"
  syntax:
    content: public static Position [] getRegularPolygonPath(Position origin, double radius, int numberOfPositions, @DistanceUnits String units, double offset)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Center of the regular polygon. </p>
    - id: radius
      type: a07dcde8
      description: <p>Radius of the regular polygon. </p>
    - id: numberOfPositions
      type: f75371fa
      description: <p>Number of positions the polygon should have. </p>
    - id: units
      type: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
      description: <p>Unit of distance measurement. </p>
    - id: offset
      type: a07dcde8
      description: <p>An offset to rotate the polygon. When 0 the first position will align with North. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>An array of position objects that form a regular polygon. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position,double,int,double)
  id: getRegularPolygonPath(Position,double,int,double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: getRegularPolygonPath(Position origin, double radius, int numberOfPositions, double offset)
  nameWithType: MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, double offset)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath(Position origin, double radius, int numberOfPositions, double offset)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 459
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates an array of position objects that are an equal distance away in meters from a central point to create a regular polygon. </p>"
  syntax:
    content: public static Position [] getRegularPolygonPath(Position origin, double radius, int numberOfPositions, double offset)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Center of the regular polygon. </p>
    - id: radius
      type: a07dcde8
      description: <p>Radius of the regular polygon. </p>
    - id: numberOfPositions
      type: f75371fa
      description: <p>Number of positions the polygon should have. </p>
    - id: offset
      type: a07dcde8
      description: <p>An offset to rotate the polygon. When 0 the first position will align with North. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
      description: <p>An array of position objects that form a regular polygon. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position,Position)
  id: interpolate(Position,Position)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: interpolate(Position origin, Position destination)
  nameWithType: MapMath.interpolate(Position origin, Position destination)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position origin, Position destination)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 508
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates a position object that is a 0.5 distance between two position objects. </p>"
  syntax:
    content: public static Position interpolate(Position origin, Position destination)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>First position to calculate mid-point between. </p>
    - id: destination
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Second position to calculate mid-point between. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>A position that lies 0.5 of the distance between two position objects, relative to the first position object. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position,Position,double)
  id: interpolate(Position,Position,double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: interpolate(Position origin, Position destination, double fraction)
  nameWithType: MapMath.interpolate(Position origin, Position destination, double fraction)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate(Position origin, Position destination, double fraction)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 496
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Calculates a position object that is a fractional distance between two position objects. </p>"
  syntax:
    content: public static Position interpolate(Position origin, Position destination, double fraction)
    parameters:
    - id: origin
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>First position to calculate mid-point between. </p>
    - id: destination
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>Second position to calculate mid-point between. </p>
    - id: fraction
      type: a07dcde8
      description: <p>The fractional parameter to calculate a mid-point for. </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.data.Position
      description: <p>A position that lies a fraction of the distance between two position objects, relative to the first position object. </p>
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.INV_PI_BY_180
  id: INV_PI_BY_180
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: INV_PI_BY_180
  nameWithType: MapMath.INV_PI_BY_180
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.INV_PI_BY_180
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 80
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant for 180 / Math.PI </p>"
  syntax:
    content: public static final double INV_PI_BY_180= 180 / Math.PI
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE
  id: MAX_LATITUDE
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MAX_LATITUDE
  nameWithType: MapMath.MAX_LATITUDE
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 25
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Max Latitude in degrees </p>"
  syntax:
    content: public static final double MAX_LATITUDE= 90.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE_RENDER
  id: MAX_LATITUDE_RENDER
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MAX_LATITUDE_RENDER
  nameWithType: MapMath.MAX_LATITUDE_RENDER
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LATITUDE_RENDER
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 35
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Mapbox max Latitude in degrees </p>"
  syntax:
    content: public static final double MAX_LATITUDE_RENDER= 85.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LONGITUDE
  id: MAX_LONGITUDE
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MAX_LONGITUDE
  nameWithType: MapMath.MAX_LONGITUDE
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MAX_LONGITUDE
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 15
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Max Longitude in degrees </p>"
  syntax:
    content: public static final double MAX_LONGITUDE= 180.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE
  id: MIN_LATITUDE
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MIN_LATITUDE
  nameWithType: MapMath.MIN_LATITUDE
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 30
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Minimum Latitude in degrees </p>"
  syntax:
    content: public static final double MIN_LATITUDE= -90.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE_RENDER
  id: MIN_LATITUDE_RENDER
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MIN_LATITUDE_RENDER
  nameWithType: MapMath.MIN_LATITUDE_RENDER
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LATITUDE_RENDER
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 40
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Mapbox min Latitude in degrees </p>"
  syntax:
    content: public static final double MIN_LATITUDE_RENDER= -85.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LONGITUDE
  id: MIN_LONGITUDE
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: MIN_LONGITUDE
  nameWithType: MapMath.MIN_LONGITUDE
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.MIN_LONGITUDE
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 20
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Minimum Longitude in degrees </p>"
  syntax:
    content: public static final double MIN_LONGITUDE= -180.0
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude(double)
  id: normalizeLatitude(double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: normalizeLatitude(double lat)
  nameWithType: MapMath.normalizeLatitude(double lat)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude(double lat)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 86
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Normalizes a latitude value between -90 and 90 degrees. </p>"
  syntax:
    content: public static double normalizeLatitude(double lat)
    parameters:
    - id: lat
      type: a07dcde8
      description: <p>The latitude value to normalize. </p>
    return:
      type: a07dcde8
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude(double)
  id: normalizeLongitude(double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: normalizeLongitude(double lng)
  nameWithType: MapMath.normalizeLongitude(double lng)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude(double lng)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 102
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Normalizes a longitude value between -180 and 180 degrees. </p>"
  syntax:
    content: public static double normalizeLongitude(double lng)
    parameters:
    - id: lng
      type: a07dcde8
      description: <p>The longitude value to normalize. </p>
    return:
      type: a07dcde8
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.PI_BY_180
  id: PI_BY_180
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: PI_BY_180
  nameWithType: MapMath.PI_BY_180
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.PI_BY_180
  type: Field
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 75
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>A constant for Math.PI / 180 </p>"
  syntax:
    content: public static final double PI_BY_180= Math.PI / 180
    return:
      type: bc185a0c
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees(double)
  id: toDegrees(double)
  parent: com.microsoft.azure.maps.mapcontrol.MapMath
  href: com.microsoft.azure.maps.mapcontrol.MapMath.yml
  langs:
  - java
  name: toDegrees(double angle)
  nameWithType: MapMath.toDegrees(double angle)
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees(double angle)
  overload: com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/MapMath.java
    startLine: 303
  package: com.microsoft.azure.maps.mapcontrol
  summary: "<p>Converts an angle that is in radians to degrees. Angle * (180 / PI). </p>"
  syntax:
    content: public static double toDegrees(double angle)
    parameters:
    - id: angle
      type: a07dcde8
      description: <p>An angle in radians. </p>
    return:
      type: a07dcde8
      description: <p>An angle in degrees. </p>
references:
- uid: bc185a0c
  spec.java:
  - name: final double
    fullName: final double
- uid: a07dcde8
  spec.java:
  - name: double
    fullName: double
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude*
  name: normalizeLatitude
  nameWithType: MapMath.normalizeLatitude
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLatitude
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude*
  name: normalizeLongitude
  nameWithType: MapMath.normalizeLongitude
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.normalizeLongitude
  package: com.microsoft.azure.maps.mapcontrol
- uid: 95d28e51com.microsoft.azure.maps.mapcontrol.math.DistanceUnits69ccf6ef
  spec.java:
  - name: '@'
    fullName: '@'
  - uid: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits
    name: DistanceUnits
    fullName: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits
    href: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits.yml
  - name: " String"
    fullName: " String"
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance*
  name: convertDistance
  nameWithType: MapMath.convertDistance
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.convertDistance
  package: com.microsoft.azure.maps.mapcontrol
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius*
  name: getEarthRadius
  nameWithType: MapMath.getEarthRadius
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getEarthRadius
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination*
  name: getDestination
  nameWithType: MapMath.getDestination
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDestination
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees*
  name: toDegrees
  nameWithType: MapMath.toDegrees
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.toDegrees
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo*
  name: getDistanceTo
  nameWithType: MapMath.getDistanceTo
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getDistanceTo
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getHeading*
  name: getHeading
  nameWithType: MapMath.getHeading
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getHeading
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.data.Positione5b41c5f
  spec.java:
  - uid: com.microsoft.azure.maps.mapcontrol.data.Position
    name: Position
    fullName: com.microsoft.azure.maps.mapcontrol.data.Position
    href: com.microsoft.azure.maps.mapcontrol.data.Position.yml
  - name: " []"
    fullName: " []"
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath*
  name: getLengthOfPath
  nameWithType: MapMath.getLengthOfPath
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getLengthOfPath
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath*
  name: getPositionAlongPath
  nameWithType: MapMath.getPositionAlongPath
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getPositionAlongPath
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath*
  name: getRegularPolygonPath
  nameWithType: MapMath.getRegularPolygonPath
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.getRegularPolygonPath
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate*
  name: interpolate
  nameWithType: MapMath.interpolate
  fullName: com.microsoft.azure.maps.mapcontrol.MapMath.interpolate
  package: com.microsoft.azure.maps.mapcontrol
- uid: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits
  parent: com.microsoft.azure.maps.mapcontrol.math
  href: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits.yml
  name: DistanceUnits
  nameWithType: DistanceUnits
  fullName: com.microsoft.azure.maps.mapcontrol.math.DistanceUnits
  type: Interface
  syntax:
    content: public interface DistanceUnits
- uid: com.microsoft.azure.maps.mapcontrol.data.Position
  parent: com.microsoft.azure.maps.mapcontrol.data
  href: com.microsoft.azure.maps.mapcontrol.data.Position.yml
  name: Position
  nameWithType: Position
  fullName: com.microsoft.azure.maps.mapcontrol.data.Position
  type: Class
  summary: "<p>A GeoJSON Position object - an array that specifies the longitude and latitude of a location. The full description is detailed in [RFC 7946]<xref uid=\"\" data-throw-if-not-resolved=\"false\">https://tools.ietf.org/html/rfc7946#section-3.1.1</xref>. </p>"
  syntax:
    content: public class Position
