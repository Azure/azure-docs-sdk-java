### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.ServiceRemotingMessageHeaders()
  name: ServiceRemotingMessageHeaders()
  nameWithType: ServiceRemotingMessageHeaders.ServiceRemotingMessageHeaders()
  syntax: public ServiceRemotingMessageHeaders()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.ServiceRemotingMessageHeaders()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.addHeader(String headerName, byte[] headerValue)
  name: addHeader(String headerName, byte[] headerValue)
  nameWithType: ServiceRemotingMessageHeaders.addHeader(String headerName, byte[] headerValue)
  parameters:
  - description: <p>Header Name </p>
    name: headerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>header value </p>
    name: headerValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="FabricElementAlreadyExistsException?alt=FabricElementAlreadyExistsException&text=FabricElementAlreadyExistsException" data-throw-if-not-resolved="False"/>
    description: <p>Throws FabricElementAlreadyExistsException if a header with the same name already exists. </p>
  summary: >-
    <p>Adds a new header with the specified name and value.</p>

    <p></p>
  syntax: public void addHeader(String headerName, byte[] headerValue)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.addHeader(String,byte [])
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.deserialize(byte[] buffer)
  name: deserialize(byte[] buffer)
  nameWithType: ServiceRemotingMessageHeaders.deserialize(byte[] buffer)
  parameters:
  - description: <p>buffer </p>
    name: buffer
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>throws IOException </p>
  - type: <xref href="ClassNotFoundException?alt=ClassNotFoundException&text=ClassNotFoundException" data-throw-if-not-resolved="False"/>
    description: <p>throws ClassNotFoundException </p>
  returns:
    description: <p>De-serialized headers </p>
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>De-serializes the byte array to a ServiceRemotingMessageHeaders object</p>

    <p></p>
  syntax: public static ServiceRemotingMessageHeaders deserialize(byte[] buffer)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.deserialize(byte [])
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getCallContext()
  name: getCallContext()
  nameWithType: ServiceRemotingMessageHeaders.getCallContext()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getCallContext()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getCallContext()
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getCancellationHeaderName()
  name: getCancellationHeaderName()
  nameWithType: ServiceRemotingMessageHeaders.getCancellationHeaderName()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public static String getCancellationHeaderName()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getCancellationHeaderName()
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getHeaders()
  name: getHeaders()
  nameWithType: ServiceRemotingMessageHeaders.getHeaders()
  returns:
    type: <xref href="HashMap%3CString%2C+byte%5B%5D%3E?alt=HashMap%3CString%2C+byte%5B%5D%3E&text=HashMap%3CString%2C+byte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  syntax: public HashMap<String, byte[]> getHeaders()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getHeaders()
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getHeaderValue(String headerName)
  name: getHeaderValue(String headerName)
  nameWithType: ServiceRemotingMessageHeaders.getHeaderValue(String headerName)
  parameters:
  - description: <p>Header Name </p>
    name: headerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Header value </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the header with the specified name</p>

    <p></p>
  syntax: public byte [] getHeaderValue(String headerName)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getHeaderValue(String)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getInterfaceId()
  name: getInterfaceId()
  nameWithType: ServiceRemotingMessageHeaders.getInterfaceId()
  returns:
    description: <p>Interface id </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The interface id of the remote interface.</p>

    <p></p>
  syntax: public int getInterfaceId()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getInterfaceId()
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getMethodId()
  name: getMethodId()
  nameWithType: ServiceRemotingMessageHeaders.getMethodId()
  returns:
    description: <p>Method id </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The methodId of the remote method</p>

    <p></p>
  syntax: public int getMethodId()
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.getMethodId()
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.serialize(ServiceRemotingMessageHeaders msg)
  name: serialize(ServiceRemotingMessageHeaders msg)
  nameWithType: ServiceRemotingMessageHeaders.serialize(ServiceRemotingMessageHeaders msg)
  parameters:
  - description: <p>Headers </p>
    name: msg
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>Throws IOException. </p>
  returns:
    description: <p>The serialized byte array </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Serializes the headers to a byte array</p>

    <p></p>
  syntax: public static byte [] serialize(ServiceRemotingMessageHeaders msg)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.serialize(ServiceRemotingMessageHeaders)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setCallContext(String callContext)
  name: setCallContext(String callContext)
  nameWithType: ServiceRemotingMessageHeaders.setCallContext(String callContext)
  parameters:
  - name: callContext
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setCallContext(String callContext)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setCallContext(String)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setHeaders(HashMap<String, byte[]> headers)
  name: setHeaders(HashMap<String, byte[]> headers)
  nameWithType: ServiceRemotingMessageHeaders.setHeaders(HashMap<String, byte[]> headers)
  parameters:
  - description: <p>Header Name </p>
    name: headers
    type: <xref href="HashMap%3CString%2C+byte%5B%5D%3E?alt=HashMap%3CString%2C+byte%5B%5D%3E&text=HashMap%3CString%2C+byte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a new header with the specified name and value.</p>

    <p></p>
  syntax: public void setHeaders(HashMap<String, byte[]> headers)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setHeaders(HashMap<String, byte[]>)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setInterfaceId(int interfaceId)
  name: setInterfaceId(int interfaceId)
  nameWithType: ServiceRemotingMessageHeaders.setInterfaceId(int interfaceId)
  parameters:
  - description: <p>interface Id </p>
    name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The interface id of the remote interface.</p>

    <p></p>
  syntax: public void setInterfaceId(int interfaceId)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setInterfaceId(int)
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setMethodId(int methodId)
  name: setMethodId(int methodId)
  nameWithType: ServiceRemotingMessageHeaders.setMethodId(int methodId)
  parameters:
  - description: <p>method Id </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The methodId of the remote method</p>

    <p></p>
  syntax: public void setMethodId(int methodId)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders.setMethodId(int)
nameWithType: ServiceRemotingMessageHeaders
syntax: public class ServiceRemotingMessageHeaders
type: class
uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders
name: ServiceRemotingMessageHeaders
package: microsoft.servicefabric.services.remoting
summary: <p>Specifies the headers that are sent along with a ServiceRemoting message. </p>
metadata: {}
