### YamlMime:ManagedReference
items:
- uid: com.azure.digitaltwins.core.BasicDigitalTwin
  id: BasicDigitalTwin
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core
  children:
  - com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin(java.lang.String)
  - com.azure.digitaltwins.core.BasicDigitalTwin.addToContents(java.lang.String,java.lang.Object)
  - com.azure.digitaltwins.core.BasicDigitalTwin.getContents()
  - com.azure.digitaltwins.core.BasicDigitalTwin.getETag()
  - com.azure.digitaltwins.core.BasicDigitalTwin.getId()
  - com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata()
  - com.azure.digitaltwins.core.BasicDigitalTwin.setETag(java.lang.String)
  - com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata(com.azure.digitaltwins.core.BasicDigitalTwinMetadata)
  langs:
  - java
  name: BasicDigitalTwin
  nameWithType: BasicDigitalTwin
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin
  type: Class
  package: com.azure.digitaltwins.core
  summary: >-
    An optional, helper class for deserializing a digital twin. Only properties with non-null values are included.


    Note that this class uses <xref uid="" data-throw-if-not-resolved="false">JsonProperty</xref> from the Jackson serialization library. Because of this, this type will only work if the default json serializer is used by the digital twins client or if the custom json serializer uses Jackson as well. In order to use a different json library, a new BasicDigitalTwin class must be constructed and have its json properties tagged by the annotation used by that json library.
  syntax:
    content: public final class BasicDigitalTwin
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin()
  id: BasicDigitalTwin()
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: BasicDigitalTwin()
  nameWithType: BasicDigitalTwin.BasicDigitalTwin()
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin()
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin*
  type: Constructor
  package: com.azure.digitaltwins.core
  syntax:
    content: private BasicDigitalTwin()
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin(java.lang.String)
  id: BasicDigitalTwin(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: BasicDigitalTwin(String digitalTwinId)
  nameWithType: BasicDigitalTwin.BasicDigitalTwin(String digitalTwinId)
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin(String digitalTwinId)
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin*
  type: Constructor
  package: com.azure.digitaltwins.core
  summary: Construct a basic digital twin.
  syntax:
    content: public BasicDigitalTwin(String digitalTwinId)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin. The Id is unique within the service and case sensitive.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.addToContents(java.lang.String,java.lang.Object)
  id: addToContents(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: addToContents(String key, Object value)
  nameWithType: BasicDigitalTwin.addToContents(String key, Object value)
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.addToContents(String key, Object value)
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.addToContents*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Adds an additional custom property to the digital twin contents. This field will contain any contents of the digital twin that are not already defined by the other strong types of this class.
  syntax:
    content: public BasicDigitalTwin addToContents(String key, Object value)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the additional property to be added to the digital twin.
    - id: value
      type: java.lang.Object
      description: The value of the additional property to be added to the digital twin.
    return:
      type: com.azure.digitaltwins.core.BasicDigitalTwin
      description: The BasicDigitalTwin object itself.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getContents()
  id: getContents()
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: getContents()
  nameWithType: BasicDigitalTwin.getContents()
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getContents()
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.getContents*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the additional custom contents of the digital twin. This field will contain any contents of the digital twin that are not already defined by the other strong types of this class.
  syntax:
    content: public Map<String,Object> getContents()
    return:
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: The additional contents of the digital twin. This field will contain any contents of the digital twin that are not already defined by the other strong types of this class.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getETag()
  id: getETag()
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: getETag()
  nameWithType: BasicDigitalTwin.getETag()
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getETag()
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.getETag*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
  syntax:
    content: public String getETag()
    return:
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getId()
  id: getId()
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: getId()
  nameWithType: BasicDigitalTwin.getId()
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getId()
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.getId*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata()
  id: getMetadata()
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: getMetadata()
  nameWithType: BasicDigitalTwin.getMetadata()
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata()
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Gets the information about the model a digital twin conforms to. This field is present on every digital twin.
  syntax:
    content: public BasicDigitalTwinMetadata getMetadata()
    return:
      type: com.azure.digitaltwins.core.BasicDigitalTwinMetadata
      description: The information about the model a digital twin conforms to. This field is present on every digital twin.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.setETag(java.lang.String)
  id: setETag(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: setETag(String etag)
  nameWithType: BasicDigitalTwin.setETag(String etag)
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.setETag(String etag)
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.setETag*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Sets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
  syntax:
    content: public BasicDigitalTwin setETag(String etag)
    parameters:
    - id: etag
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
    return:
      type: com.azure.digitaltwins.core.BasicDigitalTwin
      description: The BasicDigitalTwin object itself.
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata(com.azure.digitaltwins.core.BasicDigitalTwinMetadata)
  id: setMetadata(com.azure.digitaltwins.core.BasicDigitalTwinMetadata)
  artifact: com.azure:azure-digitaltwins-core:1.0.0
  parent: com.azure.digitaltwins.core.BasicDigitalTwin
  langs:
  - java
  name: setMetadata(BasicDigitalTwinMetadata metadata)
  nameWithType: BasicDigitalTwin.setMetadata(BasicDigitalTwinMetadata metadata)
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata(BasicDigitalTwinMetadata metadata)
  overload: com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata*
  type: Method
  package: com.azure.digitaltwins.core
  summary: Sets the information about the model a digital twin conforms to. This field is present on every digital twin.
  syntax:
    content: public BasicDigitalTwin setMetadata(BasicDigitalTwinMetadata metadata)
    parameters:
    - id: metadata
      type: com.azure.digitaltwins.core.BasicDigitalTwinMetadata
      description: The information about the model a digital twin conforms to. This field is present on every digital twin.
    return:
      type: com.azure.digitaltwins.core.BasicDigitalTwin
      description: The BasicDigitalTwin object itself.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin*
  name: BasicDigitalTwin
  nameWithType: BasicDigitalTwin.BasicDigitalTwin
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.BasicDigitalTwin
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getId*
  name: getId
  nameWithType: BasicDigitalTwin.getId
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getId
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getETag*
  name: getETag
  nameWithType: BasicDigitalTwin.getETag
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getETag
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.setETag*
  name: setETag
  nameWithType: BasicDigitalTwin.setETag
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.setETag
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicDigitalTwinMetadata
  name: BasicDigitalTwinMetadata
  nameWithType: BasicDigitalTwinMetadata
  fullName: com.azure.digitaltwins.core.BasicDigitalTwinMetadata
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata*
  name: getMetadata
  nameWithType: BasicDigitalTwin.getMetadata
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getMetadata
  package: com.azure.digitaltwins.core
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata*
  name: setMetadata
  nameWithType: BasicDigitalTwin.setMetadata
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.setMetadata
  package: com.azure.digitaltwins.core
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.getContents*
  name: getContents
  nameWithType: BasicDigitalTwin.getContents
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.getContents
  package: com.azure.digitaltwins.core
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.digitaltwins.core.BasicDigitalTwin.addToContents*
  name: addToContents
  nameWithType: BasicDigitalTwin.addToContents
  fullName: com.azure.digitaltwins.core.BasicDigitalTwin.addToContents
  package: com.azure.digitaltwins.core
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
