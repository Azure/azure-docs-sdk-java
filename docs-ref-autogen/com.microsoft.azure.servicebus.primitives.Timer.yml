### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.primitives.Timer
  id: Timer
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.primitives
  children:
  - com.microsoft.azure.servicebus.primitives.Timer.schedule(java.lang.Runnable,java.time.Duration,com.microsoft.azure.servicebus.primitives.TimerType)
  langs:
  - java
  name: Timer
  nameWithType: Timer
  fullName: com.microsoft.azure.servicebus.primitives.Timer
  type: Class
  package: com.microsoft.azure.servicebus.primitives
  summary: An abstraction for a Scheduler functionality - which can later be replaced by a light-weight Thread
  syntax:
    content: public final class Timer
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.servicebus.primitives.Timer.Timer()
  id: Timer()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.primitives.Timer
  langs:
  - java
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: com.microsoft.azure.servicebus.primitives.Timer.Timer()
  overload: com.microsoft.azure.servicebus.primitives.Timer.Timer*
  type: Constructor
  package: com.microsoft.azure.servicebus.primitives
  syntax:
    content: private Timer()
- uid: com.microsoft.azure.servicebus.primitives.Timer.schedule(java.lang.Runnable,java.time.Duration,com.microsoft.azure.servicebus.primitives.TimerType)
  id: schedule(java.lang.Runnable,java.time.Duration,com.microsoft.azure.servicebus.primitives.TimerType)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.primitives.Timer
  langs:
  - java
  name: schedule(Runnable runnable, Duration runFrequency, TimerType timerType)
  nameWithType: Timer.schedule(Runnable runnable, Duration runFrequency, TimerType timerType)
  fullName: com.microsoft.azure.servicebus.primitives.Timer.schedule(Runnable runnable, Duration runFrequency, TimerType timerType)
  overload: com.microsoft.azure.servicebus.primitives.Timer.schedule*
  type: Method
  package: com.microsoft.azure.servicebus.primitives
  syntax:
    content: public static ScheduledFuture<?> schedule(Runnable runnable, Duration runFrequency, TimerType timerType)
    parameters:
    - id: runnable
      type: java.lang.Runnable
    - id: runFrequency
      type: java.time.Duration
    - id: timerType
      type: com.microsoft.azure.servicebus.primitives.TimerType
    return:
      type: java.util.concurrent.ScheduledFuture<?>
references:
- uid: com.microsoft.azure.servicebus.primitives.Timer.Timer*
  name: Timer
  nameWithType: Timer.Timer
  fullName: com.microsoft.azure.servicebus.primitives.Timer.Timer
  package: com.microsoft.azure.servicebus.primitives
- uid: java.lang.Runnable
  spec.java:
  - uid: java.lang.Runnable
    name: Runnable
    fullName: java.lang.Runnable
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.microsoft.azure.servicebus.primitives.TimerType
  name: TimerType
  nameWithType: TimerType
  fullName: com.microsoft.azure.servicebus.primitives.TimerType
- uid: java.util.concurrent.ScheduledFuture<?>
  spec.java:
  - uid: java.util.concurrent.ScheduledFuture
    name: ScheduledFuture
    fullName: java.util.concurrent.ScheduledFuture
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.primitives.Timer.schedule*
  name: schedule
  nameWithType: Timer.schedule
  fullName: com.microsoft.azure.servicebus.primitives.Timer.schedule
  package: com.microsoft.azure.servicebus.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.concurrent.ScheduledFuture
  name: ScheduledFuture
  nameWithType: ScheduledFuture
  fullName: java.util.concurrent.ScheduledFuture
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
