### YamlMime:JavaPackage
uid: "com.azure.ai.formrecognizer"
fullName: "com.azure.ai.formrecognizer"
name: "com.azure.ai.formrecognizer"
summary: "<p><a href=\"https://aka.ms/form-recognizer-3.0.0\">Azure Form Recognizer</a>\n is a cloud-based service provided by Microsoft Azure that utilizes machine learning to extract information\n from various types of forms."
classes:
- "com.azure.ai.formrecognizer.FormRecognizerAsyncClient"
- "com.azure.ai.formrecognizer.FormRecognizerClient"
- "com.azure.ai.formrecognizer.FormRecognizerClientBuilder"
enums:
- "com.azure.ai.formrecognizer.FormRecognizerServiceVersion"
desc: "<p><a href=\"https://aka.ms/form-recognizer-3.0.0\">Azure Form Recognizer</a>\n is a cloud-based service provided by Microsoft Azure that utilizes machine learning to extract information\n from various types of forms. It is designed to automate the process of\n form recognition, data extraction, and form understanding. Azure Form Recognizer can handle structured\n forms, such as invoices, receipts, and surveys, as well as unstructured form data, such as contracts,\n agreements, and financial reports.</p>\n\n <p>The service uses advanced optical character recognition (OCR) technology to extract text and key-value\n pairs from custom forms, enabling organizations to automate data entry tasks that would otherwise require\n manual effort. It can recognize and extract information like dates, addresses, invoice numbers, line items,\n and other relevant data points from forms. </p>\n\n <p> The Azure Form Recognizer client library allows Java developers to interact with the Azure Form\n Recognizer service.\n It provides a set of classes and methods that abstract the underlying RESTful API of Azure\n Form Recognizer, making it easier to integrate the service into Java applications.</p>\n\n <p>The Azure Form Recognizer client library provides the following capabilities:</p>\n\n <ol>\n     <li>Form recognizing: It allows you to submit forms to extract information like text, key-value pairs, tables, and\n     form fields. You can analyze both structured and unstructured documents.</li>\n     <li>Model Management: It enables you to train custom models by providing labeled training data. You can also\n     list and delete existing models.</li>\n     <li>Recognize Results: It provides methods to retrieve and interpret analysis results, including extracted text\n     and field values, confidence scores, and form layout information.</li>\n     <li>Polling and Callbacks: It includes mechanisms for polling the service to check the status of an analysis\n     operation or registering callbacks to receive notifications when the analysis is complete.</li>\n </ol>\n\n <h2>Getting Started</h2>\n\n <p>The Azure Form Recognizer library provides\n analysis clients like <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref>\n and <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref> to connect to the Form Recognizer Azure Cognitive\n Service\n to analyze information from forms and extract it into structured data.\n It also provides training clients like <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.training.FormTrainingClient\"></xref>\n and <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient\"></xref> to build and manage models from custom\n forms.\n\n <p><strong>Note:</strong>This client only supports\n <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion#V2_1\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion#V2_1\"></xref> and lower.\n Recommended to use a newer service version,\n <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\"></xref> and\n <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\"></xref>.</p>\n\n <p><strong>Refer to the\n <a href=\"https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/migration-guide.md\">Migration guide</a> to use API versions 2022-08-31 and up.</strong></p>\n\n <p>Service clients are the point of interaction for developers to use Azure Form Recognizer.\n <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref> is the synchronous service client and\n <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref> is the asynchronous service client.  The examples\n shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate\n for most scenarios, including local development and production environments. Additionally, we recommend using\n <a href=\"https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\">managed identity</a>\n for authentication in production environments.\n You can find more information on different ways of authenticating and their corresponding credential types in the\n <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme\">Azure Identity documentation\"</a>.\n </p>\n\n <p><strong>Sample: Construct a FormRecognizerClient with DefaultAzureCredential</strong></p>\n\n <p>The following code sample demonstrates the creation of a\n <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref>, using\n the `DefaultAzureCredentialBuilder` to configure it.</p>\n\n <!-- src_embed readme-sample-createFormRecognizerClientWithAAD -->\n <pre>\n FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder&#40;&#41;\n     .endpoint&#40;&quot;&#123;endpoint&#125;&quot;&#41;\n     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end readme-sample-createFormRecognizerClientWithAAD  -->\n\n <p>Further, see the code sample below to use\n <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref> for client creation.</p>\n\n <!-- src_embed readme-sample-createFormRecognizerClient -->\n <pre>\n FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder&#40;&#41;\n     .credential&#40;new AzureKeyCredential&#40;&quot;&#123;key&#125;&quot;&#41;&#41;\n     .endpoint&#40;&quot;&#123;endpoint&#125;&quot;&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end readme-sample-createFormRecognizerClient  -->\n\n <p>Let's take a look at the analysis client scenarios and their respective usage below.</p>\n\n <br>\n\n <hr>\n\n <h2>Analyzing forms with prebuilt models</h2>\n\n <p><a href=\"https://learn.microsoft.com/azure/applied-ai-services/form-recognizer/concept-model-overview?view=form-recog-3.0.0#model-overview\">Form Recognizer models</a>\n and their associated output to help you choose the best model to address your document scenario needs.</p>\n\n <p>You can use domain specific models or train a custom model tailored to your specific business needs and use cases.\n\n <p><strong>Sample: Recognize data from receipts using a url source</strong></p>\n\n <p>The following code sample demonstrates how to detect and extract data from receipts using optical character\n recognition (OCR).</p>\n\n <!-- src_embed readme-sample-recognize-receipt-url -->\n <pre>\n String receiptUrl = &quot;https:&#47;&#47;raw.githubusercontent.com&#47;Azure&#47;azure-sdk-for-java&#47;main&#47;sdk&#47;formrecognizer&quot;\n         + &quot;&#47;azure-ai-formrecognizer&#47;src&#47;samples&#47;resources&#47;sample-forms&#47;receipts&#47;contoso-allinone.jpg&quot;;\n SyncPoller&lt;FormRecognizerOperationResult, List&lt;RecognizedForm&gt;&gt; syncPoller =\n     formRecognizerClient.beginRecognizeReceiptsFromUrl&#40;receiptUrl&#41;;\n List&lt;RecognizedForm&gt; receiptPageResults = syncPoller.getFinalResult&#40;&#41;;\n\n for &#40;int i = 0; i &lt; receiptPageResults.size&#40;&#41;; i++&#41; &#123;\n     RecognizedForm recognizedForm = receiptPageResults.get&#40;i&#41;;\n     Map&lt;String, FormField&gt; recognizedFields = recognizedForm.getFields&#40;&#41;;\n     System.out.printf&#40;&quot;----------- Recognizing receipt info for page %d -----------%n&quot;, i&#41;;\n     FormField merchantNameField = recognizedFields.get&#40;&quot;MerchantName&quot;&#41;;\n     if &#40;merchantNameField != null&#41; &#123;\n         if &#40;FieldValueType.STRING == merchantNameField.getValue&#40;&#41;.getValueType&#40;&#41;&#41; &#123;\n             String merchantName = merchantNameField.getValue&#40;&#41;.asString&#40;&#41;;\n             System.out.printf&#40;&quot;Merchant Name: %s, confidence: %.2f%n&quot;,\n                 merchantName, merchantNameField.getConfidence&#40;&#41;&#41;;\n         &#125;\n     &#125;\n\n     FormField merchantPhoneNumberField = recognizedFields.get&#40;&quot;MerchantPhoneNumber&quot;&#41;;\n     if &#40;merchantPhoneNumberField != null&#41; &#123;\n         if &#40;FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue&#40;&#41;.getValueType&#40;&#41;&#41; &#123;\n             String merchantAddress = merchantPhoneNumberField.getValue&#40;&#41;.asPhoneNumber&#40;&#41;;\n             System.out.printf&#40;&quot;Merchant Phone number: %s, confidence: %.2f%n&quot;,\n                 merchantAddress, merchantPhoneNumberField.getConfidence&#40;&#41;&#41;;\n         &#125;\n     &#125;\n\n     FormField transactionDateField = recognizedFields.get&#40;&quot;TransactionDate&quot;&#41;;\n     if &#40;transactionDateField != null&#41; &#123;\n         if &#40;FieldValueType.DATE == transactionDateField.getValue&#40;&#41;.getValueType&#40;&#41;&#41; &#123;\n             LocalDate transactionDate = transactionDateField.getValue&#40;&#41;.asDate&#40;&#41;;\n             System.out.printf&#40;&quot;Transaction Date: %s, confidence: %.2f%n&quot;,\n                 transactionDate, transactionDateField.getConfidence&#40;&#41;&#41;;\n         &#125;\n     &#125;\n\n     FormField receiptItemsField = recognizedFields.get&#40;&quot;Items&quot;&#41;;\n     if &#40;receiptItemsField != null&#41; &#123;\n         System.out.printf&#40;&quot;Receipt Items: %n&quot;&#41;;\n         if &#40;FieldValueType.LIST == receiptItemsField.getValue&#40;&#41;.getValueType&#40;&#41;&#41; &#123;\n             List&lt;FormField&gt; receiptItems = receiptItemsField.getValue&#40;&#41;.asList&#40;&#41;;\n             receiptItems.stream&#40;&#41;\n                 .filter&#40;receiptItem -&gt; FieldValueType.MAP == receiptItem.getValue&#40;&#41;.getValueType&#40;&#41;&#41;\n                 .map&#40;formField -&gt; formField.getValue&#40;&#41;.asMap&#40;&#41;&#41;\n                 .forEach&#40;formFieldMap -&gt; formFieldMap.forEach&#40;&#40;key, formField&#41; -&gt; &#123;\n                     if &#40;&quot;Quantity&quot;.equals&#40;key&#41;&#41; &#123;\n                         if &#40;FieldValueType.FLOAT == formField.getValue&#40;&#41;.getValueType&#40;&#41;&#41; &#123;\n                             Float quantity = formField.getValue&#40;&#41;.asFloat&#40;&#41;;\n                             System.out.printf&#40;&quot;Quantity: %f, confidence: %.2f%n&quot;,\n                                 quantity, formField.getConfidence&#40;&#41;&#41;;\n                         &#125;\n                     &#125;\n                 &#125;&#41;&#41;;\n         &#125;\n     &#125;\n &#125;\n </pre>\n <!-- end readme-sample-recognize-receipt-url -->\n\n <p>\n You can also extract data from a local receipt with prebuilt models using the\n <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient#beginRecognizeReceipts(java.io.InputStream, long, com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions, com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginRecognizeReceipts\"></xref>\n method.</p>\n\n <p>For more information on which supported model you should use refer to\n <a href=\"https://learn.microsoft.com/azure/applied-ai-services/form-recognizer/concept-model-overview?view=form-recog-2.1.0\">models usage\n documentation</a>.</p>\n\n <br>\n\n <hr>\n\n <h2>Analyze a custom form with a model trained with or without labels.</h2>\n\n Analyze a custom form with a model trained with or without labels. Custom models are trained with your own data,\n so they're tailored to your documents.\n\n <p>For more information, see\n <a href=\"https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/v3/TrainModelWithLabels.java\">train a model with labels</a>.\n\n <p><strong>Sample: Analyze a custom form with a model trained with labels</strong></p>\n\n <p>This sample demonstrates how to recognize form fields and other content from your custom forms, using models\n you trained with your own form types.</p>\n\n <!-- src_embed readme-sample-train-recognize-custom-forms -->\n <pre>\n String trainingFilesUrl = &quot;&#123;SAS_URL_of_your_container_in_blob_storage&#125;&quot;;\n boolean useTrainingLabels = true;\n\n SyncPoller&lt;FormRecognizerOperationResult, CustomFormModel&gt; trainingPoller =\n     formTrainingClient.beginTraining&#40;trainingFilesUrl,\n         useTrainingLabels,\n         new TrainingOptions&#40;&#41;\n             .setModelName&#40;&quot;my model trained with labels&quot;&#41;,\n         Context.NONE&#41;;\n\n CustomFormModel customFormModel = trainingPoller.getFinalResult&#40;&#41;;\n\n &#47;&#47; Model Info\n System.out.printf&#40;&quot;Model Id: %s%n&quot;, customFormModel.getModelId&#40;&#41;&#41;;\n\n String customFormUrl = &quot;customFormUrl&quot;;\n String modelId = customFormModel.getModelId&#40;&#41;;\n SyncPoller&lt;FormRecognizerOperationResult, List&lt;RecognizedForm&gt;&gt; recognizeFormPoller =\n     formRecognizerClient.beginRecognizeCustomFormsFromUrl&#40;modelId, customFormUrl&#41;;\n\n List&lt;RecognizedForm&gt; recognizedForms = recognizeFormPoller.getFinalResult&#40;&#41;;\n\n for &#40;int i = 0; i &lt; recognizedForms.size&#40;&#41;; i++&#41; &#123;\n     RecognizedForm form = recognizedForms.get&#40;i&#41;;\n     System.out.printf&#40;&quot;----------- Recognized custom form info for page %d -----------%n&quot;, i&#41;;\n     System.out.printf&#40;&quot;Form type: %s%n&quot;, form.getFormType&#40;&#41;&#41;;\n     System.out.printf&#40;&quot;Form type confidence: %.2f%n&quot;, form.getFormTypeConfidence&#40;&#41;&#41;;\n     form.getFields&#40;&#41;.forEach&#40;&#40;label, formField&#41; -&gt;\n         System.out.printf&#40;&quot;Field %s has value %s with confidence score of %f.%n&quot;, label,\n             formField.getValueData&#40;&#41;.getText&#40;&#41;,\n             formField.getConfidence&#40;&#41;&#41;\n     &#41;;\n &#125;\n </pre>\n <!-- end readme-sample-train-recognize-custom-forms -->\n\n <p>For a suggested approach to extracting information from custom forms with known fields,\n see\n <a href=\"https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/v3/StronglyTypedRecognizedForm.java\">strongly-typing a recognized form</a>.</p>"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:4.1.5
