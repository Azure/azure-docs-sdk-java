### YamlMime:JavaType
uid: "com.azure.core.util.CoreUtils"
fullName: "com.azure.core.util.CoreUtils"
name: "CoreUtils"
nameWithType: "CoreUtils"
summary: "This class contains utility methods useful for building client libraries."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CoreUtils"
methods:
- uid: "com.azure.core.util.CoreUtils.<T>arrayToString(T[],java.util.function.Function<T,java.lang.String>)"
  fullName: "com.azure.core.util.CoreUtils.<T>arrayToString(T[] array, Function<T,String> mapper)"
  name: "<T>arrayToString(T[] array, Function<T,String> mapper)"
  nameWithType: "CoreUtils.<T>arrayToString(T[] array, Function<T,String> mapper)"
  summary: "Turns an array into a string mapping each element to a string and delimits them using a coma."
  modifiers:
  - "static"
  parameters:
  - description: "Array being formatted to a string."
    name: "array"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Function that maps each element to a string."
    name: "mapper"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static String <T>arrayToString(T[] array, Function<T,String> mapper)"
  desc: "Turns an array into a string mapping each element to a string and delimits them using a coma."
  returns:
    description: "Array with each element mapped and delimited, otherwise null if the array is empty or null."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.<T>clone(T[])"
  fullName: "com.azure.core.util.CoreUtils.<T>clone(T[] source)"
  name: "<T>clone(T[] source)"
  nameWithType: "CoreUtils.<T>clone(T[] source)"
  summary: "Creates a copy of the source array."
  modifiers:
  - "static"
  parameters:
  - description: "Array being copied."
    name: "source"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static T[] <T>clone(T[] source)"
  desc: "Creates a copy of the source array."
  returns:
    description: "A copy of the array or null if source was null."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.core.util.CoreUtils.<T>extractAndFetch(com.azure.core.http.rest.PagedResponse<T>,com.azure.core.util.Context,java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>)"
  fullName: "com.azure.core.util.CoreUtils.<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  name: "<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  nameWithType: "CoreUtils.<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  summary: "Extracts and combines the generic items from all the pages linked together."
  deprecatedTag: "Use localized implementation."
  modifiers:
  - "static"
  parameters:
  - description: "The paged response from server holding generic items."
    name: "page"
    type: "<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Metadata that is passed into the function that fetches the items from the next page."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  - description: "The function which fetches items from the next page."
    name: "content"
    type: "<xref href=\"java.util.function.BiFunction?alt=java.util.function.BiFunction&text=BiFunction\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />,<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "@Deprecated\npublic static Publisher<T> <T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  desc: "Extracts and combines the generic items from all the pages linked together."
  hasDeprecatedTag: true
  returns:
    description: "The publisher holding all the generic items combined."
    type: "<xref href=\"org.reactivestreams.Publisher?alt=org.reactivestreams.Publisher&text=Publisher\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.CoreUtils.<T>findFirstOfType(java.lang.Object[],java.lang.Class<T>)"
  fullName: "com.azure.core.util.CoreUtils.<T>findFirstOfType(Object[] args, Class<T> clazz)"
  name: "<T>findFirstOfType(Object[] args, Class<T> clazz)"
  nameWithType: "CoreUtils.<T>findFirstOfType(Object[] args, Class<T> clazz)"
  summary: "Returns the first instance of the given class from an array of Objects."
  modifiers:
  - "static"
  parameters:
  - description: "Array of objects to search through to find the first instance of the given `clazz` type."
    name: "args"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The type trying to be found."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static T <T>findFirstOfType(Object[] args, Class<T> clazz)"
  desc: "Returns the first instance of the given class from an array of Objects."
  returns:
    description: "The first object of the desired type, otherwise null."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.bomAwareToString(byte[],java.lang.String)"
  fullName: "com.azure.core.util.CoreUtils.bomAwareToString(byte[] bytes, String contentType)"
  name: "bomAwareToString(byte[] bytes, String contentType)"
  nameWithType: "CoreUtils.bomAwareToString(byte[] bytes, String contentType)"
  summary: "Attempts to convert a byte stream into the properly encoded String."
  modifiers:
  - "static"
  parameters:
  - description: "Byte array."
    name: "bytes"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "<code>Content-Type</code> header value."
    name: "contentType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String bomAwareToString(byte[] bytes, String contentType)"
  desc: "Attempts to convert a byte stream into the properly encoded String.\n\nThis utility method will attempt to find the encoding for the String in this order.\n\n1.  Find the byte order mark in the byte array.\n2.  Find the `charset` in the `Content-Type` header.\n3.  Default to `UTF-8`."
  returns:
    description: "A string representation of the byte array encoded to the found encoding."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.clone(byte[])"
  fullName: "com.azure.core.util.CoreUtils.clone(byte[] source)"
  name: "clone(byte[] source)"
  nameWithType: "CoreUtils.clone(byte[] source)"
  summary: "Creates a copy of the source byte array."
  modifiers:
  - "static"
  parameters:
  - description: "Array to make copy of"
    name: "source"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static byte[] clone(byte[] source)"
  desc: "Creates a copy of the source byte array."
  returns:
    description: "A copy of the array, or null if source was null."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.core.util.CoreUtils.clone(int[])"
  fullName: "com.azure.core.util.CoreUtils.clone(int[] source)"
  name: "clone(int[] source)"
  nameWithType: "CoreUtils.clone(int[] source)"
  summary: "Creates a copy of the source int array."
  modifiers:
  - "static"
  parameters:
  - description: "Array to make copy of"
    name: "source"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static int[] clone(int[] source)"
  desc: "Creates a copy of the source int array."
  returns:
    description: "A copy of the array, or null if source was null."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.core.util.CoreUtils.createHttpHeadersFromClientOptions(com.azure.core.util.ClientOptions)"
  fullName: "com.azure.core.util.CoreUtils.createHttpHeadersFromClientOptions(ClientOptions clientOptions)"
  name: "createHttpHeadersFromClientOptions(ClientOptions clientOptions)"
  nameWithType: "CoreUtils.createHttpHeadersFromClientOptions(ClientOptions clientOptions)"
  summary: "Creates <xref uid=\"com.azure.core.http.HttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpHeaders\"></xref> from the provided <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> used to create the <xref uid=\"com.azure.core.http.HttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpHeaders\"></xref>."
    name: "clientOptions"
    type: "<xref href=\"com.azure.core.util.ClientOptions?alt=com.azure.core.util.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static HttpHeaders createHttpHeadersFromClientOptions(ClientOptions clientOptions)"
  desc: "Creates <xref uid=\"com.azure.core.http.HttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpHeaders\"></xref> from the provided <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref>.\n\nIf `clientOptions` is null or <xref uid=\"com.azure.core.util.ClientOptions.getHeaders()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions#getHeaders()\"></xref> doesn't return any <xref uid=\"com.azure.core.util.Header\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Header\"></xref> values null will be returned."
  returns:
    description: "<xref uid=\"com.azure.core.http.HttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpHeaders\"></xref> containing the <xref uid=\"com.azure.core.util.Header\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Header\"></xref> values from <xref uid=\"com.azure.core.util.ClientOptions.getHeaders()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions#getHeaders()\"></xref> if\n <code>clientOptions</code> isn't null and contains <xref uid=\"com.azure.core.util.Header\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Header\"></xref> values, otherwise null."
    type: "<xref href=\"com.azure.core.http.HttpHeaders?alt=com.azure.core.http.HttpHeaders&text=HttpHeaders\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.getApplicationId(com.azure.core.util.ClientOptions,com.azure.core.http.policy.HttpLogOptions)"
  fullName: "com.azure.core.util.CoreUtils.getApplicationId(ClientOptions clientOptions, HttpLogOptions logOptions)"
  name: "getApplicationId(ClientOptions clientOptions, HttpLogOptions logOptions)"
  nameWithType: "CoreUtils.getApplicationId(ClientOptions clientOptions, HttpLogOptions logOptions)"
  summary: "Retrieves the application ID from either a <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> or <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpLogOptions\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref>."
    name: "clientOptions"
    type: "<xref href=\"com.azure.core.util.ClientOptions?alt=com.azure.core.util.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpLogOptions\"></xref>."
    name: "logOptions"
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String getApplicationId(ClientOptions clientOptions, HttpLogOptions logOptions)"
  desc: "Retrieves the application ID from either a <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> or <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpLogOptions\"></xref>.\n\nThis method first checks `clientOptions` for having an application ID then `logOptions`, finally returning null if neither are set.\n\n`clientOptions` is checked first as `logOptions` application ID is deprecated."
  returns:
    description: "The application ID from either <code>clientOptions</code> or <code>logOptions</code>, if neither are set null."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.getDefaultTimeoutFromEnvironment(com.azure.core.util.Configuration,java.lang.String,java.time.Duration,com.azure.core.util.logging.ClientLogger)"
  fullName: "com.azure.core.util.CoreUtils.getDefaultTimeoutFromEnvironment(Configuration configuration, String timeoutPropertyName, Duration defaultTimeout, ClientLogger logger)"
  name: "getDefaultTimeoutFromEnvironment(Configuration configuration, String timeoutPropertyName, Duration defaultTimeout, ClientLogger logger)"
  nameWithType: "CoreUtils.getDefaultTimeoutFromEnvironment(Configuration configuration, String timeoutPropertyName, Duration defaultTimeout, ClientLogger logger)"
  summary: "Attempts to load an environment configured default timeout."
  modifiers:
  - "static"
  parameters:
  - description: "The environment configurations."
    name: "configuration"
    type: "<xref href=\"com.azure.core.util.Configuration?alt=com.azure.core.util.Configuration&text=Configuration\" data-throw-if-not-resolved=\"False\" />"
  - description: "The default timeout property name."
    name: "timeoutPropertyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The fallback timeout to be used."
    name: "defaultTimeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.core.util.logging.ClientLogger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientLogger\"></xref> to log exceptions."
    name: "logger"
    type: "<xref href=\"com.azure.core.util.logging.ClientLogger?alt=com.azure.core.util.logging.ClientLogger&text=ClientLogger\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Duration getDefaultTimeoutFromEnvironment(Configuration configuration, String timeoutPropertyName, Duration defaultTimeout, ClientLogger logger)"
  desc: "Attempts to load an environment configured default timeout.\n\nIf the environment default timeout isn't configured, `defaultTimeout` will be returned. If the environment default timeout is a string that isn't parseable by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Long#parseLong(String)\"></xref>, `defaultTimeout` will be returned. If the environment default timeout is less than 0, <xref uid=\"java.time.Duration.ZERO\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Duration#ZERO\"></xref> will be returned indicated that there is no timeout period."
  returns:
    description: "Either the environment configured default timeout, <code>defaultTimeoutMillis</code>, or 0."
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.getProperties(java.lang.String)"
  fullName: "com.azure.core.util.CoreUtils.getProperties(String propertiesFileName)"
  name: "getProperties(String propertiesFileName)"
  nameWithType: "CoreUtils.getProperties(String propertiesFileName)"
  summary: "Helper method that returns an immutable <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> of properties defined in `propertiesFileName`."
  modifiers:
  - "static"
  parameters:
  - description: "The file name defining the properties."
    name: "propertiesFileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Map<String,String> getProperties(String propertiesFileName)"
  desc: "Helper method that returns an immutable <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> of properties defined in `propertiesFileName`."
  returns:
    description: "an immutable <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref>."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.CharSequence)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(CharSequence charSequence)"
  name: "isNullOrEmpty(CharSequence charSequence)"
  nameWithType: "CoreUtils.isNullOrEmpty(CharSequence charSequence)"
  summary: "Checks if the character sequence is null or empty."
  modifiers:
  - "static"
  parameters:
  - description: "Character sequence being checked for nullness or emptiness."
    name: "charSequence"
    type: "<xref href=\"java.lang.CharSequence?alt=java.lang.CharSequence&text=CharSequence\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static boolean isNullOrEmpty(CharSequence charSequence)"
  desc: "Checks if the character sequence is null or empty."
  returns:
    description: "True if the character sequence is null or empty, false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.Object[])"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Object[] array)"
  name: "isNullOrEmpty(Object[] array)"
  nameWithType: "CoreUtils.isNullOrEmpty(Object[] array)"
  summary: "Checks if the array is null or empty."
  modifiers:
  - "static"
  parameters:
  - description: "Array being checked for nullness or emptiness."
    name: "array"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static boolean isNullOrEmpty(Object[] array)"
  desc: "Checks if the array is null or empty."
  returns:
    description: "True if the array is null or empty, false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Collection<?>)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Collection<?> collection)"
  name: "isNullOrEmpty(Collection<?> collection)"
  nameWithType: "CoreUtils.isNullOrEmpty(Collection<?> collection)"
  summary: "Checks if the collection is null or empty."
  modifiers:
  - "static"
  parameters:
  - description: "Collection being checked for nullness or emptiness."
    name: "collection"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public static boolean isNullOrEmpty(Collection<?> collection)"
  desc: "Checks if the collection is null or empty."
  returns:
    description: "True if the collection is null or empty, false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Map<?,?>)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Map<?,?> map)"
  name: "isNullOrEmpty(Map<?,?> map)"
  nameWithType: "CoreUtils.isNullOrEmpty(Map<?,?> map)"
  summary: "Checks if the map is null or empty."
  modifiers:
  - "static"
  parameters:
  - description: "Map being checked for nullness or emptiness."
    name: "map"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;?,?&gt;"
  syntax: "public static boolean isNullOrEmpty(Map<?,?> map)"
  desc: "Checks if the map is null or empty."
  returns:
    description: "True if the map is null or empty, false otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.util.CoreUtils.mergeContexts(com.azure.core.util.Context,com.azure.core.util.Context)"
  fullName: "com.azure.core.util.CoreUtils.mergeContexts(Context into, Context from)"
  name: "mergeContexts(Context into, Context from)"
  nameWithType: "CoreUtils.mergeContexts(Context into, Context from)"
  summary: "Merges two <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Contexts\"></xref> into a new <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "Context being merged into."
    name: "into"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context being merged."
    name: "from"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Context mergeContexts(Context into, Context from)"
  desc: "Merges two <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Contexts\"></xref> into a new <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref>."
  returns:
    description: "A new Context that is the merged Contexts."
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "This class contains utility methods useful for building client libraries."
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.31.0
