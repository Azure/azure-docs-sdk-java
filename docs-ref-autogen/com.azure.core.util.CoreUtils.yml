### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.CoreUtils"
  id: "CoreUtils"
  parent: "com.azure.core.util"
  children:
  - "com.azure.core.util.CoreUtils.<T>arrayToString(T[],java.util.function.Function<T,java.lang.String>)"
  - "com.azure.core.util.CoreUtils.<T>clone(T[])"
  - "com.azure.core.util.CoreUtils.<T>extractAndFetch(com.azure.core.http.rest.PagedResponse<T>,com.azure.core.util.Context,java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>)"
  - "com.azure.core.util.CoreUtils.<T>findFirstOfType(java.lang.Object[],java.lang.Class<T>)"
  - "com.azure.core.util.CoreUtils.clone(byte[])"
  - "com.azure.core.util.CoreUtils.clone(int[])"
  - "com.azure.core.util.CoreUtils.getProperties(java.lang.String)"
  - "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.CharSequence)"
  - "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.Object[])"
  - "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Collection<?>)"
  - "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Map<?,?>)"
  langs:
  - "java"
  name: "CoreUtils"
  nameWithType: "CoreUtils"
  fullName: "com.azure.core.util.CoreUtils"
  type: "Class"
  package: "com.azure.core.util"
  summary: "This class contains utility methods useful for building client libraries."
  syntax:
    content: "public final class CoreUtils"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.CoreUtils.<T>arrayToString(T[],java.util.function.Function<T,java.lang.String>)"
  id: "<T>arrayToString(T[],java.util.function.Function<T,java.lang.String>)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "<T>arrayToString(T[] array, Function<T,String> mapper)"
  nameWithType: "CoreUtils.<T>arrayToString(T[] array, Function<T,String> mapper)"
  fullName: "com.azure.core.util.CoreUtils.<T>arrayToString(T[] array, Function<T,String> mapper)"
  overload: "com.azure.core.util.CoreUtils.arrayToString*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Turns an array into a string mapping each element to a string and delimits them using a coma."
  syntax:
    content: "public static String <T>arrayToString(T[] array, Function<T,String> mapper)"
    parameters:
    - id: "array"
      type: "T[]"
      description: "Array being formatted to a string."
    - id: "mapper"
      type: "java.util.function.Function<T,java.lang.String>"
      description: "Function that maps each element to a string."
    return:
      type: "java.lang.String"
      description: "Array with each element mapped and delimited, otherwise null if the array is empty or null."
- uid: "com.azure.core.util.CoreUtils.<T>clone(T[])"
  id: "<T>clone(T[])"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "<T>clone(T[] source)"
  nameWithType: "CoreUtils.<T>clone(T[] source)"
  fullName: "com.azure.core.util.CoreUtils.<T>clone(T[] source)"
  overload: "com.azure.core.util.CoreUtils.clone*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Creates a copy of the source array."
  syntax:
    content: "public static T[] <T>clone(T[] source)"
    parameters:
    - id: "source"
      type: "T[]"
      description: "Array being copied."
    return:
      type: "T[]"
      description: "A copy of the array or null if source was null."
- uid: "com.azure.core.util.CoreUtils.<T>extractAndFetch(com.azure.core.http.rest.PagedResponse<T>,com.azure.core.util.Context,java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>)"
  id: "<T>extractAndFetch(com.azure.core.http.rest.PagedResponse<T>,com.azure.core.util.Context,java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  nameWithType: "CoreUtils.<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  fullName: "com.azure.core.util.CoreUtils.<T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
  overload: "com.azure.core.util.CoreUtils.extractAndFetch*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Extracts and combines the generic items from all the pages linked together."
  syntax:
    content: "public static Publisher<T> <T>extractAndFetch(PagedResponse<T> page, Context context, BiFunction<String,Context,Publisher<T>> content)"
    parameters:
    - id: "page"
      type: "com.azure.core.http.rest.PagedResponse<T>"
      description: "The paged response from server holding generic items."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Metadata that is passed into the function that fetches the items from the next page."
    - id: "content"
      type: "java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>"
      description: "The function which fetches items from the next page."
    return:
      type: "org.reactivestreams.Publisher<T>"
      description: "The publisher holding all the generic items combined."
- uid: "com.azure.core.util.CoreUtils.<T>findFirstOfType(java.lang.Object[],java.lang.Class<T>)"
  id: "<T>findFirstOfType(java.lang.Object[],java.lang.Class<T>)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "<T>findFirstOfType(Object[] args, Class<T> clazz)"
  nameWithType: "CoreUtils.<T>findFirstOfType(Object[] args, Class<T> clazz)"
  fullName: "com.azure.core.util.CoreUtils.<T>findFirstOfType(Object[] args, Class<T> clazz)"
  overload: "com.azure.core.util.CoreUtils.findFirstOfType*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Returns the first instance of the given class from an array of Objects."
  syntax:
    content: "public static T <T>findFirstOfType(Object[] args, Class<T> clazz)"
    parameters:
    - id: "args"
      type: "java.lang.Object[]"
      description: "Array of objects to search through to find the first instance of the given `clazz` type."
    - id: "clazz"
      type: "java.lang.Class<T>"
      description: "The type trying to be found."
    return:
      type: "T"
      description: "The first object of the desired type, otherwise null."
- uid: "com.azure.core.util.CoreUtils.CoreUtils()"
  id: "CoreUtils()"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "CoreUtils()"
  nameWithType: "CoreUtils.CoreUtils()"
  fullName: "com.azure.core.util.CoreUtils.CoreUtils()"
  overload: "com.azure.core.util.CoreUtils.CoreUtils*"
  type: "Constructor"
  package: "com.azure.core.util"
  syntax:
    content: "private CoreUtils()"
- uid: "com.azure.core.util.CoreUtils.clone(byte[])"
  id: "clone(byte[])"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "clone(byte[] source)"
  nameWithType: "CoreUtils.clone(byte[] source)"
  fullName: "com.azure.core.util.CoreUtils.clone(byte[] source)"
  overload: "com.azure.core.util.CoreUtils.clone*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Creates a copy of the source byte array."
  syntax:
    content: "public static byte[] clone(byte[] source)"
    parameters:
    - id: "source"
      type: "byte[]"
      description: "Array to make copy of"
    return:
      type: "byte[]"
      description: "A copy of the array, or null if source was null."
- uid: "com.azure.core.util.CoreUtils.clone(int[])"
  id: "clone(int[])"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "clone(int[] source)"
  nameWithType: "CoreUtils.clone(int[] source)"
  fullName: "com.azure.core.util.CoreUtils.clone(int[] source)"
  overload: "com.azure.core.util.CoreUtils.clone*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Creates a copy of the source int array."
  syntax:
    content: "public static int[] clone(int[] source)"
    parameters:
    - id: "source"
      type: "int[]"
      description: "Array to make copy of"
    return:
      type: "int[]"
      description: "A copy of the array, or null if source was null."
- uid: "com.azure.core.util.CoreUtils.getProperties(java.lang.String)"
  id: "getProperties(java.lang.String)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "getProperties(String propertiesFileName)"
  nameWithType: "CoreUtils.getProperties(String propertiesFileName)"
  fullName: "com.azure.core.util.CoreUtils.getProperties(String propertiesFileName)"
  overload: "com.azure.core.util.CoreUtils.getProperties*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Helper method that returns an immutable <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">Map</xref> of properties defined in `propertiesFileName`."
  syntax:
    content: "public static Map<String,String> getProperties(String propertiesFileName)"
    parameters:
    - id: "propertiesFileName"
      type: "java.lang.String"
      description: "The file name defining the properties."
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "an immutable <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">Map</xref>."
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.CharSequence)"
  id: "isNullOrEmpty(java.lang.CharSequence)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "isNullOrEmpty(CharSequence charSequence)"
  nameWithType: "CoreUtils.isNullOrEmpty(CharSequence charSequence)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(CharSequence charSequence)"
  overload: "com.azure.core.util.CoreUtils.isNullOrEmpty*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Checks if the character sequence is null or empty."
  syntax:
    content: "public static boolean isNullOrEmpty(CharSequence charSequence)"
    parameters:
    - id: "charSequence"
      type: "java.lang.CharSequence"
      description: "Character sequence being checked for nullness or emptiness."
    return:
      type: "boolean"
      description: "True if the character sequence is null or empty, false otherwise."
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.lang.Object[])"
  id: "isNullOrEmpty(java.lang.Object[])"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "isNullOrEmpty(Object[] array)"
  nameWithType: "CoreUtils.isNullOrEmpty(Object[] array)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Object[] array)"
  overload: "com.azure.core.util.CoreUtils.isNullOrEmpty*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Checks if the array is null or empty."
  syntax:
    content: "public static boolean isNullOrEmpty(Object[] array)"
    parameters:
    - id: "array"
      type: "java.lang.Object[]"
      description: "Array being checked for nullness or emptiness."
    return:
      type: "boolean"
      description: "True if the array is null or empty, false otherwise."
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Collection<?>)"
  id: "isNullOrEmpty(java.util.Collection<?>)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "isNullOrEmpty(Collection<?> collection)"
  nameWithType: "CoreUtils.isNullOrEmpty(Collection<?> collection)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Collection<?> collection)"
  overload: "com.azure.core.util.CoreUtils.isNullOrEmpty*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Checks if the collection is null or empty."
  syntax:
    content: "public static boolean isNullOrEmpty(Collection<?> collection)"
    parameters:
    - id: "collection"
      type: "java.util.Collection<?>"
      description: "Collection being checked for nullness or emptiness."
    return:
      type: "boolean"
      description: "True if the collection is null or empty, false otherwise."
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty(java.util.Map<?,?>)"
  id: "isNullOrEmpty(java.util.Map<?,?>)"
  parent: "com.azure.core.util.CoreUtils"
  langs:
  - "java"
  name: "isNullOrEmpty(Map<?,?> map)"
  nameWithType: "CoreUtils.isNullOrEmpty(Map<?,?> map)"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty(Map<?,?> map)"
  overload: "com.azure.core.util.CoreUtils.isNullOrEmpty*"
  type: "Method"
  package: "com.azure.core.util"
  summary: "Checks if the map is null or empty."
  syntax:
    content: "public static boolean isNullOrEmpty(Map<?,?> map)"
    parameters:
    - id: "map"
      type: "java.util.Map<?,?>"
      description: "Map being checked for nullness or emptiness."
    return:
      type: "boolean"
      description: "True if the map is null or empty, false otherwise."
references:
- uid: "com.azure.core.util.CoreUtils.CoreUtils*"
  name: "CoreUtils"
  nameWithType: "CoreUtils.CoreUtils"
  fullName: "com.azure.core.util.CoreUtils.CoreUtils"
  package: "com.azure.core.util"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.CoreUtils.clone*"
  name: "clone"
  nameWithType: "CoreUtils.clone"
  fullName: "com.azure.core.util.CoreUtils.clone"
  package: "com.azure.core.util"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "T[]"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: "[]"
    fullName: "[]"
- uid: "java.lang.Object[]"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: "[]"
    fullName: "[]"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.util.CoreUtils.isNullOrEmpty*"
  name: "isNullOrEmpty"
  nameWithType: "CoreUtils.isNullOrEmpty"
  fullName: "com.azure.core.util.CoreUtils.isNullOrEmpty"
  package: "com.azure.core.util"
- uid: "java.util.Collection<?>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "java.util.Map<?,?>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ","
    fullName: ","
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "java.lang.CharSequence"
  spec.java:
  - uid: "java.lang.CharSequence"
    name: "CharSequence"
    fullName: "java.lang.CharSequence"
- uid: "java.util.function.Function<T,java.lang.String>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.CoreUtils.arrayToString*"
  name: "<T>arrayToString"
  nameWithType: "CoreUtils.<T>arrayToString"
  fullName: "com.azure.core.util.CoreUtils.<T>arrayToString"
  package: "com.azure.core.util"
- uid: "java.lang.Class<T>"
  spec.java:
  - uid: "java.lang.Class"
    name: "Class"
    fullName: "java.lang.Class"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "com.azure.core.util.CoreUtils.findFirstOfType*"
  name: "<T>findFirstOfType"
  nameWithType: "CoreUtils.<T>findFirstOfType"
  fullName: "com.azure.core.util.CoreUtils.<T>findFirstOfType"
  package: "com.azure.core.util"
- uid: "com.azure.core.http.rest.PagedResponse<T>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedResponse"
    name: "PagedResponse"
    fullName: "com.azure.core.http.rest.PagedResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.Context"
  name: "Context"
  nameWithType: "Context"
  fullName: "com.azure.core.util.Context"
- uid: "java.util.function.BiFunction<java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher<T>>"
  spec.java:
  - uid: "java.util.function.BiFunction"
    name: "BiFunction"
    fullName: "java.util.function.BiFunction"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
  - name: ","
    fullName: ","
  - uid: "org.reactivestreams.Publisher"
    name: "Publisher"
    fullName: "org.reactivestreams.Publisher"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "org.reactivestreams.Publisher<T>"
  spec.java:
  - uid: "org.reactivestreams.Publisher"
    name: "Publisher"
    fullName: "org.reactivestreams.Publisher"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.CoreUtils.extractAndFetch*"
  name: "<T>extractAndFetch"
  nameWithType: "CoreUtils.<T>extractAndFetch"
  fullName: "com.azure.core.util.CoreUtils.<T>extractAndFetch"
  package: "com.azure.core.util"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.CoreUtils.getProperties*"
  name: "getProperties"
  nameWithType: "CoreUtils.getProperties"
  fullName: "com.azure.core.util.CoreUtils.getProperties"
  package: "com.azure.core.util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Collection"
  name: "Collection"
  nameWithType: "Collection"
  fullName: "java.util.Collection"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "?,?"
  name: "?,?"
  nameWithType: "?,?"
  fullName: "?,?"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "T,java.lang.String"
  name: "T,String"
  nameWithType: "T,String"
  fullName: "T,java.lang.String"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "java.lang.Class"
  name: "Class"
  nameWithType: "Class"
  fullName: "java.lang.Class"
- uid: "com.azure.core.http.rest.PagedResponse"
  name: "PagedResponse"
  nameWithType: "PagedResponse"
  fullName: "com.azure.core.http.rest.PagedResponse"
- uid: "java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher"
  name: "String,Context,Publisher"
  nameWithType: "String,Context,Publisher"
  fullName: "java.lang.String,com.azure.core.util.Context,org.reactivestreams.Publisher"
- uid: "java.util.function.BiFunction"
  name: "BiFunction"
  nameWithType: "BiFunction"
  fullName: "java.util.function.BiFunction"
- uid: "org.reactivestreams.Publisher"
  name: "Publisher"
  nameWithType: "Publisher"
  fullName: "org.reactivestreams.Publisher"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
