### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  id: BlobLeaseAsyncClient
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized
  children:
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease(int)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(com.azure.storage.blob.options.BlobAcquireLeaseOptions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(com.azure.storage.blob.options.BlobBreakLeaseOptions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease(java.lang.String)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(com.azure.storage.blob.options.BlobChangeLeaseOptions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(com.azure.storage.blob.options.BlobReleaseLeaseOptions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease()
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions)
  - com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(com.azure.storage.blob.options.BlobRenewLeaseOptions)
  langs:
  - java
  name: BlobLeaseAsyncClient
  nameWithType: BlobLeaseAsyncClient
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  type: Class
  package: com.azure.storage.blob.specialized
  summary: >-
    This class provides a client that contains all the leasing operations for <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">containers</xref> and <xref uid="com.azure.storage.blob.BlobAsyncClient" data-throw-if-not-resolved="false">blobs</xref>. This client acts as a supplement to those clients and only handles leasing operations.


    **Instantiating a BlobLeaseAsyncClient**


    ```java

    BlobLeaseAsyncClient blobLeaseAsyncClient = new BlobLeaseClientBuilder()
         .blobAsyncClient(blobAsyncClient)
         .buildAsyncClient();
    ```


    ```java

    BlobLeaseAsyncClient blobLeaseAsyncClient = new BlobLeaseClientBuilder()
         .containerAsyncClient(blobContainerAsyncClient)
         .buildAsyncClient();
    ```


    View <xref uid="com.azure.storage.blob.specialized.BlobLeaseClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.


    For more information about leasing see the [container leasing][] or [blob leasing][] documentation.



    [container leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container

    [blob leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
  syntax:
    content: public final class BlobLeaseAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.BlobLeaseAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)
  id: BlobLeaseAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: BlobLeaseAsyncClient(HttpPipeline pipeline, String url, String leaseId, boolean isBlob, String accountName, String serviceVersion)
  nameWithType: BlobLeaseAsyncClient.BlobLeaseAsyncClient(HttpPipeline pipeline, String url, String leaseId, boolean isBlob, String accountName, String serviceVersion)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.BlobLeaseAsyncClient(HttpPipeline pipeline, String url, String leaseId, boolean isBlob, String accountName, String serviceVersion)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.BlobLeaseAsyncClient*
  type: Constructor
  package: com.azure.storage.blob.specialized
  syntax:
    content: " BlobLeaseAsyncClient(HttpPipeline pipeline, String url, String leaseId, boolean isBlob, String accountName, String serviceVersion)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
    - id: url
      type: java.lang.String
    - id: leaseId
      type: java.lang.String
    - id: isBlob
      type: boolean
    - id: accountName
      type: java.lang.String
    - id: serviceVersion
      type: java.lang.String
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease(int)
  id: acquireLease(int)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: acquireLease(int duration)
  nameWithType: BlobLeaseAsyncClient.acquireLease(int duration)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease(int duration)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Acquires a lease for write and delete operations. The lease duration must be between 15 to 60 seconds or -1 for an infinite duration.


    **Code Samples**


    ```java

    client.acquireLease(60).subscribe(response -> System.out.printf("Lease ID is %s%n", response));

    ```
  syntax:
    content: public Mono<String> acquireLease(int duration)
    parameters:
    - id: duration
      type: int
      description: The duration of the lease between 15 to 60 seconds or -1 for an infinite duration.
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: A reactive response containing the lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(com.azure.storage.blob.options.BlobAcquireLeaseOptions)
  id: acquireLeaseWithResponse(com.azure.storage.blob.options.BlobAcquireLeaseOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: acquireLeaseWithResponse(BlobAcquireLeaseOptions options)
  nameWithType: BlobLeaseAsyncClient.acquireLeaseWithResponse(BlobAcquireLeaseOptions options)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(BlobAcquireLeaseOptions options)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Acquires a lease for write and delete operations. The lease duration must be between 15 to 60 seconds, or -1 for an infinite duration.\n\n**Code Samples**\n\n```java\nBlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobAcquireLeaseOptions options = new BlobAcquireLeaseOptions(60)\n     .setRequestConditions(requestConditions);\n \n client.acquireLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> acquireLeaseWithResponse(BlobAcquireLeaseOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlobAcquireLeaseOptions
      description: <xref uid="com.azure.storage.blob.options.BlobAcquireLeaseOptions" data-throw-if-not-resolved="false">BlobAcquireLeaseOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions)
  id: acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)
  nameWithType: BlobLeaseAsyncClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Acquires a lease for write and delete operations. The lease duration must be between 15 to 60 seconds, or -1 for an infinite duration.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.acquireLeaseWithResponse(60, modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)
    parameters:
    - id: duration
      type: int
      description: The duration of the lease between 15 to 60 seconds or -1 for an infinite duration.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease()
  id: breakLease()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: breakLease()
  nameWithType: BlobLeaseAsyncClient.breakLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Breaks the previously acquired lease, if it exists.


    **Code Samples**


    ```java

    client.breakLease().subscribe(response ->
         System.out.printf("The broken lease has %d seconds remaining on the lease", response));
    ```
  syntax:
    content: public Mono<Integer> breakLease()
    return:
      type: reactor.core.publisher.Mono<java.lang.Integer>
      description: A reactive response containing the remaining time in the broken lease in seconds.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(com.azure.storage.blob.options.BlobBreakLeaseOptions)
  id: breakLeaseWithResponse(com.azure.storage.blob.options.BlobBreakLeaseOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: breakLeaseWithResponse(BlobBreakLeaseOptions options)
  nameWithType: BlobLeaseAsyncClient.breakLeaseWithResponse(BlobBreakLeaseOptions options)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(BlobBreakLeaseOptions options)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n BlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobBreakLeaseOptions options = new BlobBreakLeaseOptions()\n     .setBreakPeriod(Duration.ofSeconds(retainLeaseInSeconds))\n     .setRequestConditions(requestConditions);\n \n client.breakLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<Integer>> breakLeaseWithResponse(BlobBreakLeaseOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlobBreakLeaseOptions
      description: <xref uid="com.azure.storage.blob.options.BlobBreakLeaseOptions" data-throw-if-not-resolved="false">BlobBreakLeaseOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Integer>>
      description: A reactive response containing the remaining time in the broken lease in seconds.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)
  id: breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)
  nameWithType: BlobLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.breakLeaseWithResponse(retainLeaseInSeconds, modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<Integer>> breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)
    parameters:
    - id: breakPeriodInSeconds
      type: java.lang.Integer
      description: >-
        An optional duration, between 0 and 60 seconds, that the lease should continue before
         it is broken. If the break period is longer than the time remaining on the lease the remaining time on the lease
         is used. A new lease will not be available before the break period has expired, but the lease may be held for
         longer than the break period.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Integer>>
      description: A reactive response containing the remaining time in the broken lease in seconds.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease(java.lang.String)
  id: changeLease(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: changeLease(String proposedId)
  nameWithType: BlobLeaseAsyncClient.changeLease(String proposedId)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease(String proposedId)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Changes the lease ID.


    **Code Samples**


    ```java

    client.changeLease("proposedId").subscribe(response -> System.out.printf("Changed lease ID is %s%n", response));

    ```
  syntax:
    content: public Mono<String> changeLease(String proposedId)
    parameters:
    - id: proposedId
      type: java.lang.String
      description: A new lease ID in a valid GUID format.
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: A reactive response containing the new lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(com.azure.storage.blob.options.BlobChangeLeaseOptions)
  id: changeLeaseWithResponse(com.azure.storage.blob.options.BlobChangeLeaseOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: changeLeaseWithResponse(BlobChangeLeaseOptions options)
  nameWithType: BlobLeaseAsyncClient.changeLeaseWithResponse(BlobChangeLeaseOptions options)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(BlobChangeLeaseOptions options)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nBlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobChangeLeaseOptions options = new BlobChangeLeaseOptions(\"proposedId\")\n     .setRequestConditions(requestConditions);\n \n client.changeLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"Changed lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> changeLeaseWithResponse(BlobChangeLeaseOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlobChangeLeaseOptions
      description: <xref uid="com.azure.storage.blob.options.BlobChangeLeaseOptions" data-throw-if-not-resolved="false">BlobChangeLeaseOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the new lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions)
  id: changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)
  nameWithType: BlobLeaseAsyncClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.changeLeaseWithResponse(\"proposedId\", modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Changed lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)
    parameters:
    - id: proposedId
      type: java.lang.String
      description: A new lease ID in a valid GUID format.
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the new lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: BlobLeaseAsyncClient.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId()
  id: getLeaseId()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: getLeaseId()
  nameWithType: BlobLeaseAsyncClient.getLeaseId()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: Get the lease ID for this lease.
  syntax:
    content: public String getLeaseId()
    return:
      type: java.lang.String
      description: the lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl()
  id: getResourceUrl()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: getResourceUrl()
  nameWithType: BlobLeaseAsyncClient.getResourceUrl()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Gets the <xref uid="" data-throw-if-not-resolved="false">URL</xref> of the lease client.


    The lease will either be a container or blob URL depending on which the lease client is associated.
  syntax:
    content: public String getResourceUrl()
    return:
      type: java.lang.String
      description: URL of the lease client.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease()
  id: releaseLease()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: releaseLease()
  nameWithType: BlobLeaseAsyncClient.releaseLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Releases the previously acquired lease.


    **Code Samples**


    ```java

    client.releaseLease().subscribe(response -> System.out.println("Completed release lease"));

    ```
  syntax:
    content: public Mono<Void> releaseLease()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions)
  id: releaseLeaseWithResponse(com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)
  nameWithType: BlobLeaseAsyncClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.releaseLeaseWithResponse(modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Release lease completed with status %d%n\", response.getStatusCode()));\n```"
  syntax:
    content: public Mono<Response<Void>> releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)
    parameters:
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(com.azure.storage.blob.options.BlobReleaseLeaseOptions)
  id: releaseLeaseWithResponse(com.azure.storage.blob.options.BlobReleaseLeaseOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: releaseLeaseWithResponse(BlobReleaseLeaseOptions options)
  nameWithType: BlobLeaseAsyncClient.releaseLeaseWithResponse(BlobReleaseLeaseOptions options)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse(BlobReleaseLeaseOptions options)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nBlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobReleaseLeaseOptions options = new BlobReleaseLeaseOptions()\n     .setRequestConditions(requestConditions);\n \n client.releaseLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"Release lease completed with status %d%n\", response.getStatusCode()));\n```"
  syntax:
    content: public Mono<Response<Void>> releaseLeaseWithResponse(BlobReleaseLeaseOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlobReleaseLeaseOptions
      description: <xref uid="com.azure.storage.blob.options.BlobReleaseLeaseOptions" data-throw-if-not-resolved="false">BlobReleaseLeaseOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease()
  id: renewLease()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: renewLease()
  nameWithType: BlobLeaseAsyncClient.renewLease()
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease()
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Renews the previously acquired lease.


    **Code Samples**


    ```java

    client.renewLease().subscribe(response -> System.out.printf("Renewed lease ID is %s%n", response));

    ```
  syntax:
    content: public Mono<String> renewLease()
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: A reactive response containing the renewed lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions)
  id: renewLeaseWithResponse(com.azure.core.http.RequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: renewLeaseWithResponse(RequestConditions modifiedRequestConditions)
  nameWithType: BlobLeaseAsyncClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Renews the previously acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.renewLeaseWithResponse(modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Renewed lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> renewLeaseWithResponse(RequestConditions modifiedRequestConditions)
    parameters:
    - id: modifiedRequestConditions
      type: com.azure.core.http.RequestConditions
      description: >-
        Standard HTTP Access conditions related to the modification of data. ETag and
         LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given
         request. The request will fail if the specified condition is not satisfied.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the renewed lease ID.
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(com.azure.storage.blob.options.BlobRenewLeaseOptions)
  id: renewLeaseWithResponse(com.azure.storage.blob.options.BlobRenewLeaseOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlobLeaseAsyncClient
  langs:
  - java
  name: renewLeaseWithResponse(BlobRenewLeaseOptions options)
  nameWithType: BlobLeaseAsyncClient.renewLeaseWithResponse(BlobRenewLeaseOptions options)
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse(BlobRenewLeaseOptions options)
  overload: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Renews the previously acquired lease.\n\n**Code Samples**\n\n```java\nBlobLeaseRequestConditions requestConditions = new BlobLeaseRequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n \n BlobRenewLeaseOptions options = new BlobRenewLeaseOptions()\n     .setRequestConditions(requestConditions);\n \n client.renewLeaseWithResponse(options).subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  syntax:
    content: public Mono<Response<String>> renewLeaseWithResponse(BlobRenewLeaseOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlobRenewLeaseOptions
      description: <xref uid="com.azure.storage.blob.options.BlobRenewLeaseOptions" data-throw-if-not-resolved="false">BlobRenewLeaseOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A reactive response containing the renewed lease ID.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.BlobLeaseAsyncClient*
  name: BlobLeaseAsyncClient
  nameWithType: BlobLeaseAsyncClient.BlobLeaseAsyncClient
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.BlobLeaseAsyncClient
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl*
  name: getResourceUrl
  nameWithType: BlobLeaseAsyncClient.getResourceUrl
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getResourceUrl
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId*
  name: getLeaseId
  nameWithType: BlobLeaseAsyncClient.getLeaseId
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getLeaseId
  package: com.azure.storage.blob.specialized
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: reactor.core.publisher.Mono<java.lang.String>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease*
  name: acquireLease
  nameWithType: BlobLeaseAsyncClient.acquireLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.core.http.RequestConditions
  spec.java:
  - uid: com.azure.core.http.RequestConditions
    name: RequestConditions
    fullName: com.azure.core.http.RequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse*
  name: acquireLeaseWithResponse
  nameWithType: BlobLeaseAsyncClient.acquireLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.acquireLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlobAcquireLeaseOptions
  name: BlobAcquireLeaseOptions
  nameWithType: BlobAcquireLeaseOptions
  fullName: com.azure.storage.blob.options.BlobAcquireLeaseOptions
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease*
  name: renewLease
  nameWithType: BlobLeaseAsyncClient.renewLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse*
  name: renewLeaseWithResponse
  nameWithType: BlobLeaseAsyncClient.renewLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.renewLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlobRenewLeaseOptions
  name: BlobRenewLeaseOptions
  nameWithType: BlobRenewLeaseOptions
  fullName: com.azure.storage.blob.options.BlobRenewLeaseOptions
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease*
  name: releaseLease
  nameWithType: BlobLeaseAsyncClient.releaseLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLease
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse*
  name: releaseLeaseWithResponse
  nameWithType: BlobLeaseAsyncClient.releaseLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.releaseLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlobReleaseLeaseOptions
  name: BlobReleaseLeaseOptions
  nameWithType: BlobReleaseLeaseOptions
  fullName: com.azure.storage.blob.options.BlobReleaseLeaseOptions
- uid: reactor.core.publisher.Mono<java.lang.Integer>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease*
  name: breakLease
  nameWithType: BlobLeaseAsyncClient.breakLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLease
  package: com.azure.storage.blob.specialized
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Integer>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse*
  name: breakLeaseWithResponse
  nameWithType: BlobLeaseAsyncClient.breakLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.breakLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlobBreakLeaseOptions
  name: BlobBreakLeaseOptions
  nameWithType: BlobBreakLeaseOptions
  fullName: com.azure.storage.blob.options.BlobBreakLeaseOptions
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease*
  name: changeLease
  nameWithType: BlobLeaseAsyncClient.changeLease
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLease
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse*
  name: changeLeaseWithResponse
  nameWithType: BlobLeaseAsyncClient.changeLeaseWithResponse
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.changeLeaseWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlobChangeLeaseOptions
  name: BlobChangeLeaseOptions
  nameWithType: BlobChangeLeaseOptions
  fullName: com.azure.storage.blob.options.BlobChangeLeaseOptions
- uid: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: BlobLeaseAsyncClient.getAccountName
  fullName: com.azure.storage.blob.specialized.BlobLeaseAsyncClient.getAccountName
  package: com.azure.storage.blob.specialized
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
