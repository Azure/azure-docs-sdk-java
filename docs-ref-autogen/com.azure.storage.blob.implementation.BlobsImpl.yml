### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.implementation.BlobsImpl"
  id: "BlobsImpl"
  parent: "com.azure.storage.blob.implementation"
  children:
  - "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  - "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.Integer,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "BlobsImpl"
  nameWithType: "BlobsImpl"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl"
  type: "Class"
  package: "com.azure.storage.blob.implementation"
  summary: "An instance of this class provides access to all the operations defined in Blobs."
  syntax:
    content: "public final class BlobsImpl"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  id: "BlobsImpl(com.azure.storage.blob.implementation.AzureBlobStorageImpl)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "BlobsImpl(AzureBlobStorageImpl client)"
  nameWithType: "BlobsImpl.BlobsImpl(AzureBlobStorageImpl client)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl(AzureBlobStorageImpl client)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl*"
  type: "Constructor"
  package: "com.azure.storage.blob.implementation"
  summary: "Initializes an instance of BlobsImpl."
  syntax:
    content: "public BlobsImpl(AzureBlobStorageImpl client)"
    parameters:
    - id: "client"
      type: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
      description: "the instance of the service client containing this operation class."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Context context)"
  nameWithType: "BlobsImpl.abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with zero length and full metadata."
  syntax:
    content: "public Mono<BlobsAbortCopyFromURLResponse> abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copyId"
      type: "java.lang.String"
      description: "The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "abortCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Integer timeout, String leaseId, String requestId, Context context)"
  nameWithType: "BlobsImpl.abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Integer timeout, String leaseId, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Integer timeout, String leaseId, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination blob with zero length and full metadata."
  syntax:
    content: "public Mono<BlobsAbortCopyFromURLResponse> abortCopyFromURLWithRestResponseAsync(String containerName, String blob, String copyId, Integer timeout, String leaseId, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copyId"
      type: "java.lang.String"
      description: "The copy identifier provided in the x-ms-copy-id header of the original Copy Blob operation."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "acquireLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.acquireLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsAcquireLeaseResponse> acquireLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "acquireLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "acquireLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer duration, String proposedLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.acquireLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer duration, String proposedLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer duration, String proposedLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsAcquireLeaseResponse> acquireLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer duration, String proposedLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "duration"
      type: "java.lang.Integer"
      description: "Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change."
    - id: "proposedLeaseId"
      type: "java.lang.String"
      description: "Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "breakLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.breakLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsBreakLeaseResponse> breakLeaseWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "breakLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "breakLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer breakPeriod, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.breakLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer breakPeriod, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer breakPeriod, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsBreakLeaseResponse> breakLeaseWithRestResponseAsync(String containerName, String blob, Integer timeout, Integer breakPeriod, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "breakPeriod"
      type: "java.lang.Integer"
      description: "For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Context context)"
  nameWithType: "BlobsImpl.changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsChangeLeaseResponse> changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "proposedLeaseId"
      type: "java.lang.String"
      description: "Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "changeLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsChangeLeaseResponse> changeLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, String proposedLeaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "proposedLeaseId"
      type: "java.lang.String"
      description: "Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  id: "copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  nameWithType: "BlobsImpl.copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response until the copy is complete."
  syntax:
    content: "public Mono<BlobsCopyFromURLResponse> copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copySource"
      type: "java.net.URL"
      description: "Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI. The source blob must either be public or must be authenticated via a shared access signature."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],com.azure.core.util.Context)"
  id: "copyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, byte[] sourceContentMD5, Context context)"
  nameWithType: "BlobsImpl.copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, byte[] sourceContentMD5, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, byte[] sourceContentMD5, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return a response until the copy is complete."
  syntax:
    content: "public Mono<BlobsCopyFromURLResponse> copyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, byte[] sourceContentMD5, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copySource"
      type: "java.net.URL"
      description: "Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI. The source blob must either be public or must be authenticated via a shared access signature."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Optional. Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "sourceIfModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "sourceIfUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "sourceIfMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "sourceIfNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "sourceContentMD5"
      type: "byte[]"
      description: "Specify the md5 calculated for the range of bytes that must be read from the copy source."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "createSnapshotWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.createSnapshotWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Create Snapshot operation creates a read-only snapshot of a blob."
  syntax:
    content: "public Mono<BlobsCreateSnapshotResponse> createSnapshotWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "createSnapshotWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "createSnapshotWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlobsImpl.createSnapshotWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Create Snapshot operation creates a read-only snapshot of a blob."
  syntax:
    content: "public Mono<BlobsCreateSnapshotResponse> createSnapshotWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.deleteWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of \\[Storage service properties\\] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions."
  syntax:
    content: "public Mono<BlobsDeleteResponse> deleteWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "deleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "deleteWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, DeleteSnapshotsOptionType deleteSnapshots, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.deleteWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, DeleteSnapshotsOptionType deleteSnapshots, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, DeleteSnapshotsOptionType deleteSnapshots, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "If the storage account's soft delete feature is disabled then, when a blob is deleted, it is permanently removed from the storage account. If the storage account's soft delete feature is enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible immediately. However, the blob service retains the blob or snapshot for the number of days specified by the DeleteRetentionPolicy section of \\[Storage service properties\\] (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is permanently removed from the storage account. Note that you continue to be charged for the soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a soft-deleted blob or snapshot causes the service to return an HTTP status code of 404 (ResourceNotFound). If the storage account's automatic snapshot feature is enabled, then, when a blob is deleted, an automatic snapshot is created. The blob becomes inaccessible immediately. All other operations on the blob causes the service to return an HTTP status code of 404 (ResourceNotFound). You can access automatic snapshot using snapshot timestamp or version id. You can restore the blob by calling Put or Copy Blob API with automatic snapshot as source. Deleting automatic snapshot requires shared key or special SAS/RBAC permissions."
  syntax:
    content: "public Mono<BlobsDeleteResponse> deleteWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, DeleteSnapshotsOptionType deleteSnapshots, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "deleteSnapshots"
      type: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
      description: "Required if the blob has associated snapshots. Specify one of the following two options: include: Delete the base blob and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself. Possible values include: 'include', 'only'."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "downloadWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "downloadWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.downloadWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Download operation reads or downloads a blob from the system, including its metadata and properties. You can also call Download to read a snapshot or version."
  syntax:
    content: "public Mono<BlobsDownloadResponse> downloadWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDownloadResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  id: "downloadWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "downloadWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String range, String leaseId, Boolean rangeGetContentMD5, Boolean rangeGetContentCRC64, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  nameWithType: "BlobsImpl.downloadWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String range, String leaseId, Boolean rangeGetContentMD5, Boolean rangeGetContentCRC64, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String range, String leaseId, Boolean rangeGetContentMD5, Boolean rangeGetContentCRC64, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Download operation reads or downloads a blob from the system, including its metadata and properties. You can also call Download to read a snapshot or version."
  syntax:
    content: "public Mono<BlobsDownloadResponse> downloadWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String range, String leaseId, Boolean rangeGetContentMD5, Boolean rangeGetContentCRC64, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "range"
      type: "java.lang.String"
      description: "Return only the bytes of the blob in the specified range."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
      description: "When set to true and specified together with the Range, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB in size."
    - id: "rangeGetContentCRC64"
      type: "java.lang.Boolean"
      description: "When set to true and specified together with the Range, the service returns the CRC64 hash for the range, as long as the range is less than or equal to 4 MB in size."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDownloadResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  id: "getAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "getAccessControlWithRestResponseAsync(Context context)"
  nameWithType: "BlobsImpl.getAccessControlWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Get the owner, group, permissions, or access control list for a blob."
  syntax:
    content: "public Mono<BlobsGetAccessControlResponse> getAccessControlWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  id: "getAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  nameWithType: "BlobsImpl.getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Get the owner, group, permissions, or access control list for a blob."
  syntax:
    content: "public Mono<BlobsGetAccessControlResponse> getAccessControlWithRestResponseAsync(Integer timeout, Boolean upn, String leaseId, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "upn"
      type: "java.lang.Boolean"
      description: "Optional. Valid only when Hierarchical Namespace is enabled for the account. If \"true\", the identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If \"false\", the values will be returned as Azure Active Directory Object IDs. The default value is false."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getAccountInfoWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "getAccountInfoWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.getAccountInfoWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Returns the sku name and account kind."
  syntax:
    content: "public Mono<BlobsGetAccountInfoResponse> getAccountInfoWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "getPropertiesWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.getPropertiesWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties for the blob. It does not return the content of the blob."
  syntax:
    content: "public Mono<BlobsGetPropertiesResponse> getPropertiesWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  id: "getPropertiesWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "getPropertiesWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  nameWithType: "BlobsImpl.getPropertiesWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system properties for the blob. It does not return the content of the blob."
  syntax:
    content: "public Mono<BlobsGetPropertiesResponse> getPropertiesWithRestResponseAsync(String containerName, String blob, String snapshot, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more information on working with blob snapshots, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob\"&gt;Creating a Snapshot of a Blob.&lt;/a&gt;."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  nameWithType: "BlobsImpl.releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsReleaseLeaseResponse> releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "releaseLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsReleaseLeaseResponse> releaseLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  nameWithType: "BlobsImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Rename a blob/file. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<BlobsRenameResponse> renameWithRestResponseAsync(String filesystem, String path, String renameSource, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "renameSource"
      type: "java.lang.String"
      description: "The file or directory to be renamed. The value must have the following format: \"/{filesysystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenameResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  id: "renameWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.implementation.models.DirectoryHttpHeaders,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  nameWithType: "BlobsImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Rename a blob/file. By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken. This operation supports conditional HTTP requests. For more information, see \\[Specifying Conditional Headers for Blob Service Operations\\](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). To fail if the destination already exists, use a conditional request with If-None-Match: \"\\*\"."
  syntax:
    content: "public Mono<BlobsRenameResponse> renameWithRestResponseAsync(String filesystem, String path, String renameSource, Integer timeout, String directoryProperties, String posixPermissions, String posixUmask, String leaseId, String sourceLeaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, String requestId, DirectoryHttpHeaders directoryHttpHeaders, Context context)"
    parameters:
    - id: "filesystem"
      type: "java.lang.String"
      description: "The filesystem name."
    - id: "path"
      type: "java.lang.String"
      description: "The namespace path to a file or directory."
    - id: "renameSource"
      type: "java.lang.String"
      description: "The file or directory to be renamed. The value must have the following format: \"/{filesysystem}/{path}\".  If \"x-ms-properties\" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "directoryProperties"
      type: "java.lang.String"
      description: "Optional.  User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name and value pairs \"n1=v1, n2=v2, ...\", where each value is base64 encoded."
    - id: "posixPermissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "posixUmask"
      type: "java.lang.String"
      description: "Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission. A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "sourceLeaseId"
      type: "java.lang.String"
      description: "A lease ID for the source path. If specified, the source path must have an active lease and the leaase ID must match."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "sourceIfModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "sourceIfUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "sourceIfMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "sourceIfNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "directoryHttpHeaders"
      type: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenameResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  nameWithType: "BlobsImpl.renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsRenewLeaseResponse> renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "renewLeaseWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  nameWithType: "BlobsImpl.renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "\\[Update\\] The Lease Blob operation establishes and manages a lock on a blob for write and delete operations."
  syntax:
    content: "public Mono<BlobsRenewLeaseResponse> renewLeaseWithRestResponseAsync(String containerName, String blob, String leaseId, Integer timeout, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "leaseId"
      type: "java.lang.String"
      description: "Specifies the current lease ID on the resource."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Context context)"
  nameWithType: "BlobsImpl.setAccessControlWithRestResponseAsync(Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Set the owner, group, permissions, or access control list for a blob."
  syntax:
    content: "public Mono<BlobsSetAccessControlResponse> setAccessControlWithRestResponseAsync(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  id: "setAccessControlWithRestResponseAsync(java.lang.Integer,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  nameWithType: "BlobsImpl.setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Set the owner, group, permissions, or access control list for a blob."
  syntax:
    content: "public Mono<BlobsSetAccessControlResponse> setAccessControlWithRestResponseAsync(Integer timeout, String leaseId, String owner, String group, String posixPermissions, String posixAcl, String ifMatch, String ifNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String requestId, Context context)"
    parameters:
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "owner"
      type: "java.lang.String"
      description: "Optional. The owner of the blob or directory."
    - id: "group"
      type: "java.lang.String"
      description: "Optional. The owning group of the blob or directory."
    - id: "posixPermissions"
      type: "java.lang.String"
      description: "Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
    - id: "posixAcl"
      type: "java.lang.String"
      description: "Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format \"[scope:][type]:[id]:[permissions]\"."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set HTTP Headers operation sets system properties on the blob."
  syntax:
    content: "public Mono<BlobsSetHTTPHeadersResponse> setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.core.util.Context)"
  id: "setHTTPHeadersWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobHttpHeaders,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, Context context)"
  nameWithType: "BlobsImpl.setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set HTTP Headers operation sets system properties on the blob."
  syntax:
    content: "public Mono<BlobsSetHTTPHeadersResponse> setHTTPHeadersWithRestResponseAsync(String containerName, String blob, Integer timeout, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, BlobHttpHeaders blobHttpHeaders, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "blobHttpHeaders"
      type: "com.azure.storage.blob.models.BlobHttpHeaders"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setMetadataWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.setMetadataWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs."
  syntax:
    content: "public Mono<BlobsSetMetadataResponse> setMetadataWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  id: "setMetadataWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setMetadataWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  nameWithType: "BlobsImpl.setMetadataWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more name-value pairs."
  syntax:
    content: "public Mono<BlobsSetMetadataResponse> setMetadataWithRestResponseAsync(String containerName, String blob, Integer timeout, Map<String,String> metadata, String leaseId, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String requestId, CpkInfo cpkInfo, EncryptionScope encryptionScope, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "cpkInfo"
      type: "com.azure.storage.blob.models.CpkInfo"
      description: "Additional parameters for the operation."
    - id: "encryptionScope"
      type: "com.azure.storage.blob.implementation.models.EncryptionScope"
      description: "Additional parameters for the operation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,com.azure.core.util.Context)"
  id: "setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Context context)"
  nameWithType: "BlobsImpl.setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium storage account and on a block blob in a blob storage account (locally redundant storage only). A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's ETag."
  syntax:
    content: "public Mono<BlobsSetTierResponse> setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetTierResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.Integer,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "setTierWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.storage.blob.models.AccessTier,java.lang.Integer,com.azure.storage.blob.models.RehydratePriority,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Integer timeout, RehydratePriority rehydratePriority, String requestId, String leaseId, Context context)"
  nameWithType: "BlobsImpl.setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Integer timeout, RehydratePriority rehydratePriority, String requestId, String leaseId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Integer timeout, RehydratePriority rehydratePriority, String requestId, String leaseId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium storage account and on a block blob in a blob storage account (locally redundant storage only). A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's ETag."
  syntax:
    content: "public Mono<BlobsSetTierResponse> setTierWithRestResponseAsync(String containerName, String blob, AccessTier tier, Integer timeout, RehydratePriority rehydratePriority, String requestId, String leaseId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "rehydratePriority"
      type: "com.azure.storage.blob.models.RehydratePriority"
      description: "Optional: Indicates the priority with which to rehydrate an archived blob. Possible values include: 'High', 'Standard'."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetTierResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  id: "startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  nameWithType: "BlobsImpl.startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Start Copy From URL operation copies a blob or an internet resource to a new blob."
  syntax:
    content: "public Mono<BlobsStartCopyFromURLResponse> startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copySource"
      type: "java.net.URL"
      description: "Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI. The source blob must either be public or must be authenticated via a shared access signature."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "startCopyFromURLWithRestResponseAsync(java.lang.String,java.lang.String,java.net.URL,java.lang.Integer,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, Context context)"
  nameWithType: "BlobsImpl.startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "The Start Copy From URL operation copies a blob or an internet resource to a new blob."
  syntax:
    content: "public Mono<BlobsStartCopyFromURLResponse> startCopyFromURLWithRestResponseAsync(String containerName, String blob, URL copySource, Integer timeout, Map<String,String> metadata, AccessTier tier, RehydratePriority rehydratePriority, OffsetDateTime sourceIfModifiedSince, OffsetDateTime sourceIfUnmodifiedSince, String sourceIfMatch, String sourceIfNoneMatch, OffsetDateTime ifModifiedSince, OffsetDateTime ifUnmodifiedSince, String ifMatch, String ifNoneMatch, String leaseId, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "copySource"
      type: "java.net.URL"
      description: "Specifies the name of the source page blob snapshot. This value is a URL of up to 2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would appear in a request URI. The source blob must either be public or must be authenticated via a shared access signature."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers. See Naming and Referencing Containers, Blobs, and Metadata for more information."
    - id: "tier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "Optional. Indicates the tier to be set on the blob. Possible values include: 'P4', 'P6', 'P10', 'P15', 'P20', 'P30', 'P40', 'P50', 'P60', 'P70', 'P80', 'Hot', 'Cool', 'Archive'."
    - id: "rehydratePriority"
      type: "com.azure.storage.blob.models.RehydratePriority"
      description: "Optional: Indicates the priority with which to rehydrate an archived blob. Possible values include: 'High', 'Standard'."
    - id: "sourceIfModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "sourceIfUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "sourceIfMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "sourceIfNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has been modified since the specified date/time."
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
    - id: "ifMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs with a matching value."
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "Specify an ETag value to operate only on blobs without a matching value."
    - id: "leaseId"
      type: "java.lang.String"
      description: "If specified, the operation only succeeds if the resource's lease is active and matches this ID."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "undeleteWithRestResponseAsync(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "undeleteWithRestResponseAsync(String containerName, String blob, Context context)"
  nameWithType: "BlobsImpl.undeleteWithRestResponseAsync(String containerName, String blob, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(String containerName, String blob, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Undelete a blob that was previously soft deleted."
  syntax:
    content: "public Mono<BlobsUndeleteResponse> undeleteWithRestResponseAsync(String containerName, String blob, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsUndeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
- uid: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  id: "undeleteWithRestResponseAsync(java.lang.String,java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.implementation.BlobsImpl"
  langs:
  - "java"
  name: "undeleteWithRestResponseAsync(String containerName, String blob, Integer timeout, String requestId, Context context)"
  nameWithType: "BlobsImpl.undeleteWithRestResponseAsync(String containerName, String blob, Integer timeout, String requestId, Context context)"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync(String containerName, String blob, Integer timeout, String requestId, Context context)"
  overload: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync*"
  type: "Method"
  package: "com.azure.storage.blob.implementation"
  summary: "Undelete a blob that was previously soft deleted."
  syntax:
    content: "public Mono<BlobsUndeleteResponse> undeleteWithRestResponseAsync(String containerName, String blob, Integer timeout, String requestId, Context context)"
    parameters:
    - id: "containerName"
      type: "java.lang.String"
      description: "The container name."
    - id: "blob"
      type: "java.lang.String"
      description: "The blob name."
    - id: "timeout"
      type: "java.lang.Integer"
      description: "The timeout parameter is expressed in seconds. For more information, see &lt;a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations\"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;."
    - id: "requestId"
      type: "java.lang.String"
      description: "Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "The context to associate with this operation."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsUndeleteResponse>"
      description: "a Mono which performs the network request upon subscription."
references:
- uid: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
  name: "AzureBlobStorageImpl"
  nameWithType: "AzureBlobStorageImpl"
  fullName: "com.azure.storage.blob.implementation.AzureBlobStorageImpl"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl*"
  name: "BlobsImpl"
  nameWithType: "BlobsImpl.BlobsImpl"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.BlobsImpl"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDownloadResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsDownloadResponse"
    name: "BlobsDownloadResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsDownloadResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync*"
  name: "downloadWithRestResponseAsync"
  nameWithType: "BlobsImpl.downloadWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.downloadWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.blob.models.CpkInfo"
  name: "CpkInfo"
  nameWithType: "CpkInfo"
  fullName: "com.azure.storage.blob.models.CpkInfo"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse"
    name: "BlobsGetPropertiesResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync*"
  name: "getPropertiesWithRestResponseAsync"
  nameWithType: "BlobsImpl.getPropertiesWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getPropertiesWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsDeleteResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsDeleteResponse"
    name: "BlobsDeleteResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsDeleteResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync*"
  name: "deleteWithRestResponseAsync"
  nameWithType: "BlobsImpl.deleteWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.deleteWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
  name: "DeleteSnapshotsOptionType"
  nameWithType: "DeleteSnapshotsOptionType"
  fullName: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse"
    name: "BlobsSetAccessControlResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync*"
  name: "setAccessControlWithRestResponseAsync"
  nameWithType: "BlobsImpl.setAccessControlWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setAccessControlWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse"
    name: "BlobsGetAccessControlResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync*"
  name: "getAccessControlWithRestResponseAsync"
  nameWithType: "BlobsImpl.getAccessControlWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getAccessControlWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenameResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsRenameResponse"
    name: "BlobsRenameResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsRenameResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync*"
  name: "renameWithRestResponseAsync"
  nameWithType: "BlobsImpl.renameWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renameWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
  name: "DirectoryHttpHeaders"
  nameWithType: "DirectoryHttpHeaders"
  fullName: "com.azure.storage.blob.implementation.models.DirectoryHttpHeaders"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsUndeleteResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsUndeleteResponse"
    name: "BlobsUndeleteResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsUndeleteResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync*"
  name: "undeleteWithRestResponseAsync"
  nameWithType: "BlobsImpl.undeleteWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.undeleteWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse"
    name: "BlobsSetHTTPHeadersResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync*"
  name: "setHTTPHeadersWithRestResponseAsync"
  nameWithType: "BlobsImpl.setHTTPHeadersWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setHTTPHeadersWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.models.BlobHttpHeaders"
  name: "BlobHttpHeaders"
  nameWithType: "BlobHttpHeaders"
  fullName: "com.azure.storage.blob.models.BlobHttpHeaders"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse"
    name: "BlobsSetMetadataResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync*"
  name: "setMetadataWithRestResponseAsync"
  nameWithType: "BlobsImpl.setMetadataWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setMetadataWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.models.EncryptionScope"
  name: "EncryptionScope"
  nameWithType: "EncryptionScope"
  fullName: "com.azure.storage.blob.implementation.models.EncryptionScope"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse"
    name: "BlobsAcquireLeaseResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync*"
  name: "acquireLeaseWithRestResponseAsync"
  nameWithType: "BlobsImpl.acquireLeaseWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.acquireLeaseWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse"
    name: "BlobsReleaseLeaseResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync*"
  name: "releaseLeaseWithRestResponseAsync"
  nameWithType: "BlobsImpl.releaseLeaseWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.releaseLeaseWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse"
    name: "BlobsRenewLeaseResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync*"
  name: "renewLeaseWithRestResponseAsync"
  nameWithType: "BlobsImpl.renewLeaseWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.renewLeaseWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse"
    name: "BlobsChangeLeaseResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync*"
  name: "changeLeaseWithRestResponseAsync"
  nameWithType: "BlobsImpl.changeLeaseWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.changeLeaseWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse"
    name: "BlobsBreakLeaseResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync*"
  name: "breakLeaseWithRestResponseAsync"
  nameWithType: "BlobsImpl.breakLeaseWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.breakLeaseWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse"
    name: "BlobsCreateSnapshotResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync*"
  name: "createSnapshotWithRestResponseAsync"
  nameWithType: "BlobsImpl.createSnapshotWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.createSnapshotWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse"
    name: "BlobsStartCopyFromURLResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync*"
  name: "startCopyFromURLWithRestResponseAsync"
  nameWithType: "BlobsImpl.startCopyFromURLWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.startCopyFromURLWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "com.azure.storage.blob.models.AccessTier"
  name: "AccessTier"
  nameWithType: "AccessTier"
  fullName: "com.azure.storage.blob.models.AccessTier"
- uid: "com.azure.storage.blob.models.RehydratePriority"
  name: "RehydratePriority"
  nameWithType: "RehydratePriority"
  fullName: "com.azure.storage.blob.models.RehydratePriority"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse"
    name: "BlobsCopyFromURLResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync*"
  name: "copyFromURLWithRestResponseAsync"
  nameWithType: "BlobsImpl.copyFromURLWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.copyFromURLWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse"
    name: "BlobsAbortCopyFromURLResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync*"
  name: "abortCopyFromURLWithRestResponseAsync"
  nameWithType: "BlobsImpl.abortCopyFromURLWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.abortCopyFromURLWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsSetTierResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsSetTierResponse"
    name: "BlobsSetTierResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsSetTierResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync*"
  name: "setTierWithRestResponseAsync"
  nameWithType: "BlobsImpl.setTierWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.setTierWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse"
    name: "BlobsGetAccountInfoResponse"
    fullName: "com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync*"
  name: "getAccountInfoWithRestResponseAsync"
  nameWithType: "BlobsImpl.getAccountInfoWithRestResponseAsync"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.getAccountInfoWithRestResponseAsync"
  package: "com.azure.storage.blob.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.blob.implementation.BlobsImpl.BlobsService"
  name: "BlobsImpl.BlobsService"
  nameWithType: "BlobsImpl.BlobsService"
  fullName: "com.azure.storage.blob.implementation.BlobsImpl.BlobsService"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.storage.blob.implementation.models.BlobsDownloadResponse"
  name: "BlobsDownloadResponse"
  nameWithType: "BlobsDownloadResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsDownloadResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse"
  name: "BlobsGetPropertiesResponse"
  nameWithType: "BlobsGetPropertiesResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsDeleteResponse"
  name: "BlobsDeleteResponse"
  nameWithType: "BlobsDeleteResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsDeleteResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse"
  name: "BlobsSetAccessControlResponse"
  nameWithType: "BlobsSetAccessControlResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsSetAccessControlResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse"
  name: "BlobsGetAccessControlResponse"
  nameWithType: "BlobsGetAccessControlResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsGetAccessControlResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsRenameResponse"
  name: "BlobsRenameResponse"
  nameWithType: "BlobsRenameResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsRenameResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsUndeleteResponse"
  name: "BlobsUndeleteResponse"
  nameWithType: "BlobsUndeleteResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsUndeleteResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse"
  name: "BlobsSetHTTPHeadersResponse"
  nameWithType: "BlobsSetHTTPHeadersResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsSetHTTPHeadersResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse"
  name: "BlobsSetMetadataResponse"
  nameWithType: "BlobsSetMetadataResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsSetMetadataResponse"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse"
  name: "BlobsAcquireLeaseResponse"
  nameWithType: "BlobsAcquireLeaseResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsAcquireLeaseResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse"
  name: "BlobsReleaseLeaseResponse"
  nameWithType: "BlobsReleaseLeaseResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsReleaseLeaseResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse"
  name: "BlobsRenewLeaseResponse"
  nameWithType: "BlobsRenewLeaseResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsRenewLeaseResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse"
  name: "BlobsChangeLeaseResponse"
  nameWithType: "BlobsChangeLeaseResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsChangeLeaseResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse"
  name: "BlobsBreakLeaseResponse"
  nameWithType: "BlobsBreakLeaseResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsBreakLeaseResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse"
  name: "BlobsCreateSnapshotResponse"
  nameWithType: "BlobsCreateSnapshotResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsCreateSnapshotResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse"
  name: "BlobsStartCopyFromURLResponse"
  nameWithType: "BlobsStartCopyFromURLResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsStartCopyFromURLResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse"
  name: "BlobsCopyFromURLResponse"
  nameWithType: "BlobsCopyFromURLResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsCopyFromURLResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse"
  name: "BlobsAbortCopyFromURLResponse"
  nameWithType: "BlobsAbortCopyFromURLResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsAbortCopyFromURLResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsSetTierResponse"
  name: "BlobsSetTierResponse"
  nameWithType: "BlobsSetTierResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsSetTierResponse"
- uid: "com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse"
  name: "BlobsGetAccountInfoResponse"
  nameWithType: "BlobsGetAccountInfoResponse"
  fullName: "com.azure.storage.blob.implementation.models.BlobsGetAccountInfoResponse"
