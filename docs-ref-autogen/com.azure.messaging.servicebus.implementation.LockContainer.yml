### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.implementation.LockContainer
  id: LockContainer
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation
  children:
  - com.azure.messaging.servicebus.implementation.LockContainer.LockContainer(java.time.Duration)
  - com.azure.messaging.servicebus.implementation.LockContainer.LockContainer(java.time.Duration,java.util.function.Consumer<T>)
  - com.azure.messaging.servicebus.implementation.LockContainer.addOrUpdate(java.lang.String,java.time.OffsetDateTime,T)
  - com.azure.messaging.servicebus.implementation.LockContainer.close()
  - com.azure.messaging.servicebus.implementation.LockContainer.containsUnexpired(java.lang.String)
  - com.azure.messaging.servicebus.implementation.LockContainer.remove(java.lang.String)
  langs:
  - java
  name: LockContainer<T>
  nameWithType: LockContainer<T>
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>
  type: Class
  package: com.azure.messaging.servicebus.implementation
  summary: Container to store items that are periodically cleaned.
  syntax:
    content: public class LockContainer<T> implements AutoCloseable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.AutoCloseable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.implementation.LockContainer.LockContainer(java.time.Duration)
  id: LockContainer(java.time.Duration)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: LockContainer(Duration cleanupInterval)
  nameWithType: LockContainer<T>.LockContainer(Duration cleanupInterval)
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.LockContainer(Duration cleanupInterval)
  overload: com.azure.messaging.servicebus.implementation.LockContainer.LockContainer*
  type: Constructor
  package: com.azure.messaging.servicebus.implementation
  syntax:
    content: public LockContainer(Duration cleanupInterval)
    parameters:
    - id: cleanupInterval
      type: java.time.Duration
- uid: com.azure.messaging.servicebus.implementation.LockContainer.LockContainer(java.time.Duration,java.util.function.Consumer<T>)
  id: LockContainer(java.time.Duration,java.util.function.Consumer<T>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: LockContainer(Duration cleanupInterval, Consumer<T> onExpired)
  nameWithType: LockContainer<T>.LockContainer(Duration cleanupInterval, Consumer<T> onExpired)
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.LockContainer(Duration cleanupInterval, Consumer<T> onExpired)
  overload: com.azure.messaging.servicebus.implementation.LockContainer.LockContainer*
  type: Constructor
  package: com.azure.messaging.servicebus.implementation
  syntax:
    content: public LockContainer(Duration cleanupInterval, Consumer<T> onExpired)
    parameters:
    - id: cleanupInterval
      type: java.time.Duration
    - id: onExpired
      type: java.util.function.Consumer<T>
- uid: com.azure.messaging.servicebus.implementation.LockContainer.addOrUpdate(java.lang.String,java.time.OffsetDateTime,T)
  id: addOrUpdate(java.lang.String,java.time.OffsetDateTime,T)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: addOrUpdate(String lockToken, OffsetDateTime lockTokenExpiration, T item)
  nameWithType: LockContainer<T>.addOrUpdate(String lockToken, OffsetDateTime lockTokenExpiration, T item)
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.addOrUpdate(String lockToken, OffsetDateTime lockTokenExpiration, T item)
  overload: com.azure.messaging.servicebus.implementation.LockContainer.addOrUpdate*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Adds or updates the expiration time on a lock token. If the expiration time in the container is larger than `lockTokenExpiration`, then the current container value is used.
  syntax:
    content: public OffsetDateTime addOrUpdate(String lockToken, OffsetDateTime lockTokenExpiration, T item)
    parameters:
    - id: lockToken
      type: java.lang.String
      description: Token to update associated lock expiration.
    - id: lockTokenExpiration
      type: java.time.OffsetDateTime
      description: Time at which the lock token expires.
    - id: item
      type: T
      description: Item to hold in the container.
    return:
      type: java.time.OffsetDateTime
      description: >-
        The updated value in the container. If the expiration time in the container is larger than <code>
             lockTokenExpiration</code>, then the current container value is used.
- uid: com.azure.messaging.servicebus.implementation.LockContainer.close()
  id: close()
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: close()
  nameWithType: LockContainer<T>.close()
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.close()
  overload: com.azure.messaging.servicebus.implementation.LockContainer.close*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  syntax:
    content: public void close()
- uid: com.azure.messaging.servicebus.implementation.LockContainer.containsUnexpired(java.lang.String)
  id: containsUnexpired(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: containsUnexpired(String lockToken)
  nameWithType: LockContainer<T>.containsUnexpired(String lockToken)
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.containsUnexpired(String lockToken)
  overload: com.azure.messaging.servicebus.implementation.LockContainer.containsUnexpired*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Gets whether or not the lock token is held in the container and has not expired.
  syntax:
    content: public boolean containsUnexpired(String lockToken)
    parameters:
    - id: lockToken
      type: java.lang.String
      description: Lock token to check.
    return:
      type: boolean
      description: <code>true</code> if the lock token is in the container and has not expired; <code>false</code> otherwise.
- uid: com.azure.messaging.servicebus.implementation.LockContainer.remove(java.lang.String)
  id: remove(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0
  parent: com.azure.messaging.servicebus.implementation.LockContainer
  langs:
  - java
  name: remove(String lockToken)
  nameWithType: LockContainer<T>.remove(String lockToken)
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.remove(String lockToken)
  overload: com.azure.messaging.servicebus.implementation.LockContainer.remove*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Removes the lock token from the map.
  syntax:
    content: public void remove(String lockToken)
    parameters:
    - id: lockToken
      type: java.lang.String
      description: Token to remove.
references:
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.servicebus.implementation.LockContainer.LockContainer*
  name: LockContainer
  nameWithType: LockContainer<T>.LockContainer
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.LockContainer
  package: com.azure.messaging.servicebus.implementation
- uid: java.util.function.Consumer<T>
  spec.java:
  - uid: java.util.function.Consumer
    name: Consumer
    fullName: java.util.function.Consumer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.messaging.servicebus.implementation.LockContainer.addOrUpdate*
  name: addOrUpdate
  nameWithType: LockContainer<T>.addOrUpdate
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.addOrUpdate
  package: com.azure.messaging.servicebus.implementation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.messaging.servicebus.implementation.LockContainer.containsUnexpired*
  name: containsUnexpired
  nameWithType: LockContainer<T>.containsUnexpired
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.containsUnexpired
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.implementation.LockContainer.remove*
  name: remove
  nameWithType: LockContainer<T>.remove
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.remove
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.implementation.LockContainer.close*
  name: close
  nameWithType: LockContainer<T>.close
  fullName: com.azure.messaging.servicebus.implementation.LockContainer<T>.close
  package: com.azure.messaging.servicebus.implementation
- uid: java.lang.AutoCloseable
  name: AutoCloseable
  nameWithType: AutoCloseable
  fullName: java.lang.AutoCloseable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.function.Consumer
  name: Consumer
  nameWithType: Consumer
  fullName: java.util.function.Consumer
