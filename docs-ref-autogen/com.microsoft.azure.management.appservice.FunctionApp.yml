### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.appservice.WebAppBase.alwaysOn()
- com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurations(String)
- com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurationsAsync(String)
- com.microsoft.azure.management.appservice.WebAppBase.appServicePlanId()
- com.microsoft.azure.management.appservice.WebAppBase.appSettings()
- com.microsoft.azure.management.appservice.WebAppBase.autoSwapSlotName()
- com.microsoft.azure.management.appservice.WebAppBase.availabilityState()
- com.microsoft.azure.management.appservice.WebAppBase.clientAffinityEnabled()
- com.microsoft.azure.management.appservice.WebAppBase.clientCertEnabled()
- com.microsoft.azure.management.appservice.WebAppBase.cloningInfo()
- com.microsoft.azure.management.appservice.WebAppBase.connectionStrings()
- com.microsoft.azure.management.appservice.WebAppBase.containerSize()
- com.microsoft.azure.management.appservice.WebAppBase.defaultDocuments()
- com.microsoft.azure.management.appservice.WebAppBase.defaultHostName()
- com.microsoft.azure.management.appservice.WebAppBase.deploy()
- com.microsoft.azure.management.appservice.WebAppBase.enabled()
- com.microsoft.azure.management.appservice.WebAppBase.enabledHostNames()
- com.microsoft.azure.management.appservice.WebAppBase.gatewaySiteName()
- com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindings()
- com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindingsAsync()
- com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfile()
- com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfileAsync()
- com.microsoft.azure.management.appservice.WebAppBase.getSourceControl()
- com.microsoft.azure.management.appservice.WebAppBase.getSourceControlAsync()
- com.microsoft.azure.management.appservice.WebAppBase.hostNames()
- com.microsoft.azure.management.appservice.WebAppBase.hostNamesDisabled()
- com.microsoft.azure.management.appservice.WebAppBase.hostNameSslStates()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.appservice.WebAppBase.isDefaultContainer()
- com.microsoft.azure.management.appservice.WebAppBase.isPremiumApp()
- com.microsoft.azure.management.appservice.WebAppBase.javaContainer()
- com.microsoft.azure.management.appservice.WebAppBase.javaContainerVersion()
- com.microsoft.azure.management.appservice.WebAppBase.javaVersion()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.appservice.WebAppBase.lastModifiedTime()
- com.microsoft.azure.management.appservice.WebAppBase.linuxFxVersion()
- com.microsoft.azure.management.appservice.WebAppBase.managedPipelineMode()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.appservice.WebAppBase.microService()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.appservice.WebAppBase.netFrameworkVersion()
- com.microsoft.azure.management.appservice.WebAppBase.nodeVersion()
- com.microsoft.azure.management.appservice.WebAppBase.operatingSystem()
- com.microsoft.azure.management.appservice.WebAppBase.outboundIPAddresses()
- com.microsoft.azure.management.appservice.WebAppBase.phpVersion()
- com.microsoft.azure.management.appservice.WebAppBase.platformArchitecture()
- com.microsoft.azure.management.appservice.WebAppBase.pythonVersion()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingEnabled()
- com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingVersion()
- com.microsoft.azure.management.appservice.WebAppBase.repositorySiteName()
- com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurations()
- com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurationsAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.appservice.WebAppBase.restart()
- com.microsoft.azure.management.appservice.WebAppBase.restartAsync()
- com.microsoft.azure.management.appservice.WebAppBase.scmSiteAlsoStopped()
- com.microsoft.azure.management.appservice.WebAppBase.start()
- com.microsoft.azure.management.appservice.WebAppBase.startAsync()
- com.microsoft.azure.management.appservice.WebAppBase.state()
- com.microsoft.azure.management.appservice.WebAppBase.stop()
- com.microsoft.azure.management.appservice.WebAppBase.stopAsync()
- com.microsoft.azure.management.appservice.WebAppBase.swap(String)
- com.microsoft.azure.management.appservice.WebAppBase.swapAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.appservice.WebAppBase.targetSwapSlot()
- com.microsoft.azure.management.appservice.WebAppBase.trafficManagerHostNames()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
- com.microsoft.azure.management.appservice.WebAppBase.usageState()
- com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnership(String,String)
- com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnershipAsync(String,String)
- com.microsoft.azure.management.appservice.WebAppBase.webSocketsEnabled()
methods:
- fullName: com.microsoft.azure.management.appservice.FunctionApp.addFunctionKey(String functionName, String keyName, String keyValue)
  name: addFunctionKey(String functionName, String keyName, String keyValue)
  nameWithType: FunctionApp.addFunctionKey(String functionName, String keyName, String keyValue)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the key to add </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>optional. If not provided, a value will be generated. </p>
    name: keyValue
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the added function key </p>
    type: <xref href="com.microsoft.azure.management.appservice.NameValuePair?alt=com.microsoft.azure.management.appservice.NameValuePair&text=NameValuePair" data-throw-if-not-resolved="False"/>
  summary: <p>Adds a key to a function in this function app. </p>
  syntax: public NameValuePair addFunctionKey(String functionName, String keyName, String keyValue)
  uid: com.microsoft.azure.management.appservice.FunctionApp.addFunctionKey(String,String,String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.addFunctionKeyAsync(String functionName, String keyName, String keyValue)
  name: addFunctionKeyAsync(String functionName, String keyName, String keyValue)
  nameWithType: FunctionApp.addFunctionKeyAsync(String functionName, String keyName, String keyValue)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the key to add </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>optional. If not provided, a value will be generated. </p>
    name: keyValue
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the added function key </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.appservice.NameValuePair?alt=com.microsoft.azure.management.appservice.NameValuePair&text=NameValuePair" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Adds a key to a function in this function app. </p>
  syntax: public Observable<NameValuePair> addFunctionKeyAsync(String functionName, String keyName, String keyValue)
  uid: com.microsoft.azure.management.appservice.FunctionApp.addFunctionKeyAsync(String,String,String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.deploymentSlots()
  name: deploymentSlots()
  nameWithType: FunctionApp.deploymentSlots()
  returns:
    description: <p>the entry point to deployment slot management API under the function app </p>
    type: <xref href="com.microsoft.azure.management.appservice.FunctionDeploymentSlots?alt=com.microsoft.azure.management.appservice.FunctionDeploymentSlots&text=FunctionDeploymentSlots" data-throw-if-not-resolved="False"/>
  syntax: public FunctionDeploymentSlots deploymentSlots()
  uid: com.microsoft.azure.management.appservice.FunctionApp.deploymentSlots()
- fullName: com.microsoft.azure.management.appservice.FunctionApp.getMasterKey()
  name: getMasterKey()
  nameWithType: FunctionApp.getMasterKey()
  returns:
    description: <p>the master key for the function app </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getMasterKey()
  uid: com.microsoft.azure.management.appservice.FunctionApp.getMasterKey()
- fullName: com.microsoft.azure.management.appservice.FunctionApp.getMasterKeyAsync()
  name: getMasterKeyAsync()
  nameWithType: FunctionApp.getMasterKeyAsync()
  returns:
    description: <p>the master key for the function app </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Observable<String> getMasterKeyAsync()
  uid: com.microsoft.azure.management.appservice.FunctionApp.getMasterKeyAsync()
- fullName: com.microsoft.azure.management.appservice.FunctionApp.listFunctionKeys(String functionName)
  name: listFunctionKeys(String functionName)
  nameWithType: FunctionApp.listFunctionKeys(String functionName)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the function key </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Retrieve the function key for a specific function. </p>
  syntax: public Map<String, String> listFunctionKeys(String functionName)
  uid: com.microsoft.azure.management.appservice.FunctionApp.listFunctionKeys(String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.listFunctionKeysAsync(String functionName)
  name: listFunctionKeysAsync(String functionName)
  nameWithType: FunctionApp.listFunctionKeysAsync(String functionName)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the function key </p>
    type: <xref href="Observable%3CMap%3CString%2C+String%3E%3E?alt=Observable%3CMap%3CString%2C+String%3E%3E&text=Observable%3CMap%3CString%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Retrieve the function key for a specific function. </p>
  syntax: public Observable<Map<String, String>> listFunctionKeysAsync(String functionName)
  uid: com.microsoft.azure.management.appservice.FunctionApp.listFunctionKeysAsync(String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.removeFunctionKey(String functionName, String keyName)
  name: removeFunctionKey(String functionName, String keyName)
  nameWithType: FunctionApp.removeFunctionKey(String functionName, String keyName)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the key to remove </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Removes a key to a function in this function app. </p>
  syntax: public void removeFunctionKey(String functionName, String keyName)
  uid: com.microsoft.azure.management.appservice.FunctionApp.removeFunctionKey(String,String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.removeFunctionKeyAsync(String functionName, String keyName)
  name: removeFunctionKeyAsync(String functionName, String keyName)
  nameWithType: FunctionApp.removeFunctionKeyAsync(String functionName, String keyName)
  parameters:
  - description: <p>the name of the function </p>
    name: functionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the key to remove </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the completable of the operation </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Removes a key to a function in this function app. </p>
  syntax: public Completable removeFunctionKeyAsync(String functionName, String keyName)
  uid: com.microsoft.azure.management.appservice.FunctionApp.removeFunctionKeyAsync(String,String)
- fullName: com.microsoft.azure.management.appservice.FunctionApp.storageAccount()
  name: storageAccount()
  nameWithType: FunctionApp.storageAccount()
  returns:
    description: <p>the storage account associated with the function app </p>
    type: <xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>
  syntax: public StorageAccount storageAccount()
  uid: com.microsoft.azure.management.appservice.FunctionApp.storageAccount()
- fullName: com.microsoft.azure.management.appservice.FunctionApp.syncTriggers()
  name: syncTriggers()
  nameWithType: FunctionApp.syncTriggers()
  summary: <p>Syncs the triggers on the function app. </p>
  syntax: public void syncTriggers()
  uid: com.microsoft.azure.management.appservice.FunctionApp.syncTriggers()
- fullName: com.microsoft.azure.management.appservice.FunctionApp.syncTriggersAsync()
  name: syncTriggersAsync()
  nameWithType: FunctionApp.syncTriggersAsync()
  returns:
    description: <p>a completable for the operation </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Syncs the triggers on the function app. </p>
  syntax: public Completable syncTriggersAsync()
  uid: com.microsoft.azure.management.appservice.FunctionApp.syncTriggersAsync()
nameWithType: FunctionApp
syntax: public interface FunctionApp extends WebAppBase,Refreshable<FunctionApp>,Updatable<FunctionApp.Update>
type: interface
uid: com.microsoft.azure.management.appservice.FunctionApp
fullName: com.microsoft.azure.management.appservice.FunctionApp
name: FunctionApp
package: com.microsoft.azure.management.appservice
summary: <p>An immutable client-side representation of an Azure Function App. </p>
metadata: {}
