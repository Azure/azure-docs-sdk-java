### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.ListShardMap(ShardMapManager shardMapManager, StoreShardMap ssm)
  name: ListShardMap(ShardMapManager shardMapManager, StoreShardMap ssm)
  nameWithType: ListShardMap<KeyT>.ListShardMap(ShardMapManager shardMapManager, StoreShardMap ssm)
  parameters:
  - description: <p>Reference to ShardMapManager. </p>
    name: shardMapManager
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager?alt=com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager&text=ShardMapManager" data-throw-if-not-resolved="False"/>
  - description: <p>Storage representation. </p>
    name: ssm
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreShardMap?alt=com.microsoft.azure.elasticdb.shard.store.StoreShardMap&text=StoreShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a new instance.</p>

    <p></p>
  syntax: public ListShardMap(ShardMapManager shardMapManager, StoreShardMap ssm)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.ListShardMap(ShardMapManager,StoreShardMap)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Cloneable" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.elasticdb.shard.map.ShardMap.createShard(ShardCreationInfo)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.createShard(ShardLocation)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.deleteShard(Shard)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getApplicationNameSuffix()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getId()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getKeyType()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getMapType()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getName()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getShard(ShardLocation)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getShardMapManager()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getShards()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.getStoreShardMap()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.openConnection(IShardProvider,String)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.openConnection(IShardProvider,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.openConnectionAsync(IShardProvider,String)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.openConnectionAsync(IShardProvider,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.ShardMap(ShardMapManager,StoreShardMap)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.shardMapManager
- com.microsoft.azure.elasticdb.shard.map.ShardMap.storeShardMap
- com.microsoft.azure.elasticdb.shard.map.ShardMap.toString()
- com.microsoft.azure.elasticdb.shard.map.ShardMap.tryGetShard(ShardLocation,ReferenceObjectHelper<Shard>)
- com.microsoft.azure.elasticdb.shard.map.ShardMap.updateShard(Shard,ShardUpdate)
methods:
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.clone()
  name: clone()
  nameWithType: ListShardMap<KeyT>.clone()
  returns:
    description: <p>A cloned instance of the shard map. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clones the specified shard map.</p>

    <p></p>
  syntax: public ShardMap clone()
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.clone()
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.cloneCore()
  name: cloneCore()
  nameWithType: ListShardMap<KeyT>.cloneCore()
  returns:
    description: <p>Cloned shard map instance. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clones the current shard map instance.</p>

    <p></p>
  syntax: protected ShardMap cloneCore()
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.cloneCore()
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.createPointMapping(KeyT point, Shard shard)
  name: createPointMapping(KeyT point, Shard shard)
  nameWithType: ListShardMap<KeyT>.createPointMapping(KeyT point, Shard shard)
  parameters:
  - description: <p>Point for which to create the mapping. </p>
    name: point
    type: <xref href="KeyT?alt=KeyT&text=KeyT" data-throw-if-not-resolved="False"/>
  - description: <p>Shard associated with the point mapping. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Newly created mapping. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates and adds a point mapping to ShardMap.</p>

    <p></p>
  syntax: public PointMapping createPointMapping(KeyT point, Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.createPointMapping(KeyT,Shard)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.createPointMapping(PointMappingCreationInfo creationInfo)
  name: createPointMapping(PointMappingCreationInfo creationInfo)
  nameWithType: ListShardMap<KeyT>.createPointMapping(PointMappingCreationInfo creationInfo)
  parameters:
  - description: <p>Information about mapping to be added. </p>
    name: creationInfo
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMappingCreationInfo?alt=com.microsoft.azure.elasticdb.shard.base.PointMappingCreationInfo&text=PointMappingCreationInfo" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Newly created mapping. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates and adds a point mapping to ShardMap.</p>

    <p></p>
  syntax: public PointMapping createPointMapping(PointMappingCreationInfo creationInfo)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.createPointMapping(PointMappingCreationInfo)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.deleteMapping(PointMapping mapping)
  name: deleteMapping(PointMapping mapping)
  nameWithType: ListShardMap<KeyT>.deleteMapping(PointMapping mapping)
  parameters:
  - description: <p>Mapping being removed. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes a point mapping.</p>

    <p></p>
  syntax: public void deleteMapping(PointMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.deleteMapping(PointMapping)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMapper()
  name: getMapper()
  nameWithType: ListShardMap<KeyT>.getMapper()
  returns:
    description: <p>ListShardMapper for given key type. </p>
    type: '&lt;V&gt; <xref href="com.microsoft.azure.elasticdb.shard.mapper.IShardMapper?alt=com.microsoft.azure.elasticdb.shard.mapper.IShardMapper&text=IShardMapper" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Gets the mapper. This method is used by OpenConnection/Lookup of V. </p>

    <p></p>
  syntax: public <V> IShardMapper getMapper()
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMapper()
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappingForKey(KeyT key)
  name: getMappingForKey(KeyT key)
  nameWithType: ListShardMap<KeyT>.getMappingForKey(KeyT key)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="KeyT?alt=KeyT&text=KeyT" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Mapping that contains the key value. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Looks up the key value and returns the corresponding mapping. Only the global shard map store is searched, not the local cache. This is equivalent to .</p>

    <p></p>
  syntax: public PointMapping getMappingForKey(KeyT key)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappingForKey(KeyT)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappingForKey(KeyT key, LookupOptions lookupOptions)
  name: getMappingForKey(KeyT key, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappingForKey(KeyT key, LookupOptions lookupOptions)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="KeyT?alt=KeyT&text=KeyT" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Mapping that contains the key value. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Looks up the key value and returns the corresponding mapping.</p>

    <p></p>
  syntax: public PointMapping getMappingForKey(KeyT key, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappingForKey(KeyT,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappingLockOwner(PointMapping mapping)
  name: getMappingLockOwner(PointMapping mapping)
  nameWithType: ListShardMap<KeyT>.getMappingLockOwner(PointMapping mapping)
  parameters:
  - description: <p>Input range mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An instance of MappingLockToken </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.MappingLockToken?alt=com.microsoft.azure.elasticdb.shard.base.MappingLockToken&text=MappingLockToken" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the lock owner id of the specified mapping.</p>

    <p></p>
  syntax: public MappingLockToken getMappingLockOwner(PointMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappingLockOwner(PointMapping)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings()
  name: getMappings()
  nameWithType: ListShardMap<KeyT>.getMappings()
  returns:
    description: <p>Read-only collection of all point mappings on the shard map. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the point mappings for the shard map.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings()
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings()
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(LookupOptions lookupOptions)
  name: getMappings(LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(LookupOptions lookupOptions)
  parameters:
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of all point mappings on the shard map. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the point mappings for the shard map.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range)
  name: getMappings(Range range)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, LookupOptions lookupOptions)
  name: getMappings(Range range, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, LookupOptions lookupOptions)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, Shard shard)
  name: getMappings(Range range, Shard shard)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, Shard shard)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range and shard constraints. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range and given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,Shard)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  name: getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range and shard constraints. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range and given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,Shard,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Shard shard)
  name: getMappings(Shard shard)
  nameWithType: ListShardMap<KeyT>.getMappings(Shard shard)
  parameters:
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given shard constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist for the given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Shard)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Shard shard, LookupOptions lookupOptions)
  name: getMappings(Shard shard, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given shard constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist for the given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Shard,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.lockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  name: lockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  nameWithType: ListShardMap<KeyT>.lockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  parameters:
  - description: <p>Input range mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  - description: <p>An instance of MappingLockToken </p>
    name: mappingLockToken
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.MappingLockToken?alt=com.microsoft.azure.elasticdb.shard.base.MappingLockToken&text=MappingLockToken" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Locks the mapping for the specified owner The state of a locked mapping can only be modified by the lock owner.</p>

    <p></p>
  syntax: public void lockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.lockMapping(PointMapping,MappingLockToken)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.markMappingOffline(PointMapping mapping)
  name: markMappingOffline(PointMapping mapping)
  nameWithType: ListShardMap<KeyT>.markMappingOffline(PointMapping mapping)
  parameters:
  - description: <p>Input point mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An offline mapping. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Marks the specified mapping offline.</p>

    <p></p>
  syntax: public PointMapping markMappingOffline(PointMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.markMappingOffline(PointMapping)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.markMappingOnline(PointMapping mapping)
  name: markMappingOnline(PointMapping mapping)
  nameWithType: ListShardMap<KeyT>.markMappingOnline(PointMapping mapping)
  parameters:
  - description: <p>Input point mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An online mapping. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Marks the specified mapping online.</p>

    <p></p>
  syntax: public PointMapping markMappingOnline(PointMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.markMappingOnline(PointMapping)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.tryGetMappingForKey(KeyT key, LookupOptions lookupOptions, ReferenceObjectHelper<PointMapping> pointMapping)
  name: tryGetMappingForKey(KeyT key, LookupOptions lookupOptions, ReferenceObjectHelper<PointMapping> pointMapping)
  nameWithType: ListShardMap<KeyT>.tryGetMappingForKey(KeyT key, LookupOptions lookupOptions, ReferenceObjectHelper<PointMapping> pointMapping)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="KeyT?alt=KeyT&text=KeyT" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  - description: <p>Mapping that contains the key value. </p>
    name: pointMapping
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if mapping is found, <code>false</code> otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to looks up the key value and place the corresponding mapping in <em>pointMapping</em> .</p>

    <p></p>
  syntax: public boolean tryGetMappingForKey(KeyT key, LookupOptions lookupOptions, ReferenceObjectHelper<PointMapping> pointMapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.tryGetMappingForKey(KeyT,LookupOptions,ReferenceObjectHelper<PointMapping>)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.tryGetMappingForKey(KeyT key, ReferenceObjectHelper<PointMapping> pointMapping)
  name: tryGetMappingForKey(KeyT key, ReferenceObjectHelper<PointMapping> pointMapping)
  nameWithType: ListShardMap<KeyT>.tryGetMappingForKey(KeyT key, ReferenceObjectHelper<PointMapping> pointMapping)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="KeyT?alt=KeyT&text=KeyT" data-throw-if-not-resolved="False"/>
  - description: <p>Mapping that contains the key value. </p>
    name: pointMapping
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if mapping is found, <code>false</code> otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to looks up the key value and place the corresponding mapping in <em>pointMapping</em> . Only the global shard map store is searched, not local cache. This is equivalent to .</p>

    <p></p>
  syntax: public boolean tryGetMappingForKey(KeyT key, ReferenceObjectHelper<PointMapping> pointMapping)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.tryGetMappingForKey(KeyT,ReferenceObjectHelper<PointMapping>)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.unlockMapping(MappingLockToken mappingLockToken)
  name: unlockMapping(MappingLockToken mappingLockToken)
  nameWithType: ListShardMap<KeyT>.unlockMapping(MappingLockToken mappingLockToken)
  parameters:
  - description: <p>An instance of MappingLockToken </p>
    name: mappingLockToken
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.MappingLockToken?alt=com.microsoft.azure.elasticdb.shard.base.MappingLockToken&text=MappingLockToken" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unlocks all mappings in this map that belong to the given MappingLockToken.</p>

    <p></p>
  syntax: public void unlockMapping(MappingLockToken mappingLockToken)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.unlockMapping(MappingLockToken)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.unlockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  name: unlockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  nameWithType: ListShardMap<KeyT>.unlockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  parameters:
  - description: <p>Input range mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  - description: <p>An instance of MappingLockToken </p>
    name: mappingLockToken
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.MappingLockToken?alt=com.microsoft.azure.elasticdb.shard.base.MappingLockToken&text=MappingLockToken" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unlocks the specified mapping</p>

    <p></p>
  syntax: public void unlockMapping(PointMapping mapping, MappingLockToken mappingLockToken)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.unlockMapping(PointMapping,MappingLockToken)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.updateMapping(PointMapping currentMapping, PointMappingUpdate update)
  name: updateMapping(PointMapping currentMapping, PointMappingUpdate update)
  nameWithType: ListShardMap<KeyT>.updateMapping(PointMapping currentMapping, PointMappingUpdate update)
  parameters:
  - description: <p>Mapping being updated. </p>
    name: currentMapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Updated properties of the mapping. </p>
    name: update
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMappingUpdate?alt=com.microsoft.azure.elasticdb.shard.base.PointMappingUpdate&text=PointMappingUpdate" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>New instance of mapping with updated information. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a PointMapping&lt;KeyT&gt; with the updates provided in the <em>update</em>  parameter.</p>

    <p></p>
  syntax: public PointMapping updateMapping(PointMapping currentMapping, PointMappingUpdate update)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.updateMapping(PointMapping,PointMappingUpdate)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.updateMapping(PointMapping currentMapping, PointMappingUpdate update, MappingLockToken mappingLockToken)
  name: updateMapping(PointMapping currentMapping, PointMappingUpdate update, MappingLockToken mappingLockToken)
  nameWithType: ListShardMap<KeyT>.updateMapping(PointMapping currentMapping, PointMappingUpdate update, MappingLockToken mappingLockToken)
  parameters:
  - description: <p>Mapping being updated. </p>
    name: currentMapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Updated properties of the Shard. </p>
    name: update
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMappingUpdate?alt=com.microsoft.azure.elasticdb.shard.base.PointMappingUpdate&text=PointMappingUpdate" data-throw-if-not-resolved="False"/>
  - description: <p>An instance of MappingLockToken </p>
    name: mappingLockToken
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.MappingLockToken?alt=com.microsoft.azure.elasticdb.shard.base.MappingLockToken&text=MappingLockToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>New instance of mapping with updated information. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a point mapping with the changes provided in the <em>update</em>  parameter.</p>

    <p></p>
  syntax: public PointMapping updateMapping(PointMapping currentMapping, PointMappingUpdate update, MappingLockToken mappingLockToken)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.updateMapping(PointMapping,PointMappingUpdate,MappingLockToken)
nameWithType: ListShardMap<KeyT>
syntax: public class ListShardMap<KeyT> extends ShardMap
type: class
typeParameters:
- name: KeyT
uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap
fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>
name: ListShardMap<KeyT>
package: com.microsoft.azure.elasticdb.shard.map
summary: <p>Represents a shard map of points where points are of the specified key. </p>
metadata: {}
