### YamlMime:JavaMember
uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.invokeDependencyAsync*"
fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.invokeDependencyAsync"
name: "invokeDependencyAsync"
nameWithType: "TaskGroup.invokeDependencyAsync"
members:
- uid: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.invokeDependencyAsync(com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  fullName: "com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.invokeDependencyAsync(TaskGroup.InvocationContext context)"
  name: "invokeDependencyAsync(TaskGroup.InvocationContext context)"
  nameWithType: "TaskGroup.invokeDependencyAsync(TaskGroup.InvocationContext context)"
  summary: "Invokes dependency tasks in the group, but not."
  parameters:
  - description: "group level shared context that need be passed to invokeAsync(cxt)\n                method of each task item in the group when it is selected for invocation."
    name: "context"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext?alt=com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext&text=InvocationContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<Indexable> invokeDependencyAsync(TaskGroup.InvocationContext context)"
  returns:
    description: "an observable that emits the result of tasks in the order they finishes."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.resources.fluentcore.dag"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
