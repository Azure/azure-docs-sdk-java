### YamlMime:JavaPackage
uid: "com.azure.identity"
fullName: "com.azure.identity"
name: "com.azure.identity"
summary: "<p>The Azure Identity library provides\n <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a> token\n authentication support across the\n <a href=\"https://learn.microsoft.com/azure/developer/java/sdk/\">Azure SDK</a>."
classes:
- "com.azure.identity.AadCredentialBuilderBase"
- "com.azure.identity.AuthenticationRecord"
- "com.azure.identity.AuthenticationRequiredException"
- "com.azure.identity.AuthorizationCodeCredential"
- "com.azure.identity.AuthorizationCodeCredentialBuilder"
- "com.azure.identity.AzureAuthorityHosts"
- "com.azure.identity.AzureCliCredential"
- "com.azure.identity.AzureCliCredentialBuilder"
- "com.azure.identity.AzureDeveloperCliCredential"
- "com.azure.identity.AzureDeveloperCliCredentialBuilder"
- "com.azure.identity.AzurePowerShellCredential"
- "com.azure.identity.AzurePowerShellCredentialBuilder"
- "com.azure.identity.BrowserCustomizationOptions"
- "com.azure.identity.ChainedTokenCredential"
- "com.azure.identity.ChainedTokenCredentialBuilder"
- "com.azure.identity.ClientAssertionCredential"
- "com.azure.identity.ClientAssertionCredentialBuilder"
- "com.azure.identity.ClientCertificateCredential"
- "com.azure.identity.ClientCertificateCredentialBuilder"
- "com.azure.identity.ClientSecretCredential"
- "com.azure.identity.ClientSecretCredentialBuilder"
- "com.azure.identity.CredentialBuilderBase"
- "com.azure.identity.CredentialUnavailableException"
- "com.azure.identity.DefaultAzureCredential"
- "com.azure.identity.DefaultAzureCredentialBuilder"
- "com.azure.identity.DeviceCodeCredential"
- "com.azure.identity.DeviceCodeCredentialBuilder"
- "com.azure.identity.DeviceCodeInfo"
- "com.azure.identity.EnvironmentCredential"
- "com.azure.identity.EnvironmentCredentialBuilder"
- "com.azure.identity.IntelliJCredential"
- "com.azure.identity.IntelliJCredentialBuilder"
- "com.azure.identity.InteractiveBrowserCredential"
- "com.azure.identity.InteractiveBrowserCredentialBuilder"
- "com.azure.identity.ManagedIdentityCredential"
- "com.azure.identity.ManagedIdentityCredentialBuilder"
- "com.azure.identity.OnBehalfOfCredential"
- "com.azure.identity.OnBehalfOfCredentialBuilder"
- "com.azure.identity.SharedTokenCacheCredential"
- "com.azure.identity.SharedTokenCacheCredentialBuilder"
- "com.azure.identity.TokenCachePersistenceOptions"
- "com.azure.identity.UsernamePasswordCredential"
- "com.azure.identity.UsernamePasswordCredentialBuilder"
- "com.azure.identity.VisualStudioCodeCredential"
- "com.azure.identity.VisualStudioCodeCredentialBuilder"
- "com.azure.identity.WorkloadIdentityCredential"
- "com.azure.identity.WorkloadIdentityCredentialBuilder"
desc: "<p>The Azure Identity library provides\n <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a> token\n authentication support across the\n <a href=\"https://learn.microsoft.com/azure/developer/java/sdk/\">Azure SDK</a>. The library focuses on\n OAuth authentication with Microsoft Entra ID, and it offers various credential classes capable of acquiring a Microsoft Entra token\n to authenticate service requests. All the credential classes in this package are implementations of the\n TokenCredential interface offered by azure-core, and any of them can be used to construct service clients capable\n of authenticating with a TokenCredential.</p>\n\n <h2>Getting Started</h2>\n\n <p>The <xref uid=\"com.azure.identity.DefaultAzureCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DefaultAzureCredential\"></xref> is appropriate for most scenarios where the application is\n intended to ultimately be run in Azure. This is because the <xref uid=\"com.azure.identity.DefaultAzureCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DefaultAzureCredential\"></xref>\n combines credentials commonly used to authenticate when deployed, with credentials used to authenticate in a\n development environment.</p>\n\n <p><strong>Note:</strong> This credential is intended to simplify getting started with the SDK by handling\n common scenarios with reasonable default behaviors. Developers who want more control or whose scenario isn't\n served by the default settings should use other credential types (detailed below). For more information refer to the\n <a href=\"https://aka.ms/azsdk/java/identity/defaultazurecredential/docs\">default azure credential conceptual\n documentation</a>.</p>\n\n <p><strong>Sample: Construct a simple DefaultAzureCredential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.DefaultAzureCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DefaultAzureCredential\"></xref>, using\n the <xref uid=\"com.azure.identity.DefaultAzureCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DefaultAzureCredentialBuilder\"></xref> to configure it. Once this credential is created, it\n may be passed into the builder of many of the Azure SDK for Java client builders as the 'credential' parameter.</p>\n\n <!-- src_embed com.azure.identity.credential.defaultazurecredential.construct -->\n <pre>\n TokenCredential defaultAzureCredential = new DefaultAzureCredentialBuilder&#40;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end com.azure.identity.credential.defaultazurecredential.construct -->\n\n <p>Further, it is recommended to read\n <xref uid=\"com.azure.identity.DefaultAzureCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DefaultAzureCredential JavaDocs\"></xref> for more detailed information about\n the credential usage and the chain of credentials it runs underneath.</p>\n\n <p>The <xref uid=\"com.azure.identity.DefaultAzureCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DefaultAzureCredential\"></xref> works well in most of the scenarios as it executes a chain\n of credentials underneath which covers well known authentication scenarios for both Azure hosted platforms and\n development environment. But, in some scenarios where only a specific authentication mechanism will work, it is\n recommended to use that specific credential to authenticate. Let's take a look at the individual\n authentication scenarios and their respective credential use below.</p>\n\n <hr/>\n\n <h2>Authenticate in Developer Environment</h2>\n\n <p>Azure supports developer environment authentication via Azure CLI, Azure Powershell and Azure Tools for IntelliJ\n plugin in IntelliJ IDE. It involves interactively authenticating using user credentials locally on the developer\n machine. Once authenticated, the login information is persisted.</p>\n\n <p>The Azure Identity library supports authenticating in developer environment via\n <xref uid=\"com.azure.identity.AzureCliCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AzureCliCredential\"></xref>, <xref uid=\"com.azure.identity.AzurePowerShellCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AzurePowerShellCredential\"></xref> and\n <xref uid=\"com.azure.identity.IntelliJCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.IntelliJCredential\"></xref>. These credentials offer a seamless authentication experience by\n utilizing the cached Azure Plugin login information from their respective IDE tool. For more information refer to the\n <a href=\"https://aka.ms/azsdk/java/identity/developerenvironment/docs\">developer environment authentication\n documentation</a>.</p>\n\n <p><strong>Sample: Construct AzureCliCredential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.AzureCliCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AzureCliCredential\"></xref>,\n using the <xref uid=\"com.azure.identity.AzureCliCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AzureCliCredentialBuilder\"></xref> to configure it .Once this credential\n is created, it may be passed into the builder of many of the Azure SDK for Java client builders as the\n 'credential' parameter.</p>\n\n <!-- src_embed com.azure.identity.credential.azureclicredential.construct -->\n <pre>\n TokenCredential azureCliCredential = new AzureCliCredentialBuilder&#40;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end com.azure.identity.credential.azureclicredential.construct -->\n\n <p>Further, it is recommended to read\n <xref uid=\"com.azure.identity.AzureCliCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureCliCredential JavaDocs\"></xref> for more detailed\n information about the credential usage.</p>\n\n <p>For other credentials that are compatible with developer tools authentication, refer to the table below.</p>\n\n <br/>\n\n <table border=\"1\">\n   <caption><strong>Authenticate via development tools</strong></caption>\n   <thead>\n     <tr>\n       <th>Credential class</th>\n       <th>Usage</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td><xref uid=\"com.azure.identity.AzurePowerShellCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AzurePowerShellCredential\"></xref></td>\n       <td>This credential authenticates in a development environment with the logged in user or service principal\n       in Azure PowerShell. It utilizes the account of the already logged in user on Azure Powershell\n       to get an access token. If there's no user logged in locally on Azure Powershell, then it will not work.\n       Further, it is recommended to read\n       <xref uid=\"com.azure.identity.AzurePowerShellCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzurePowerShellCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n     <tr>\n       <td><xref uid=\"com.azure.identity.IntelliJCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.IntelliJCredential\"></xref></td>\n       <td>This credential authenticates in a development environment with the logged in user or service principal\n       in Azure Toolkit for IntelliJ plugin on IntelliJ IDE. It utilizes the cached login information of the Azure\n       Toolkit for IntelliJ plugin to seamlessly authenticate the application. If there's no user logged in locally\n       on Azure Toolkit for IntelliJ in IntelliJ IDE, then it will not work. Further, it is recommended to read\n       <xref uid=\"com.azure.identity.IntelliJCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IntelliJCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n   </tbody>\n </table>\n\n <br/>\n\n <hr/>\n\n <h2> Authenticating on Azure Hosted Platforms via Managed Identity</h2>\n\n <p><a href=\"https://learn.microsoft.com/entra/identity/managed-identities-azure-resources/\">Azure\n Managed Identity</a> is a feature in\n <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a>\n that provides a way for applications running on Azure to authenticate themselves with Azure resources without\n needing to manage or store any secrets like passwords or keys.</p>\n\n <p>The <xref uid=\"com.azure.identity.ManagedIdentityCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ManagedIdentityCredential\"></xref> authenticates the configured managed identity\n (system or user assigned) of an Azure resource. So, if the application is running inside an Azure resource that\n supports Managed Identity through IDENTITY/MSI, IMDS endpoints, or both, then the\n <xref uid=\"com.azure.identity.ManagedIdentityCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ManagedIdentityCredential\"></xref> will get your application authenticated, and offers a great\n secretless authentication experience. For more information refer to the\n <a href=\"https://aka.ms/azsdk/java/identity/managedidentity/docs\">managed identity authentication\n documentation</a>.</p>\n\n <p><strong>Sample: Construct a Managed Identity Credential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.ManagedIdentityCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ManagedIdentityCredential\"></xref>,\n using the <xref uid=\"com.azure.identity.ManagedIdentityCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ManagedIdentityCredentialBuilder\"></xref> to configure it. Once this credential is\n created, it may be passed into the builder of many of the Azure SDK for Java client builders as the\n 'credential' parameter.</p>\n\n <!-- src_embed com.azure.identity.credential.managedidentitycredential.construct -->\n <pre>\n TokenCredential managedIdentityCredential = new ManagedIdentityCredentialBuilder&#40;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end com.azure.identity.credential.managedidentitycredential.construct -->\n\n <p>Further, it is recommended to read\n <xref uid=\"com.azure.identity.ManagedIdentityCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ManagedIdentityCredential JavaDocs\"></xref> for more detailed information\n about the credential usage and the Azure platforms it supports.</p>\n\n <p>For other credentials that work well in Azure Hosted platforms, refer to the table below.</p>\n\n <br/>\n\n <table border=\"1\">\n   <caption><strong>Authenticate Azure-hosted applications</strong></caption>\n   <thead>\n     <tr>\n       <th>Credential class</th>\n       <th>Usage</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td><xref uid=\"com.azure.identity.EnvironmentCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.EnvironmentCredential\"></xref></td>\n       <td>This credential authenticates a service principal or user via credential information specified in\n       environment variables. The service principal authentication works well in Azure hosted platforms when Managed\n       Identity is not available. Further, it is recommended to read\n       <xref uid=\"com.azure.identity.EnvironmentCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnvironmentCredential JavaDocs\"></xref> for more information about\n       the credential usage.</td>\n     </tr>\n     <tr>\n       <td><xref uid=\"com.azure.identity.ChainedTokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ChainedTokenCredential\"></xref></td>\n       <td>This credential allows users to define custom authentication flows by chaining multiple credentials\n       together. For example, the <xref uid=\"com.azure.identity.ManagedIdentityCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ManagedIdentityCredential\"></xref> and\n       <xref uid=\"com.azure.identity.EnvironmentCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.EnvironmentCredential\"></xref> can be chained together to sequentially execute on Azure\n       hosted platforms. The credential that first returns the token is used for authentication. Further, it is\n       recommended to read <xref uid=\"com.azure.identity.ChainedTokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ChainedTokenCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n   </tbody>\n </table>\n\n <br/>\n\n <hr/>\n\n <h2>Authenticate with Service Principals</h2>\n\n <p>Service Principal authentication is a type of authentication in Azure that enables a non-interactive login to\n <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a>, allowing an\n application or service to authenticate itself with Azure resources.\n A Service Principal is essentially an identity created for an application in Microsoft Entra ID that can be used to\n authenticate with Azure resources. It's like a \"user identity\" for the application or service, and it provides\n a way for the application to authenticate itself with Azure resources without needing to use a user's credentials.\n <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a> allows users to\n register service principals which can be used as an identity for authentication.\n A client secret and/or a client certificate associated with the registered service principal is used as the password\n when authenticating the service principal.</p>\n\n <p>The Azure Identity library supports both client secret and client\n certificate based service principal authentication via <xref uid=\"com.azure.identity.ClientSecretCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientSecretCredential\"></xref> and\n <xref uid=\"com.azure.identity.ClientCertificateCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientCertificateCredential\"></xref> respectively. For more information refer to the\n <a href=\"https://aka.ms/azsdk/java/identity/serviceprincipal/docs\">service principal authentication\n documentation</a>.</p>\n\n <p><strong>Sample: Construct a ClientSecretCredential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.ClientSecretCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientSecretCredential\"></xref>,\n using the <xref uid=\"com.azure.identity.ClientSecretCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientSecretCredentialBuilder\"></xref> to configure it. The <code>tenantId</code>,\n <code>clientId</code> and <code>clientSecret</code> parameters are required to create\n <xref uid=\"com.azure.identity.ClientSecretCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientSecretCredential\"></xref> .Once this credential is created, it may be passed into the\n builder of many of the Azure SDK for Java client builders as the 'credential' parameter.</p>\n\n <!-- src_embed com.azure.identity.credential.clientsecretcredential.construct -->\n <pre>\n TokenCredential clientSecretCredential = new ClientSecretCredentialBuilder&#40;&#41;\n     .tenantId&#40;tenantId&#41;\n     .clientId&#40;clientId&#41;\n     .clientSecret&#40;clientSecret&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end com.azure.identity.credential.clientsecretcredential.construct -->\n\n <p>Further, it is recommended to read\n <xref uid=\"com.azure.identity.ClientSecretCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientSecretCredential JavaDocs\"></xref> for more detailed information\n about the credential usage.</p>\n\n <p>For other credentials that are compatible with service principal authentication, refer to the table below.</p>\n\n <br/>\n\n <table border=\"1\">\n   <caption><strong>Authenticate service principals</strong></caption>\n   <thead>\n     <tr>\n       <th>Credential class</th>\n       <th>Usage</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td><xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientAssertionCredential\"></xref></td>\n       <td>This credential authenticates a service principal using a signed client assertion.\n       It allows clients to prove their identity to Microsoft Entra ID without requiring them to disclose their\n       credentials (such as a username and password). Further, it is recommended to read\n       <xref uid=\"com.azure.identity.ClientAssertionCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientAssertionCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n     <tr>\n       <td><xref uid=\"com.azure.identity.ClientCertificateCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.ClientCertificateCredential\"></xref></td>\n       <td>This credential authenticates a service principal using a certificate. It doesn't require transmission of\n       a client secret and mitigates the security related password storage and network transmission issues.\n       Further, it is recommended to read <xref uid=\"com.azure.identity.ClientCertificateCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientCertificateCredential JavaDocs\"></xref> for more information about the credential usage.</td>\n     </tr>\n   </tbody>\n </table>\n\n <br/>\n\n <hr/>\n\n <h2>Authenticate with User Credentials</h2>\n\n <p>User credential authentication is a type of authentication in Azure that involves a user providing their\n username and password to authenticate with Azure resources. In Azure, user credential authentication can be used to\n authenticate with <a href=\"https://learn.microsoft.com/entra/fundamentals/\">Microsoft Entra ID</a>.</p>\n\n <p>The Azure Identity library supports user credentials based authentication via\n <xref uid=\"com.azure.identity.InteractiveBrowserCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.InteractiveBrowserCredential\"></xref>, <xref uid=\"com.azure.identity.DeviceCodeCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DeviceCodeCredential\"></xref> and\n <xref uid=\"com.azure.identity.UsernamePasswordCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.UsernamePasswordCredential\"></xref>. For more information refer to the\n <a href=\"https://aka.ms/azsdk/java/identity/usercredential/docs\">user credential authentication documentation</a>.\n </p>\n\n <p><strong>Sample: Construct InteractiveBrowserCredential</strong></p>\n\n <p>The following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.InteractiveBrowserCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.InteractiveBrowserCredential\"></xref>,\n using the <xref uid=\"com.azure.identity.InteractiveBrowserCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.InteractiveBrowserCredentialBuilder\"></xref> to configure it .Once this credential\n is created, it may be passed into the builder of many of the Azure SDK for Java client builders as the\n 'credential' parameter.</p>\n\n <!-- src_embed com.azure.identity.credential.interactivebrowsercredential.construct -->\n <pre>\n TokenCredential interactiveBrowserCredential = new InteractiveBrowserCredentialBuilder&#40;&#41;\n     .redirectUrl&#40;&quot;http:&#47;&#47;localhost:8765&quot;&#41;\n     .build&#40;&#41;;\n </pre>\n <!-- end com.azure.identity.credential.interactivebrowsercredential.construct -->\n\n <p>Further, it is recommended to read\n <xref uid=\"com.azure.identity.InteractiveBrowserCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InteractiveBrowserCredential JavaDocs\"></xref> for more information\n about the credential usage.</p>\n\n <p>For other credentials that are compatible with user credentials based authentication, refer to the table below.\n </p>\n\n <br/>\n\n <table border=\"1\">\n   <caption><strong>Authenticate users</strong></caption>\n   <thead>\n     <tr>\n       <th>Credential class</th>\n       <th>Usage</th>\n     </tr>\n   </thead>\n   <tbody>\n     <tr>\n       <td><xref uid=\"com.azure.identity.DeviceCodeCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.DeviceCodeCredential\"></xref></td>\n       <td>This credential interactively authenticates a user on devices with limited UI. It prompts users\n       to open an authentication URL with a device code on a UI enabled device and requires them to interactively\n       authenticate there. Once authenticated, the original device requesting authentication gets authenticated\n       and receives the access token. Further, it is recommended to read\n       <xref uid=\"com.azure.identity.DeviceCodeCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceCodeCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n     <tr>\n       <td><xref uid=\"com.azure.identity.AuthorizationCodeCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.AuthorizationCodeCredential\"></xref></td>\n       <td>This credential authenticates a user with a previously obtained authorization code as part of an\n       Oauth 2 flow. This is applicable for applications which control the logic of interactive user authentication\n       to fetch an authorization code first. Once the application has received the authorization code, it can\n       then configure it on this credential and use it to get an access token. Further, it is recommended to read\n       <xref uid=\"com.azure.identity.AuthorizationCodeCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AuthorizationCodeCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n     <tr>\n       <td><xref uid=\"com.azure.identity.UsernamePasswordCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.identity.UsernamePasswordCredential\"></xref></td>\n       <td>This credential authenticates a user with a username and password without multi-factored auth.\n       This credential can be used on developer environment for user principals which do not require\n       2FA/MFA (multi-facotred) authentication. Further, it is recommended to read\n       <xref uid=\"com.azure.identity.UsernamePasswordCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UsernamePasswordCredential JavaDocs\"></xref> for more\n       information about the credential usage.</td>\n     </tr>\n   </tbody>\n </table>\n\n <br/>"
metadata: {}
package: "com.azure.identity"
artifact: com.azure:azure-identity:1.12.0
