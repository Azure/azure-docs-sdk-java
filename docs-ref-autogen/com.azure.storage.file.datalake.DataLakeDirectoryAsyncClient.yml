### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  id: DataLakeDirectoryAsyncClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String,boolean)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String,boolean)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  langs:
  - java
  name: DataLakeDirectoryAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: >-
    This class provides a client that contains directory operations for Azure Storage Data Lake. Operations provided by this client include creating a directory, deleting a directory, renaming a directory, setting metadata and http headers, setting and retrieving access control, getting properties and creating and deleting files and subdirectories.


    This client is instantiated through <xref uid="com.azure.storage.file.datalake.DataLakePathClientBuilder" data-throw-if-not-resolved="false">DataLakePathClientBuilder</xref> or retrieved via <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">getDirectoryAsyncClient</xref>.


    Please refer to the [Azure Docs][] for more information.



    [Azure Docs]: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction?toc=%2fazure%2fstorage%2fblobs%2ftoc.json
  syntax:
    content: public final class DataLakeDirectoryAsyncClient extends DataLakePathAsyncClient
  inheritance:
  - java.lang.Object
  - com.azure.storage.file.datalake.DataLakePathAsyncClient
  inheritedMembers:
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  id: DataLakeDirectoryAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.specialized.BlockBlobAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: DataLakeDirectoryAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String directoryName, BlockBlobAsyncClient blockBlobAsyncClient)
  nameWithType: DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String directoryName, BlockBlobAsyncClient blockBlobAsyncClient)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String directoryName, BlockBlobAsyncClient blockBlobAsyncClient)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  summary: Package-private constructor for use by <xref uid="com.azure.storage.file.datalake.DataLakePathClientBuilder" data-throw-if-not-resolved="false">DataLakePathClientBuilder</xref>.
  syntax:
    content: " DataLakeDirectoryAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, String fileSystemName, String directoryName, BlockBlobAsyncClient blockBlobAsyncClient)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: fileSystemName
      type: java.lang.String
      description: The file system name.
    - id: directoryName
      type: java.lang.String
      description: The directory name.
    - id: blockBlobAsyncClient
      type: com.azure.storage.blob.specialized.BlockBlobAsyncClient
      description: The underlying <xref uid="" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref>
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(com.azure.storage.file.datalake.DataLakePathAsyncClient)
  id: DataLakeDirectoryAsyncClient(com.azure.storage.file.datalake.DataLakePathAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: DataLakeDirectoryAsyncClient(DataLakePathAsyncClient dataLakePathAsyncClient)
  nameWithType: DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(DataLakePathAsyncClient dataLakePathAsyncClient)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient(DataLakePathAsyncClient dataLakePathAsyncClient)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  syntax:
    content: " DataLakeDirectoryAsyncClient(DataLakePathAsyncClient dataLakePathAsyncClient)"
    parameters:
    - id: dataLakePathAsyncClient
      type: com.azure.storage.file.datalake.DataLakePathAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String)
  id: createFile(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createFile(String fileName)
  nameWithType: DataLakeDirectoryAsyncClient.createFile(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a directory. By default this method will not overwrite an existing file. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    DataLakeFileAsyncClient fileClient = client.createFile(fileName).block();

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeFileAsyncClient> createFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String,boolean)
  id: createFile(java.lang.String,boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createFile(String fileName, boolean overwrite)
  nameWithType: DataLakeDirectoryAsyncClient.createFile(String fileName, boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(String fileName, boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a directory. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; /* Default value. */
     DataLakeFileAsyncClient fClient = client.createFile(fileName, overwrite).block();
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should the file exist.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file within a directory. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    PathHttpHeaders httpHeaders = new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary");
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()
         .setLeaseId(leaseId);
     String permissions = "permissions";
     String umask = "umask";
     DataLakeFileAsyncClient newFileClient = client.createFileWithResponse(fileName,
         permissions, umask, httpHeaders, Collections.singletonMap("metadata", "value"), requestConditions
     ).block().getValue();
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<Response<DataLakeFileAsyncClient>> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to create.
    - id: permissions
      type: java.lang.String
      description: POSIX access permissions for the file owner, the file owning group, and others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the file to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String)
  id: createSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createSubdirectory(String subdirectoryName)
  nameWithType: DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new sub-directory within a directory. By default this method will not overwrite an existing sub-directory. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    DataLakeDirectoryAsyncClient directoryClient = client.createSubdirectory(directoryName).block();

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeDirectoryAsyncClient> createSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the sub-directory to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory
         created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String,boolean)
  id: createSubdirectory(java.lang.String,boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createSubdirectory(String subdirectoryName, boolean overwrite)
  nameWithType: DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName, boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(String subdirectoryName, boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new sub-directory within a directory. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; /* Default value. */
     DataLakeDirectoryAsyncClient dClient = client.createSubdirectory(directoryName, overwrite).block();
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeDirectoryAsyncClient> createSubdirectory(String subdirectoryName, boolean overwrite)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the sub-directory to create.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should the sub directory exist.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory
         created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new sub-directory within a directory. If a sub-directory with the same name already exists, the sub-directory will be overwritten. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    PathHttpHeaders httpHeaders = new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary");
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()
         .setLeaseId(leaseId);
     String permissions = "permissions";
     String umask = "umask";
     DataLakeDirectoryAsyncClient newDirectoryClient = client.createSubdirectoryWithResponse(
         directoryName, permissions, umask, httpHeaders, Collections.singletonMap("metadata", "value"),
         requestConditions
     ).block().getValue();
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<Response<DataLakeDirectoryAsyncClient>> createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the sub-directory to create.
    - id: permissions
      type: java.lang.String
      description: >-
        POSIX access permissions for the sub-directory owner, the sub-directory owning group, and
         others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the sub-directory to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the sub-directory.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the sub-directory created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: DataLakeDirectoryAsyncClient.delete()
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes a directory.


    **Code Samples**


    ```java

    client.delete().subscribe(response ->
         System.out.println("Delete request completed"));
    ```


    For more information see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: DataLakeDirectoryAsyncClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file in the file system. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteFile(fileName).subscribe(response ->
         System.out.println("Delete request completed"));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete
  syntax:
    content: public Mono<Void> deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Deletes the specified file in the directory. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n \n client.deleteFileWithResponse(fileName, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete"
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file to delete.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(java.lang.String)
  id: deleteSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: deleteSubdirectory(String subdirectoryName)
  nameWithType: DataLakeDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteSubdirectory(directoryName).subscribe(response ->
         System.out.println("Delete request completed"));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete
  syntax:
    content: public Mono<Void> deleteSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the sub-directory to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n \n client.deleteSubdirectoryWithResponse(directoryName, recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete"
  syntax:
    content: public Mono<Response<Void>> deleteSubdirectoryWithResponse(String directoryName, boolean recursive, DataLakeRequestConditions requestConditions)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the sub-directory to delete.
    - id: recursive
      type: boolean
      description: Whether or not to delete all paths beneath the sub-directory.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Deletes a directory.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n \n client.deleteWithResponse(recursive, requestConditions)\n     .subscribe(response -> System.out.println(\"Delete request completed\"));\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete"
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions)
    parameters:
    - id: recursive
      type: boolean
      description: Whether or not to delete all paths beneath the directory.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()
  id: getDirectoryName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: getDirectoryName()
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryName()
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the name of this directory, not including its full path.
  syntax:
    content: public String getDirectoryName()
    return:
      type: java.lang.String
      description: The name of the directory.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()
  id: getDirectoryPath()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: getDirectoryPath()
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryPath()
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the path of this directory, not including the name of the resource itself.
  syntax:
    content: public String getDirectoryPath()
    return:
      type: java.lang.String
      description: The path of the directory.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()
  id: getDirectoryUrl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: getDirectoryUrl()
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryUrl()
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the URL of the directory represented by this client on the Data Lake service.
  syntax:
    content: public String getDirectoryUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(java.lang.String)
  id: getFileAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: getFileAsyncClient(String fileName)
  nameWithType: DataLakeDirectoryAsyncClient.getFileAsyncClient(String fileName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(String fileName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new DataLakeFileAsyncClient object by concatenating fileName to the end of DataLakeDirectoryAsyncClient's URL. The new DataLakeFileAsyncClient uses the same request policy pipeline as the DataLakeDirectoryAsyncClient.


    **Code Samples**


    ```java

    DataLakeFileAsyncClient dataLakeFileClient = client.getFileAsyncClient(fileName);

    ```
  syntax:
    content: public DataLakeFileAsyncClient getFileAsyncClient(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: A <code>String</code> representing the name of the file.
    return:
      type: com.azure.storage.file.datalake.DataLakeFileAsyncClient
      description: >-
        A new <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> object which references the file with the specified name in this
         file system.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(java.lang.String)
  id: getSubdirectoryAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: getSubdirectoryAsyncClient(String subdirectoryName)
  nameWithType: DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(String subdirectoryName)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(String subdirectoryName)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new DataLakeDirectoryAsyncClient object by concatenating subdirectoryName to the end of DataLakeDirectoryAsyncClient's URL. The new DataLakeDirectoryAsyncClient uses the same request policy pipeline as the DataLakeDirectoryAsyncClient.


    **Code Samples**


    ```java

    DataLakeDirectoryAsyncClient dataLakeDirectoryClient = client.getSubdirectoryAsyncClient(directoryName);

    ```
  syntax:
    content: public DataLakeDirectoryAsyncClient getSubdirectoryAsyncClient(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: A <code>String</code> representing the name of the sub-directory.
    return:
      type: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
      description: >-
        A new <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> object which references the directory with the specified name
         in this file system.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(java.lang.String,java.lang.String)
  id: rename(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: rename(String destinationFileSystem, String destinationPath)
  nameWithType: DataLakeDirectoryAsyncClient.rename(String destinationFileSystem, String destinationPath)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(String destinationFileSystem, String destinationPath)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Moves the directory to another location within the file system. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    DataLakeDirectoryAsyncClient renamedClient = client.rename(fileSystemName, destinationPath).block();
     System.out.println("Directory Client has been renamed");
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public Mono<DataLakeDirectoryAsyncClient> rename(String destinationFileSystem, String destinationPath)
    parameters:
    - id: destinationFileSystem
      type: java.lang.String
      description: >-
        The file system of the destination within the account.
         <code>null</code> for the current file system.
    - id: destinationPath
      type: java.lang.String
      description: >-
        Relative path from the file system to rename the directory to, excludes the file system
         name. For example if you want to move a directory with fileSystem = "myfilesystem", path = "mydir/mysubdir" to
         another path in myfilesystem (ex: newdir) then set the destinationPath = "newdir"
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the new directory
         created.
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0
  parent: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  langs:
  - java
  name: renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  nameWithType: DataLakeDirectoryAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  overload: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Moves the directory to another location within the file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions sourceRequestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n DataLakeRequestConditions destinationRequestConditions = new DataLakeRequestConditions();\n \n DataLakeDirectoryAsyncClient newRenamedClient = client.renameWithResponse(fileSystemName, destinationPath,\n     sourceRequestConditions, destinationRequestConditions).block().getValue();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: public Mono<Response<DataLakeDirectoryAsyncClient>> renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
    parameters:
    - id: destinationFileSystem
      type: java.lang.String
      description: >-
        The file system of the destination within the account.
         <code>null</code> for the current file system.
    - id: destinationPath
      type: java.lang.String
      description: >-
        Relative path from the file system to rename the directory to, excludes the file system
         name. For example if you want to move a directory with fileSystem = "myfilesystem", path = "mydir/mysubdir" to
         another path in myfilesystem (ex: newdir) then set the destinationPath = "newdir"
    - id: sourceRequestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref> against the source.
    - id: destinationRequestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref> against the destination.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory created.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
    name: BlockBlobAsyncClient
    fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient*
  name: DataLakeDirectoryAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.DataLakeDirectoryAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient
  name: DataLakePathAsyncClient
  nameWithType: DataLakePathAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl*
  name: getDirectoryUrl
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryUrl
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath*
  name: getDirectoryPath
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryPath
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName*
  name: getDirectoryName
  nameWithType: DataLakeDirectoryAsyncClient.getDirectoryName
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete*
  name: delete
  nameWithType: DataLakeDirectoryAsyncClient.delete
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete
  package: com.azure.storage.file.datalake
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.deleteWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  name: DataLakeFileAsyncClient
  nameWithType: DataLakeFileAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient*
  name: getFileAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient.getFileAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
    name: DataLakeFileAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile*
  name: createFile
  nameWithType: DataLakeDirectoryAsyncClient.createFile
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathHttpHeaders
  name: PathHttpHeaders
  nameWithType: PathHttpHeaders
  fullName: com.azure.storage.file.datalake.models.PathHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient
    name: DataLakeFileAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.createFileWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile*
  name: deleteFile
  nameWithType: DataLakeDirectoryAsyncClient.deleteFile
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.deleteFileWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient*
  name: getSubdirectoryAsyncClient
  nameWithType: DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
    name: DataLakeDirectoryAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory*
  name: createSubdirectory
  nameWithType: DataLakeDirectoryAsyncClient.createSubdirectory
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
    name: DataLakeDirectoryAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse*
  name: createSubdirectoryWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory*
  name: deleteSubdirectory
  nameWithType: DataLakeDirectoryAsyncClient.deleteSubdirectory
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse*
  name: deleteSubdirectoryWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename*
  name: rename
  nameWithType: DataLakeDirectoryAsyncClient.rename
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse*
  name: renameWithResponse
  nameWithType: DataLakeDirectoryAsyncClient.renameWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions,String,String,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.setPermissionsWithResponse(PathPermissions,String,String,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  name: DataLakePathAsyncClient.setPermissions(PathPermissions,String,String)
  nameWithType: DataLakePathAsyncClient.setPermissions(PathPermissions,String,String)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
  name: DataLakePathAsyncClient.existsWithResponse()
  nameWithType: DataLakePathAsyncClient.existsWithResponse()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  name: DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues,UserDelegationKey)
  nameWithType: DataLakePathAsyncClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues,UserDelegationKey)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
  name: DataLakePathAsyncClient.getServiceVersion()
  nameWithType: DataLakePathAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
  name: DataLakePathAsyncClient.exists()
  nameWithType: DataLakePathAsyncClient.exists()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  name: DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders)
  nameWithType: DataLakePathAsyncClient.setHttpHeaders(PathHttpHeaders)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
  name: DataLakePathAsyncClient.getFileSystemName()
  nameWithType: DataLakePathAsyncClient.getFileSystemName()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  name: DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues)
  nameWithType: DataLakePathAsyncClient.generateSas(DataLakeServiceSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry>,String,String,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.setAccessControlListWithResponse(List<PathAccessControlEntry>,String,String,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)
  name: DataLakePathAsyncClient.create(boolean)
  nameWithType: DataLakePathAsyncClient.create(boolean)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
  name: DataLakePathAsyncClient.getAccessControl()
  nameWithType: DataLakePathAsyncClient.getAccessControl()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
  name: DataLakePathAsyncClient.getAccountName()
  nameWithType: DataLakePathAsyncClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.getAccessControlWithResponse(boolean,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.getAccessControlWithResponse(boolean,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.setHttpHeadersWithResponse(PathHttpHeaders,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.createWithResponse(String,String,PathHttpHeaders,Map<String,String>,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.createWithResponse(String,String,PathHttpHeaders,Map<String,String>,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.getPropertiesWithResponse(DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String>,DataLakeRequestConditions)
  nameWithType: DataLakePathAsyncClient.setMetadataWithResponse(Map<String,String>,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  name: DataLakePathAsyncClient.setMetadata(Map<String,String>)
  nameWithType: DataLakePathAsyncClient.setMetadata(Map<String,String>)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
  name: DataLakePathAsyncClient.getProperties()
  nameWithType: DataLakePathAsyncClient.getProperties()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
  name: DataLakePathAsyncClient.getHttpPipeline()
  nameWithType: DataLakePathAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  name: DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry>,String,String)
  nameWithType: DataLakePathAsyncClient.setAccessControlList(List<PathAccessControlEntry>,String,String)
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
  name: DataLakePathAsyncClient.create()
  nameWithType: DataLakePathAsyncClient.create()
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.create()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: PathAccessControlEntry>,String,String,DataLakeRequestConditions)
  nameWithType: PathAccessControlEntry>,String,String,DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List
  name: DataLakePathAsyncClient.setAccessControlListWithResponse(List
  nameWithType: DataLakePathAsyncClient.setAccessControlListWithResponse(List
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List
- uid: java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  name: String,String>,DataLakeRequestConditions)
  nameWithType: String,String>,DataLakeRequestConditions)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map
  name: DataLakePathAsyncClient.createWithResponse(String,String,PathHttpHeaders,Map
  nameWithType: DataLakePathAsyncClient.createWithResponse(String,String,PathHttpHeaders,Map
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map
  name: DataLakePathAsyncClient.setMetadataWithResponse(Map
  nameWithType: DataLakePathAsyncClient.setMetadataWithResponse(Map
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map
- uid: java.lang.String,java.lang.String>)
  name: String,String>)
  nameWithType: String,String>)
  fullName: java.lang.String,java.lang.String>)
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map
  name: DataLakePathAsyncClient.setMetadata(Map
  nameWithType: DataLakePathAsyncClient.setMetadata(Map
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List
  name: DataLakePathAsyncClient.setAccessControlList(List
  nameWithType: DataLakePathAsyncClient.setAccessControlList(List
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List
- uid: com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  name: PathAccessControlEntry>,String,String)
  nameWithType: PathAccessControlEntry>,String,String)
  fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
