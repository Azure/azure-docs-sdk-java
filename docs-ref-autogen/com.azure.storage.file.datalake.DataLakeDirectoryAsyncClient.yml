### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient"
fullName: "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient"
name: "DataLakeDirectoryAsyncClient"
nameWithType: "DataLakeDirectoryAsyncClient"
summary: "This class provides a client that contains directory operations for Azure Storage Data Lake. Operations provided by this client include creating a directory, deleting a directory, renaming a directory, setting metadata and http headers, setting and retrieving access control, getting properties and creating and deleting files and subdirectories.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder\" data-throw-if-not-resolved=\"false\">DataLakePathClientBuilder</xref> or retrieved via <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.getDirectoryAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\">getDirectoryAsyncClient</xref>.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction?toc=%2fazure%2fstorage%2fblobs%2ftoc.json"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.file.datalake.DataLakePathAsyncClient\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.create()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.create(boolean)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.exists()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.existsWithResponse()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControl()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getAccountName()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getFileSystemName()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getHttpPipeline()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getProperties()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.getServiceVersion()"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)"
- "com.azure.storage.file.datalake.DataLakePathAsyncClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeDirectoryAsyncClient extends DataLakePathAsyncClient"
methods:
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFile(java.lang.String,boolean)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory(java.lang.String,boolean)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.delete()"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFile(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryName()"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryPath()"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getDirectoryUrl()"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getFileAsyncClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.getSubdirectoryAsyncClient(java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.rename(java.lang.String,java.lang.String)"
- "com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.2.0
