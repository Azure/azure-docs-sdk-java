### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient
  id: SecretAsyncClient
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets
  children:
  - com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl()
  - com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()
  - com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets()
  - com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup(byte[])
  - com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse(byte[])
  - com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  - com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)
  langs:
  - java
  name: SecretAsyncClient
  nameWithType: SecretAsyncClient
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient
  type: Class
  package: com.azure.security.keyvault.secrets
  summary: >-
    The SecretAsyncClient provides asynchronous methods to manage <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring, and listing the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secrets</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.


    **Construct the async client**


    ```java

    SecretAsyncClient secretAsyncClient = new SecretClientBuilder()
         .credential(new DefaultAzureCredentialBuilder().build())
         .vaultUrl("https://myvault.vault.azure.net/")
         .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
         .buildAsyncClient();
    ```
  syntax:
    content: public final class SecretAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.secrets.SecretServiceVersion)
  id: SecretAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.secrets.SecretServiceVersion)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: SecretAsyncClient(URL vaultUrl, HttpPipeline pipeline, SecretServiceVersion version)
  nameWithType: SecretAsyncClient.SecretAsyncClient(URL vaultUrl, HttpPipeline pipeline, SecretServiceVersion version)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient(URL vaultUrl, HttpPipeline pipeline, SecretServiceVersion version)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient*
  type: Constructor
  package: com.azure.security.keyvault.secrets
  summary: Creates a SecretAsyncClient that uses `pipeline` to service requests
  syntax:
    content: " SecretAsyncClient(URL vaultUrl, HttpPipeline pipeline, SecretServiceVersion version)"
    parameters:
    - id: vaultUrl
      type: java.net.URL
      description: URL for the Azure KeyVault service.
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: HttpPipeline that the HTTP requests and responses flow through.
    - id: version
      type: com.azure.security.keyvault.secrets.SecretServiceVersion
      description: <xref uid="com.azure.security.keyvault.secrets.SecretServiceVersion" data-throw-if-not-resolved="false">SecretServiceVersion</xref> of the service to be used when making requests.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(java.lang.String)
  id: backupSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: backupSecret(String name)
  nameWithType: SecretAsyncClient.backupSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.


    **Code sample**


    Backs up the secret from the key vault. Subscribes to the call asynchronously and prints out the length of the secret's backup byte array returned in the response.


    ```java

    secretAsyncClient.backupSecret("secretName")
         .subscribe(secretBackupResponse ->
             System.out.printf("Secret's Backup Byte array's length %s%n", secretBackupResponse.length));
    ```
  syntax:
    content: public Mono<byte[]> backupSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the backed up secret blob.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String)
  id: backupSecretWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: backupSecretWithResponse(String name)
  nameWithType: SecretAsyncClient.backupSecretWithResponse(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.


    **Code sample**


    Backs up the secret from the key vault. Subscribes to the call asynchronously and prints out the length of the secret's backup byte array returned in the response.


    ```java

    secretAsyncClient.backupSecretWithResponse("secretName")
         .subscribe(secretBackupResponse ->
             System.out.printf("Secret's Backup Byte array's length %s%n", secretBackupResponse.getValue().length));
    ```
  syntax:
    content: public Mono<Response<byte[]>> backupSecretWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref>
             contains the backed up secret blob.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret(java.lang.String)
  id: beginDeleteSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: beginDeleteSecret(String name)
  nameWithType: SecretAsyncClient.beginDeleteSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and for permanent deletion, needs to be purged. Otherwise, the secret is permanently deleted. All versions of a secret are deleted. This cannot be applied to individual versions of a secret. This operation requires the `secrets/delete` permission.


    **Code sample**


    Deletes the secret in the Azure Key Vault. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.


    ```java

    secretAsyncClient.beginDeleteSecret("secretName")
         .subscribe(pollResponse -> {
             System.out.println("Delete Status: " + pollResponse.getStatus().toString());
             System.out.println("Deleted Secret Name: " + pollResponse.getValue().getName());
             System.out.println("Deleted Secret Value: " + pollResponse.getValue().getValue());
         });
    ```
  syntax:
    content: public PollerFlux<DeletedSecret,Void> beginDeleteSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret to be deleted.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on and retrieve <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret(java.lang.String)
  id: beginRecoverDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: beginRecoverDeletedSecret(String name)
  nameWithType: SecretAsyncClient.beginRecoverDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Recovers the deleted secret in the key vault to its latest version. Can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/recover` permission.


    **Code sample**


    Recovers the deleted secret from the key vault enabled for **soft-delete**. Subscribes to the call asynchronously and prints out the recovered secret details when a response is received.


    ```java

    secretAsyncClient.beginRecoverDeletedSecret("deletedSecretName")
         .subscribe(pollResponse -> {
             System.out.println("Recovery Status: " + pollResponse.getStatus().toString());
             System.out.println("Recovered Secret Name: " + pollResponse.getValue().getName());
             System.out.println("Recovered Secret Value: " + pollResponse.getValue().getValue());
         });
    ```
  syntax:
    content: public PollerFlux<KeyVaultSecret,Void> beginRecoverDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret to be recovered.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on and retrieve the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">recovered secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(java.lang.String)
  id: getDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getDeletedSecret(String name)
  nameWithType: SecretAsyncClient.getDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.


    **Code sample**


    Gets the deleted secret from the key vault **enabled for soft-delete**. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.


    ```java

    secretAsyncClient.getDeletedSecret("secretName")
         .subscribe(deletedSecretResponse ->
             System.out.printf("Deleted Secret's Recovery Id %s %n", deletedSecretResponse.getRecoveryId()));
    ```
  syntax:
    content: public Mono<DeletedSecret> getDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.DeletedSecret>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String)
  id: getDeletedSecretWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getDeletedSecretWithResponse(String name)
  nameWithType: SecretAsyncClient.getDeletedSecretWithResponse(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.


    **Code sample**


    Gets the deleted secret from the key vault **enabled for soft-delete**. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.


    ```java

    secretAsyncClient.getDeletedSecretWithResponse("secretName")
         .subscribe(deletedSecretResponse ->
             System.out.printf("Deleted Secret's Recovery Id %s %n",
                 deletedSecretResponse.getValue().getRecoveryId()));
    ```
  syntax:
    content: public Mono<Response<DeletedSecret>> getDeletedSecretWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the
             <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)
  id: getSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getSecret(String name)
  nameWithType: SecretAsyncClient.getSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the latest version of the specified secret from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets latest version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.


    ```java

    secretAsyncClient.getSecret("secretName")
         .subscribe(secretWithVersion ->
             System.out.printf("Secret is returned with name %s and value %s %n",
                 secretWithVersion.getName(), secretWithVersion.getValue()));
    ```
  syntax:
    content: public Mono<KeyVaultSecret> getSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)
  id: getSecret(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getSecret(String name, String version)
  nameWithType: SecretAsyncClient.getSecret(String name, String version)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(String name, String version)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.


    ```java

    String secretVersion = "6A385B124DEF4096AF1361A85B16C204";
     secretAsyncClient.getSecret("secretName", secretVersion)
         // Passing a Context is optional and useful if you want a set of data to flow through the request.
         // Otherwise, the line below can be removed.
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(secretWithVersion ->
             System.out.printf("Secret is returned with name %s and value %s %n",
                 secretWithVersion.getName(), secretWithVersion.getValue()));
    ```
  syntax:
    content: public Mono<KeyVaultSecret> getSecret(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret, cannot be null.
    - id: version
      type: java.lang.String
      description: >-
        The version of the secret to retrieve. If this is an empty string or null, this
             call is equivalent to calling <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)" data-throw-if-not-resolved="false">#getSecret(String)</xref>, with the latest version being
             retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref>
             contains the requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String)
  id: getSecretWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getSecretWithResponse(String name, String version)
  nameWithType: SecretAsyncClient.getSecretWithResponse(String name, String version)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(String name, String version)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.


    ```java

    String secretVersion = "6A385B124DEF4096AF1361A85B16C204";
     secretAsyncClient.getSecretWithResponse("secretName", secretVersion)
         // Passing a Context is optional and useful if you want a set of data to flow through the request.
         // Otherwise, the line below can be removed.
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(secretWithVersion ->
             System.out.printf("Secret is returned with name %s and value %s %n",
                 secretWithVersion.getValue().getName(), secretWithVersion.getValue().getValue()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultSecret>> getSecretWithResponse(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret, cannot be null.
    - id: version
      type: java.lang.String
      description: >-
        The version of the secret to retrieve. If this is an empty string or null, this call is equivalent
             to calling <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)" data-throw-if-not-resolved="false">#getSecret(String)</xref>, with the latest version being retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the
             requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: SecretAsyncClient.getVaultUrl()
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl()
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: Gets the vault endpoint url to which service requests are sent to.
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()
  id: listDeletedSecrets()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: listDeletedSecrets()
  nameWithType: SecretAsyncClient.listDeletedSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> of the key vault if it has enabled soft-delete. This operation requires the `secrets/list` permission.


    **Code sample**


    Lists the deleted secrets in the key vault. Subscribes to the call asynchronously and prints out the recovery id of each deleted secret when a response is received.


    ```java

    secretAsyncClient.listDeletedSecrets()
         .subscribe(deletedSecretResponse ->  System.out.printf("Deleted Secret's Recovery Id %s %n",
             deletedSecretResponse.getRecoveryId()));
    ```
  syntax:
    content: public PagedFlux<DeletedSecret> listDeletedSecrets()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.DeletedSecret>
      description: A <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing all of the <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> in the vault.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(java.lang.String)
  id: listPropertiesOfSecretVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: listPropertiesOfSecretVersions(String name)
  nameWithType: SecretAsyncClient.listPropertiesOfSecretVersions(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists all versions of the specified secret. Each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.


    **Code sample**


    The sample below fetches the all the versions of the given secret. For each version retrieved, makes a call to <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.


    ```java

    secretAsyncClient.listPropertiesOfSecretVersions("secretName")
         .flatMap(secretProperties -> {
             System.out.println("Get secret value for version: " + secretProperties.getVersion());
             return secretAsyncClient.getSecret(secretProperties.getName(), secretProperties.getVersion());
         })
         .subscribe(secret -> System.out.printf("Received secret with name %s and type %s%n",
             secret.getName(), secret.getValue()));
    ```
  syntax:
    content: public PagedFlux<SecretProperties> listPropertiesOfSecretVersions(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">properties</xref> of all the versions of the specified
             secret in the vault. Flux is empty if secret with <code>name</code> does not exist in key vault
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets()
  id: listPropertiesOfSecrets()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: listPropertiesOfSecrets()
  nameWithType: SecretAsyncClient.listPropertiesOfSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets()
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: "Lists secrets in the key vault. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches the all the secret properties in the vault. For each secret retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\">getSecret(String, String)</xref> to get its value, and then prints it out.\n\n```java\nsecretAsyncClient.listPropertiesOfSecrets()\n     .flatMap(secretProperties -> {\n         String name = secretProperties.getName();\n         String version = secretProperties.getVersion();\n \n         System.out.printf(\"Getting secret name: '%s', version: %s%n\", name, version);\n         return secretAsyncClient.getSecret(name, version);\n     })\n     .subscribe(secretResponse -> System.out.printf(\"Received secret with name %s and type %s\",\n         secretResponse.getName(), secretResponse.getValue()));\n```"
  syntax:
    content: public PagedFlux<SecretProperties> listPropertiesOfSecrets()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">properties</xref> of all the secrets in the vault.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(java.lang.String)
  id: purgeDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: purgeDeletedSecret(String name)
  nameWithType: SecretAsyncClient.purgeDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Permanently removes a deleted secret, without the possibility of recovery. This operation can only be performed on a **soft-delete enabled**. This operation requires the `secrets/purge` permission.


    **Code sample**


    Purges the deleted secret from the key vault enabled for **soft-delete**. Subscribes to the call asynchronously and prints out the status code from the server response when a response is received.


    ```java

    secretAsyncClient.purgeDeletedSecret("deletedSecretName")
         .doOnSuccess(purgeResponse ->
             System.out.println("Successfully Purged deleted Secret"))
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> purgeDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String)
  id: purgeDeletedSecretWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: purgeDeletedSecretWithResponse(String name)
  nameWithType: SecretAsyncClient.purgeDeletedSecretWithResponse(String name)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(String name)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Permanently removes a deleted secret, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the `secrets/purge` permission.


    **Code sample**


    Purges the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the status code from the server response when a response is received.


    ```java

    secretAsyncClient.purgeDeletedSecretWithResponse("deletedSecretName")
         .subscribe(purgeResponse ->
             System.out.printf("Purge Status response %d %n", purgeResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> purgeDeletedSecretWithResponse(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a Response containing status code and HTTP headers.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup(byte[])
  id: restoreSecretBackup(byte[])
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: restoreSecretBackup(byte[] backup)
  nameWithType: SecretAsyncClient.restoreSecretBackup(byte[] backup)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup(byte[] backup)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.


    **Code sample**


    Restores the secret in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored secret details when a response is received.


    ```java

    // Pass the secret backup byte array to the restore operation.
     byte[] secretBackupByteArray = {};
     secretAsyncClient.restoreSecretBackup(secretBackupByteArray)
         .subscribe(secretResponse -> System.out.printf("Restored Secret with name %s and value %s %n",
             secretResponse.getName(), secretResponse.getValue()));
    ```
  syntax:
    content: public Mono<KeyVaultSecret> restoreSecretBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">restored secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse(byte[])
  id: restoreSecretBackupWithResponse(byte[])
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: restoreSecretBackupWithResponse(byte[] backup)
  nameWithType: SecretAsyncClient.restoreSecretBackupWithResponse(byte[] backup)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse(byte[] backup)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.


    **Code sample**


    Restores the secret in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored secret details when a response is received.


    ```java

    // Pass the secret backup byte array to the restore operation.
     byte[] secretBackupByteArray = {};
     secretAsyncClient.restoreSecretBackupWithResponse(secretBackupByteArray)
         .subscribe(secretResponse -> System.out.printf("Restored Secret with name %s and value %s %n",
             secretResponse.getValue().getName(), secretResponse.getValue().getValue()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultSecret>> restoreSecretBackupWithResponse(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the secret.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref>
             contains the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">restored secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  id: setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: setSecret(KeyVaultSecret secret)
  nameWithType: SecretAsyncClient.setSecret(KeyVaultSecret secret)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(KeyVaultSecret secret)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpiresOn()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\">contentType</xref>, and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `secret` are optional. If not specified, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> is set to true by key vault.\n\n**Code sample**\n\nCreates a new secret which activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n```java\nSecretProperties properties = new SecretProperties()\n     .setExpiresOn(OffsetDateTime.now().plusDays(60));\n KeyVaultSecret newSecret = new KeyVaultSecret(\"secretName\", \"secretValue\")\n     .setProperties(properties);\n \n secretAsyncClient.setSecret(newSecret)\n     .subscribe(secretResponse ->\n     System.out.printf(\"Secret is created with name %s and value %s %n\",\n         secretResponse.getName(), secretResponse.getValue()));\n```"
  syntax:
    content: public Mono<KeyVaultSecret> setSecret(KeyVaultSecret secret)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: >-
        The Secret object containing information about the secret and its properties. The properties
             <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getName()" data-throw-if-not-resolved="false">secret.name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getValue()" data-throw-if-not-resolved="false">secret.value</xref> cannot be
             null.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)
  id: setSecret(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: setSecret(String name, String value)
  nameWithType: SecretAsyncClient.setSecret(String name, String value)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(String name, String value)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.


    **Code sample**


    Creates a new secret in the key vault. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.


    ```java

    secretAsyncClient.setSecret("secretName", "secretValue")
         .subscribe(secretResponse ->
             System.out.printf("Secret is created with name %s and value %s%n",
                 secretResponse.getName(), secretResponse.getValue()));
    ```
  syntax:
    content: public Mono<KeyVaultSecret> setSecret(String name, String value)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret. It is required and cannot be null.
    - id: value
      type: java.lang.String
      description: The value of the secret. It is required and cannot be null.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  id: setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: setSecretWithResponse(KeyVaultSecret secret)
  nameWithType: SecretAsyncClient.setSecretWithResponse(KeyVaultSecret secret)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(KeyVaultSecret secret)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.


    The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getExpiresOn()" data-throw-if-not-resolved="false">expires</xref>, <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()" data-throw-if-not-resolved="false">contentType</xref>, and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref> values in `secret` are optional. If not specified, <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()" data-throw-if-not-resolved="false">enabled</xref> is set to true by key vault.


    **Code sample**


    Creates a new secret which activates in one day and expires in one year. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.


    ```java

    KeyVaultSecret newSecret = new KeyVaultSecret("secretName", "secretValue").
         setProperties(new SecretProperties().setExpiresOn(OffsetDateTime.now().plusDays(60)));
     secretAsyncClient.setSecretWithResponse(newSecret)
         .subscribe(secretResponse ->
             System.out.printf("Secret is created with name %s and value %s %n",
                 secretResponse.getValue().getName(), secretResponse.getValue().getValue()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultSecret>> setSecretWithResponse(KeyVaultSecret secret)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: >-
        The Secret object containing information about the secret and its properties. The properties
             <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getName()" data-throw-if-not-resolved="false">secret.name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getValue()" data-throw-if-not-resolved="false">secret.value</xref> cannot be
             null.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  id: updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: updateSecretProperties(SecretProperties secretProperties)
  nameWithType: SecretAsyncClient.updateSecretProperties(SecretProperties secretProperties)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(SecretProperties secretProperties)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.


    The `secret` is required and its fields <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getName()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()" data-throw-if-not-resolved="false">version</xref> cannot be null.


    **Code sample**


    Gets latest version of the secret, changes its <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.setNotBefore(java.time.OffsetDateTime)" data-throw-if-not-resolved="false">notBefore</xref> time, and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.


    ```java

    secretAsyncClient.getSecret("secretName")
         .subscribe(secretResponseValue -> {
             SecretProperties secretProperties = secretResponseValue.getProperties();
             //Update the not before time of the secret.
             secretProperties.setNotBefore(OffsetDateTime.now().plusDays(50));
             secretAsyncClient.updateSecretProperties(secretProperties)
                 .subscribe(secretResponse ->
                     System.out.printf("Secret's updated not before time %s %n",
                         secretResponse.getNotBefore().toString()));
         });
    ```
  syntax:
    content: public Mono<SecretProperties> updateSecretProperties(SecretProperties secretProperties)
    parameters:
    - id: secretProperties
      type: com.azure.security.keyvault.secrets.models.SecretProperties
      description: The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret properties</xref> object with updated properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">updated secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)
  id: updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretAsyncClient
  langs:
  - java
  name: updateSecretPropertiesWithResponse(SecretProperties secretProperties)
  nameWithType: SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties)
  overload: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.


    **Code sample**


    Gets latest version of the secret, changes its <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.setNotBefore(java.time.OffsetDateTime)" data-throw-if-not-resolved="false">notBefore</xref> time, and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.


    ```java

    secretAsyncClient.getSecret("secretName")
         .subscribe(secretResponseValue -> {
             SecretProperties secretProperties = secretResponseValue.getProperties();
             //Update the not before time of the secret.
             secretProperties.setNotBefore(OffsetDateTime.now().plusDays(50));
             secretAsyncClient.updateSecretPropertiesWithResponse(secretProperties)
                 .subscribe(secretResponse ->
                     System.out.printf("Secret's updated not before time %s %n",
                         secretResponse.getValue().getNotBefore().toString()));
         });
    ```


    The `secret` is required and its fields <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getName()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()" data-throw-if-not-resolved="false">version</xref> cannot be null.
  syntax:
    content: public Mono<Response<SecretProperties>> updateSecretPropertiesWithResponse(SecretProperties secretProperties)
    parameters:
    - id: secretProperties
      type: com.azure.security.keyvault.secrets.models.SecretProperties
      description: The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret properties</xref> object with updated properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">updated secret</xref>.
references:
- uid: java.net.URL
  spec.java:
  - uid: java.net.URL
    name: URL
    fullName: java.net.URL
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.security.keyvault.secrets.SecretServiceVersion
  name: SecretServiceVersion
  nameWithType: SecretServiceVersion
  fullName: com.azure.security.keyvault.secrets.SecretServiceVersion
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient*
  name: SecretAsyncClient
  nameWithType: SecretAsyncClient.SecretAsyncClient
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient
  package: com.azure.security.keyvault.secrets
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: SecretAsyncClient.getVaultUrl
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getVaultUrl
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  name: KeyVaultSecret
  nameWithType: KeyVaultSecret
  fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
    name: KeyVaultSecret
    fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*
  name: setSecret
  nameWithType: SecretAsyncClient.setSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
    name: KeyVaultSecret
    fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*
  name: setSecretWithResponse
  nameWithType: SecretAsyncClient.setSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*
  name: getSecret
  nameWithType: SecretAsyncClient.getSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*
  name: getSecretWithResponse
  nameWithType: SecretAsyncClient.getSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.models.SecretProperties
  name: SecretProperties
  nameWithType: SecretProperties
  fullName: com.azure.security.keyvault.secrets.models.SecretProperties
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.SecretProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretProperties
    name: SecretProperties
    fullName: com.azure.security.keyvault.secrets.models.SecretProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties*
  name: updateSecretProperties
  nameWithType: SecretAsyncClient.updateSecretProperties
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretProperties
    name: SecretProperties
    fullName: com.azure.security.keyvault.secrets.models.SecretProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse*
  name: updateSecretPropertiesWithResponse
  nameWithType: SecretAsyncClient.updateSecretPropertiesWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret*
  name: beginDeleteSecret
  nameWithType: SecretAsyncClient.beginDeleteSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.beginDeleteSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.DeletedSecret>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret*
  name: getDeletedSecret
  nameWithType: SecretAsyncClient.getDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse*
  name: getDeletedSecretWithResponse
  nameWithType: SecretAsyncClient.getDeletedSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret*
  name: purgeDeletedSecret
  nameWithType: SecretAsyncClient.purgeDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse*
  name: purgeDeletedSecretWithResponse
  nameWithType: SecretAsyncClient.purgeDeletedSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
    name: KeyVaultSecret
    fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret*
  name: beginRecoverDeletedSecret
  nameWithType: SecretAsyncClient.beginRecoverDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.beginRecoverDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret*
  name: backupSecret
  nameWithType: SecretAsyncClient.backupSecret
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret
  package: com.azure.security.keyvault.secrets
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse*
  name: backupSecretWithResponse
  nameWithType: SecretAsyncClient.backupSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup*
  name: restoreSecretBackup
  nameWithType: SecretAsyncClient.restoreSecretBackup
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackup
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse*
  name: restoreSecretBackupWithResponse
  nameWithType: SecretAsyncClient.restoreSecretBackupWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretBackupWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretProperties
    name: SecretProperties
    fullName: com.azure.security.keyvault.secrets.models.SecretProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets*
  name: listPropertiesOfSecrets
  nameWithType: SecretAsyncClient.listPropertiesOfSecrets
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecrets
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.DeletedSecret>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets*
  name: listDeletedSecrets
  nameWithType: SecretAsyncClient.listDeletedSecrets
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions*
  name: listPropertiesOfSecretVersions
  nameWithType: SecretAsyncClient.listPropertiesOfSecretVersions
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions
  package: com.azure.security.keyvault.secrets
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void
  name: DeletedSecret,Void
  nameWithType: DeletedSecret,Void
  fullName: com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: com.azure.security.keyvault.secrets.models.DeletedSecret
  name: DeletedSecret
  nameWithType: DeletedSecret
  fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void
  name: KeyVaultSecret,Void
  nameWithType: KeyVaultSecret,Void
  fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
