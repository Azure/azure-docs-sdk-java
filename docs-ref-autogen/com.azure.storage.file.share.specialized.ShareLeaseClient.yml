### YamlMime:JavaType
uid: "com.azure.storage.file.share.specialized.ShareLeaseClient"
fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient"
name: "ShareLeaseClient"
nameWithType: "ShareLeaseClient"
summary: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.share.ShareFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"files\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ShareLeaseClient"
methods:
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLease()"
  name: "acquireLease()"
  nameWithType: "ShareLeaseClient.acquireLease()"
  summary: "Acquires an infinite lease for write and delete operations."
  syntax: "public String acquireLease()"
  desc: "Acquires an infinite lease for write and delete operations.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Lease ID is %s%n\", client.acquireLease());\n```"
  returns:
    description: "The lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLeaseWithResponse(com.azure.storage.file.share.options.ShareAcquireLeaseOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLeaseWithResponse(ShareAcquireLeaseOptions options, Duration timeout, Context context)"
  name: "acquireLeaseWithResponse(ShareAcquireLeaseOptions options, Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.acquireLeaseWithResponse(ShareAcquireLeaseOptions options, Duration timeout, Context context)"
  summary: "Acquires a lease for write and delete operations."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareAcquireLeaseOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAcquireLeaseOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareAcquireLeaseOptions?alt=com.azure.storage.file.share.options.ShareAcquireLeaseOptions&text=ShareAcquireLeaseOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<String> acquireLeaseWithResponse(ShareAcquireLeaseOptions options, Duration timeout, Context context)"
  desc: "Acquires a lease for write and delete operations. Note: Share files only support infinite lease.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Lease ID is %s%n\", client\n     .acquireLeaseWithResponse(new ShareAcquireLeaseOptions().setDuration(10), timeout, new Context(key, value))\n     .getValue());\n```"
  returns:
    description: "The lease ID."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLeaseWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.acquireLeaseWithResponse(Duration timeout, Context context)"
  name: "acquireLeaseWithResponse(Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.acquireLeaseWithResponse(Duration timeout, Context context)"
  summary: "Acquires an infinite lease for write and delete operations."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<String> acquireLeaseWithResponse(Duration timeout, Context context)"
  desc: "Acquires an infinite lease for write and delete operations.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Lease ID is %s%n\", client\n     .acquireLeaseWithResponse(timeout, new Context(key, value))\n     .getValue());\n```"
  returns:
    description: "The lease ID."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLease()"
  name: "breakLease()"
  nameWithType: "ShareLeaseClient.breakLease()"
  summary: "Breaks the previously acquired lease, if it exists."
  syntax: "public void breakLease()"
  desc: "Breaks the previously acquired lease, if it exists. Leases will break immediately.\n\n**Code Samples**\n\n```java\nclient.breakLease();\n System.out.println(\"The lease has been successfully broken\");\n```"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLeaseWithResponse(com.azure.storage.file.share.options.ShareBreakLeaseOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLeaseWithResponse(ShareBreakLeaseOptions options, Duration timeout, Context context)"
  name: "breakLeaseWithResponse(ShareBreakLeaseOptions options, Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.breakLeaseWithResponse(ShareBreakLeaseOptions options, Duration timeout, Context context)"
  summary: "Breaks the previously acquired lease, if it exists."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareBreakLeaseOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareBreakLeaseOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareBreakLeaseOptions?alt=com.azure.storage.file.share.options.ShareBreakLeaseOptions&text=ShareBreakLeaseOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> breakLeaseWithResponse(ShareBreakLeaseOptions options, Duration timeout, Context context)"
  desc: "Breaks the previously acquired lease, if it exists. Leases will break immediately.\n\n**Code Samples**\n\n```java\nclient.breakLeaseWithResponse(new ShareBreakLeaseOptions().setBreakPeriod(Duration.ofSeconds(25)),\n     timeout, new Context(key, value));\n System.out.println(\"The lease has been successfully broken\");\n```"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLeaseWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.breakLeaseWithResponse(Duration timeout, Context context)"
  name: "breakLeaseWithResponse(Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.breakLeaseWithResponse(Duration timeout, Context context)"
  summary: "Breaks the previously acquired lease, if it exists."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> breakLeaseWithResponse(Duration timeout, Context context)"
  desc: "Breaks the previously acquired lease, if it exists. Leases will break immediately.\n\n**Code Samples**\n\n```java\nclient.breakLeaseWithResponse(timeout, new Context(key, value));\n System.out.println(\"The lease has been successfully broken\");\n```"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.changeLease(java.lang.String)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.changeLease(String proposedId)"
  name: "changeLease(String proposedId)"
  nameWithType: "ShareLeaseClient.changeLease(String proposedId)"
  summary: "Changes the lease ID."
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String changeLease(String proposedId)"
  desc: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Changed lease ID is %s%n\", client.changeLease(\"proposedId\"));\n```"
  returns:
    description: "The new lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.changeLeaseWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.changeLeaseWithResponse(String proposedId, Duration timeout, Context context)"
  name: "changeLeaseWithResponse(String proposedId, Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.changeLeaseWithResponse(String proposedId, Duration timeout, Context context)"
  summary: "Changes the lease ID."
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<String> changeLeaseWithResponse(String proposedId, Duration timeout, Context context)"
  desc: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Changed lease ID is %s%n\",\n     client.changeLeaseWithResponse(\"proposedId\", timeout, new Context(key, value))\n         .getValue());\n```"
  returns:
    description: "The new lease ID."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.getAccountName()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareLeaseClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.getFileUrl()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.getFileUrl()"
  name: "getFileUrl()"
  nameWithType: "ShareLeaseClient.getFileUrl()"
  deprecatedTag: "Please use <xref uid=\"com.azure.storage.file.share.specialized.ShareLeaseClient.getResourceUrl()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getResourceUrl()\"></xref>"
  syntax: "@Deprecated\npublic String getFileUrl()"
  hasDeprecatedTag: true
  returns:
    description: "URL of the lease client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.getLeaseId()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.getLeaseId()"
  name: "getLeaseId()"
  nameWithType: "ShareLeaseClient.getLeaseId()"
  summary: "Get the lease ID for this lease."
  syntax: "public String getLeaseId()"
  desc: "Get the lease ID for this lease."
  returns:
    description: "the lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.getResourceUrl()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.getResourceUrl()"
  name: "getResourceUrl()"
  nameWithType: "ShareLeaseClient.getResourceUrl()"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> of the lease client."
  syntax: "public String getResourceUrl()"
  desc: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> of the lease client.\n\nThe lease will either be a share or share file URL depending on which the lease client is associated."
  returns:
    description: "URL of the lease client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.releaseLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.releaseLease()"
  name: "releaseLease()"
  nameWithType: "ShareLeaseClient.releaseLease()"
  summary: "Releases the previously acquired lease."
  syntax: "public void releaseLease()"
  desc: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nclient.releaseLease();\n System.out.println(\"Release lease completed\");\n```"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.releaseLeaseWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.releaseLeaseWithResponse(Duration timeout, Context context)"
  name: "releaseLeaseWithResponse(Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.releaseLeaseWithResponse(Duration timeout, Context context)"
  summary: "Releases the previously acquired lease."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> releaseLeaseWithResponse(Duration timeout, Context context)"
  desc: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Release lease completed with status %d%n\",\n     client.releaseLeaseWithResponse(timeout, new Context(key, value))\n         .getStatusCode());\n```"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.renewLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.renewLease()"
  name: "renewLease()"
  nameWithType: "ShareLeaseClient.renewLease()"
  summary: "Renews the previously acquired lease on a share."
  syntax: "public String renewLease()"
  desc: "Renews the previously acquired lease on a share.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Renewed lease ID is %s%n\", client.renewLease());\n```"
  returns:
    description: "A response containing the renewed lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseClient.renewLeaseWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseClient.renewLeaseWithResponse(Duration timeout, Context context)"
  name: "renewLeaseWithResponse(Duration timeout, Context context)"
  nameWithType: "ShareLeaseClient.renewLeaseWithResponse(Duration timeout, Context context)"
  summary: "Renews the previously acquired lease on a share."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<String> renewLeaseWithResponse(Duration timeout, Context context)"
  desc: "Renews the previously acquired lease on a share.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Renewed lease ID is %s%n\",\n     client.releaseLeaseWithResponse(timeout, new Context(key, value))\n         .getValue());\n```"
  returns:
    description: "A response containing the renewed lease ID."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.share.ShareFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"files\"></xref>. This client acts as a supplement to that client and only handles leasing operations.\n\n**Instantiating a ShareLeaseClient**\n\n```java\nShareLeaseClient fileLeaseClient = new ShareLeaseClientBuilder()\n     .fileClient(shareFileClient)\n     .buildClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.specialized.ShareLeaseClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client.\n\nFor more information about leasing see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/lease-file"
metadata: {}
package: "com.azure.storage.file.share.specialized"
artifact: com.azure:azure-storage-file-share:12.15.0
