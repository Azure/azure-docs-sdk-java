### YamlMime:JavaMember
nameWithType: MultiplexingClient.registerDeviceClient
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient deviceClient)
  name: registerDeviceClient(DeviceClient deviceClient)
  nameWithType: MultiplexingClient.registerDeviceClient(DeviceClient deviceClient)
  parameters:
  - description: <p>The device client to associate with this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientDeviceRegistrationAuthenticationException?alt=MultiplexingClientDeviceRegistrationAuthenticationException&text=MultiplexingClientDeviceRegistrationAuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>If the device failed to register. Details for this failure can be found nested within the map given by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationAuthenticationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientDeviceRegistrationAuthenticationException#getRegistrationExceptions()"></xref>. If this exception is thrown, the device was not registered, and therefore it does not need to be unregistered. </p>
  - type: <xref href="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException&text=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the default timeout allows. </p>
  - type: <xref href="MultiplexingClientException?alt=MultiplexingClientException&text=MultiplexingClientException" data-throw-if-not-resolved="False"/>
    description: <p>If any other Exception is thrown, it will be nested into this exception. </p>
  summary: >-
    <p>Register a device client to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> for registering multiple devices as it has some performance improvements over repeatedly calling this method for individual device registrations. This method blocks on each registration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the registrations after starting them all asynchronously. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>If the multiplexing client is already open, then this device client will automatically be opened, too. If the multiplexing client is not open yet, then this device client will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open()"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will add this device client to the multiplexed connection, and then will block until the registration has been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device client must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device client must use symmetric key based authentication. </p>

    <p>The registered device client must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If the provided device client is already registered to this multiplexing client, then then this method will do nothing. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on this device client from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClient(DeviceClient deviceClient)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  name: registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  parameters:
  - description: <p>The device client to associate with this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  - description: <p>How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientDeviceRegistrationAuthenticationException?alt=MultiplexingClientDeviceRegistrationAuthenticationException&text=MultiplexingClientDeviceRegistrationAuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>If the device failed to register. Details for this failure can be found nested within the map given by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationAuthenticationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientDeviceRegistrationAuthenticationException#getRegistrationExceptions()"></xref>. If this exception is thrown, the device was not registered, and therefore it does not need to be unregistered. </p>
  - type: <xref href="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException&text=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the provided timeout allows. </p>
  - type: <xref href="MultiplexingClientException?alt=MultiplexingClientException&text=MultiplexingClientException" data-throw-if-not-resolved="False"/>
    description: <p>If any other Exception is thrown, it will be nested into this exception. </p>
  summary: >-
    <p>Register a device client to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> for registering multiple devices as it has some performance improvements over repeatedly calling this method for individual device registrations. This method blocks on each registration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the registrations after starting them all asynchronously. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>If the multiplexing client is already open, then this device client will automatically be opened, too. If the multiplexing client is not open yet, then this device client will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open()"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will add this device client to the multiplexed connection, and then will block until the registration has been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device client must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device client must use symmetric key based authentication. </p>

    <p>The registered device client must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If the provided device client is already registered to this multiplexing client, then then this method will do nothing. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on this device client from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient,long)
uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient*
fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient
name: registerDeviceClient(DeviceClient deviceClient)
package: com.microsoft.azure.sdk.iot.device
metadata: {}
