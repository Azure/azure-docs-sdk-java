### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject(JsonParser parser)
  name: consumeJsonObject(JsonParser parser)
  nameWithType: EncryptionData.consumeJsonObject(JsonParser parser)
  parameters:
  - name: parser
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  syntax: public static void consumeJsonObject(JsonParser parser)
  uid: com.microsoft.azure.storage.core.EncryptionData.consumeJsonObject(JsonParser)
- fullName: com.microsoft.azure.storage.core.EncryptionData.copyValues(EncryptionData data)
  name: copyValues(EncryptionData data)
  nameWithType: EncryptionData.copyValues(EncryptionData data)
  parameters:
  - name: data
    type: <xref href="com.microsoft.azure.storage.core.EncryptionData?alt=com.microsoft.azure.storage.core.EncryptionData&text=EncryptionData" data-throw-if-not-resolved="False"/>
  syntax: public void copyValues(EncryptionData data)
  uid: com.microsoft.azure.storage.core.EncryptionData.copyValues(EncryptionData)
- fullName: com.microsoft.azure.storage.core.EncryptionData.deserialize(JsonParser parser)
  name: deserialize(JsonParser parser)
  nameWithType: EncryptionData.deserialize(JsonParser parser)
  parameters:
  - name: parser
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.core.EncryptionData?alt=com.microsoft.azure.storage.core.EncryptionData&text=EncryptionData" data-throw-if-not-resolved="False"/>
  syntax: public static EncryptionData deserialize(JsonParser parser)
  uid: com.microsoft.azure.storage.core.EncryptionData.deserialize(JsonParser)
- fullName: com.microsoft.azure.storage.core.EncryptionData.deserialize(String inputData)
  name: deserialize(String inputData)
  nameWithType: EncryptionData.deserialize(String inputData)
  parameters:
  - name: inputData
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.core.EncryptionData?alt=com.microsoft.azure.storage.core.EncryptionData&text=EncryptionData" data-throw-if-not-resolved="False"/>
  syntax: public static EncryptionData deserialize(String inputData)
  uid: com.microsoft.azure.storage.core.EncryptionData.deserialize(String)
- fullName: com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata(JsonParser parser)
  name: deserializeKeyWrappingMetadata(JsonParser parser)
  nameWithType: EncryptionData.deserializeKeyWrappingMetadata(JsonParser parser)
  parameters:
  - name: parser
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public static HashMap<String, String> deserializeKeyWrappingMetadata(JsonParser parser)
  uid: com.microsoft.azure.storage.core.EncryptionData.deserializeKeyWrappingMetadata(JsonParser)
- fullName: com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV()
  name: getContentEncryptionIV()
  nameWithType: EncryptionData.getContentEncryptionIV()
  returns:
    description: <p>The content encryption IV. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the content encryption IV.</p>

    <p></p>
  syntax: public byte [] getContentEncryptionIV()
  uid: com.microsoft.azure.storage.core.EncryptionData.getContentEncryptionIV()
- fullName: com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent()
  name: getEncryptionAgent()
  nameWithType: EncryptionData.getEncryptionAgent()
  returns:
    description: <p>The encryption agent. </p>
    type: <xref href="com.microsoft.azure.storage.core.EncryptionAgent?alt=com.microsoft.azure.storage.core.EncryptionAgent&text=EncryptionAgent" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the encryption agent that is used to identify the encryption protocol version and encryption algorithm.</p>

    <p></p>
  syntax: public EncryptionAgent getEncryptionAgent()
  uid: com.microsoft.azure.storage.core.EncryptionData.getEncryptionAgent()
- fullName: com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata()
  name: getKeyWrappingMetadata()
  nameWithType: EncryptionData.getKeyWrappingMetadata()
  returns:
    description: <p>A HashMap containing the encryption metadata in a key-value format. </p>
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the metadata for encryption.</p>

    <p></p>
  syntax: public HashMap<String, String> getKeyWrappingMetadata()
  uid: com.microsoft.azure.storage.core.EncryptionData.getKeyWrappingMetadata()
- fullName: com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey()
  name: getWrappedContentKey()
  nameWithType: EncryptionData.getWrappedContentKey()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.core.WrappedContentKey" data-throw-if-not-resolved="false" data-raw-source="WrappedContentKey"></xref> object that stores the wrapping algorithm, key identifier and the encrypted key bytes. </p>
    type: <xref href="com.microsoft.azure.storage.core.WrappedContentKey?alt=com.microsoft.azure.storage.core.WrappedContentKey&text=WrappedContentKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the wrapped key that is used to store the wrapping algorithm, key identifier and the encrypted key bytes.</p>

    <p></p>
  syntax: public WrappedContentKey getWrappedContentKey()
  uid: com.microsoft.azure.storage.core.EncryptionData.getWrappedContentKey()
- fullName: com.microsoft.azure.storage.core.EncryptionData.serialize()
  name: serialize()
  nameWithType: EncryptionData.serialize()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String serialize()
  uid: com.microsoft.azure.storage.core.EncryptionData.serialize()
- fullName: com.microsoft.azure.storage.core.EncryptionData.serialize(JsonGenerator generator)
  name: serialize(JsonGenerator generator)
  nameWithType: EncryptionData.serialize(JsonGenerator generator)
  parameters:
  - name: generator
    type: <xref href="JsonGenerator?alt=JsonGenerator&text=JsonGenerator" data-throw-if-not-resolved="False"/>
  syntax: public void serialize(JsonGenerator generator)
  uid: com.microsoft.azure.storage.core.EncryptionData.serialize(JsonGenerator)
- fullName: com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV(byte[] contentEncryptionIV)
  name: setContentEncryptionIV(byte[] contentEncryptionIV)
  nameWithType: EncryptionData.setContentEncryptionIV(byte[] contentEncryptionIV)
  parameters:
  - description: <p>The content encryption IV. </p>
    name: contentEncryptionIV
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the content encryption IV.</p>

    <p></p>
  syntax: public void setContentEncryptionIV(byte[] contentEncryptionIV)
  uid: com.microsoft.azure.storage.core.EncryptionData.setContentEncryptionIV(byte [])
- fullName: com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent(EncryptionAgent encryptionAgent)
  name: setEncryptionAgent(EncryptionAgent encryptionAgent)
  nameWithType: EncryptionData.setEncryptionAgent(EncryptionAgent encryptionAgent)
  parameters:
  - description: <p>The encryption agent. </p>
    name: encryptionAgent
    type: <xref href="com.microsoft.azure.storage.core.EncryptionAgent?alt=com.microsoft.azure.storage.core.EncryptionAgent&text=EncryptionAgent" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the encryption agent that is used to identify the encryption protocol version and encryption algorithm.</p>

    <p></p>
  syntax: public void setEncryptionAgent(EncryptionAgent encryptionAgent)
  uid: com.microsoft.azure.storage.core.EncryptionData.setEncryptionAgent(EncryptionAgent)
- fullName: com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata(HashMap<String, String> keyWrappingMetadata)
  name: setKeyWrappingMetadata(HashMap<String, String> keyWrappingMetadata)
  nameWithType: EncryptionData.setKeyWrappingMetadata(HashMap<String, String> keyWrappingMetadata)
  parameters:
  - description: <p>A HashMap containing the encryption metadata in a key-value format. </p>
    name: keyWrappingMetadata
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the metadata for encryption.</p>

    <p></p>
  syntax: public void setKeyWrappingMetadata(HashMap<String, String> keyWrappingMetadata)
  uid: com.microsoft.azure.storage.core.EncryptionData.setKeyWrappingMetadata(HashMap<String, String>)
- fullName: com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey(WrappedContentKey wrappedContentKey)
  name: setWrappedContentKey(WrappedContentKey wrappedContentKey)
  nameWithType: EncryptionData.setWrappedContentKey(WrappedContentKey wrappedContentKey)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.core.WrappedContentKey" data-throw-if-not-resolved="false" data-raw-source="WrappedContentKey"></xref> object that stores the wrapping algorithm, key identifier and the encrypted key bytes. </p>
    name: wrappedContentKey
    type: <xref href="com.microsoft.azure.storage.core.WrappedContentKey?alt=com.microsoft.azure.storage.core.WrappedContentKey&text=WrappedContentKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the wrapped key that is used to store the wrapping algorithm, key identifier and the encrypted key bytes.</p>

    <p></p>
  syntax: public void setWrappedContentKey(WrappedContentKey wrappedContentKey)
  uid: com.microsoft.azure.storage.core.EncryptionData.setWrappedContentKey(WrappedContentKey)
nameWithType: EncryptionData
syntax: public class EncryptionData
type: class
uid: com.microsoft.azure.storage.core.EncryptionData
fullName: com.microsoft.azure.storage.core.EncryptionData
name: EncryptionData
package: com.microsoft.azure.storage.core
summary: <p>RESERVED FOR INTERNAL USE. Represents the encryption data that is stored on the service. </p>
metadata: {}
