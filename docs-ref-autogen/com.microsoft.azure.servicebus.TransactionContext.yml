### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.TransactionContext"
fullName: "com.microsoft.azure.servicebus.TransactionContext"
name: "TransactionContext"
nameWithType: "TransactionContext"
summary: "Represents an active servicebus transaction."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class TransactionContext"
constructors:
- uid: "com.microsoft.azure.servicebus.TransactionContext.TransactionContext(java.nio.ByteBuffer,com.microsoft.azure.servicebus.primitives.MessagingFactory)"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)"
  name: "TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)"
  nameWithType: "TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)"
  parameters:
  - name: "txnId"
    type: "<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />"
  - name: "messagingFactory"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)"
fields:
- uid: "com.microsoft.azure.servicebus.TransactionContext.NULL_TXN"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.NULL_TXN"
  name: "NULL_TXN"
  nameWithType: "TransactionContext.NULL_TXN"
  modifiers:
  - "static"
  field:
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static TransactionContext NULL_TXN"
methods:
- uid: "com.microsoft.azure.servicebus.TransactionContext.commit()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.commit()"
  name: "commit()"
  nameWithType: "TransactionContext.commit()"
  summary: "Commits the transaction"
  syntax: "public void commit()"
  exceptions:
  - description: "if Commit failed"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if Commit failed"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Commits the transaction"
- uid: "com.microsoft.azure.servicebus.TransactionContext.commitAsync()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.commitAsync()"
  name: "commitAsync()"
  nameWithType: "TransactionContext.commitAsync()"
  summary: "Asynchronously commits the transaction"
  syntax: "public CompletableFuture<Void> commitAsync()"
  desc: "Asynchronously commits the transaction"
  returns:
    description: "a CompletableFuture for the commit operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TransactionContext.getTransactionId()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.getTransactionId()"
  name: "getTransactionId()"
  nameWithType: "TransactionContext.getTransactionId()"
  summary: "Represents the service-side transactionID"
  syntax: "public ByteBuffer getTransactionId()"
  desc: "Represents the service-side transactionID"
  returns:
    description: "transaction ID"
    type: "<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean)"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean commit)"
  name: "notifyTransactionCompletion(boolean commit)"
  nameWithType: "TransactionContext.notifyTransactionCompletion(boolean commit)"
  summary: "This is not to be called by the user."
  parameters:
  - description: "true indicates success and false for rollback"
    name: "commit"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void notifyTransactionCompletion(boolean commit)"
  desc: "This is not to be called by the user."
- uid: "com.microsoft.azure.servicebus.TransactionContext.rollback()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.rollback()"
  name: "rollback()"
  nameWithType: "TransactionContext.rollback()"
  summary: "Rollback the transaction"
  syntax: "public void rollback()"
  exceptions:
  - description: "if rollback failed"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if rollback failed"
    type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Rollback the transaction"
- uid: "com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()"
  name: "rollbackAsync()"
  nameWithType: "TransactionContext.rollbackAsync()"
  summary: "Asynchronously rollback the transaction."
  syntax: "public CompletableFuture<Void> rollbackAsync()"
  desc: "Asynchronously rollback the transaction."
  returns:
    description: "a CompletableFuture for the rollback operation"
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TransactionContext.toString()"
  fullName: "com.microsoft.azure.servicebus.TransactionContext.toString()"
  name: "toString()"
  nameWithType: "TransactionContext.toString()"
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(com.microsoft.azure.servicebus.TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with `commit = true` To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(com.microsoft.azure.servicebus.TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with `commit = false`"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
