### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.TransactionContext
  id: TransactionContext
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.TransactionContext.commit()
  - com.microsoft.azure.servicebus.TransactionContext.commitAsync()
  - com.microsoft.azure.servicebus.TransactionContext.getTransactionId()
  - com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean)
  - com.microsoft.azure.servicebus.TransactionContext.NULL_TXN
  - com.microsoft.azure.servicebus.TransactionContext.rollback()
  - com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()
  - com.microsoft.azure.servicebus.TransactionContext.toString()
  - com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer,MessagingFactory)
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
  type: Class
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 15
  package: com.microsoft.azure.servicebus
  summary: "<p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with  To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with </p>"
  syntax: &o1
    content: public class TransactionContext
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.servicebus.TransactionContext.commit()
  id: commit()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: commit()
  nameWithType: TransactionContext.commit()
  fullName: com.microsoft.azure.servicebus.TransactionContext.commit()
  overload: com.microsoft.azure.servicebus.TransactionContext.commit*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 43
  package: com.microsoft.azure.servicebus
  summary: "<p>Commits the transaction </p>"
  syntax:
    content: public void commit()
  exceptions:
  - type: 73fec9fb
    description: <p>if Commit failed </p>
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.commitAsync()
  id: commitAsync()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: commitAsync()
  nameWithType: TransactionContext.commitAsync()
  fullName: com.microsoft.azure.servicebus.TransactionContext.commitAsync()
  overload: com.microsoft.azure.servicebus.TransactionContext.commitAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 55
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously commits the transaction </p>"
  syntax:
    content: public CompletableFuture<Void> commitAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture for the commit operation </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.getTransactionId()
  id: getTransactionId()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: getTransactionId()
  nameWithType: TransactionContext.getTransactionId()
  fullName: com.microsoft.azure.servicebus.TransactionContext.getTransactionId()
  overload: com.microsoft.azure.servicebus.TransactionContext.getTransactionId*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 31
  package: com.microsoft.azure.servicebus
  summary: "<p>Represents the service-side transactionID </p>"
  syntax:
    content: public ByteBuffer getTransactionId()
    return:
      type: 85310d28
      description: <p>transaction ID </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean)
  id: notifyTransactionCompletion(boolean)
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: notifyTransactionCompletion(boolean commit)
  nameWithType: TransactionContext.notifyTransactionCompletion(boolean commit)
  fullName: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean commit)
  overload: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 96
  package: com.microsoft.azure.servicebus
  summary: "<p>This is not to be called by the user. </p>"
  syntax:
    content: public void notifyTransactionCompletion(boolean commit)
    parameters:
    - id: commit
      type: 4fc6e284
      description: <p>true indicates success and false for rollback </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.NULL_TXN
  id: NULL_TXN
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: NULL_TXN
  nameWithType: TransactionContext.NULL_TXN
  fullName: com.microsoft.azure.servicebus.TransactionContext.NULL_TXN
  type: Field
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 16
  package: com.microsoft.azure.servicebus
  syntax:
    content: public static TransactionContext NULL_TXN= new TransactionContext(null, null)
    return:
      type: com.microsoft.azure.servicebus.TransactionContext
- uid: com.microsoft.azure.servicebus.TransactionContext.rollback()
  id: rollback()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: rollback()
  nameWithType: TransactionContext.rollback()
  fullName: com.microsoft.azure.servicebus.TransactionContext.rollback()
  overload: com.microsoft.azure.servicebus.TransactionContext.rollback*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 70
  package: com.microsoft.azure.servicebus
  summary: "<p>Rollback the transaction </p>"
  syntax:
    content: public void rollback()
  exceptions:
  - type: 73fec9fb
    description: <p>if rollback failed </p>
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()
  id: rollbackAsync()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: rollbackAsync()
  nameWithType: TransactionContext.rollbackAsync()
  fullName: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()
  overload: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 82
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously rollback the transaction. </p>"
  syntax:
    content: public CompletableFuture<Void> rollbackAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture for the rollback operation </p>
- uid: com.microsoft.azure.servicebus.TransactionContext.toString()
  id: toString()
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: toString()
  nameWithType: TransactionContext.toString()
  fullName: com.microsoft.azure.servicebus.TransactionContext.toString()
  overload: com.microsoft.azure.servicebus.TransactionContext.toString*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 34
  package: com.microsoft.azure.servicebus
  syntax:
    content: public String toString()
    return:
      type: "26831127"
- uid: com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer,MessagingFactory)
  id: TransactionContext(ByteBuffer,MessagingFactory)
  parent: com.microsoft.azure.servicebus.TransactionContext
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  langs:
  - java
  name: TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  nameWithType: TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  fullName: com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  overload: com.microsoft.azure.servicebus.TransactionContext.TransactionContext*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TransactionContext.java
    startLine: 22
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
    parameters:
    - id: txnId
      type: 85310d28
    - id: messagingFactory
      type: com.microsoft.azure.servicebus.primitives.MessagingFactory
references:
- uid: 85310d28
  spec.java:
  - name: ByteBuffer
    fullName: ByteBuffer
- uid: com.microsoft.azure.servicebus.TransactionContext.TransactionContext*
  name: TransactionContext
  nameWithType: TransactionContext.TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext.TransactionContext
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext.getTransactionId*
  name: getTransactionId
  nameWithType: TransactionContext.getTransactionId
  fullName: com.microsoft.azure.servicebus.TransactionContext.getTransactionId
  package: com.microsoft.azure.servicebus
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.servicebus.TransactionContext.toString*
  name: toString
  nameWithType: TransactionContext.toString
  fullName: com.microsoft.azure.servicebus.TransactionContext.toString
  package: com.microsoft.azure.servicebus
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: com.microsoft.azure.servicebus.TransactionContext.commit*
  name: commit
  nameWithType: TransactionContext.commit
  fullName: com.microsoft.azure.servicebus.TransactionContext.commit
  package: com.microsoft.azure.servicebus
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus.TransactionContext.commitAsync*
  name: commitAsync
  nameWithType: TransactionContext.commitAsync
  fullName: com.microsoft.azure.servicebus.TransactionContext.commitAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext.rollback*
  name: rollback
  nameWithType: TransactionContext.rollback
  fullName: com.microsoft.azure.servicebus.TransactionContext.rollback
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync*
  name: rollbackAsync
  nameWithType: TransactionContext.rollbackAsync
  fullName: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync
  package: com.microsoft.azure.servicebus
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion*
  name: notifyTransactionCompletion
  nameWithType: TransactionContext.notifyTransactionCompletion
  fullName: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
  type: Class
  summary: "<p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with  To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with </p>"
  syntax: *o1
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.MessagingFactory.yml
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
  type: Class
  summary: "<p>Abstracts all AMQP related details and encapsulates an AMQP connection and manages its life cycle. Each instance of this class represent one AMQP connection to the namespace. If an application creates multiple senders, receivers or clients using the same MessagingFactory instance, all those senders, receivers or clients will share the same connection to the namespace. </p>"
  syntax:
    content: public class MessagingFactory extends ClientEntity
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ServiceBusException.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: "<p>This is the base exception that service bus will generate for all error cases. </p>"
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()
  parent: com.microsoft.azure.servicebus.primitives.MessagingFactory
  href: com.microsoft.azure.servicebus.primitives.MessagingFactory.yml
  name: startTransactionAsync()
  nameWithType: MessagingFactory.startTransactionAsync()
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()
  type: Method
  summary: "<p>Starts a new service side transaction. The <xref uid=\"com.microsoft.azure.servicebus.TransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TransactionContext\"></xref> should be passed to all operations that needs to be in this transaction. </p>"
  syntax:
    content: public CompletableFuture<TransactionContext> startTransactionAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus.TransactionContexta08ddfce
      description: <p>A <code>CompletableFuture</code> which returns a new transaction </p>
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)
  parent: com.microsoft.azure.servicebus.primitives.MessagingFactory
  href: com.microsoft.azure.servicebus.primitives.MessagingFactory.yml
  name: endTransactionAsync(TransactionContext transaction, boolean commit)
  nameWithType: MessagingFactory.endTransactionAsync(TransactionContext transaction, boolean commit)
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext transaction, boolean commit)
  type: Method
  summary: "<p>Ends a transaction that was initiated using <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. </p>"
  syntax:
    content: public CompletableFuture<Void> endTransactionAsync(TransactionContext transaction, boolean commit)
    parameters:
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: <p>The transaction object. </p>
    - id: commit
      type: 4fc6e284
      description: <p>A boolean value of <code>true</code> indicates transaction to be committed. A value of <code>false</code> indicates a transaction rollback. </p>
    return:
      type: db03ee24
      description: <p>A <code>CompletableFuture</code></p>
