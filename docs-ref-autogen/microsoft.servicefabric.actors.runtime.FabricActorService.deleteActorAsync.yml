### YamlMime:JavaMember
nameWithType: FabricActorService.deleteActorAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  name: deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.ActorService.deleteActorAsync(ActorId,CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false">ActorId</xref> of the actor to be deleted. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of call to server. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture<?>&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an Actor from the Actor service.</p>

    <p>

    An active actor, will be deactivated and its state will also be deleted from state provider. An in-active actor's state will be deleted from state provider. If this method is called for a non-existent actor id in the system, it will be a no-op. </p>
  syntax: public CompletableFuture<?> deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId,CancellationToken)
uid: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync*
fullName: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
name: deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
package: microsoft.servicefabric.actors.runtime
metadata: {}
