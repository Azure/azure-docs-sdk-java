### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.StatefulServiceBase(StatefulServiceContext serviceContext, StateProviderReplica stateProviderReplica)
  name: StatefulServiceBase(StatefulServiceContext serviceContext, StateProviderReplica stateProviderReplica)
  nameWithType: StatefulServiceBase.StatefulServiceBase(StatefulServiceContext serviceContext, StateProviderReplica stateProviderReplica)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceContext"></xref> that describes the service context. </p>
    name: serviceContext
    type: <xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StateProviderReplica"></xref> that represents a reliable state provider replica. </p>
    name: stateProviderReplica
    type: <xref href="microsoft.servicefabric.data.StateProviderReplica?alt=microsoft.servicefabric.data.StateProviderReplica&text=StateProviderReplica" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new StatefulService.</p>

    <p></p>
  syntax: protected StatefulServiceBase(StatefulServiceContext serviceContext, StateProviderReplica stateProviderReplica)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.StatefulServiceBase(StatefulServiceContext,StateProviderReplica)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription backupDescription)
  name: backupAsync(BackupDescription backupDescription)
  nameWithType: StatefulServiceBase.backupAsync(BackupDescription backupDescription)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="BackupDescription"></xref> describing the backup request. </p>
    name: backupDescription
    type: <xref href="microsoft.servicefabric.data.BackupDescription?alt=microsoft.servicefabric.data.BackupDescription&text=BackupDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a backup of all reliable state managed by this <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase"></xref>.</p>

    <p></p>
  syntax: public CompletableFuture<?> backupAsync(BackupDescription backupDescription)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription backupDescription, Duration timeout, CancellationToken cancellationToken)
  name: backupAsync(BackupDescription backupDescription, Duration timeout, CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.backupAsync(BackupDescription backupDescription, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="BackupDescription"></xref> describing the backup request. </p>
    name: backupDescription
    type: <xref href="microsoft.servicefabric.data.BackupDescription?alt=microsoft.servicefabric.data.BackupDescription&text=BackupDescription" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a backup of all reliable state managed by this <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase"></xref>.</p>

    <p></p>
  syntax: public CompletableFuture<?> backupAsync(BackupDescription backupDescription, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription,Duration,CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.createServiceReplicaListeners()
  name: createServiceReplicaListeners()
  nameWithType: StatefulServiceBase.createServiceReplicaListeners()
  returns:
    description: <p>List of ServiceReplicaListeners </p>
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener?alt=microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener&text=ServiceReplicaListener" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Override this method to supply the communication listeners for the service replica. The endpoints returned by the communication listener's are stored as a JSON string of ListenerName, Endpoint string pairs like {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: protected List<ServiceReplicaListener> createServiceReplicaListeners()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.createServiceReplicaListeners()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.getAddresses()
  name: getAddresses()
  nameWithType: StatefulServiceBase.getAddresses()
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Map"></xref> containing list of addresses as (ListenerName, Endpoint) key-value pair. </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets list of all the addresses for this service replica as (ListenerName, Endpoint) key-value pair.</p>

    <p></p>
  syntax: protected Map<String, String> getAddresses()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.getAddresses()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.getPartition()
  name: getPartition()
  nameWithType: StatefulServiceBase.getPartition()
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServicePartition"></xref> that represents the partition to which this service replica belongs. </p>
    type: <xref href="system.fabric.StatefulServicePartition?alt=system.fabric.StatefulServicePartition&text=StatefulServicePartition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Service partition to which current service replica belongs.</p>

    <p></p>
  syntax: protected StatefulServicePartition getPartition()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.getPartition()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.getServiceContext()
  name: getServiceContext()
  nameWithType: StatefulServiceBase.getServiceContext()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceContext"></xref> that describes the service context. </p>
    type: <xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the service context that this stateful service is operating under. It provides information like ReplicaId, PartitionId, ServiceName etc.</p>

    <p></p>
  syntax: public StatefulServiceContext getServiceContext()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.getServiceContext()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.getStateProviderReplica()
  name: getStateProviderReplica()
  nameWithType: StatefulServiceBase.getStateProviderReplica()
  returns:
    type: <xref href="microsoft.servicefabric.data.StateProviderReplica?alt=microsoft.servicefabric.data.StateProviderReplica&text=StateProviderReplica" data-throw-if-not-resolved="False"/>
  syntax: protected StateProviderReplica getStateProviderReplica()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.getStateProviderReplica()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.onAbort()
  name: onAbort()
  nameWithType: StatefulServiceBase.onAbort()
  summary: <p>Notification that the service is being aborted. RunAsync MAY be running concurrently with the execution of this method, as cancellation is not awaited on the abort path. </p>
  syntax: protected void onAbort()
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.onAbort()
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  name: onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  parameters:
  - description: <p>for this service replica. </p>
    name: newRole
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step before completing <xref uid="system.fabric.StatefulServiceReplica.changeRoleAsync(ReplicaRole,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceReplica#changeRoleAsync(ReplicaRole, CancellationToken)"></xref> . Override this method to be notified that ChangeRole has completed for this replica's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.onChangeRoleAsync(ReplicaRole,CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.onCloseAsync(CancellationToken cancellationToken)
  name: onCloseAsync(CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.onCloseAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step of closing the service. Override this method to be notified that Close has completed for this replica's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onCloseAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.onCloseAsync(CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.onDataLossAsync(RestoreContext context, CancellationToken cancellationToken)
  name: onDataLossAsync(RestoreContext context, CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.onDataLossAsync(RestoreContext context, CancellationToken cancellationToken)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RestoreContext"></xref> to be used to restore the service. </p>
    name: context
    type: <xref href="microsoft.servicefabric.data.RestoreContext?alt=microsoft.servicefabric.data.RestoreContext&text=RestoreContext" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A Task that represents the asynchronous restore operation. True indicates that the state has been restored. False indicates that the replica's state has not been modified. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called during suspected data loss. You can override this method to restore the service in case of data loss.</p>

    <p></p>
  syntax: protected CompletableFuture<Boolean> onDataLossAsync(RestoreContext context, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.onDataLossAsync(RestoreContext,CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  name: onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  parameters:
  - description: <p>for this service replica. </p>
    name: openMode
    type: <xref href="system.fabric.ReplicaOpenMode?alt=system.fabric.ReplicaOpenMode&text=ReplicaOpenMode" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step of opening the service. Override this method to be notified that Open has completed for this replica's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.onOpenAsync(ReplicaOpenMode,CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.runAsync(CancellationToken cancellationToken)
  name: runAsync(CancellationToken cancellationToken)
  nameWithType: StatefulServiceBase.runAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Services that want to implement a processing loop which runs when it is primary and has write status, just override this method with their logic.</p>

    <p></p>
  syntax: protected CompletableFuture<?> runAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.runAsync(CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.setAddresses(Map<String, String> addresses)
  name: setAddresses(Map<String, String> addresses)
  nameWithType: StatefulServiceBase.setAddresses(Map<String, String> addresses)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Map"></xref> containing list of addresses as (ListenerName, Endpoint) key-value pair. </p>
    name: addresses
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets list of all the addresses for this service replica as (ListenerName, Endpoint) key-value pair.</p>

    <p></p>
  syntax: protected void setAddresses(Map<String, String> addresses)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.setAddresses(Map<String, String>)
- fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase.setPartition(StatefulServicePartition partition)
  name: setPartition(StatefulServicePartition partition)
  nameWithType: StatefulServiceBase.setPartition(StatefulServicePartition partition)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServicePartition"></xref> that represents the partition to which this service replica belongs. </p>
    name: partition
    type: <xref href="system.fabric.StatefulServicePartition?alt=system.fabric.StatefulServicePartition&text=StatefulServicePartition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Service partition to which current service replica belongs.</p>

    <p></p>
  syntax: protected void setPartition(StatefulServicePartition partition)
  uid: microsoft.servicefabric.services.runtime.StatefulServiceBase.setPartition(StatefulServicePartition)
nameWithType: StatefulServiceBase
syntax: public class StatefulServiceBase
type: class
uid: microsoft.servicefabric.services.runtime.StatefulServiceBase
fullName: microsoft.servicefabric.services.runtime.StatefulServiceBase
name: StatefulServiceBase
package: microsoft.servicefabric.services.runtime
summary: <p>Represents base class for Microsoft Service Fabric based stateful reliable service. </p>
metadata: {}
