### YamlMime:ManagedReference
items:
- uid: system.fabric._state_replicator
  id: _state_replicator
  parent: system.fabric
  children:
  - system.fabric._state_replicator.getCopyStream()
  - system.fabric._state_replicator.getReplicationStream()
  - system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)
  - system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
  href: system.fabric._state_replicator.yml
  langs:
  - java
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
    startLine: 7
  package: system.fabric
  summary: "<p>Exposes replication related functions of the <xref uid=\"system.fabric._fabric_replicator\" data-throw-if-not-resolved=\"false\">FabricReplicator</xref> class that are used by <xref uid=\"system.fabric._state_provider\" data-throw-if-not-resolved=\"false\">StateProvider</xref> to replicate state to ensure high availability. </p>"
  syntax:
    content: public interface StateReplicator
- uid: system.fabric._state_replicator.getCopyStream()
  id: getCopyStream()
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  langs:
  - java
  name: getCopyStream()
  nameWithType: StateReplicator.getCopyStream()
  fullName: system.fabric.StateReplicator.getCopyStream()
  overload: system.fabric._state_replicator.getCopyStream*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
    startLine: 27
  package: system.fabric
  summary: "<p>Gets copy stream </p>"
  syntax:
    content: public OperationStream getCopyStream()
    return:
      type: system.fabric._operation_stream
      description: <p>The returned CopyStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. The <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects are obtained from the CopyState <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">OperationDataStream</xref> that the Primary replica returns from <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref>. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. In parallel, the replica responds to the corresponding <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">StateProvider#getCopyContext()</xref> and <xref uid="system.fabric._operation_data_stream.getNextAsync(CancellationToken)" data-throw-if-not-resolved="false">OperationDataStream#getNextAsync(CancellationToken)</xref>calls. The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null. </p>
- uid: system.fabric._state_replicator.getReplicationStream()
  id: getReplicationStream()
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  langs:
  - java
  name: getReplicationStream()
  nameWithType: StateReplicator.getReplicationStream()
  fullName: system.fabric.StateReplicator.getReplicationStream()
  overload: system.fabric._state_replicator.getReplicationStream*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
    startLine: 34
  package: system.fabric
  summary: "<p>Gets replication stream. </p>"
  syntax:
    content: public OperationStream getReplicationStream()
    return:
      type: system.fabric._operation_stream
      description: <p>The ReplicationStream implements <xref uid="system.fabric._operation_stream" data-throw-if-not-resolved="false">OperationStream</xref>. The ReplicationStream contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects that implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref>. The objects are provided by the Primary replica via <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">StateReplicator#replicateAsync(OperationData, SequenceNumber, CancellationToken)</xref>. Generally a Secondary replica should send <xref uid="system.fabric._operation_stream.getOperationAsync(CancellationToken)" data-throw-if-not-resolved="false">OperationStream#getOperationAsync(CancellationToken)</xref>. Although Service Fabric does not require services to do so, generally services should transfer all <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">OperationData</xref> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">Operation</xref> method is null. </p>
- uid: system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)
  id: replicateAsync(OperationData,SequenceNumber,CancellationToken)
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  langs:
  - java
  name: replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  nameWithType: StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  fullName: system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  overload: system.fabric._state_replicator.replicateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
    startLine: 16
  package: system.fabric
  summary: "<p>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied. </p>"
  syntax: &o1
    content: public CompletableFuture<SequenceNumber> replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
    parameters:
    - id: operationData
      type: system.fabric._operation_data
      description: <p>Represents the state change that the Primary replica wants to replicate. </p>
    - id: sequenceNumber
      type: system.fabric._sequence_number
      description: <p>Long, the LSN of the operation. Note that this is the same value which is returned by the task. Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes. </p>
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>A write quorum of replicas that have been lost. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric._sequence_numbera08ddfce
      description: <p>Returns completable future of type long, the LSN of the operation. </p>
- uid: system.fabric._state_replicator.updateReplicatorSettings(ReplicatorSettings)
  id: updateReplicatorSettings(ReplicatorSettings)
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  langs:
  - java
  name: updateReplicatorSettings(ReplicatorSettings settings)
  nameWithType: StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
  fullName: system.fabric.StateReplicator.updateReplicatorSettings(ReplicatorSettings settings)
  overload: system.fabric._state_replicator.updateReplicatorSettings*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/StateReplicator.java
    startLine: 40
  package: system.fabric
  summary: "<p>Enables modification of replicator settings during runtime. The only setting which can be modified is the security credentials. </p>"
  syntax:
    content: public void updateReplicatorSettings(ReplicatorSettings settings)
    parameters:
    - id: settings
      type: system.fabric._replicator_settings
      description: <p>The new <xref uid="system.fabric._replicator_settings" data-throw-if-not-resolved="false">ReplicatorSettings</xref> with updated credentials. </p>
references:
- uid: 9cdf14d0system.fabric._sequence_numbera08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric._sequence_number
    name: SequenceNumber
    fullName: system.fabric.SequenceNumber
    href: system.fabric._sequence_number.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._state_replicator.replicateAsync*
  name: replicateAsync
  nameWithType: StateReplicator.replicateAsync
  fullName: system.fabric.StateReplicator.replicateAsync
  package: system.fabric
- uid: system.fabric._state_replicator.getCopyStream*
  name: getCopyStream
  nameWithType: StateReplicator.getCopyStream
  fullName: system.fabric.StateReplicator.getCopyStream
  package: system.fabric
- uid: system.fabric._state_replicator.getReplicationStream*
  name: getReplicationStream
  nameWithType: StateReplicator.getReplicationStream
  fullName: system.fabric.StateReplicator.getReplicationStream
  package: system.fabric
- uid: system.fabric._state_replicator.updateReplicatorSettings*
  name: updateReplicatorSettings
  nameWithType: StateReplicator.updateReplicatorSettings
  fullName: system.fabric.StateReplicator.updateReplicatorSettings
  package: system.fabric
- uid: system.fabric._state_replicator2
  parent: system.fabric
  href: system.fabric._state_replicator2.yml
  name: StateReplicator2
  nameWithType: StateReplicator2
  fullName: system.fabric.StateReplicator2
  type: Interface
  summary: <p>Exposes replication-related functions of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class that are used by <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> to replicate state to ensure high availability. </p>
  syntax:
    content: public interface StateReplicator2
- uid: system.fabric._sequence_number
  parent: system.fabric
  href: system.fabric._sequence_number.yml
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: system.fabric.SequenceNumber
  type: Class
  summary: <p>Long, represents the last sequence number (LSN) of the operation. </p>
  syntax:
    content: public class SequenceNumber
- uid: system.fabric._operation_data
  parent: system.fabric
  href: system.fabric._operation_data.yml
  name: OperationData
  nameWithType: OperationData
  fullName: system.fabric.OperationData
  type: Class
  syntax:
    content: public class OperationData
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: system.fabric._operation_stream
  parent: system.fabric
  href: system.fabric._operation_stream.yml
  name: OperationStream
  nameWithType: OperationStream
  fullName: system.fabric.OperationStream
  type: Interface
  summary: >-
    <p>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica. </p>

    <p>

      <b> Remarks:</b> The streams returned from <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> and <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref> are objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationStream</xref>. </p>
  syntax:
    content: public interface OperationStream
- uid: system.fabric._operation
  parent: system.fabric
  href: system.fabric._operation.yml
  name: Operation
  nameWithType: Operation
  fullName: system.fabric.Operation
  type: Interface
  summary: >-
    <p>

      <b>Remarks:</b>

      <xref uid="" data-throw-if-not-resolved="false">system.fabric.Operation</xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid="system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> and the sequence number and other identifying information. </p>
  syntax:
    content: public interface Operation
- uid: system.fabric._operation_data_stream
  parent: system.fabric
  href: system.fabric._operation_data_stream.yml
  name: OperationDataStream
  nameWithType: OperationDataStream
  fullName: system.fabric.OperationDataStream
  type: Interface
  summary: <p>An <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> encapsulates a stream of <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are exchanged between Primary replica and Secondary replica. Objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> are used during the copy process. Both the copy context <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> method that is sent from the Secondary replica to the Primary replica and the copy state <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> method implement the <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> interface. </p>
  syntax:
    content: public interface OperationDataStream
- uid: system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  fullName: system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  type: Method
  summary: >-
    <p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>

    <p>

      <b>Remarks:</b>Just as <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> enables the Secondary replica to send context to the Primary replica via an <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>, <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> enables the Primary replica to respond with an <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. The stream contains objects that are delivered to the Secondary replica via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> method of the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class. The objects implement <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">system.fabric.Operation</xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> that contains <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref>. <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> represents the data/state that the Secondary replica </p>
  syntax:
    content: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
    parameters:
    - id: upToSequenceNumber
      type: system.fabric._sequence_number
      description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric._state_replicator.getCopyStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getCopyStream()</xref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric._state_replicator.getReplicationStream()" data-throw-if-not-resolved="false">system.fabric.StateReplicator#getReplicationStream()</xref> method. </p>
    - id: copyContext
      type: system.fabric._operation_data_stream
      description: <p>An <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref> that contains the <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. </p>
- uid: system.fabric._state_provider.getCopyContext()
  parent: system.fabric._state_provider
  href: system.fabric._state_provider.yml
  name: getCopyContext()
  nameWithType: StateProvider.getCopyContext()
  fullName: system.fabric.StateProvider.getCopyContext()
  type: Method
  summary: >-
    <p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>

    <p>

      <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> . <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref uid="system.fabric._state_provider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)</xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref uid="system.fabric._state_provider.getCopyContext()" data-throw-if-not-resolved="false">system.fabric.StateProvider#getCopyContext()</xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>
  syntax:
    content: public OperationDataStream getCopyContext()
    return:
      type: system.fabric._operation_data_stream
      description: <p>Returns <xref uid="system.fabric._operation_data_stream" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. </p>
- uid: system.fabric._operation_data_stream.getNextAsync(CancellationToken)
  parent: system.fabric._operation_data_stream
  href: system.fabric._operation_data_stream.yml
  name: getNextAsync(CancellationToken cancellationToken)
  nameWithType: OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  fullName: system.fabric.OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  type: Method
  summary: <p>Gets the next <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> object from the <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationDataStream</xref>. </p>
  syntax:
    content: public CompletableFuture<OperationData> getNextAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric._operation_dataa08ddfce
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> of type <xref uid="system.fabric._operation_data" data-throw-if-not-resolved="false">system.fabric.OperationData</xref> The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false">FabricException</xref> for fabric related failures. </p>
- uid: system.fabric._state_replicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)
  parent: system.fabric._state_replicator
  href: system.fabric._state_replicator.yml
  name: replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  nameWithType: StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  fullName: system.fabric.StateReplicator.replicateAsync(OperationData operationData, SequenceNumber sequenceNumber, CancellationToken cancellationToken)
  type: Method
  summary: <p>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied. </p>
  syntax: *o1
- uid: system.fabric._operation_stream.getOperationAsync(CancellationToken)
  parent: system.fabric._operation_stream
  href: system.fabric._operation_stream.yml
  name: getOperationAsync(CancellationToken cancellationToken)
  nameWithType: OperationStream.getOperationAsync(CancellationToken cancellationToken)
  fullName: system.fabric.OperationStream.getOperationAsync(CancellationToken cancellationToken)
  type: Method
  summary: <p>Gets the next object that implements <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">system.fabric.Operation</xref> from the underlying <xref uid="" data-throw-if-not-resolved="false">system.fabric.OperationStream</xref>. </p>
  syntax:
    content: public CompletableFuture<Operation> getOperationAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: <p>The <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric._operationa08ddfce
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> of type <xref uid="system.fabric._operation" data-throw-if-not-resolved="false">system.fabric.Operation</xref>. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false">FabricException</xref> for fabric related failures. </p>
- uid: system.fabric._replicator_settings
  parent: system.fabric
  href: system.fabric._replicator_settings.yml
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: system.fabric.ReplicatorSettings
  type: Class
  summary: <p>Allows a stateful replica to configure the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> when creating it <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)</xref></p>
  syntax:
    content: public class ReplicatorSettings
- uid: system.fabric._fabric_replicator
  parent: system.fabric
  href: system.fabric._fabric_replicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: >-
    <p>Replicates state for high availability and reliability. </p>

    <p>

      <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref>, <xref uid="system.fabric._replicator" data-throw-if-not-resolved="false">system.fabric.Replicator</xref>, and <xref uid="system.fabric._primary_replicator" data-throw-if-not-resolved="false">system.fabric.PrimaryReplicator</xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric._state_provider" data-throw-if-not-resolved="false">system.fabric.StateProvider</xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> class is obtained via the <xref uid="system.fabric._stateful_service_partition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false">system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)</xref> method, which can be cast to <xref uid="system.fabric._state_replicator" data-throw-if-not-resolved="false">system.fabric.StateReplicator</xref> for use. </p>
  syntax:
    content: public class FabricReplicator implements Replicator
- uid: system.fabric._state_provider
  parent: system.fabric
  href: system.fabric._state_provider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: <p>Defines the behavior that a service must implement to interact with the <xref uid="system.fabric._fabric_replicator" data-throw-if-not-resolved="false">FabricReplicator</xref>. </p>
  syntax:
    content: public interface StateProvider
