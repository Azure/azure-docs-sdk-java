### YamlMime:JavaType
uid: "com.azure.resourcemanager.newrelicobservability.models.Organizations"
fullName: "com.azure.resourcemanager.newrelicobservability.models.Organizations"
name: "Organizations"
nameWithType: "Organizations"
summary: "Resource collection API of Organizations."
syntax: "public interface **Organizations**"
methods:
- uid: "com.azure.resourcemanager.newrelicobservability.models.Organizations.list(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.newrelicobservability.models.Organizations.list(String userEmail, String location)"
  name: "list(String userEmail, String location)"
  nameWithType: "Organizations.list(String userEmail, String location)"
  summary: "List all the existing organizations."
  modifiers:
  - "abstract"
  parameters:
  - description: "User Email."
    name: "userEmail"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Location for NewRelic."
    name: "location"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<OrganizationResource> list(String userEmail, String location)"
  desc: "List all the existing organizations."
  returns:
    description: "response of get all organizations Operation as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.newrelicobservability.models.OrganizationResource?alt=com.azure.resourcemanager.newrelicobservability.models.OrganizationResource&text=OrganizationResource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.newrelicobservability.models.Organizations.list(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.newrelicobservability.models.Organizations.list(String userEmail, String location, Context context)"
  name: "list(String userEmail, String location, Context context)"
  nameWithType: "Organizations.list(String userEmail, String location, Context context)"
  summary: "List all the existing organizations."
  modifiers:
  - "abstract"
  parameters:
  - description: "User Email."
    name: "userEmail"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Location for NewRelic."
    name: "location"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<OrganizationResource> list(String userEmail, String location, Context context)"
  desc: "List all the existing organizations."
  returns:
    description: "response of get all organizations Operation as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.newrelicobservability.models.OrganizationResource?alt=com.azure.resourcemanager.newrelicobservability.models.OrganizationResource&text=OrganizationResource\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "Resource collection API of Organizations."
metadata: {}
package: "com.azure.resourcemanager.newrelicobservability.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-newrelicobservability:1.1.0
