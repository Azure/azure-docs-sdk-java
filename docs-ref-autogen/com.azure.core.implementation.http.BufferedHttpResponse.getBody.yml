### YamlMime:JavaMember
uid: "com.azure.core.implementation.http.BufferedHttpResponse.getBody*"
fullName: "com.azure.core.implementation.http.BufferedHttpResponse.getBody"
name: "getBody"
nameWithType: "BufferedHttpResponse.getBody"
members:
- uid: "com.azure.core.implementation.http.BufferedHttpResponse.getBody()"
  fullName: "com.azure.core.implementation.http.BufferedHttpResponse.getBody()"
  name: "getBody()"
  nameWithType: "BufferedHttpResponse.getBody()"
  summary: "Get the publisher emitting response content chunks.\n\nReturns a stream of the response's body content. Emissions may occur on the Netty EventLoop threads which are shared across channels and should not be blocked. Blocking should be avoided as much as possible/practical in reactive programming but if you do use methods like `blockingSubscribe` or `blockingGet` on the stream then be sure to use `subscribeOn` and `observeOn` before the blocking call. For example:\n\n```java\nresponse.body()\n     .map(bb -> bb.limit())\n     .reduce((x,y) -> x + y)\n     .subscribeOn(Schedulers.io())\n     .observeOn(Schedulers.io())\n     ;\n```\n\nThe above code is a simplistic example and would probably run fine without the \\`subscribeOn\\` and \\`observeOn\\` but should be considered a template for more complex situations."
  overridden: "com.azure.core.http.HttpResponse.getBody()"
  syntax: "public Flux<ByteBuffer> getBody()"
  returns:
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.implementation.http"
artifact: com.azure:azure-core:1.15.0
