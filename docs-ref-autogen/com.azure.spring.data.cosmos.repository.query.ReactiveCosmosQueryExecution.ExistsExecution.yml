### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  id: ExistsExecution
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution(com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  langs:
  - java
  name: ReactiveCosmosQueryExecution.ExistsExecution
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  type: Class
  package: com.azure.spring.data.cosmos.repository.query
  summary: Exist operation implementation to execute a exist query
  syntax:
    content: public static final class ReactiveCosmosQueryExecution.ExistsExecution implements ReactiveCosmosQueryExecution
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution(com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  id: ExistsExecution(com.azure.spring.data.cosmos.core.ReactiveCosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  langs:
  - java
  name: ExistsExecution(ReactiveCosmosOperations operations)
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution(ReactiveCosmosOperations operations)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution(ReactiveCosmosOperations operations)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: public ExistsExecution(ReactiveCosmosOperations operations)
    parameters:
    - id: operations
      type: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  id: execute(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution
  langs:
  - java
  name: execute(CosmosQuery query, Class<?> type, String container)
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution.execute(CosmosQuery query, Class<?> type, String container)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute(CosmosQuery query, Class<?> type, String container)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  summary: Declare an execute function for different operations to call
  syntax:
    content: public Object execute(CosmosQuery query, Class<?> type, String container)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
    - id: type
      type: java.lang.Class<?>
    - id: container
      type: java.lang.String
    return:
      type: java.lang.Object
references:
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  name: ReactiveCosmosOperations
  nameWithType: ReactiveCosmosOperations
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution*
  name: ExistsExecution
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.ExistsExecution
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute*
  name: execute
  nameWithType: ReactiveCosmosQueryExecution.ExistsExecution.execute
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution.ExistsExecution.execute
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
  name: ReactiveCosmosQueryExecution
  nameWithType: ReactiveCosmosQueryExecution
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryExecution
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
