### YamlMime:ManagedReference
items:
- uid: system.fabric._transaction
  id: _transaction
  parent: system.fabric
  children:
  - system.fabric._transaction.close()
  - system.fabric._transaction.commitAsync()
  - system.fabric._transaction.commitAsync(Duration,CancellationToken)
  - system.fabric._transaction.rollback()
  - system.fabric._transaction.throwIfDisposed()
  href: system.fabric._transaction.yml
  langs:
  - java
  name: Transaction
  nameWithType: Transaction
  fullName: system.fabric.Transaction
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 12
  package: system.fabric
  syntax:
    content: public class Transaction extends TransactionBase
  inheritance:
  - java.lang.Object
  - AutoCloseable
  - system.fabric._transaction_base
  inheritedMembers:
  - system.fabric._transaction_base.getId()
  - system.fabric._transaction_base.getTransactionBase()
  - system.fabric._transaction_base.getTransactionIsolationLevel()
- uid: system.fabric._transaction.close()
  id: close()
  parent: system.fabric._transaction
  href: system.fabric._transaction.yml
  langs:
  - java
  name: close()
  nameWithType: Transaction.close()
  fullName: void system.fabric.Transaction.close()
  overload: system.fabric._transaction.close*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 76
  package: system.fabric
  syntax:
    content: public void close()
- uid: system.fabric._transaction.commitAsync()
  id: commitAsync()
  parent: system.fabric._transaction
  href: system.fabric._transaction.yml
  langs:
  - java
  name: commitAsync()
  nameWithType: Transaction.commitAsync()
  fullName: CompletableFuture<Long> system.fabric.Transaction.commitAsync()
  overload: system.fabric._transaction.commitAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 30
  package: system.fabric
  syntax:
    content: public CompletableFuture<Long> commitAsync()
    return:
      type: 30822cb1
- uid: system.fabric._transaction.commitAsync(Duration,CancellationToken)
  id: commitAsync(Duration,CancellationToken)
  parent: system.fabric._transaction
  href: system.fabric._transaction.yml
  langs:
  - java
  name: commitAsync(Duration duration, CancellationToken cancellationToken)
  nameWithType: Transaction.commitAsync(Duration duration, CancellationToken cancellationToken)
  fullName: CompletableFuture<Long> system.fabric.Transaction.commitAsync(Duration duration, CancellationToken cancellationToken)
  overload: system.fabric._transaction.commitAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 34
  package: system.fabric
  syntax:
    content: public CompletableFuture<Long> commitAsync(Duration duration, CancellationToken cancellationToken)
    parameters:
    - id: duration
      type: e02a2de0
    - id: cancellationToken
      type: system.fabric._cancellation_token
    return:
      type: 30822cb1
- uid: system.fabric._transaction.rollback()
  id: rollback()
  parent: system.fabric._transaction
  href: system.fabric._transaction.yml
  langs:
  - java
  name: rollback()
  nameWithType: Transaction.rollback()
  fullName: void system.fabric.Transaction.rollback()
  overload: system.fabric._transaction.rollback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 49
  package: system.fabric
  syntax:
    content: public void rollback()
- uid: system.fabric._transaction.throwIfDisposed()
  id: throwIfDisposed()
  parent: system.fabric._transaction
  href: system.fabric._transaction.yml
  langs:
  - java
  name: throwIfDisposed()
  nameWithType: Transaction.throwIfDisposed()
  fullName: void system.fabric.Transaction.throwIfDisposed()
  overload: system.fabric._transaction.throwIfDisposed*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Transaction.java
    startLine: 69
  package: system.fabric
  syntax:
    content: protected void throwIfDisposed()
references:
- uid: 30822cb1
  spec.java:
  - name: CompletableFuture<Long>
    fullName: CompletableFuture<Long>
- uid: system.fabric._transaction.commitAsync*
  name: commitAsync
  nameWithType: Transaction.commitAsync
  fullName: CompletableFuture<Long> system.fabric.Transaction.commitAsync
  package: system.fabric
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: system.fabric._transaction.rollback*
  name: rollback
  nameWithType: Transaction.rollback
  fullName: void system.fabric.Transaction.rollback
  package: system.fabric
- uid: system.fabric._transaction.close*
  name: close
  nameWithType: Transaction.close
  fullName: void system.fabric.Transaction.close
  package: system.fabric
- uid: system.fabric._transaction.throwIfDisposed*
  name: throwIfDisposed
  nameWithType: Transaction.throwIfDisposed
  fullName: void system.fabric.Transaction.throwIfDisposed
  package: system.fabric
- uid: system.fabric._transaction_base.getId()
  parent: system.fabric._transaction_base
  href: system.fabric._transaction_base.yml
  name: getId()
  nameWithType: TransactionBase.getId()
  fullName: UUID system.fabric.TransactionBase.getId()
  type: Method
  syntax:
    content: public UUID getId()
    return:
      type: add9545a
- uid: system.fabric._transaction_base.getTransactionBase()
  parent: system.fabric._transaction_base
  href: system.fabric._transaction_base.yml
  name: getTransactionBase()
  nameWithType: TransactionBase.getTransactionBase()
  fullName: long system.fabric.TransactionBase.getTransactionBase()
  type: Method
  syntax:
    content: public long getTransactionBase()
    return:
      type: 0364520f
- uid: system.fabric._transaction_base.getTransactionIsolationLevel()
  parent: system.fabric._transaction_base
  href: system.fabric._transaction_base.yml
  name: getTransactionIsolationLevel()
  nameWithType: TransactionBase.getTransactionIsolationLevel()
  fullName: TransactionIsolationLevel system.fabric.TransactionBase.getTransactionIsolationLevel()
  type: Method
  syntax:
    content: public TransactionIsolationLevel getTransactionIsolationLevel()
    return:
      type: system.fabric._transaction_isolation_level
- uid: system.fabric._transaction_base
  parent: system.fabric
  href: system.fabric._transaction_base.yml
  name: TransactionBase
  nameWithType: TransactionBase
  fullName: system.fabric.TransactionBase
  type: Class
  syntax:
    content: public class TransactionBase
- uid: system.fabric.interop._native_async_callback
  parent: system.fabric.interop
  href: system.fabric.interop._native_async_callback.yml
  name: NativeAsyncCallback
  nameWithType: NativeAsyncCallback
  fullName: system.fabric.interop.NativeAsyncCallback
  type: Interface
  syntax:
    content: public interface NativeAsyncCallback
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
