### YamlMime:JavaMember
uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse*"
fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse"
name: "getReceiptWithResponse"
nameWithType: "ConfidentialLedgerAsyncClient.getReceiptWithResponse"
members:
- uid: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.security.confidentialledger.ConfidentialLedgerAsyncClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  name: "getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  nameWithType: "ConfidentialLedgerAsyncClient.getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  summary: "Gets a receipt certifying ledger contents at a particular transaction id."
  parameters:
  - description: "Identifies a write transaction."
    name: "transactionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getReceiptWithResponse(String transactionId, RequestOptions requestOptions)"
  desc: "Gets a receipt certifying ledger contents at a particular transaction id.\n\n**Response Body Schema**\n\n```java\n{\n     receipt (Optional): {\n         cert: String (Optional)\n         leaf: String (Optional)\n         leafComponents (Optional): {\n             claimsDigest: String (Optional)\n             commitEvidence: String (Optional)\n             writeSetDigest: String (Optional)\n         }\n         nodeId: String (Required)\n         proof (Required): [\n              (Required){\n                 left: String (Optional)\n                 right: String (Optional)\n             }\n         ]\n         root: String (Optional)\n         serviceEndorsements (Optional): [\n             String (Optional)\n         ]\n         signature: String (Required)\n     }\n     state: String(Loading/Ready) (Required)\n     transactionId: String (Required)\n }\n```"
  returns:
    description: "a receipt certifying ledger contents at a particular transaction id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.confidentialledger"
artifact: com.azure:azure-security-confidentialledger:1.0.0
