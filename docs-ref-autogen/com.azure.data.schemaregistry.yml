### YamlMime:JavaPackage
uid: "com.azure.data.schemaregistry"
fullName: "com.azure.data.schemaregistry"
name: "com.azure.data.schemaregistry"
summary: "<p><a href=\"https://learn.microsoft.com/azure/event-hubs/schema-registry-overview\">Azure Schema Registry</a> is a\n service in Microsoft Azure that enables users to manage the schemas for their applications and data."
classes:
- "com.azure.data.schemaregistry.SchemaRegistryAsyncClient"
- "com.azure.data.schemaregistry.SchemaRegistryClient"
- "com.azure.data.schemaregistry.SchemaRegistryClientBuilder"
enums:
- "com.azure.data.schemaregistry.SchemaRegistryVersion"
desc: "<p><a href=\"https://learn.microsoft.com/azure/event-hubs/schema-registry-overview\">Azure Schema Registry</a> is a\n service in Microsoft Azure that enables users to manage the schemas for their applications and data. A schema is a\n formal definition of the structure of data in a particular format, such as Avro or JSON. With Azure Schema Registry,\n users can store, version, and manage these schemas in a central location, making it easier to ensure consistency and\n compatibility across different applications and systems.</p>\n\n <p>In addition, Azure Schema Registry can integrate with other Azure services, such as Azure Event Hubs and\n Azure Stream Analytics, to provide a complete data processing and analytics solution. By using Azure Schema\n Registry, users can simplify the management of their data schemas, reduce errors and inconsistencies, and\n accelerate the development of data-driven applications.</p>\n\n <p>The Azure Schema Registry client library allows Java developers to interact with Azure Schema Registry. It\n provides a set of APIs that enable Java developers to perform operations such as registering, updating, and\n retrieving schemas from the Azure Schema Registry.</p>\n\n <h2>Key Concepts</h2>\n\n <ul>\n     <li><strong>Schema:</strong>  Text describing the how to deserialize and serialize an object.</li>\n     <li><strong>Schema Registry:</strong>  Centralized location for event producers and consumers to fetch schemas\n     used to serialize and deserialized structured data.</li>\n </ul>\n\n <h2>Getting Started</h2>\n\n <p>Service clients are the point of interaction for developers to use Azure Schema Registry.\n <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryClient\"></xref> is the synchronous service client and\n <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryAsyncClient\"></xref> is the asynchronous service client.  The examples\n shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate\n for most scenarios, including local development and production environments. Additionally, we recommend using\n <a href=\"https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\">managed identity</a>\n for authentication in production environments.\n You can find more information on different ways of authenticating and their corresponding credential types in the\n <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme\">Azure Identity documentation\"</a>.\n </p>\n\n <p><strong>Sample: Construct a service client</strong></p>\n\n <p>The following code sample demonstrates the creation of the synchronous client\n <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryClient\"></xref>.  The <code>fullyQualifiedNamespace</code> is the Event Hubs\n Namespace's host name.  It is listed under the \"Essentials\" panel after navigating to the Event Hubs Namespace via\n Azure Portal.  The credential used is <code>DefaultAzureCredential</code> because it combines commonly used credentials\n in deployment and development and chooses the credential to used based on its running environment.</p>\n\n <!-- src_embed com.azure.data.schemaregistry.schemaregistryclient.construct -->\n <pre>\n DefaultAzureCredential azureCredential = new DefaultAzureCredentialBuilder&#40;&#41;\n     .build&#40;&#41;;\n SchemaRegistryClient client = new SchemaRegistryClientBuilder&#40;&#41;\n     .fullyQualifiedNamespace&#40;&quot;https:&#47;&#47;&lt;your-schema-registry-endpoint&gt;.servicebus.windows.net&quot;&#41;\n     .credential&#40;azureCredential&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.data.schemaregistry.schemaregistryclient.construct -->\n\n <h2>Using the Client</h2>\n\n <p>The samples below use the synchronous client, <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryClient\"></xref>.\n More samples can be found in the class's Javadoc.  In addition, samples using the asynchronous\n <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryAsyncClient\"></xref> can be found in the class's JavaDocs.</p>\n\n <p><strong>Sample: Register a schema</strong></p>\n\n <p>The following code sample demonstrates registering an Avro schema.  The\n <xref uid=\"com.azure.data.schemaregistry.models.SchemaProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.models.SchemaProperties\"></xref> returned contains the schema's id.  This id uniquely\n identifies the schema and can be used to quickly associate payloads with that schema.</p>\n\n <!-- src_embed com.azure.data.schemaregistry.schemaregistryclient.registerschema-avro -->\n <pre>\n String schema = &quot;&#123;&#92;&quot;type&#92;&quot;:&#92;&quot;enum&#92;&quot;,&#92;&quot;name&#92;&quot;:&#92;&quot;TEST&#92;&quot;,&#92;&quot;symbols&#92;&quot;:[&#92;&quot;UNIT&#92;&quot;,&#92;&quot;INTEGRATION&#92;&quot;]&#125;&quot;;\n SchemaProperties properties = client.registerSchema&#40;&quot;&#123;schema-group&#125;&quot;, &quot;&#123;schema-name&#125;&quot;, schema,\n     SchemaFormat.AVRO&#41;;\n\n System.out.printf&#40;&quot;Schema id: %s, schema format: %s%n&quot;, properties.getId&#40;&#41;, properties.getFormat&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.data.schemaregistry.schemaregistryclient.registerschema-avro -->\n\n <p><strong>Sample: Getting the schema using a schema id</strong></p>\n\n <p>The following code sample demonstrates how to fetch a schema using its schema id.  The schema id can be found in\n <xref uid=\"com.azure.data.schemaregistry.models.SchemaProperties#getId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.models.SchemaProperties#getId()\"></xref> when a schema is registered or using\n <xref uid=\"com.azure.data.schemaregistry.SchemaRegistryClient#getSchemaProperties(java.lang.String, java.lang.String, java.lang.String, com.azure.data.schemaregistry.models.SchemaFormat)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.schemaregistry.SchemaRegistryClient#getSchemaProperties(java.lang.String, java.lang.String, java.lang.String, com.azure.data.schemaregistry.models.SchemaFormat)\"></xref>.\n </p>\n\n <!-- src_embed com.azure.data.schemaregistry.schemaregistryclient.getschema -->\n <pre>\n SchemaRegistrySchema schema = client.getSchema&#40;&quot;&#123;schema-id&#125;&quot;&#41;;\n\n System.out.printf&#40;&quot;Schema id: %s, schema format: %s%n&quot;, schema.getProperties&#40;&#41;.getId&#40;&#41;,\n     schema.getProperties&#40;&#41;.getFormat&#40;&#41;&#41;;\n System.out.println&#40;&quot;Schema contents: &quot; + schema.getDefinition&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.data.schemaregistry.schemaregistryclient.getschema -->"
metadata: {}
package: "com.azure.data.schemaregistry"
artifact: com.azure:azure-data-schemaregistry:1.3.10
