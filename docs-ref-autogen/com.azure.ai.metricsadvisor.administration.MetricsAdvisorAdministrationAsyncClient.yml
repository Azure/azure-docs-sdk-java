### YamlMime:JavaType
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient"
name: "MetricsAdvisorAdministrationAsyncClient"
nameWithType: "MetricsAdvisorAdministrationAsyncClient"
summary: "This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MetricsAdvisorAdministrationAsyncClient"
methods:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAlertConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  name: "createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  summary: "Create a configuration to trigger alert when anomalies are detected."
  parameters:
  - description: "The anomaly alerting configuration."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyAlertConfiguration> createAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  desc: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.createAlertConfig(\n     new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition(AnomalySeverity.HIGH, AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAlertConfigurationsOperator.AND)\n         .setHookIdsToAlert(Arrays.asList(hookId1, hookId2)))\n     .subscribe(anomalyAlertConfiguration -> {\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAlertConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  name: "createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  summary: "**Code sample**"
  parameters:
  - description: "The anomaly alerting configuration."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyAlertConfiguration>> createAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  desc: "**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.createAlertConfigWithResponse(\n     new AnomalyAlertConfiguration(\"My AnomalyAlert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityRangeCondition(new SeverityCondition(AnomalySeverity.HIGH, AnomalySeverity.HIGH)))))\n         .setCrossMetricsOperator(MetricAlertConfigurationsOperator.AND)\n         .setHookIdsToAlert(Arrays.asList(hookId1, hookId2)))\n     .subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"DataPoint Anomaly alert creation operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed(DataFeed dataFeed)"
  name: "createDataFeed(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataFeed(DataFeed dataFeed)"
  summary: "Create a new data feed."
  parameters:
  - description: "The data feed to be created."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataFeed> createDataFeed(DataFeed dataFeed)"
  desc: "Create a new data feed.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric(\"cost\"),\n             new DataFeedMetric(\"revenue\")\n         )).setDimensions(\n             Arrays.asList(\n                 new DataFeedDimension(\"city\"),\n                 new DataFeedDimension(\"category\")\n             ))\n     )\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n     .setDescription(\"data feed description\")\n     .setRollupSettings(new DataFeedRollupSettings()\n         .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n\n metricsAdvisorAdminAsyncClient.createDataFeed(dataFeed)\n     .subscribe(createdDataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created data feed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(DataFeed dataFeed)"
  name: "createDataFeedWithResponse(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(DataFeed dataFeed)"
  summary: "Create a new data feed with REST response."
  parameters:
  - description: "The data feed to be created."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataFeed>> createDataFeedWithResponse(DataFeed dataFeed)"
  desc: "Create a new data feed with REST response.\n\n**Code sample**\n\n```java\nDataFeed dataFeed = new DataFeed()\n     .setName(\"dataFeedName\")\n     .setSource(new MySqlDataFeedSource(\"conn-string\", \"query\"))\n     .setGranularity(new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY))\n     .setSchema(new DataFeedSchema(\n         Arrays.asList(\n             new DataFeedMetric(\"metric1\"),\n             new DataFeedMetric(\"metric2\")\n         )\n     ))\n     .setIngestionSettings(new DataFeedIngestionSettings(OffsetDateTime.parse(\"2020-01-01T00:00:00Z\")))\n     .setOptions(new DataFeedOptions()\n         .setDescription(\"data feed description\")\n         .setRollupSettings(new DataFeedRollupSettings()\n             .setRollupType(DataFeedRollupType.AUTO_ROLLUP)));\n\n metricsAdvisorAdminAsyncClient.createDataFeedWithResponse(dataFeed)\n     .subscribe(dataFeedResponse -> {\n         System.out.printf(\"Data feed create operation status: %s%n\", dataFeedResponse.getStatusCode());\n         DataFeed createdDataFeed = dataFeedResponse.getValue();\n         System.out.printf(\"Data feed Id: %s%n\", createdDataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", createdDataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", createdDataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", createdDataFeed.getCreator());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feed\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredential(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  name: "createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Create a data source credential entity."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSourceCredentialEntity> createDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Create a data source credential entity.\n\n**Code sample**\n\n```java\nDataSourceCredentialEntity datasourceCredential;\n final String name = \"sample_name\" + UUID.randomUUID();\n final String cId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n final String tId = \"67890ded-5e07-4e52-b225-4ae8f905afb5\";\n final String mockSecr = \"890hy69-5e07-4e52-b225-4ae8f905afb5\";\n\n datasourceCredential = new DataSourceServicePrincipalInKeyVault()\n     .setName(name)\n     .setKeyVaultForDataSourceSecrets(\"kv\", cId, mockSecr)\n     .setTenantId(tId)\n     .setSecretNameForDataSourceClientId(\"DSClientID_1\")\n     .setSecretNameForDataSourceClientSecret(\"DSClientSer_1\");\n\n metricsAdvisorAdminAsyncClient.createDataSourceCredential(datasourceCredential)\n     .subscribe(credentialEntity -> {\n         if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  name: "createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Create a data source credential entity with REST response."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSourceCredentialEntity>> createDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Create a data source credential entity with REST response.\n\n**Code sample**\n\n```java\nDataSourceCredentialEntity datasourceCredential;\n final String name = \"sample_name\" + UUID.randomUUID();\n final String cId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n final String tId = \"67890ded-5e07-4e52-b225-4ae8f905afb5\";\n final String mockSecr = \"890hy69-5e07-4e52-b225-4ae8f905afb5\";\n\n datasourceCredential = new DataSourceServicePrincipalInKeyVault()\n     .setName(name)\n     .setKeyVaultForDataSourceSecrets(\"kv\", cId, mockSecr)\n     .setTenantId(tId)\n     .setSecretNameForDataSourceClientId(\"DSClientID_1\")\n     .setSecretNameForDataSourceClientSecret(\"DSClientSer_1\");\n\n metricsAdvisorAdminAsyncClient.createDataSourceCredentialWithResponse(datasourceCredential)\n     .subscribe(credentialEntityWithResponse -> {\n         System.out.printf(\"Credential Entity creation operation status: %s%n\",\n             credentialEntityWithResponse.getStatusCode());\n         if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDetectionConfig(java.lang.String,com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  name: "createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Create a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The metric id to associate the configuration with."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyDetectionConfiguration> createDetectionConfig(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setConditionOperator(DetectionConditionOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition(\n         50,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(50, 50)))\n     .setHardThresholdCondition(new HardThresholdCondition(\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(5, 5))\n         .setLowerBound(0.0)\n         .setUpperBound(100.0))\n     .setChangeThresholdCondition(new ChangeThresholdCondition(\n         50,\n         30,\n         true,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(2, 2)));\n\n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n\n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricsAdvisorAdminAsyncClient\n     .createDetectionConfig(metricId, detectionConfig)\n     .subscribe(createdDetectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDetectionConfigWithResponse(java.lang.String,com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  name: "createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Create a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The metric id to associate the configuration with."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyDetectionConfiguration>> createDetectionConfigWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setConditionOperator(DetectionConditionOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition(\n         50,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(50, 50)))\n     .setHardThresholdCondition(new HardThresholdCondition(\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(5, 5))\n         .setLowerBound(0.0)\n         .setUpperBound(100.0))\n     .setChangeThresholdCondition(new ChangeThresholdCondition(\n         50,\n         30,\n         true,\n         AnomalyDetectorDirection.BOTH,\n         new SuppressCondition(2, 2)));\n\n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n\n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricsAdvisorAdminAsyncClient\n     .createDetectionConfigWithResponse(metricId, detectionConfig)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         AnomalyDetectionConfiguration createdDetectionConfig = response.getValue();\n         System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook(NotificationHook notificationHook)"
  name: "createHook(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createHook(NotificationHook notificationHook)"
  summary: "Creates a notification<wbr>Hook that receives anomaly incident alerts."
  parameters:
  - description: "The notificationHook."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<NotificationHook> createHook(NotificationHook notificationHook)"
  desc: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .setEmailsToAlert(new ArrayList<String>() {{\n             add(\"alertme@alertme.com\");\n         }})\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n\n metricsAdvisorAdminAsyncClient.createHook(emailNotificationHook)\n     .subscribe(hook -> {\n         EmailNotificationHook createdEmailHook = (EmailNotificationHook) hook;\n         System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n         System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n         System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n         System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n         System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n             createdEmailHook.getEmailsToAlert()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(NotificationHook notificationHook)"
  name: "createHookWithResponse(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(NotificationHook notificationHook)"
  summary: "Creates a notification<wbr>Hook that receives anomaly incident alerts."
  parameters:
  - description: "The notificationHook."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<NotificationHook>> createHookWithResponse(NotificationHook notificationHook)"
  desc: "Creates a notificationHook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nNotificationHook emailNotificationHook = new EmailNotificationHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .setEmailsToAlert(new ArrayList<String>() {{\n             add(\"alertme@alertme.com\");\n         }})\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n\n metricsAdvisorAdminAsyncClient.createHookWithResponse(emailNotificationHook)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         EmailNotificationHook createdEmailHook = (EmailNotificationHook) response.getValue();\n         System.out.printf(\"NotificationHook Id: %s%n\", createdEmailHook.getId());\n         System.out.printf(\"NotificationHook Name: %s%n\", createdEmailHook.getName());\n         System.out.printf(\"NotificationHook Description: %s%n\", createdEmailHook.getDescription());\n         System.out.printf(\"NotificationHook External Link: %s%n\", createdEmailHook.getExternalLink());\n         System.out.printf(\"NotificationHook Emails: %s%n\", String.join(\",\",\n             createdEmailHook.getEmailsToAlert()));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the created <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAlertConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAlertConfig(String alertConfigurationId)"
  name: "deleteAlertConfig(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteAlertConfig(String alertConfigurationId)"
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteAlertConfig(String alertConfigurationId)"
  desc: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n metricsAdvisorAdminAsyncClient.deleteAlertConfig(alertConfigId);\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAlertConfigWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAlertConfigWithResponse(String alertConfigurationId)"
  name: "deleteAlertConfigWithResponse(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteAlertConfigWithResponse(String alertConfigurationId)"
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteAlertConfigWithResponse(String alertConfigurationId)"
  desc: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.deleteAlertConfigWithResponse(alertConfigId)\n     .subscribe(response -> {\n         System.out.printf(\"DataPoint  Anomaly alert config delete operation status : %s%n\",\n             response.getStatusCode());\n     });\n```"
  returns:
    description: "A response containing status code and headers returned after the operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(String dataFeedId)"
  name: "deleteDataFeed(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(String dataFeedId)"
  summary: "Delete a data feed."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDataFeed(String dataFeedId)"
  desc: "Delete a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"t00853f1-9080-447f-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.deleteDataFeed(dataFeedId);\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(String dataFeedId)"
  name: "deleteDataFeedWithResponse(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(String dataFeedId)"
  summary: "Delete a data feed with REST response."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDataFeedWithResponse(String dataFeedId)"
  desc: "Delete a data feed with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"eh0854f1-8927-447f-bacf-8dccf2e86fwe\";\n metricsAdvisorAdminAsyncClient.deleteDataFeedWithResponse(dataFeedId)\n     .subscribe(response ->\n         System.out.printf(\"Data feed delete operation status : %s%n\", response.getStatusCode()));\n```"
  returns:
    description: "A response containing status code and headers returned after the operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredential(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredential(String credentialId)"
  name: "deleteDataSourceCredential(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredential(String credentialId)"
  summary: "Deletes the data source credential entity identified by `credentialId`."
  parameters:
  - description: "The data source credential entity id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDataSourceCredential(String credentialId)"
  desc: "Deletes the data source credential entity identified by `credentialId`.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"t00853f1-9080-447f-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.deleteDataFeed(datasourceCredentialId);\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredentialWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredentialWithResponse(String credentialId)"
  name: "deleteDataSourceCredentialWithResponse(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDataSourceCredentialWithResponse(String credentialId)"
  summary: "Deletes the data source credential entity identified by `credentialId`."
  parameters:
  - description: "The data source credential entity id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDataSourceCredentialWithResponse(String credentialId)"
  desc: "Deletes the data source credential entity identified by `credentialId`.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"eh0854f1-8927-447f-bacf-8dccf2e86fwe\";\n metricsAdvisorAdminAsyncClient.deleteDataSourceCredentialWithResponse(datasourceCredentialId)\n     .subscribe(response ->\n         System.out.printf(\"Datasource credential delete operation status : %s%n\", response.getStatusCode()));\n```"
  returns:
    description: "A response containing status code and headers returned after the operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfig(String detectionConfigurationId)"
  name: "deleteDetectionConfig(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfig(String detectionConfigurationId)"
  summary: "Delete a metric anomaly detection configuration."
  parameters:
  - description: "The metric anomaly detection configuration unique id.\n\n <p><strong>Code sample</strong></p>\n <!-- src_embed com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfig#String -->\n <pre>\n final String detectionConfigId = &quot;7b8069a1-1564-46da-9f50-b5d0dd9129ab&quot;;\n metricsAdvisorAdminAsyncClient\n     .deleteDetectionConfig&#40;detectionConfigId&#41;\n     .subscribe&#40;&#41;;\n </pre>\n <!-- end com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfig#String -->"
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDetectionConfig(String detectionConfigurationId)"
  desc: "Delete a metric anomaly detection configuration."
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfigWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfigWithResponse(String detectionConfigurationId)"
  name: "deleteDetectionConfigWithResponse(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteDetectionConfigWithResponse(String detectionConfigurationId)"
  summary: "Delete a metric anomaly detection configuration."
  parameters:
  - description: "The metric anomaly detection configuration unique id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDetectionConfigWithResponse(String detectionConfigurationId)"
  desc: "Delete a metric anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminAsyncClient\n     .deleteDetectionConfigWithResponse(detectionConfigId)\n     .subscribe(response ->\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook(String hookId)"
  name: "deleteHook(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteHook(String hookId)"
  summary: "Delete a hook."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteHook(String hookId)"
  desc: "Delete a hook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.deleteHook(emailHookId);\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(String hookId)"
  name: "deleteHookWithResponse(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(String hookId)"
  summary: "Delete a hook."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteHookWithResponse(String hookId)"
  desc: "Delete a hook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.deleteHookWithResponse(emailHookId)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAlertConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAlertConfig(String alertConfigurationId)"
  name: "getAlertConfig(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getAlertConfig(String alertConfigurationId)"
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyAlertConfiguration> getAlertConfig(String alertConfigurationId)"
  desc: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.getAlertConfig(alertConfigId)\n     .subscribe(anomalyAlertConfiguration -> {\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> identified by the given id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAlertConfigWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAlertConfigWithResponse(String alertConfigurationId)"
  name: "getAlertConfigWithResponse(String alertConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getAlertConfigWithResponse(String alertConfigurationId)"
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`."
  parameters:
  - description: "The anomaly alert configuration id."
    name: "alertConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyAlertConfiguration>> getAlertConfigWithResponse(String alertConfigurationId)"
  desc: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.getAlertConfigWithResponse(alertConfigId)\n     .subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"DataPointAnomaly alert creation operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>\n containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> identified by the given id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed(String dataFeedId)"
  name: "getDataFeed(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataFeed(String dataFeedId)"
  summary: "Get a data feed by its id."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataFeed> getDataFeed(String dataFeedId)"
  desc: "Get a data feed by its id.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.getDataFeed(dataFeedId)\n     .subscribe(dataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n     });\n```"
  returns:
    description: "The data feed for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(String dataFeedId)"
  name: "getDataFeedIngestionProgress(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(String dataFeedId)"
  summary: "Retrieve the ingestion progress of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataFeedIngestionProgress> getDataFeedIngestionProgress(String dataFeedId)"
  desc: "Retrieve the ingestion progress of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n metricsAdvisorAdminAsyncClient.getDataFeedIngestionProgress(dataFeedId)\n     .subscribe(ingestionProgress -> {\n         System.out.printf(\"Latest active timestamp: %s%n\", ingestionProgress.getLatestActiveTimestamp());\n         System.out.printf(\"Latest successful timestamp: %s%n\", ingestionProgress.getLatestSuccessTimestamp());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataFeedIngestionProgress\"></xref> of the data feed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress&text=DataFeedIngestionProgress\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(String dataFeedId)"
  name: "getDataFeedIngestionProgressWithResponse(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(String dataFeedId)"
  summary: "Retrieve the ingestion progress of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataFeedIngestionProgress>> getDataFeedIngestionProgressWithResponse(String dataFeedId)"
  desc: "Retrieve the ingestion progress of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n metricsAdvisorAdminAsyncClient.getDataFeedIngestionProgressWithResponse(dataFeedId, Context.NONE)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         DataFeedIngestionProgress ingestionProgress = response.getValue();\n         System.out.printf(\"Latest active timestamp: %s%n\", ingestionProgress.getLatestActiveTimestamp());\n         System.out.printf(\"Latest successful timestamp: %s%n\", ingestionProgress.getLatestSuccessTimestamp());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataFeedIngestionProgress\"></xref> of the data feed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionProgress&text=DataFeedIngestionProgress\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(String dataFeedId)"
  name: "getDataFeedWithResponse(String dataFeedId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(String dataFeedId)"
  summary: "Get a data feed by its id with REST response."
  parameters:
  - description: "The data feed unique id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataFeed>> getDataFeedWithResponse(String dataFeedId)"
  desc: "Get a data feed by its id with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.getDataFeedWithResponse(dataFeedId)\n     .subscribe(dataFeedResponse -> {\n         System.out.printf(\"Data feed get operation status: %s%n\", dataFeedResponse.getStatusCode());\n         DataFeed dataFeed = dataFeedResponse.getValue();\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n     });\n```"
  returns:
    description: "The data feed for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataSourceCredential(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataSourceCredential(String credentialId)"
  name: "getDataSourceCredential(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataSourceCredential(String credentialId)"
  summary: "Get a data source credential entity by its id."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSourceCredentialEntity> getDataSourceCredential(String credentialId)"
  desc: "Get a data source credential entity by its id.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n\n metricsAdvisorAdminAsyncClient.getDataSourceCredential(datasourceCredentialId)\n     .subscribe(credentialEntity -> {\n         if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "The data source credential entity for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataSourceCredentialWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataSourceCredentialWithResponse(String credentialId)"
  name: "getDataSourceCredentialWithResponse(String credentialId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDataSourceCredentialWithResponse(String credentialId)"
  summary: "Get a data source credential entity by its id with REST response."
  parameters:
  - description: "The data source credential entity unique id."
    name: "credentialId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSourceCredentialEntity>> getDataSourceCredentialWithResponse(String credentialId)"
  desc: "Get a data source credential entity by its id with REST response.\n\n**Code sample**\n\n```java\nfinal String datasourceCredentialId = \"f45668b2-bffa-11eb-8529-0246ac130003\";\n\n metricsAdvisorAdminAsyncClient.getDataSourceCredentialWithResponse(datasourceCredentialId)\n     .subscribe(credentialEntityWithResponse -> {\n         System.out.printf(\"Credential Entity creation operation status: %s%n\",\n             credentialEntityWithResponse.getStatusCode());\n         if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "The data source credential entity for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDetectionConfig(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDetectionConfig(String detectionConfigurationId)"
  name: "getDetectionConfig(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDetectionConfig(String detectionConfigurationId)"
  summary: "Get the anomaly detection configuration by its id."
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyDetectionConfiguration> getDetectionConfig(String detectionConfigurationId)"
  desc: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminAsyncClient\n     .getDetectionConfig(detectionConfigId)\n     .subscribe(detectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n\n         System.out.printf(\"Detection conditions specified for configuration...%n\");\n\n         System.out.printf(\"Whole Series Detection Conditions:%n\");\n         MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n             = detectionConfig.getWholeSeriesDetectionCondition();\n\n         System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n             wholeSeriesDetectionCondition.getConditionOperator());\n\n         System.out.printf(\"- Smart Detection Condition:%n\");\n         System.out.printf(\" - Sensitivity: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSensitivity());\n         System.out.printf(\" - Detection direction: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getAnomalyDetectorDirection());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         System.out.printf(\"- Hard Threshold Condition:%n\");\n         System.out.printf(\" - Lower bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getLowerBound());\n         System.out.printf(\" - Upper bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getUpperBound());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         System.out.printf(\"- Change Threshold Condition:%n\");\n         System.out.printf(\" - Change percentage: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getChangePercentage());\n         System.out.printf(\" - Shift point: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getShiftPoint());\n         System.out.printf(\" - Detect anomaly if within range: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .isWithinRange());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n             = detectionConfig.getSeriesDetectionConditions();\n         System.out.printf(\"Series Detection Conditions:%n\");\n         for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n             DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n             final String seriesKeyStr\n                 = Arrays.toString(seriesKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Key: %s%n\", seriesKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesDetectionCondition.getConditionOperator());\n\n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n\n         List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n             = detectionConfig.getSeriesGroupDetectionConditions();\n         System.out.printf(\"Series Group Detection Conditions:%n\");\n         for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n             : seriesGroupDetectionConditions) {\n             DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n             final String seriesGroupKeyStr\n                 = Arrays.toString(seriesGroupKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Group Key: %s%n\", seriesGroupKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesGroupDetectionCondition.getConditionOperator());\n\n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref> for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDetectionConfigWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDetectionConfigWithResponse(String detectionConfigurationId)"
  name: "getDetectionConfigWithResponse(String detectionConfigurationId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getDetectionConfigWithResponse(String detectionConfigurationId)"
  summary: "Get the anomaly detection configuration by its id."
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyDetectionConfiguration>> getDetectionConfigWithResponse(String detectionConfigurationId)"
  desc: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminAsyncClient\n     .getDetectionConfigWithResponse(detectionConfigId)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n\n         AnomalyDetectionConfiguration detectionConfig = response.getValue();\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n\n         System.out.printf(\"Detection conditions specified for configuration...%n\");\n\n         System.out.printf(\"Whole Series Detection Conditions:%n\");\n         MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n             = detectionConfig.getWholeSeriesDetectionCondition();\n\n         System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n             wholeSeriesDetectionCondition.getConditionOperator());\n\n         System.out.printf(\"- Smart Detection Condition:%n\");\n         System.out.printf(\" - Sensitivity: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSensitivity());\n         System.out.printf(\" - Detection direction: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getAnomalyDetectorDirection());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         System.out.printf(\"- Hard Threshold Condition:%n\");\n         System.out.printf(\" - Lower bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getLowerBound());\n         System.out.printf(\" - Upper bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getUpperBound());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         System.out.printf(\"- Change Threshold Condition:%n\");\n         System.out.printf(\" - Change percentage: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getChangePercentage());\n         System.out.printf(\" - Shift point: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getShiftPoint());\n         System.out.printf(\" - Detect anomaly if within range: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .isWithinRange());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n\n         List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n             = detectionConfig.getSeriesDetectionConditions();\n         System.out.printf(\"Series Detection Conditions:%n\");\n         for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n             DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n             final String seriesKeyStr\n                 = Arrays.toString(seriesKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Key: %s%n\", seriesKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesDetectionCondition.getConditionOperator());\n\n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n\n         List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n             = detectionConfig.getSeriesGroupDetectionConditions();\n         System.out.printf(\"Series Group Detection Conditions:%n\");\n         for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n             : seriesGroupDetectionConditions) {\n             DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n             final String seriesGroupKeyStr\n                 = Arrays.toString(seriesGroupKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Group Key: %s%n\", seriesGroupKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesGroupDetectionCondition.getConditionOperator());\n\n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n\n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>\n     for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook(String hookId)"
  name: "getHook(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getHook(String hookId)"
  summary: "Get a hook by its id."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<NotificationHook> getHook(String hookId)"
  desc: "Get a hook by its id.\n\n**Code sample**\n\n```java\nfinal String hookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.getHook(hookId)\n     .subscribe(hook -> {\n         if (hook instanceof EmailNotificationHook) {\n             EmailNotificationHook emailHook = (EmailNotificationHook) hook;\n             System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\",\n                 emailHook.getEmailsToAlert()));\n         } else if (hook instanceof WebNotificationHook) {\n             WebNotificationHook webHook = (WebNotificationHook) hook;\n             System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(String hookId)"
  name: "getHookWithResponse(String hookId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(String hookId)"
  summary: "Get a hook by its id."
  parameters:
  - description: "The hook unique id."
    name: "hookId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<NotificationHook>> getHookWithResponse(String hookId)"
  desc: "Get a hook by its id.\n\n**Code sample**\n\n```java\nfinal String hookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.getHookWithResponse(hookId)\n     .subscribe(response -> {\n         System.out.printf(\"Response status code: %d%n\", response.getStatusCode());\n         NotificationHook notificationHook = response.getValue();\n         if (notificationHook instanceof EmailNotificationHook) {\n             EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n             System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n         } else if (notificationHook instanceof WebNotificationHook) {\n             WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n             System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> for the provided id."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAlertConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions listAnomalyAlertConfigsOptions)"
  name: "listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions listAnomalyAlertConfigsOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions listAnomalyAlertConfigsOptions)"
  summary: "Fetch the anomaly alert configurations associated with a detection configuration."
  parameters:
  - description: "The id of the detection configuration."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "th e additional configurable options to specify when querying the result."
    name: "listAnomalyAlertConfigsOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListAnomalyAlertConfigsOptions&text=ListAnomalyAlertConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<AnomalyAlertConfiguration> listAlertConfigs(String detectionConfigurationId, ListAnomalyAlertConfigsOptions listAnomalyAlertConfigsOptions)"
  desc: "Fetch the anomaly alert configurations associated with a detection configuration.\n\n**Code sample**\n\n```java\nString detectionConfigId = \"3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n metricsAdvisorAdminAsyncClient.listAlertConfigs(detectionConfigId, new ListAnomalyAlertConfigsOptions())\n     .subscribe(anomalyAlertConfiguration -> {\n         System.out.printf(\"DataPoint Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"DataPoint Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"DataPoint Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getHookIdsToAlert());\n         System.out.printf(\"DataPoint Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the\n <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"anomaly alert configurations\"></xref> for the specified detection configuration."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions listDataFeedIngestionOptions)"
  name: "listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions listDataFeedIngestionOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions listDataFeedIngestionOptions)"
  summary: "Fetch the ingestion status of a data feed."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "listDataFeedIngestionOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDataFeedIngestionOptions&text=ListDataFeedIngestionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions listDataFeedIngestionOptions)"
  desc: "Fetch the ingestion status of a data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);\n metricsAdvisorAdminAsyncClient.listDataFeedIngestionStatus(dataFeedId, options)\n     .subscribe(ingestionStatus -> {\n         System.out.printf(\"Timestamp: %s%n\", ingestionStatus.getTimestamp());\n         System.out.printf(\"Status: %s%n\", ingestionStatus.getStatus());\n         System.out.printf(\"Message: %s%n\", ingestionStatus.getMessage());\n     });\n```"
  returns:
    description: "The ingestion statuses."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus?alt=com.azure.ai.metricsadvisor.administration.models.DataFeedIngestionStatus&text=DataFeedIngestionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds()"
  name: "listDataFeeds()"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDataFeeds()"
  summary: "List information of all data feeds on the metrics advisor account."
  syntax: "public PagedFlux<DataFeed> listDataFeeds()"
  desc: "List information of all data feeds on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminAsyncClient.listDataFeeds()\n     .subscribe(dataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds(com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds(ListDataFeedOptions listDataFeedOptions)"
  name: "listDataFeeds(ListDataFeedOptions listDataFeedOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDataFeeds(ListDataFeedOptions listDataFeedOptions)"
  summary: "List information of all data feeds on the metrics advisor account."
  parameters:
  - description: "The configurable <xref uid=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass for filtering the output result."
    name: "listDataFeedOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDataFeedOptions&text=ListDataFeedOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DataFeed> listDataFeeds(ListDataFeedOptions listDataFeedOptions)"
  desc: "List information of all data feeds on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminAsyncClient.listDataFeeds(\n     new ListDataFeedOptions()\n         .setListDataFeedFilter(\n             new ListDataFeedFilter()\n                 .setDataFeedStatus(DataFeedStatus.ACTIVE)\n                 .setDataFeedGranularityType(DataFeedGranularityType.DAILY))\n         .setMaxPageSize(3))\n     .subscribe(dataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", dataFeed.getId());\n         System.out.printf(\"Data feed description: %s%n\", dataFeed.getOptions().getDescription());\n         System.out.printf(\"Data feed source type: %s%n\", dataFeed.getSourceType());\n         System.out.printf(\"Data feed creator: %s%n\", dataFeed.getCreator());\n         System.out.printf(\"Data feed status: %s%n\", dataFeed.getStatus());\n         System.out.printf(\"Data feed granularity type: %s%n\", dataFeed.getGranularity().getGranularityType());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials()"
  name: "listDataSourceCredentials()"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials()"
  summary: "List information of all data source credential entities on the metrics advisor account."
  syntax: "public PagedFlux<DataSourceCredentialEntity> listDataSourceCredentials()"
  desc: "List information of all data source credential entities on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminAsyncClient.listDataSourceCredentials()\n     .subscribe(datasourceCredentialEntity -> {\n         if (datasourceCredentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) datasourceCredentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials(com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials(ListCredentialEntityOptions listCredentialEntityOptions)"
  name: "listDataSourceCredentials(ListCredentialEntityOptions listCredentialEntityOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDataSourceCredentials(ListCredentialEntityOptions listCredentialEntityOptions)"
  summary: "List information of all data source credential entities on the metrics advisor account."
  parameters:
  - description: "The configurable <xref uid=\"com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass for filtering\n the output result."
    name: "listCredentialEntityOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListCredentialEntityOptions&text=ListCredentialEntityOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DataSourceCredentialEntity> listDataSourceCredentials(ListCredentialEntityOptions listCredentialEntityOptions)"
  desc: "List information of all data source credential entities on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminAsyncClient.listDataSourceCredentials(\n     new ListCredentialEntityOptions()\n         .setMaxPageSize(3))\n     .subscribe(datasourceCredentialEntity -> {\n         if (datasourceCredentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) datasourceCredentialEntity;\n             System.out\n                 .printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault client Id: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultClientId());\n             System.out.printf(\"Actual credential entity key vault secret name for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientId());\n             System.out.printf(\"Actual credential entity key vault secret for data source: %s%n\",\n                 actualCredentialSPInKV.getSecretNameForDataSourceClientSecret());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feeds\"></xref>\n in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(java.lang.String)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(String metricId)"
  name: "listDetectionConfigs(String metricId)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(String metricId)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it."
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId)"
  desc: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricsAdvisorAdminAsyncClient.listDetectionConfigs(metricId)\n     .subscribe(detectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(java.lang.String,com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions listDetectionConfigsOptions)"
  name: "listDetectionConfigs(String metricId, ListDetectionConfigsOptions listDetectionConfigsOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listDetectionConfigs(String metricId, ListDetectionConfigsOptions listDetectionConfigsOptions)"
  summary: "Given a metric id, retrieve all anomaly detection configurations applied to it."
  parameters:
  - description: "The metric id."
    name: "metricId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the additional configurable options to specify when querying the result."
    name: "listDetectionConfigsOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListDetectionConfigsOptions&text=ListDetectionConfigsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<AnomalyDetectionConfiguration> listDetectionConfigs(String metricId, ListDetectionConfigsOptions listDetectionConfigsOptions)"
  desc: "Given a metric id, retrieve all anomaly detection configurations applied to it.\n\n**Code sample**\n\n```java\nfinal String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricsAdvisorAdminAsyncClient.listDetectionConfigs(metricId,\n     new ListDetectionConfigsOptions())\n     .subscribe(detectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "The anomaly detection configurations."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()"
  name: "listHooks()"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listHooks()"
  summary: "List information of hooks on the metrics advisor account."
  syntax: "public PagedFlux<NotificationHook> listHooks()"
  desc: "List information of hooks on the metrics advisor account.\n\n**Code sample**\n\n```java\nmetricsAdvisorAdminAsyncClient.listHooks()\n     .subscribe(hook -> {\n         if (hook instanceof EmailNotificationHook) {\n             EmailNotificationHook emailHook = (EmailNotificationHook) hook;\n             System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n             System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n             System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n             System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n             System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n         } else if (hook instanceof WebNotificationHook) {\n             WebNotificationHook webHook = (WebNotificationHook) hook;\n             System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n             System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n             System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n             System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n             System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n             System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of all the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> in the account."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(com.azure.ai.metricsadvisor.administration.models.ListHookOptions)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions listHookOptions)"
  name: "listHooks(ListHookOptions listHookOptions)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions listHookOptions)"
  summary: "List information of hooks."
  parameters:
  - description: "the additional configurable options to specify when listing hooks."
    name: "listHookOptions"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.ListHookOptions?alt=com.azure.ai.metricsadvisor.administration.models.ListHookOptions&text=ListHookOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<NotificationHook> listHooks(ListHookOptions listHookOptions)"
  desc: "List information of hooks.\n\n**Code sample**\n\n```java\nListHookOptions options = new ListHookOptions()\n     .setSkip(100)\n     .setMaxPageSize(20);\n int[] pageCount = new int[1];\n metricsAdvisorAdminAsyncClient.listHooks(options).byPage()\n     .subscribe(hookPage -> {\n         System.out.printf(\"Page: %d%n\", pageCount[0]++);\n         for (NotificationHook notificationHook : hookPage.getElements()) {\n             if (notificationHook instanceof EmailNotificationHook) {\n                 EmailNotificationHook emailHook = (EmailNotificationHook) notificationHook;\n                 System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n                 System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n                 System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n                 System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n                 System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n                 System.out.printf(\"Email Hook Admins: %s%n\", String.join(\",\", emailHook.getAdmins()));\n             } else if (notificationHook instanceof WebNotificationHook) {\n                 WebNotificationHook webHook = (WebNotificationHook) notificationHook;\n                 System.out.printf(\"Web Hook Id: %s%n\", webHook.getId());\n                 System.out.printf(\"Web Hook Name: %s%n\", webHook.getName());\n                 System.out.printf(\"Web Hook Description: %s%n\", webHook.getDescription());\n                 System.out.printf(\"Web Hook External Link: %s%n\", webHook.getExternalLink());\n                 System.out.printf(\"Web Hook Endpoint: %s%n\", webHook.getEndpoint());\n                 System.out.printf(\"Web Hook Headers: %s%n\", webHook.getHttpHeaders());\n                 System.out.printf(\"Web Hook Admins: %s%n\", String.join(\",\", webHook.getAdmins()));\n             }\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing information of the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref> resources."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  name: "refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  summary: "Refresh data ingestion for a period."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start point of the period."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end point of of the period."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  desc: "Refresh data ingestion for a period.\n\nThe data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-03-03T00:00:00Z\");\n metricsAdvisorAdminAsyncClient.refreshDataFeedIngestion(dataFeedId,\n     startTime,\n     endTime).subscribe();\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> indicating ingestion reset success or failure."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  name: "refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  summary: "Refresh data ingestion for a period."
  parameters:
  - description: "The data feed id."
    name: "dataFeedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start point of the period."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end point of of the period."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)"
  desc: "Refresh data ingestion for a period.\n\nThe data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-01-01T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-03-03T00:00:00Z\");\n metricsAdvisorAdminAsyncClient.refreshDataFeedIngestionWithResponse(dataFeedId,\n     startTime,\n     endTime)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> with result of reset request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAlertConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  name: "updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  summary: "Update anomaly alert configuration."
  parameters:
  - description: "The anomaly alert configuration to update."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyAlertConfiguration> updateAlertConfig(AnomalyAlertConfiguration alertConfiguration)"
  desc: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.getAlertConfig(alertConfigId)\n     .flatMap(existingAnomalyConfig -> {\n         List<String> hookIds = new ArrayList<>(existingAnomalyConfig.getHookIdsToAlert());\n         hookIds.add(additionalHookId);\n         return metricsAdvisorAdminAsyncClient.updateAlertConfig(\n             existingAnomalyConfig\n                 .setHookIdsToAlert(hookIds)\n                 .setDescription(\"updated to add more hook ids\"));\n     }).subscribe(updateAnomalyAlertConfiguration -> {\n         System.out.printf(\"Updated anomaly alert configuration Id: %s%n\",\n             updateAnomalyAlertConfiguration.getId());\n         System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n             updateAnomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Updated anomaly alert configuration hook ids: %s%n\",\n             updateAnomalyAlertConfiguration.getHookIdsToAlert());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> that was updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAlertConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  name: "updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  summary: "Update anomaly alert configuration."
  parameters:
  - description: "The anomaly alert configuration to update."
    name: "alertConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyAlertConfiguration>> updateAlertConfigWithResponse(AnomalyAlertConfiguration alertConfiguration)"
  desc: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n\n metricsAdvisorAdminAsyncClient.getAlertConfig(alertConfigId)\n     .flatMap(existingAnomalyConfig -> {\n         List<String> hookIds = new ArrayList<>(existingAnomalyConfig.getHookIdsToAlert());\n         hookIds.add(additionalHookId);\n         return metricsAdvisorAdminAsyncClient.updateAlertConfigWithResponse(\n             existingAnomalyConfig\n                 .setHookIdsToAlert(hookIds)\n                 .setDescription(\"updated to add more hook ids\"));\n     }).subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"Update anomaly alert operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration updatAnomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"Updated anomaly alert configuration Id: %s%n\",\n             updatAnomalyAlertConfiguration.getId());\n         System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n             updatAnomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Updated anomaly alert configuration hook ids: %s%n\",\n             updatAnomalyAlertConfiguration.getHookIdsToAlert());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyAlertConfiguration\"></xref> that was updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyAlertConfiguration&text=AnomalyAlertConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed(DataFeed dataFeed)"
  name: "updateDataFeed(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataFeed(DataFeed dataFeed)"
  summary: "Update an existing data feed."
  parameters:
  - description: "the data feed that needs to be updated."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataFeed> updateDataFeed(DataFeed dataFeed)"
  desc: "Update an existing data feed.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.getDataFeed(dataFeedId)\n     .flatMap(existingDataFeed -> {\n         return metricsAdvisorAdminAsyncClient.updateDataFeed(\n             existingDataFeed\n                .setOptions(new DataFeedOptions()\n                    .setDescription(\"set updated description\"))\n        );\n     })\n     .subscribe(updatedDataFeed -> {\n         System.out.printf(\"Data feed Id: %s%n\", updatedDataFeed.getId());\n         System.out.printf(\"Data feed updated description: %s%n\", updatedDataFeed.getOptions().getDescription());\n     });\n```"
  returns:
    description: "the updated data feed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.administration.models.DataFeed)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(DataFeed dataFeed)"
  name: "updateDataFeedWithResponse(DataFeed dataFeed)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(DataFeed dataFeed)"
  summary: "Update an existing data feed with REST response."
  parameters:
  - description: "the data feed that needs to be updated."
    name: "dataFeed"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataFeed>> updateDataFeedWithResponse(DataFeed dataFeed)"
  desc: "Update an existing data feed with REST response.\n\n**Code sample**\n\n```java\nfinal String dataFeedId = \"r47053f1-9080-09lo-bacf-8dccf2e86f\";\n metricsAdvisorAdminAsyncClient.getDataFeed(dataFeedId)\n     .flatMap(existingDataFeed -> {\n         return metricsAdvisorAdminAsyncClient.updateDataFeedWithResponse(\n             existingDataFeed\n                 .setOptions(new DataFeedOptions()\n                     .setDescription(\"set updated description\"))\n         );\n     })\n     .subscribe(dataFeedResponse -> {\n         System.out.printf(\"Data feed update operation status: %s%n\", dataFeedResponse.getStatusCode());\n         DataFeed updatedDataFeed = dataFeedResponse.getValue();\n         System.out.printf(\"Data feed Id: %s%n\", updatedDataFeed.getId());\n         System.out.printf(\"Data feed updated description: %s%n\", updatedDataFeed.getOptions().getDescription());\n     });\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataFeed\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data feed\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataFeed?alt=com.azure.ai.metricsadvisor.administration.models.DataFeed&text=DataFeed\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  name: "updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Update a data source credential entity."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSourceCredentialEntity> updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Update a data source credential entity.\n\n**Code sample**\n\n```java\nString credentialId = \"\";\n metricsAdvisorAdminAsyncClient.getDataSourceCredential(credentialId)\n     .flatMap(existingDatasourceCredential -> {\n         DataSourceServicePrincipalInKeyVault actualCredentialSPInKV = null;\n         if (existingDatasourceCredential instanceof DataSourceServicePrincipalInKeyVault) {\n             actualCredentialSPInKV  = (DataSourceServicePrincipalInKeyVault) existingDatasourceCredential;\n         }\n         return metricsAdvisorAdminAsyncClient.updateDataSourceCredential(\n             actualCredentialSPInKV.setDescription(\"set updated description\"));\n     })\n     .subscribe(credentialEntity -> {\n         if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n             System.out.printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault updated description: %s%n\",\n                 actualCredentialSPInKV.getDescription());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredentialWithResponse(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  name: "updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Update a data source credential entity with REST response."
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSourceCredentialEntity>> updateDataSourceCredentialWithResponse(DataSourceCredentialEntity dataSourceCredential)"
  desc: "Update a data source credential entity with REST response.\n\n**Code sample**\n\n```java\nString credentialId = \"\";\n metricsAdvisorAdminAsyncClient.getDataSourceCredential(credentialId)\n     .flatMap(existingDatasourceCredential -> {\n         DataSourceServicePrincipalInKeyVault actualCredentialSPInKV = null;\n         if (existingDatasourceCredential instanceof DataSourceServicePrincipalInKeyVault) {\n             actualCredentialSPInKV  = (DataSourceServicePrincipalInKeyVault) existingDatasourceCredential;\n         }\n         return metricsAdvisorAdminAsyncClient.updateDataSourceCredentialWithResponse(\n             actualCredentialSPInKV.setDescription(\"set updated description\"));\n     })\n     .subscribe(credentialEntityWithResponse -> {\n         System.out.printf(\"Credential Entity creation operation status: %s%n\",\n             credentialEntityWithResponse.getStatusCode());\n         if (credentialEntityWithResponse.getValue() instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntityWithResponse.getValue();\n             System.out.printf(\"Actual credential entity key vault endpoint: %s%n\",\n                 actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault updated description: %s%n\",\n                 actualCredentialSPInKV.getDescription());\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDetectionConfig(com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  name: "updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Update a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyDetectionConfiguration> updateDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminAsyncClient\n     .getDetectionConfig(detectionConfigId)\n     .flatMap(detectionConfig -> {\n         detectionConfig.setName(\"updated config name\");\n         detectionConfig.setDescription(\"updated with more detection conditions\");\n\n         DimensionKey seriesGroupKey = new DimensionKey()\n             .put(\"city\", \"Seoul\");\n         detectionConfig.addSeriesGroupDetectionCondition(\n             new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n                 .setSmartDetectionCondition(new SmartDetectionCondition(\n                     10.0,\n                     AnomalyDetectorDirection.UP,\n                     new SuppressCondition(2, 2))));\n         return metricsAdvisorAdminAsyncClient\n             .updateDetectionConfig(detectionConfig);\n     })\n     .subscribe(updatedDetectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDetectionConfigWithResponse(com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration)"
  name: "updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Update a configuration to detect anomalies in the time series of a metric."
  parameters:
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AnomalyDetectionConfiguration>> updateDetectionConfigWithResponse(AnomalyDetectionConfiguration detectionConfiguration)"
  desc: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricsAdvisorAdminAsyncClient\n     .getDetectionConfigWithResponse(detectionConfigId)\n     .flatMap(response -> {\n         AnomalyDetectionConfiguration detectionConfig = response.getValue();\n         detectionConfig.setName(\"updated config name\");\n         detectionConfig.setDescription(\"updated with more detection conditions\");\n         DimensionKey seriesGroupKey = new DimensionKey()\n             .put(\"city\", \"Seoul\");\n         detectionConfig.addSeriesGroupDetectionCondition(\n             new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n                 .setSmartDetectionCondition(new SmartDetectionCondition(\n                     10.0,\n                     AnomalyDetectorDirection.UP,\n                     new SuppressCondition(2, 2))));\n         return metricsAdvisorAdminAsyncClient\n             .updateDetectionConfigWithResponse(detectionConfig);\n     })\n     .subscribe(response -> {\n         AnomalyDetectionConfiguration updatedDetectionConfig = response.getValue();\n         System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.administration.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook(NotificationHook notificationHook)"
  name: "updateHook(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateHook(NotificationHook notificationHook)"
  summary: "Update an existing notification<wbr>Hook."
  parameters:
  - description: "The notificationHook to update."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<NotificationHook> updateHook(NotificationHook notificationHook)"
  desc: "Update an existing notificationHook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.getHook(emailHookId)\n     .flatMap(hook -> {\n         EmailNotificationHook emailHook = (EmailNotificationHook) hook;\n         List<String> emailsToUpdate = new ArrayList<>(emailHook.getEmailsToAlert());\n         emailsToUpdate.remove(\"alertme@alertme.com\");\n         emailsToUpdate.add(\"alertme2@alertme.com\");\n         emailsToUpdate.add(\"alertme3@alertme.com\");\n         emailHook.setEmailsToAlert(emailsToUpdate);\n         return metricsAdvisorAdminAsyncClient.updateHook(emailHook);\n     })\n     .subscribe(hook -> {\n         EmailNotificationHook emailHook = (EmailNotificationHook) hook;\n         System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n         System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n         System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n         System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n         System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(com.azure.ai.metricsadvisor.administration.models.NotificationHook)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(NotificationHook notificationHook)"
  name: "updateHookWithResponse(NotificationHook notificationHook)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(NotificationHook notificationHook)"
  summary: "Update an existing notification hook."
  parameters:
  - description: "The notificationHook to update."
    name: "notificationHook"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<NotificationHook>> updateHookWithResponse(NotificationHook notificationHook)"
  desc: "Update an existing notification hook.\n\n**Code sample**\n\n```java\nfinal String emailHookId = \"f00853f1-6627-447f-bacf-8dccf2e86fed\";\n metricsAdvisorAdminAsyncClient.getHookWithResponse(emailHookId)\n     .flatMap(response -> {\n         EmailNotificationHook emailHook = (EmailNotificationHook) response.getValue();\n         List<String> emailsToUpdate = new ArrayList<>(emailHook.getEmailsToAlert());\n         emailsToUpdate.remove(\"alertme@alertme.com\");\n         emailsToUpdate.add(\"alertme2@alertme.com\");\n         emailsToUpdate.add(\"alertme3@alertme.com\");\n         emailHook.setEmailsToAlert(emailsToUpdate);\n         return metricsAdvisorAdminAsyncClient.updateHookWithResponse(emailHook);\n     })\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         EmailNotificationHook emailHook = (EmailNotificationHook) response.getValue();\n         System.out.printf(\"Email Hook Id: %s%n\", emailHook.getId());\n         System.out.printf(\"Email Hook Name: %s%n\", emailHook.getName());\n         System.out.printf(\"Email Hook Description: %s%n\", emailHook.getDescription());\n         System.out.printf(\"Email Hook External Link: %s%n\", emailHook.getExternalLink());\n         System.out.printf(\"Email Hook Emails: %s%n\", String.join(\",\", emailHook.getEmailsToAlert()));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NotificationHook\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.NotificationHook?alt=com.azure.ai.metricsadvisor.administration.models.NotificationHook&text=NotificationHook\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor.\n\n**Instantiating a asynchronous Metrics Advisor Administration Client**\n\n```java\nMetricsAdvisorAdministrationAsyncClient metricsAdvisorAdminAsyncClient =\n     new MetricsAdvisorAdministrationClientBuilder()\n         .credential(new MetricsAdvisorKeyCredential(\"{subscription_key}\", \"{api_key}\"))\n         .endpoint(\"{endpoint}\")\n         .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.1.6
