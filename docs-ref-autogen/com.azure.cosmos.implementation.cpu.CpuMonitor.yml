### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor
  id: CpuMonitor
  artifact: com.azure:azure-cosmos:4.5.0
  parent: com.azure.cosmos.implementation.cpu
  children:
  - com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor()
  - com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad()
  - com.azure.cosmos.implementation.cpu.CpuMonitor.register(com.azure.cosmos.implementation.cpu.CpuListener)
  - com.azure.cosmos.implementation.cpu.CpuMonitor.unregister(com.azure.cosmos.implementation.cpu.CpuListener)
  langs:
  - java
  name: CpuMonitor
  nameWithType: CpuMonitor
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor
  type: Class
  package: com.azure.cosmos.implementation.cpu
  summary: Monitors history of CPU consumption. This is a singleton class and can support multiple cosmos clients. is used for tracking multiple cosmos clients registers to this CPU monitor. in the absence of a listener the CpuMonitor will shutdown.
  syntax:
    content: public class CpuMonitor
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor()
  id: CpuMonitor()
  artifact: com.azure:azure-cosmos:4.5.0
  parent: com.azure.cosmos.implementation.cpu.CpuMonitor
  langs:
  - java
  name: CpuMonitor()
  nameWithType: CpuMonitor.CpuMonitor()
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor()
  overload: com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor*
  type: Constructor
  package: com.azure.cosmos.implementation.cpu
  syntax:
    content: public CpuMonitor()
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad()
  id: getCpuLoad()
  artifact: com.azure:azure-cosmos:4.5.0
  parent: com.azure.cosmos.implementation.cpu.CpuMonitor
  langs:
  - java
  name: getCpuLoad()
  nameWithType: CpuMonitor.getCpuLoad()
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad()
  overload: com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad*
  type: Method
  package: com.azure.cosmos.implementation.cpu
  syntax:
    content: public static CpuLoadHistory getCpuLoad()
    return:
      type: com.azure.cosmos.implementation.cpu.CpuLoadHistory
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.register(com.azure.cosmos.implementation.cpu.CpuListener)
  id: register(com.azure.cosmos.implementation.cpu.CpuListener)
  artifact: com.azure:azure-cosmos:4.5.0
  parent: com.azure.cosmos.implementation.cpu.CpuMonitor
  langs:
  - java
  name: register(CpuListener listener)
  nameWithType: CpuMonitor.register(CpuListener listener)
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.register(CpuListener listener)
  overload: com.azure.cosmos.implementation.cpu.CpuMonitor.register*
  type: Method
  package: com.azure.cosmos.implementation.cpu
  summary: any client interested in receiving cpu info should implement <xref uid="com.azure.cosmos.implementation.cpu.CpuListener" data-throw-if-not-resolved="false">CpuListener</xref>. and invoke <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor.register(com.azure.cosmos.implementation.cpu.CpuListener)" data-throw-if-not-resolved="false">CpuMonitor#register(CpuListener)</xref> when starting up and <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor.unregister(com.azure.cosmos.implementation.cpu.CpuListener)" data-throw-if-not-resolved="false">CpuMonitor#unregister(CpuListener)</xref> \} when shutting down. This is merely is used as a singal to <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor" data-throw-if-not-resolved="false">CpuMonitor</xref> to control whether it should keep using its internal thread or it it should shut it down in the absence of any CosmosClient.
  syntax:
    content: public static void register(CpuListener listener)
    parameters:
    - id: listener
      type: com.azure.cosmos.implementation.cpu.CpuListener
      description: interested in cpu update.
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.unregister(com.azure.cosmos.implementation.cpu.CpuListener)
  id: unregister(com.azure.cosmos.implementation.cpu.CpuListener)
  artifact: com.azure:azure-cosmos:4.5.0
  parent: com.azure.cosmos.implementation.cpu.CpuMonitor
  langs:
  - java
  name: unregister(CpuListener listener)
  nameWithType: CpuMonitor.unregister(CpuListener listener)
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.unregister(CpuListener listener)
  overload: com.azure.cosmos.implementation.cpu.CpuMonitor.unregister*
  type: Method
  package: com.azure.cosmos.implementation.cpu
  summary: any client interested in receiving cpu info should implement <xref uid="com.azure.cosmos.implementation.cpu.CpuListener" data-throw-if-not-resolved="false">CpuListener</xref>. and invoke <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor.register(com.azure.cosmos.implementation.cpu.CpuListener)" data-throw-if-not-resolved="false">CpuMonitor#register(CpuListener)</xref> when starting up and <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor.unregister(com.azure.cosmos.implementation.cpu.CpuListener)" data-throw-if-not-resolved="false">CpuMonitor#unregister(CpuListener)</xref> \} when shutting down. This is merely is used as a singal to <xref uid="com.azure.cosmos.implementation.cpu.CpuMonitor" data-throw-if-not-resolved="false">CpuMonitor</xref> to control whether it should keep using its internal thread or it it should shut it down in the absence of any CosmosClient.
  syntax:
    content: public static void unregister(CpuListener listener)
    parameters:
    - id: listener
      type: com.azure.cosmos.implementation.cpu.CpuListener
      description: the listener which is not interested in the cpu update anymore.
references:
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor*
  name: CpuMonitor
  nameWithType: CpuMonitor.CpuMonitor
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.CpuMonitor
  package: com.azure.cosmos.implementation.cpu
- uid: com.azure.cosmos.implementation.cpu.CpuListener
  name: CpuListener
  nameWithType: CpuListener
  fullName: com.azure.cosmos.implementation.cpu.CpuListener
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.register*
  name: register
  nameWithType: CpuMonitor.register
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.register
  package: com.azure.cosmos.implementation.cpu
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.unregister*
  name: unregister
  nameWithType: CpuMonitor.unregister
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.unregister
  package: com.azure.cosmos.implementation.cpu
- uid: com.azure.cosmos.implementation.cpu.CpuLoadHistory
  name: CpuLoadHistory
  nameWithType: CpuLoadHistory
  fullName: com.azure.cosmos.implementation.cpu.CpuLoadHistory
- uid: com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad*
  name: getCpuLoad
  nameWithType: CpuMonitor.getCpuLoad
  fullName: com.azure.cosmos.implementation.cpu.CpuMonitor.getCpuLoad
  package: com.azure.cosmos.implementation.cpu
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
