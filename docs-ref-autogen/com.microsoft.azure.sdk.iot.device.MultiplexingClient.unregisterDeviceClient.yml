### YamlMime:JavaMember
nameWithType: MultiplexingClient.unregisterDeviceClient
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient)
  name: unregisterDeviceClient(DeviceClient deviceClient)
  nameWithType: MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient)
  parameters:
  - description: <p>The device client to unregister from this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException&text=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the default timeout allows. </p>
  - type: <xref href="MultiplexingClientException?alt=MultiplexingClientException&text=MultiplexingClientException" data-throw-if-not-resolved="False"/>
    description: <p>If any other Exception is thrown, it will be nested into this exception. </p>
  summary: >-
    <p>Unregister a device client from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref> for unregistering multiple devices as it has some performance improvements over repeatedly calling this method for individual device unregistrations. This method blocks on each unregistration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the unregistrations after starting them all asynchronously. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device client, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on this device client for twin/methods/cloud to device messages will need to be set again after this device is re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClient(DeviceClient deviceClient)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  name: unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  parameters:
  - description: <p>The device client to unregister from this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  - description: <p>How long (in milliseconds) to let this operation wait for all unregistrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException?alt=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException&text=com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientDeviceRegistrationTimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the provided timeout allows. </p>
  - type: <xref href="MultiplexingClientException?alt=MultiplexingClientException&text=MultiplexingClientException" data-throw-if-not-resolved="False"/>
    description: <p>If any other Exception is thrown, it will be nested into this exception. </p>
  summary: >-
    <p>Unregister a device client from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref> for unregistering multiple devices as it has some performance improvements over repeatedly calling this method for individual device unregistrations. This method blocks on each unregistration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the unregistrations after starting them all asynchronously. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device client, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on this device client for twin/methods/cloud to device messages will need to be set again after this device is re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)
uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient*
fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient
name: unregisterDeviceClient(DeviceClient deviceClient)
package: com.microsoft.azure.sdk.iot.device
metadata: {}
