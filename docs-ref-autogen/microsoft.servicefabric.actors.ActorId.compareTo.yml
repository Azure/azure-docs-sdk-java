### YamlMime:JavaMember
nameWithType: ActorId.compareTo
type: method
members:
- fullName: microsoft.servicefabric.actors.ActorId.compareTo(ActorId o)
  name: compareTo(ActorId o)
  nameWithType: ActorId.compareTo(ActorId o)
  parameters:
  - description: <p>The actorId to compare with this instance. </p>
    name: o
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the other parameter. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares this instance with a specified <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false">ActorId</xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified actorId.</p>

    <p>

      <b>Remarks:</b>The comparison is done based on the id if both the instances have same <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false">ActorIdKind</xref>. If <xref uid="microsoft.servicefabric.actors.ActorIdKind" data-throw-if-not-resolved="false">ActorIdKind</xref> is different, then comparison is done based on string representation of the actor id. </p>
  syntax: public int compareTo(ActorId o)
  uid: microsoft.servicefabric.actors.ActorId.compareTo(ActorId)
uid: microsoft.servicefabric.actors.ActorId.compareTo*
fullName: microsoft.servicefabric.actors.ActorId.compareTo(ActorId o)
name: compareTo(ActorId o)
package: microsoft.servicefabric.actors
metadata: {}
