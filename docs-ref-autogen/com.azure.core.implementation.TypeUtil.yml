### YamlMime:JavaType
uid: "com.azure.core.implementation.TypeUtil"
fullName: "com.azure.core.implementation.TypeUtil"
name: "TypeUtil"
nameWithType: "TypeUtil"
summary: "Utility type exposing methods to deal with <xref uid=\"java.lang.reflect.Type\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Type\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class TypeUtil"
methods:
- "com.azure.core.implementation.TypeUtil.createParameterizedType(java.lang.reflect.Type,java.lang.reflect.Type...)"
- "com.azure.core.implementation.TypeUtil.getAllClasses(java.lang.Class<?>)"
- "com.azure.core.implementation.TypeUtil.getRawClass(java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.getRestResponseBodyType(java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.getSuperType(java.lang.reflect.Type,java.lang.Class<?>)"
- "com.azure.core.implementation.TypeUtil.getTypeArgument(java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.getTypeArguments(java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.isTypeOrSubTypeOf(java.lang.reflect.Type,java.lang.reflect.Type)"
- "com.azure.core.implementation.TypeUtil.restResponseTypeExpectsBody(java.lang.reflect.ParameterizedType)"
- "com.azure.core.implementation.TypeUtil.typeImplementsInterface(java.lang.reflect.Type,java.lang.Class<?>)"
type: "class"
metadata: {}
package: "com.azure.core.implementation"
artifact: com.azure:azure-core:1.15.0
