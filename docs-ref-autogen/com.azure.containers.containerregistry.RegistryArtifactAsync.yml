### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.RegistryArtifactAsync"
fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync"
name: "RegistryArtifactAsync"
nameWithType: "RegistryArtifactAsync"
summary: "This class provides a helper type that contains all the operations for artifacts in a given repository."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class RegistryArtifactAsync"
methods:
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.delete()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.delete()"
  name: "delete()"
  nameWithType: "RegistryArtifactAsync.delete()"
  summary: "Deletes the registry artifact with the matching digest in the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"respository.\"></xref>"
  syntax: "public Mono<Void> delete()"
  desc: "Deletes the registry artifact with the matching digest in the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"respository.\"></xref>\n\n**Code Samples**\n\nDelete the registry artifact.\n\n```java\nclient.delete().subscribe();\n```"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteTag(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteTag(String tag)"
  name: "deleteTag(String tag)"
  nameWithType: "RegistryArtifactAsync.deleteTag(String tag)"
  summary: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The name of the tag that uniquely identifies the tag that needs to be deleted."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteTag(String tag)"
  desc: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the tag for the given repository.\n\n```java\nString tag = getTag();\n client.deleteTag(tag).subscribe();\n```"
  returns:
    description: "The completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteTagWithResponse(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteTagWithResponse(String tag)"
  name: "deleteTagWithResponse(String tag)"
  nameWithType: "RegistryArtifactAsync.deleteTagWithResponse(String tag)"
  summary: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The name of the 'tag' that uniquely identifies the 'tag' that needs to be deleted."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTagWithResponse(String tag)"
  desc: "Deletes the tag with the matching tag name for the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nDelete the tag for the given repository.\n\n```java\nString tag = getTag();\n client.deleteTagWithResponse(tag).subscribe();\n```"
  returns:
    description: "A REST response with completion signal."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteWithResponse()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "RegistryArtifactAsync.deleteWithResponse()"
  summary: "Deletes the registry artifact with the matching digest in the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"respository.\"></xref>"
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Deletes the registry artifact with the matching digest in the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"respository.\"></xref>\n\n**Code Samples**\n\nDelete the registry artifact.\n\n```java\nclient.deleteWithResponse().subscribe();\n```"
  returns:
    description: "A REST response with completion signal."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getFullyQualifiedReference()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getFullyQualifiedReference()"
  name: "getFullyQualifiedReference()"
  nameWithType: "RegistryArtifactAsync.getFullyQualifiedReference()"
  summary: "Gets the fully qualified reference for the current instance."
  syntax: "public String getFullyQualifiedReference()"
  desc: "Gets the fully qualified reference for the current instance. The fully qualifiedName is of the form 'registryName/repositoryName@digest' or 'registryName/repositoryName:tag' based on the docker naming convention and whether tag or digest was supplied to the constructor."
  returns:
    description: "Fully qualified reference of the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getManifestProperties()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getManifestProperties()"
  name: "getManifestProperties()"
  nameWithType: "RegistryArtifactAsync.getManifestProperties()"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<ArtifactManifestProperties> getManifestProperties()"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThis method can take in both a digest as well as a tag.\nIn case a tag is provided it calls the service to get the digest associated with the given tag.\n\n**Code Samples**\n\nGet the properties for the given repository.\n\n```java\nclient.getManifestProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Digest:%s,\", properties.getDigest());\n     });\n```"
  returns:
    description: "The <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <code>Digest</code>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getManifestPropertiesWithResponse()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getManifestPropertiesWithResponse()"
  name: "getManifestPropertiesWithResponse()"
  nameWithType: "RegistryArtifactAsync.getManifestPropertiesWithResponse()"
  summary: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public Mono<Response<ArtifactManifestProperties>> getManifestPropertiesWithResponse()"
  desc: "Gets the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with an artifact in given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThis method can take in both a digest as well as a tag.\nIn case a tag is provided it calls the service to get the digest associated with the given tag.\n\n**Code Samples**\n\nGet the properties for the given repository.\n\n```java\nclient.getManifestPropertiesWithResponse()\n     .subscribe(response -> {\n         final ArtifactManifestProperties properties = response.getValue();\n         System.out.printf(\"Digest:%s,\", properties.getDigest());\n     });\n```"
  returns:
    description: "A REST response containing <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given <code>Digest</code>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getRegistryEndpoint()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getRegistryEndpoint()"
  name: "getRegistryEndpoint()"
  nameWithType: "RegistryArtifactAsync.getRegistryEndpoint()"
  summary: "Gets the Azure Container Registry service endpoint for the current instance."
  syntax: "public String getRegistryEndpoint()"
  desc: "Gets the Azure Container Registry service endpoint for the current instance."
  returns:
    description: "The service endpoint for the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()"
  name: "getRepositoryName()"
  nameWithType: "RegistryArtifactAsync.getRepositoryName()"
  summary: "Gets the repository name for the current instance."
  syntax: "public String getRepositoryName()"
  desc: "Gets the repository name for the current instance. Gets the repository name for the current instance."
  returns:
    description: "Name of the repository for the current instance."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getTagProperties(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getTagProperties(String tag)"
  name: "getTagProperties(String tag)"
  nameWithType: "RegistryArtifactAsync.getTagProperties(String tag)"
  summary: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "name of the tag that uniquely identifies a given tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ArtifactTagProperties> getTagProperties(String tag)"
  desc: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nRetrieve the properties associated with the given tag.\n\n```java\nString tag = getTag();\n client.getTagProperties(tag).subscribe(properties -> {\n     System.out.printf(\"Digest:%s,\", properties.getDigest());\n });\n```"
  returns:
    description: "The <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given tag."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.getTagPropertiesWithResponse(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.getTagPropertiesWithResponse(String tag)"
  name: "getTagPropertiesWithResponse(String tag)"
  nameWithType: "RegistryArtifactAsync.getTagPropertiesWithResponse(String tag)"
  summary: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "name of the tag that uniquely identifies a given tag."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ArtifactTagProperties>> getTagPropertiesWithResponse(String tag)"
  desc: "Gets the tag properties associated with a given tag in the <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\n**Code Samples**\n\nRetrieve the properties associated with the given tag.\n\n```java\nString tag = getTag();\n client.getTagPropertiesWithResponse(tag).subscribe(response -> {\n     final ArtifactTagProperties properties = response.getValue();\n     System.out.printf(\"Digest:%s,\", properties.getDigest());\n });\n```"
  returns:
    description: "A REST response with the <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties\"></xref> associated with the given tag."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.listTagProperties()"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.listTagProperties()"
  name: "listTagProperties()"
  nameWithType: "RegistryArtifactAsync.listTagProperties()"
  summary: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  syntax: "public PagedFlux<ArtifactTagProperties> listTagProperties()"
  desc: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nIf you would like to specify the order in which the tags are returned please use the overload that takes in the options parameter <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.listTagProperties(com.azure.containers.containerregistry.models.ArtifactTagOrder)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listTagProperties(ArtifactTagOrder)\"></xref> listTagProperties\\} No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all the tags associated with the given repository.\n\n```java\nclient.listTagProperties().byPage(10)\n     .subscribe(tagPropertiesPagedResponse -> {\n         tagPropertiesPagedResponse.getValue().stream().forEach(\n             tagProperties -> System.out.println(tagProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.listTagProperties(com.azure.containers.containerregistry.models.ArtifactTagOrder)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.listTagProperties(ArtifactTagOrder order)"
  name: "listTagProperties(ArtifactTagOrder order)"
  nameWithType: "RegistryArtifactAsync.listTagProperties(ArtifactTagOrder order)"
  summary: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>."
  parameters:
  - description: "The order in which the tags should be returned by the service."
    name: "order"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagOrder?alt=com.azure.containers.containerregistry.models.ArtifactTagOrder&text=ArtifactTagOrder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ArtifactTagProperties> listTagProperties(ArtifactTagOrder order)"
  desc: "Fetches all the tags associated with the given <xref uid=\"com.azure.containers.containerregistry.RegistryArtifactAsync.getRepositoryName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"repository\"></xref>.\n\nThe method supports options to select the order in which the tags are returned by the service. Currently the service supports an ascending or descending order based on the last updated time of the tag. No assumptions on the order can be made if no options are provided to the service.\n\n**Code Samples**\n\nRetrieve all the tags associated with the given repository from the most recently updated to the last.\n\n```java\nclient.listTagProperties(ArtifactTagOrder.LAST_UPDATED_ON_DESCENDING)\n     .byPage(10)\n     .subscribe(tagPropertiesPagedResponse -> {\n         tagPropertiesPagedResponse.getValue()\n             .stream()\n             .forEach(tagProperties -> System.out.println(tagProperties.getDigest()));\n     });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of the artifacts for the given repository in the order specified by the options."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateManifestProperties(com.azure.containers.containerregistry.models.ArtifactManifestProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  name: "updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  nameWithType: "RegistryArtifactAsync.updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactManifestProperties\"></xref> of the artifact with the given `digest`."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"manifestProperties\"></xref> to be set."
    name: "manifestProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ArtifactManifestProperties> updateManifestProperties(ArtifactManifestProperties manifestProperties)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactManifestProperties\"></xref> of the artifact with the given `digest`. These properties set whether the given manifest can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given manifest.\n\n```java\nArtifactManifestProperties properties = getArtifactManifestProperties();\n client.updateManifestProperties(properties).subscribe();\n```"
  returns:
    description: "The completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateManifestPropertiesWithResponse(com.azure.containers.containerregistry.models.ArtifactManifestProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties)"
  name: "updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties)"
  nameWithType: "RegistryArtifactAsync.updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactManifestProperties\"></xref> of the artifact with the given `digest`."
  parameters:
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"manifestProperties\"></xref> to be set."
    name: "manifestProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ArtifactManifestProperties>> updateManifestPropertiesWithResponse(ArtifactManifestProperties manifestProperties)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactManifestProperties\"></xref> of the artifact with the given `digest`. These properties set whether the given manifest can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given manifest.\n\n```java\nArtifactManifestProperties properties = getArtifactManifestProperties();\n client.updateManifestPropertiesWithResponse(properties).subscribe();\n```"
  returns:
    description: "A REST response for the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactManifestProperties?alt=com.azure.containers.containerregistry.models.ArtifactManifestProperties&text=ArtifactManifestProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateTagProperties(java.lang.String,com.azure.containers.containerregistry.models.ArtifactTagProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  name: "updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  nameWithType: "RegistryArtifactAsync.updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the tag with the given name `tag`."
  parameters:
  - description: "Name of the tag that uniquely identifies it."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"tagProperties\"></xref> to be set."
    name: "tagProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ArtifactTagProperties> updateTagProperties(String tag, ArtifactTagProperties tagProperties)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the tag with the given name `tag`. These properties set whether the given tag can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given tag.\n\n```java\nArtifactTagProperties properties = getTagProperties();\n String tag = getTag();\n client.updateTagPropertiesWithResponse(tag, properties).subscribe();\n```"
  returns:
    description: "The completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateTagPropertiesWithResponse(java.lang.String,com.azure.containers.containerregistry.models.ArtifactTagProperties)"
  fullName: "com.azure.containers.containerregistry.RegistryArtifactAsync.updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties)"
  name: "updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties)"
  nameWithType: "RegistryArtifactAsync.updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties)"
  summary: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the tag with the given name `tag`.."
  parameters:
  - description: "Name of the tag that uniquely identifies it."
    name: "tag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> to be set."
    name: "tagProperties"
    type: "<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ArtifactTagProperties>> updateTagPropertiesWithResponse(String tag, ArtifactTagProperties tagProperties)"
  desc: "Update the properties <xref uid=\"com.azure.containers.containerregistry.models.ArtifactTagProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArtifactTagProperties\"></xref> of the tag with the given name `tag`.. These properties set whether the given tag can be updated, deleted and retrieved.\n\n**Code Samples**\n\nUpdate the writeable properties of a given tag.\n\n```java\nArtifactTagProperties properties = getTagProperties();\n String tag = getTag();\n client.updateTagPropertiesWithResponse(tag, properties).subscribe();\n```"
  returns:
    description: "A REST response for completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.ArtifactTagProperties?alt=com.azure.containers.containerregistry.models.ArtifactTagProperties&text=ArtifactTagProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a helper type that contains all the operations for artifacts in a given repository.\n\n**Instantiating an asynchronous RegistryArtifact helper.**\n\n```java\nRegistryArtifactAsync registryArtifactAsync = new ContainerRegistryClientBuilder()\n     .endpoint(endpoint)\n     .credential(credential)\n     .audience(ContainerRegistryAudience.AZURE_RESOURCE_MANAGER_PUBLIC_CLOUD)\n     .buildAsyncClient().getArtifact(repository, digest);\n```\n\nView <xref uid=\"com.azure.containers.containerregistry.ContainerRegistryClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.containers.containerregistry"
artifact: com.azure:azure-containers-containerregistry:1.0.7
