### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareDirectoryClient
  id: ShareDirectoryClient
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareDirectoryClient.create()
  - com.azure.storage.file.share.ShareDirectoryClient.createFile(java.lang.String,long)
  - com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.delete()
  - com.azure.storage.file.share.ShareDirectoryClient.deleteFile(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.exists()
  - com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles(boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  - com.azure.storage.file.share.ShareDirectoryClient.getAccountName()
  - com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath()
  - com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl()
  - com.azure.storage.file.share.ShareDirectoryClient.getFileClient(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareDirectoryClient.getProperties()
  - com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion()
  - com.azure.storage.file.share.ShareDirectoryClient.getShareName()
  - com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId()
  - com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories()
  - com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.share.ShareDirectoryClient.setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: ShareDirectoryClient
  nameWithType: ShareDirectoryClient
  fullName: com.azure.storage.file.share.ShareDirectoryClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service. Operations allowed by the client are creating, deleting and listing subdirectory and file, retrieving properties, setting metadata and list or force close handles of the directory or file.


    **Instantiating an Synchronous Directory Client**


    ```java

    ShareDirectoryClient client = new ShareFileClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildDirectoryClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareFileClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public class ShareDirectoryClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareDirectoryClient.ShareDirectoryClient(com.azure.storage.file.share.ShareDirectoryAsyncClient)
  id: ShareDirectoryClient(com.azure.storage.file.share.ShareDirectoryAsyncClient)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: ShareDirectoryClient(ShareDirectoryAsyncClient shareDirectoryAsyncClient)
  nameWithType: ShareDirectoryClient.ShareDirectoryClient(ShareDirectoryAsyncClient shareDirectoryAsyncClient)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.ShareDirectoryClient(ShareDirectoryAsyncClient shareDirectoryAsyncClient)
  overload: com.azure.storage.file.share.ShareDirectoryClient.ShareDirectoryClient*
  type: Constructor
  package: com.azure.storage.file.share
  summary: Creates a ShareDirectoryClient that wraps a ShareDirectoryAsyncClient and blocks requests.
  syntax:
    content: " ShareDirectoryClient(ShareDirectoryAsyncClient shareDirectoryAsyncClient)"
    parameters:
    - id: shareDirectoryAsyncClient
      type: com.azure.storage.file.share.ShareDirectoryAsyncClient
      description: ShareDirectoryAsyncClient that is used to send requests
- uid: com.azure.storage.file.share.ShareDirectoryClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: create()
  nameWithType: ShareDirectoryClient.create()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.create()
  overload: com.azure.storage.file.share.ShareDirectoryClient.create*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a directory in the file share and returns a response of <xref uid="com.azure.storage.file.share.models.ShareDirectoryInfo" data-throw-if-not-resolved="false">ShareDirectoryInfo</xref> to interact with it.


    **Code Samples**


    Create the directory


    ```java

    shareDirectoryClient.create();
     System.out.println("Completed creating the directory. ");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public ShareDirectoryInfo create()
    return:
      type: com.azure.storage.file.share.models.ShareDirectoryInfo
      description: The <xref uid="com.azure.storage.file.share.models.ShareDirectoryInfo" data-throw-if-not-resolved="false">directory info</xref>.
- uid: com.azure.storage.file.share.ShareDirectoryClient.createFile(java.lang.String,long)
  id: createFile(java.lang.String,long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createFile(String fileName, long maxSize)
  nameWithType: ShareDirectoryClient.createFile(String fileName, long maxSize)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createFile(String fileName, long maxSize)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in this directory with specific name, max number of results and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create 1k file with named "myFile"


    ```java

    ShareFileClient response = shareDirectoryClient.createFile("myfile", 1024);
     System.out.println("Completed creating the file: " + response);
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public ShareFileClient createFile(String fileName, long maxSize)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Size of the file
    return:
      type: com.azure.storage.file.share.ShareFileClient
      description: The ShareFileClient
- uid: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n Response<ShareFileClient> response = shareDirectoryClient.createFileWithResponse(\"myFile\", 1024,\n     httpHeaders, smbProperties, filePermission, Collections.singletonMap(\"directory\", \"metadata\"),\n     requestConditions, Duration.ofSeconds(1), new Context(key1, value1));\n System.out.println(\"Completed creating the file with status code: \" + response.getStatusCode());\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: public Response<ShareFileClient> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Max size of the file
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: THe file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create the file named "myFile"


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     Response<ShareFileClient> response = shareDirectoryClient.createFileWithResponse("myFile", 1024,
         httpHeaders, smbProperties, filePermission, Collections.singletonMap("directory", "metadata"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed creating the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Response<ShareFileClient> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Max size of the file
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: THe file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory(java.lang.String)
  id: createSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createSubdirectory(String subdirectoryName)
  nameWithType: ShareDirectoryClient.createSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a subdirectory under current directory with specific name and returns a response of ShareDirectoryClient to interact with it.


    **Code Samples**


    Create the sub directory "subdir"


    ```java

    shareDirectoryClient.createSubdirectory("subdir");
     System.out.println("Completed creating the subdirectory.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public ShareDirectoryClient createSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    return:
      type: com.azure.storage.file.share.ShareDirectoryClient
      description: The subdirectory client.
- uid: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a subdirectory under current directory with specific name , metadata and returns a response of ShareDirectoryClient to interact with it.


    **Code Samples**


    Create the subdirectory named "subdir", with metadata


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Response<ShareDirectoryClient> response = shareDirectoryClient.createSubdirectoryWithResponse("subdir",
         smbProperties, filePermission, Collections.singletonMap("directory", "metadata"),
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Creating the sub directory completed with status code %d", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Response<ShareDirectoryClient> createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the subdirectory
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryClient>
      description: A response containing the subdirectory client and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a directory in the file share and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create the directory


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Response<ShareDirectoryInfo> response = shareDirectoryClient.createWithResponse(smbProperties, filePermission,
         Collections.singletonMap("directory", "metadata"), Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed creating the directory with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Response<ShareDirectoryInfo> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the directory.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: delete()
  nameWithType: ShareDirectoryClient.delete()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.delete()
  overload: com.azure.storage.file.share.ShareDirectoryClient.delete*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the directory in the file share. The directory must be empty before it can be deleted.


    **Code Samples**


    Delete the directory


    ```java

    shareDirectoryClient.delete();
     System.out.println("Completed deleting the file.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public void delete()
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: ShareDirectoryClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteFile(String fileName)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    shareDirectoryClient.deleteFile("myfile");
     System.out.println("Completed deleting the file.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public void deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     Response<Void> response = shareDirectoryClient.deleteFileWithResponse("myfile", requestConditions,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed deleting the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Response<Void> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    Response<Void> response = shareDirectoryClient.deleteFileWithResponse("myfile",
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed deleting the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Response<Void> deleteFileWithResponse(String fileName, Duration timeout, Context context)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory(java.lang.String)
  id: deleteSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteSubdirectory(String subdirectoryName)
  nameWithType: ShareDirectoryClient.deleteSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the subdirectory with specific name in this directory. The directory must be empty before it can be deleted.


    **Code Samples**


    Delete the subdirectory named "subdir"


    ```java

    shareDirectoryClient.deleteSubdirectory("mysubdirectory");
     System.out.println("Complete deleting the subdirectory.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public void deleteSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: deleteSubdirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteSubdirectoryWithResponse(String subdirectoryName, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.deleteSubdirectoryWithResponse(String subdirectoryName, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse(String subdirectoryName, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the subdirectory with specific name in this directory. The directory must be empty before it can be deleted.


    **Code Samples**


    Delete the subdirectory named "subdir"


    ```java

    Response<Void> response = shareDirectoryClient.deleteSubdirectoryWithResponse("mysubdirectory",
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed deleting the subdirectory with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Response<Void> deleteSubdirectoryWithResponse(String subdirectoryName, Duration timeout, Context context)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: deleteWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: deleteWithResponse(Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.deleteWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the directory in the file share. The directory must be empty before it can be deleted.


    **Code Samples**


    Delete the directory


    ```java

    Response<Void> response = shareDirectoryClient.deleteWithResponse(Duration.ofSeconds(1), new Context(key1, value1));
     System.out.println("Completed deleting the file with status code: " + response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Response<Void> deleteWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: exists()
  nameWithType: ShareDirectoryClient.exists()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.exists()
  overload: com.azure.storage.file.share.ShareDirectoryClient.exists*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the directory this client represents exists in the cloud.


    **Code Samples**


    ```java

    System.out.printf("Exists? %b%n", client.exists());

    ```
  syntax:
    content: public Boolean exists()
    return:
      type: java.lang.Boolean
      description: Flag indicating existence of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: existsWithResponse(Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.existsWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the directory this client represents exists in the cloud.


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     System.out.printf("Exists? %b%n", client.existsWithResponse(timeout, context).getValue());
    ```
  syntax:
    content: public Response<Boolean> existsWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Boolean>
      description: Flag indicating existence of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles(boolean,java.time.Duration,com.azure.core.util.Context)
  id: forceCloseAllHandles(boolean,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: forceCloseAllHandles(boolean recursive, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.forceCloseAllHandles(boolean recursive, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles(boolean recursive, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes all handles opened on the directory at the service.


    **Code Samples**


    Force close all handles recursively.


    ```java

    CloseHandlesInfo closeHandlesInfo = shareDirectoryClient.forceCloseAllHandles(true, Duration.ofSeconds(30),
         Context.NONE);
     System.out.printf("Closed %d open handles on the directory%n", closeHandlesInfo.getClosedHandles());
     System.out.printf("Failed to close %d open handles on the directory%n", closeHandlesInfo.getFailedHandles());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public CloseHandlesInfo forceCloseAllHandles(boolean recursive, Duration timeout, Context context)
    parameters:
    - id: recursive
      type: boolean
      description: >-
        Flag indicating if the operation should apply to all subdirectories and files contained in the
         directory.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.storage.file.share.models.CloseHandlesInfo
      description: Information about the closed handles
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle(java.lang.String)
  id: forceCloseHandle(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: forceCloseHandle(String handleId)
  nameWithType: ShareDirectoryClient.forceCloseHandle(String handleId)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle(String handleId)
  overload: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the directory at the service. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareDirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)" data-throw-if-not-resolved="false">#listHandles(Integer, boolean, Duration, Context)</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareDirectoryClient.listHandles(null, true, Duration.ofSeconds(30), Context.NONE).forEach(handleItem -> {
         shareDirectoryClient.forceCloseHandle(handleItem.getHandleId());
         System.out.printf("Closed handle %s on resource %s%n", handleItem.getHandleId(), handleItem.getPath());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public CloseHandlesInfo forceCloseHandle(String handleId)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be closed.
    return:
      type: com.azure.storage.file.share.models.CloseHandlesInfo
      description: Information about the closed handles.
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: forceCloseHandleWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: forceCloseHandleWithResponse(String handleId, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.forceCloseHandleWithResponse(String handleId, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse(String handleId, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the directory at the service. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareDirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)" data-throw-if-not-resolved="false">#listHandles(Integer, boolean, Duration, Context)</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareDirectoryClient.listHandles(null, true, Duration.ofSeconds(30), Context.NONE).forEach(handleItem -> {
         Response<CloseHandlesInfo> closeResponse = shareDirectoryClient.forceCloseHandleWithResponse(
             handleItem.getHandleId(), Duration.ofSeconds(30), Context.NONE);
         System.out.printf("Closing handle %s on resource %s completed with status code %d%n",
             handleItem.getHandleId(), handleItem.getPath(), closeResponse.getStatusCode());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Response<CloseHandlesInfo> forceCloseHandleWithResponse(String handleId, Duration timeout, Context context)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be clsoed.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>
      description: A response that contains information about the closed handles, headers and response status code.
- uid: com.azure.storage.file.share.ShareDirectoryClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  nameWithType: ShareDirectoryClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  overload: com.azure.storage.file.share.ShareDirectoryClient.generateSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareDirectoryClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
    parameters:
    - id: shareServiceSasSignatureValues
      type: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.share.sas.ShareServiceSasSignatureValues" data-throw-if-not-resolved="false">ShareServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareDirectoryClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getAccountName()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath()
  id: getDirectoryPath()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getDirectoryPath()
  nameWithType: ShareDirectoryClient.getDirectoryPath()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get the directory path of the client.


    Get directory path.


    ```java

    String directoryPath = shareDirectoryClient.getDirectoryPath();
     System.out.println("The name of the directory is " + directoryPath);
    ```
  syntax:
    content: public String getDirectoryPath()
    return:
      type: java.lang.String
      description: The path of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl()
  id: getDirectoryUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getDirectoryUrl()
  nameWithType: ShareDirectoryClient.getDirectoryUrl()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage directory client.
  syntax:
    content: public String getDirectoryUrl()
    return:
      type: java.lang.String
      description: the URL of the storage directory client.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getFileClient(java.lang.String)
  id: getFileClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getFileClient(String fileName)
  nameWithType: ShareDirectoryClient.getFileClient(String fileName)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getFileClient(String fileName)
  overload: com.azure.storage.file.share.ShareDirectoryClient.getFileClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareFileClient that interacts with the specified file.


    If the file doesn't exist in this directory <xref uid="com.azure.storage.file.share.ShareFileClient.create(long)" data-throw-if-not-resolved="false">ShareFileClient#create(long)</xref> create\} in the client will need to be called before interaction with the file can happen.
  syntax:
    content: public ShareFileClient getFileClient(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    return:
      type: com.azure.storage.file.share.ShareFileClient
      description: a ShareFileClient that interacts with the specified share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareDirectoryClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareDirectoryClient.getProperties()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getProperties()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve directory properties


    ```java

    ShareDirectoryProperties response = shareDirectoryClient.getProperties();
     System.out.printf("Directory latest modified date is %s.", response.getLastModified());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties
  syntax:
    content: public ShareDirectoryProperties getProperties()
    return:
      type: com.azure.storage.file.share.models.ShareDirectoryProperties
      description: Storage directory properties
- uid: com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getPropertiesWithResponse(Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.getPropertiesWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve directory properties


    ```java

    Response<ShareDirectoryProperties> response = shareDirectoryClient.getPropertiesWithResponse(
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Directory latest modified date is %s.", response.getValue().getLastModified());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties
  syntax:
    content: public Response<ShareDirectoryProperties> getPropertiesWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryProperties>
      description: A response containing the storage directory properties with response status code and headers
- uid: com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareDirectoryClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getShareName()
  id: getShareName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getShareName()
  nameWithType: ShareDirectoryClient.getShareName()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getShareName()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getShareName*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get the share name of directory client.


    Get the share name.


    ```java

    String shareName = directoryAsyncClient.getShareName();
     System.out.println("The share name of the directory is " + shareName);
    ```
  syntax:
    content: public String getShareName()
    return:
      type: java.lang.String
      description: The share name of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId()
  id: getShareSnapshotId()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getShareSnapshotId()
  nameWithType: ShareDirectoryClient.getShareSnapshotId()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId()
  overload: com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId*
  type: Method
  package: com.azure.storage.file.share
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareDirectoryClient\" data-throw-if-not-resolved=\"false\">ShareDirectoryClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareDirectoryClient shareDirectoryClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"mydirectory\")\n     .snapshot(currentTime.toString())\n     .buildDirectoryClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareDirectoryClient.getShareSnapshotId());\n```"
  syntax:
    content: public String getShareSnapshotId()
    return:
      type: java.lang.String
      description: >-
        The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base
         share.
- uid: com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient(java.lang.String)
  id: getSubdirectoryClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: getSubdirectoryClient(String subdirectoryName)
  nameWithType: ShareDirectoryClient.getSubdirectoryClient(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareDirectoryClient that interacts with the specified directory.


    If the file doesn't exist in this directory <xref uid="com.azure.storage.file.share.ShareDirectoryClient.create()" data-throw-if-not-resolved="false">ShareDirectoryClient#create()</xref> create\} in the client will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryClient getSubdirectoryClient(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: com.azure.storage.file.share.ShareDirectoryClient
      description: a ShareDirectoryClient that interacts with the specified directory
- uid: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories()
  id: listFilesAndDirectories()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: listFilesAndDirectories()
  nameWithType: ShareDirectoryClient.listFilesAndDirectories()
  fullName: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories()
  overload: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists all sub-directories and files in this directory without their prefix or maxResult in single page.


    **Code Samples**


    List all sub-directories and files in the account


    ```java

    shareDirectoryClient.listFilesAndDirectories().forEach(
         fileRef -> System.out.printf("Is the resource a directory? %b. The resource name is: %s.",
             fileRef.isDirectory(), fileRef.getName())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files
  syntax:
    content: public PagedIterable<ShareFileItem> listFilesAndDirectories()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.ShareFileItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileItem" data-throw-if-not-resolved="false">File info</xref> in the storage directory
- uid: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  id: listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: listFilesAndDirectories(String prefix, Integer maxResultsPerPage, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists all sub-directories and files in this directory with their prefix or snapshots.


    **Code Samples**


    List all sub-directories and files in this directory with "subdir" prefix and return 10 results in the account


    ```java

    shareDirectoryClient.listFilesAndDirectories("subdir", 10, Duration.ofSeconds(1),
         new Context(key1, value1)).forEach(
             fileRef -> System.out.printf("Is the resource a directory? %b. The resource name is: %s.",
                 fileRef.isDirectory(), fileRef.getName())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files
  syntax:
    content: public PagedIterable<ShareFileItem> listFilesAndDirectories(String prefix, Integer maxResultsPerPage, Duration timeout, Context context)
    parameters:
    - id: prefix
      type: java.lang.String
      description: >-
        Optional prefix which filters the results to return only files and directories whose name begins
         with.
    - id: maxResultsPerPage
      type: java.lang.Integer
      description: >-
        Optional maximum number of files and/or directories to return per page.
         If the request does not specify maxResultsPerPage or specifies a value greater than 5,000,
         the server will return up to 5,000 items.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.ShareFileItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileItem" data-throw-if-not-resolved="false">File info</xref> in this directory with prefix and max number of return results.
- uid: com.azure.storage.file.share.ShareDirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)
  id: listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: listHandles(Integer maxResultsPerPage, boolean recursive, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.listHandles(Integer maxResultsPerPage, boolean recursive, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.listHandles(Integer maxResultsPerPage, boolean recursive, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.listHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of open handles on a directory or a file.


    **Code Samples**


    Get 10 handles with recursive call.


    ```java

    Iterable<HandleItem> result = shareDirectoryClient.listHandles(10, true, Duration.ofSeconds(1),
         new Context(key1, value1));
     System.out.printf("Get handles completed with handle id %s", result.iterator().next().getHandleId());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
  syntax:
    content: public PagedIterable<HandleItem> listHandles(Integer maxResultsPerPage, boolean recursive, Duration timeout, Context context)
    parameters:
    - id: maxResultsPerPage
      type: java.lang.Integer
      description: Optional maximum number of results will return per page
    - id: recursive
      type: boolean
      description: >-
        Specifies operation should apply to the directory specified in the URI, its files, its
         subdirectories and their files.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.HandleItem>
      description: <xref uid="com.azure.storage.file.share.models.HandleItem" data-throw-if-not-resolved="false">handles</xref> in the directory that satisfy the requirements
- uid: com.azure.storage.file.share.ShareDirectoryClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: ShareDirectoryClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryClient.setMetadata*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the directory.


    If `null` is passed for the metadata it will clear the metadata associated to the directory.


    **Code Samples**


    Set the metadata to "directory:updatedMetadata"


    ```java

    ShareDirectorySetMetadataInfo response =
         shareDirectoryClient.setMetadata(Collections.singletonMap("directory", "updatedMetadata"));
     System.out.printf("Setting the directory metadata completed with updated etag %s", response.getETag());
    ```


    Clear the metadata of the directory


    ```java

    ShareDirectorySetMetadataInfo response = shareDirectoryClient.setMetadata(null);
     System.out.printf("Cleared metadata.");
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata
  syntax:
    content: public ShareDirectorySetMetadataInfo setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to set on the directory, if null is passed the metadata for the directory is
         cleared
    return:
      type: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
      description: The information about the directory
- uid: com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the directory.


    If `null` is passed for the metadata it will clear the metadata associated to the directory.


    **Code Samples**


    Set the metadata to "directory:updatedMetadata"


    ```java

    Response<ShareDirectorySetMetadataInfo> response =
         shareDirectoryClient.setMetadataWithResponse(Collections.singletonMap("directory", "updatedMetadata"),
             Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Setting the directory metadata completed with updated etag %d", response.getStatusCode());
    ```


    Clear the metadata of the directory


    ```java

    Response<ShareDirectorySetMetadataInfo> response = shareDirectoryClient.setMetadataWithResponse(null,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Directory latest modified date is %s.", response.getStatusCode());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata
  syntax:
    content: public Response<ShareDirectorySetMetadataInfo> setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to set on the directory, if null is passed the metadata for the directory is
         cleared
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>
      description: A response containing the information about the directory and response status code
- uid: com.azure.storage.file.share.ShareDirectoryClient.setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  id: setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: setProperties(FileSmbProperties smbProperties, String filePermission)
  nameWithType: ShareDirectoryClient.setProperties(FileSmbProperties smbProperties, String filePermission)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setProperties(FileSmbProperties smbProperties, String filePermission)
  overload: com.azure.storage.file.share.ShareDirectoryClient.setProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the properties of this directory. The properties include the file SMB properties and the file permission.


    **Code Samples**


    Set directory properties


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     ShareDirectoryInfo response = shareDirectoryClient.setProperties(smbProperties, filePermission);
     System.out.printf("Directory latest modified date is %s.", response.getLastModified());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties
  syntax:
    content: public ShareDirectoryInfo setProperties(FileSmbProperties smbProperties, String filePermission)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    return:
      type: com.azure.storage.file.share.models.ShareDirectoryInfo
      description: The storage directory SMB properties
- uid: com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareDirectoryClient
  langs:
  - java
  name: setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)
  nameWithType: ShareDirectoryClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)
  overload: com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the properties of this directory. The properties include the file SMB properties and the file permission.


    **Code Samples**


    Set directory properties


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Response<ShareDirectoryInfo> response = shareDirectoryClient.setPropertiesWithResponse(smbProperties, filePermission,
         Duration.ofSeconds(1), new Context(key1, value1));
     System.out.printf("Directory latest modified date is %s.", response.getValue().getLastModified());
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties
  syntax:
    content: public Response<ShareDirectoryInfo> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout applied to the operation. If a response is not returned before the timeout
         concludes a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>
      description: A response containing the storage directory smb properties with headers and response status code
references:
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
  name: ShareDirectoryAsyncClient
  nameWithType: ShareDirectoryAsyncClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
- uid: com.azure.storage.file.share.ShareDirectoryClient.ShareDirectoryClient*
  name: ShareDirectoryClient
  nameWithType: ShareDirectoryClient.ShareDirectoryClient
  fullName: com.azure.storage.file.share.ShareDirectoryClient.ShareDirectoryClient
  package: com.azure.storage.file.share
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl*
  name: getDirectoryUrl
  nameWithType: ShareDirectoryClient.getDirectoryUrl
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareDirectoryClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileClient
  name: ShareFileClient
  nameWithType: ShareFileClient
  fullName: com.azure.storage.file.share.ShareFileClient
- uid: com.azure.storage.file.share.ShareDirectoryClient.getFileClient*
  name: getFileClient
  nameWithType: ShareDirectoryClient.getFileClient
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getFileClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient*
  name: getSubdirectoryClient
  nameWithType: ShareDirectoryClient.getSubdirectoryClient
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getSubdirectoryClient
  package: com.azure.storage.file.share
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.storage.file.share.ShareDirectoryClient.exists*
  name: exists
  nameWithType: ShareDirectoryClient.exists
  fullName: com.azure.storage.file.share.ShareDirectoryClient.exists
  package: com.azure.storage.file.share
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.Boolean>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: ShareDirectoryClient.existsWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.existsWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareDirectoryInfo
  name: ShareDirectoryInfo
  nameWithType: ShareDirectoryInfo
  fullName: com.azure.storage.file.share.models.ShareDirectoryInfo
- uid: com.azure.storage.file.share.ShareDirectoryClient.create*
  name: create
  nameWithType: ShareDirectoryClient.create
  fullName: com.azure.storage.file.share.ShareDirectoryClient.create
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.FileSmbProperties
  name: FileSmbProperties
  nameWithType: FileSmbProperties
  fullName: com.azure.storage.file.share.FileSmbProperties
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryInfo
    name: ShareDirectoryInfo
    fullName: com.azure.storage.file.share.models.ShareDirectoryInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.createWithResponse*
  name: createWithResponse
  nameWithType: ShareDirectoryClient.createWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.delete*
  name: delete
  nameWithType: ShareDirectoryClient.delete
  fullName: com.azure.storage.file.share.ShareDirectoryClient.delete
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: ShareDirectoryClient.deleteWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareDirectoryProperties
  name: ShareDirectoryProperties
  nameWithType: ShareDirectoryProperties
  fullName: com.azure.storage.file.share.models.ShareDirectoryProperties
- uid: com.azure.storage.file.share.ShareDirectoryClient.getProperties*
  name: getProperties
  nameWithType: ShareDirectoryClient.getProperties
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getProperties
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryProperties
    name: ShareDirectoryProperties
    fullName: com.azure.storage.file.share.models.ShareDirectoryProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareDirectoryClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.setProperties*
  name: setProperties
  nameWithType: ShareDirectoryClient.setProperties
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setProperties
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse*
  name: setPropertiesWithResponse
  nameWithType: ShareDirectoryClient.setPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
  name: ShareDirectorySetMetadataInfo
  nameWithType: ShareDirectorySetMetadataInfo
  fullName: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
- uid: com.azure.storage.file.share.ShareDirectoryClient.setMetadata*
  name: setMetadata
  nameWithType: ShareDirectoryClient.setMetadata
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setMetadata
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
    name: ShareDirectorySetMetadataInfo
    fullName: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: ShareDirectoryClient.setMetadataWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.setMetadataWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.ShareFileItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileItem
    name: ShareFileItem
    fullName: com.azure.storage.file.share.models.ShareFileItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories*
  name: listFilesAndDirectories
  nameWithType: ShareDirectoryClient.listFilesAndDirectories
  fullName: com.azure.storage.file.share.ShareDirectoryClient.listFilesAndDirectories
  package: com.azure.storage.file.share
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.file.share.models.HandleItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.HandleItem
    name: HandleItem
    fullName: com.azure.storage.file.share.models.HandleItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.listHandles*
  name: listHandles
  nameWithType: ShareDirectoryClient.listHandles
  fullName: com.azure.storage.file.share.ShareDirectoryClient.listHandles
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.CloseHandlesInfo
  name: CloseHandlesInfo
  nameWithType: CloseHandlesInfo
  fullName: com.azure.storage.file.share.models.CloseHandlesInfo
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle*
  name: forceCloseHandle
  nameWithType: ShareDirectoryClient.forceCloseHandle
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandle
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.CloseHandlesInfo
    name: CloseHandlesInfo
    fullName: com.azure.storage.file.share.models.CloseHandlesInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse*
  name: forceCloseHandleWithResponse
  nameWithType: ShareDirectoryClient.forceCloseHandleWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseHandleWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles*
  name: forceCloseAllHandles
  nameWithType: ShareDirectoryClient.forceCloseAllHandles
  fullName: com.azure.storage.file.share.ShareDirectoryClient.forceCloseAllHandles
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory*
  name: createSubdirectory
  nameWithType: ShareDirectoryClient.createSubdirectory
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryClient>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryClient
    name: ShareDirectoryClient
    fullName: com.azure.storage.file.share.ShareDirectoryClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse*
  name: createSubdirectoryWithResponse
  nameWithType: ShareDirectoryClient.createSubdirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createSubdirectoryWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory*
  name: deleteSubdirectory
  nameWithType: ShareDirectoryClient.deleteSubdirectory
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse*
  name: deleteSubdirectoryWithResponse
  nameWithType: ShareDirectoryClient.deleteSubdirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectoryWithResponse
  package: com.azure.storage.file.share
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.file.share.ShareDirectoryClient.createFile*
  name: createFile
  nameWithType: ShareDirectoryClient.createFile
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileHttpHeaders
  name: ShareFileHttpHeaders
  nameWithType: ShareFileHttpHeaders
  fullName: com.azure.storage.file.share.models.ShareFileHttpHeaders
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileClient>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileClient
    name: ShareFileClient
    fullName: com.azure.storage.file.share.ShareFileClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: ShareDirectoryClient.createFileWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.createFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareRequestConditions
  name: ShareRequestConditions
  nameWithType: ShareRequestConditions
  fullName: com.azure.storage.file.share.models.ShareRequestConditions
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteFile*
  name: deleteFile
  nameWithType: ShareDirectoryClient.deleteFile
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: ShareDirectoryClient.deleteFileWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryClient.deleteFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId*
  name: getShareSnapshotId
  nameWithType: ShareDirectoryClient.getShareSnapshotId
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getShareSnapshotId
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getShareName*
  name: getShareName
  nameWithType: ShareDirectoryClient.getShareName
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getShareName
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath*
  name: getDirectoryPath
  nameWithType: ShareDirectoryClient.getDirectoryPath
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getDirectoryPath
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryClient.getAccountName*
  name: getAccountName
  nameWithType: ShareDirectoryClient.getAccountName
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareDirectoryClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareDirectoryClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
  name: ShareServiceSasSignatureValues
  nameWithType: ShareServiceSasSignatureValues
  fullName: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
- uid: com.azure.storage.file.share.ShareDirectoryClient.generateSas*
  name: generateSas
  nameWithType: ShareDirectoryClient.generateSas
  fullName: com.azure.storage.file.share.ShareDirectoryClient.generateSas
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.share.models.ShareFileItem
  name: ShareFileItem
  nameWithType: ShareFileItem
  fullName: com.azure.storage.file.share.models.ShareFileItem
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: com.azure.storage.file.share.models.HandleItem
  name: HandleItem
  nameWithType: HandleItem
  fullName: com.azure.storage.file.share.models.HandleItem
