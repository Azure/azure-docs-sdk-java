### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  id: X509Certificates
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  children:
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(X509Certificates)
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  source:
    remote: &o0
      path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-java
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 90
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.</p>\r\n<p>this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.</p>\r\n<p>Users must provide the certificate as a<code>String \r\n    </code> , from a <b>.pem</b> files. This class will encapsulate both in a single <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Attestation\"></xref>. The following JSON is an example of the result of this class. <pre><code>{\r\n        \"primary\": {\r\n            \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"-----END CERTIFICATE-----\\n\"\r\n        },\r\n        \"secondary\": {\r\n            \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"-----END CERTIFICATE-----\\n\"\r\n        }\r\n    }\r\n    </code></pre></p>\r\n<p>After send an X509 certificate with success, the provisioning service will return the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CertificateInfo\"></xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509. <pre><code>{\r\n        \"primary\": {\r\n            \"info\": {\r\n                 \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n                 \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n                 \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"notBeforeUtc\": \"2017-11-14T12:34:18Z\",\r\n                 \"notAfterUtc\": \"2017-11-20T12:34:18Z\",\r\n                 \"serialNumber\": \"000000000000000000\",\r\n                 \"version\": 3\r\n             }\r\n        },\r\n        \"secondary\": {\r\n            \"info\": {\r\n                 \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n                 \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n                 \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"notBeforeUtc\": \"2017-11-14T12:34:18Z\",\r\n                 \"notAfterUtc\": \"2017-11-20T12:34:18Z\",\r\n                 \"serialNumber\": \"000000000000000000\",\r\n                 \"version\": 3\r\n             }\r\n        }\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: &o1
    content: public class X509Certificates
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  id: getPrimary()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: getPrimary()
  nameWithType: X509Certificates.getPrimary()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 182
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Getter for the primary.</p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000082\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of provisioning-service-client version 1.3.3, please use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getPrimaryFinal()\"></xref></p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>\r\n<p></p>"
  syntax:
    content: public X509CertificateWithInfo getPrimary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateWithInfo"></xref> with the stored primary. It cannot be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  id: getPrimaryFinal()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: getPrimaryFinal()
  nameWithType: X509Certificates.getPrimaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 193
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Getter for the primary.</p>\r\n<p></p>"
  syntax: &o2
    content: public final X509CertificateWithInfo getPrimaryFinal()
    return:
      type: 93de0ef9com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateWithInfo"></xref> with the stored primary. It cannot be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  id: getSecondary()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: getSecondary()
  nameWithType: X509Certificates.getSecondary()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 207
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Getter for the secondary.</p>\r\n<p>\r\n  <xrefsect id=\"deprecated_1_deprecated000083\">\r\n    <xreftitle>Deprecated</xreftitle>\r\n    <xrefdescription>\r\n      <p>as of provisioning-service-client version 1.3.3, please use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecondaryFinal()\"></xref></p>\r\n    </xrefdescription>\r\n  </xrefsect>\r\n</p>\r\n<p></p>"
  syntax:
    content: public X509CertificateWithInfo getSecondary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateWithInfo"></xref> with the stored secondary. It can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  id: getSecondaryFinal()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: getSecondaryFinal()
  nameWithType: X509Certificates.getSecondaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal*
  type: Method
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 218
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Getter for the secondary.</p>\r\n<p></p>"
  syntax: &o3
    content: public final X509CertificateWithInfo getSecondaryFinal()
    return:
      type: 93de0ef9com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: >-
        <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateWithInfo"></xref> with the stored secondary. It can be<code>null 

            </code> . </p>
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(X509Certificates)
  id: X509Certificates(X509Certificates)
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  langs:
  - java
  name: X509Certificates(X509Certificates x509Certificates)
  nameWithType: X509Certificates.X509Certificates(X509Certificates x509Certificates)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(X509Certificates x509Certificates)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  type: Constructor
  source:
    remote: *o0
    path: provisioning/provisioning-service-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/service/configs/X509Certificates.java
    startLine: 157
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: "<p>Constructor [COPY]</p>\r\n<p>Creates a new instance of the x509Certificates copping the content of the provided one.</p>\r\n<p></p>"
  syntax:
    content: public X509Certificates(X509Certificates x509Certificates)
    parameters:
    - id: x509Certificates
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
      description: >-
        <p>the original<code>X509Certificates 

            </code> to copy. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>if the provided x509Certificates is null or if its primary certificate is null. </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  name: X509Certificates
  nameWithType: X509Certificates.X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary*
  name: getPrimary
  nameWithType: X509Certificates.getPrimary
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: 93de0ef9com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
    name: X509CertificateWithInfo
    fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
    href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo.yml
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal*
  name: getPrimaryFinal
  nameWithType: X509Certificates.getPrimaryFinal
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary*
  name: getSecondary
  nameWithType: X509Certificates.getSecondary
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal*
  name: getSecondaryFinal
  nameWithType: X509Certificates.getSecondaryFinal
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo.yml
  name: X509CertificateWithInfo
  nameWithType: X509CertificateWithInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
  type: Class
  summary: "<p>Representation of a single Device Provisioning Service X509 Certificate with its info.</p>\r\n<p>this class creates a representation of an X509 certificate that can contains the certificate, the info of the certificate or both.</p>\r\n<p>To create this class, users must provide the certificate as a<code>String \r\n    </code> , from a <b>.pem</b> or <b>.cert</b> files.</p>\r\n<p>The following JSON is an example of the result of this class. <pre><code>{\r\n        \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                       \"-----END CERTIFICATE-----\\n\";\r\n    }\r\n    </code></pre></p>\r\n<p>After send an X509 certificate to the provisioning service, it will return the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CertificateInfo\"></xref>. User can get this info from this class,</p>\r\n<p>The following JSON is an example what info the provisioning service will return for X509. <pre><code>{\r\n        \"info\": {\r\n             \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n             \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n             \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n             \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n             \"notBeforeUtc\": \"2017-11-14T12:34:18Z\",\r\n             \"notAfterUtc\": \"2017-11-20T12:34:18Z\",\r\n             \"serialNumber\": \"000000000000000000\",\r\n             \"version\": 3\r\n        }\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax:
    content: public class X509CertificateWithInfo
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  summary: "<p>Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.</p>\r\n<p>this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.</p>\r\n<p>Users must provide the certificate as a<code>String \r\n    </code> , from a <b>.pem</b> files. This class will encapsulate both in a single <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Attestation\"></xref>. The following JSON is an example of the result of this class. <pre><code>{\r\n        \"primary\": {\r\n            \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"-----END CERTIFICATE-----\\n\"\r\n        },\r\n        \"secondary\": {\r\n            \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n                           \"-----END CERTIFICATE-----\\n\"\r\n        }\r\n    }\r\n    </code></pre></p>\r\n<p>After send an X509 certificate with success, the provisioning service will return the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CertificateInfo\"></xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509. <pre><code>{\r\n        \"primary\": {\r\n            \"info\": {\r\n                 \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n                 \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n                 \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"notBeforeUtc\": \"2017-11-14T12:34:18Z\",\r\n                 \"notAfterUtc\": \"2017-11-20T12:34:18Z\",\r\n                 \"serialNumber\": \"000000000000000000\",\r\n                 \"version\": 3\r\n             }\r\n        },\r\n        \"secondary\": {\r\n            \"info\": {\r\n                 \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n                 \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n                 \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n                 \"notBeforeUtc\": \"2017-11-14T12:34:18Z\",\r\n                 \"notAfterUtc\": \"2017-11-20T12:34:18Z\",\r\n                 \"serialNumber\": \"000000000000000000\",\r\n                 \"version\": 3\r\n             }\r\n        }\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: *o1
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  name: getPrimaryFinal()
  nameWithType: X509Certificates.getPrimaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  type: Method
  summary: "<p>Getter for the primary.</p>\r\n<p></p>"
  syntax: *o2
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.yml
  name: getSecondaryFinal()
  nameWithType: X509Certificates.getSecondaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  type: Method
  summary: "<p>Getter for the secondary.</p>\r\n<p></p>"
  syntax: *o3
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.yml
  name: X509Attestation
  nameWithType: X509Attestation
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
  type: Class
  summary: "<p>Representation of a single Device Provisioning Service X509 Attestation.</p>\r\n<p>The provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Attestation\"></xref>.</p>\r\n<p>An X509 attestation can contains one of the 3 types of certificate:</p>\r\n<p>\r\n  <variablelist>\r\n    <varlistentry>\r\n      <b>Client or Alias certificate:</b>\r\n    </varlistentry>\r\n    <li>\r\n      <p>Called on this class as clientCertificates, this certificate can authenticate a single device. </p>\r\n    </li>\r\n    <varlistentry>\r\n      <b>Signing or Root certificate:</b>\r\n    </varlistentry>\r\n    <li>\r\n      <p>Called on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices. </p>\r\n    </li>\r\n    <varlistentry>\r\n      <b>CA Reference:</b>\r\n    </varlistentry>\r\n    <li>\r\n      <p>Called on this class as X509CAReferences, this is a CA reference for a rootCertificate that can create multiple Client certificates to authenticate multiple devices. </p>\r\n    </li>\r\n  </variablelist>\r\n</p>\r\n<p>The provisioning service allows user to create <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref>. For all operations over <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> with <b>DICE</b>, user must provide a <b>clientCertificates</b>, and for operations over <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref>, user must provide a <b>rootCertificates</b> or a <b>X509CAReferences</b>.</p>\r\n<p>For each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.</p>\r\n<p>The provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getPrimaryX509CertificateInfo()\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecondaryX509CertificateInfo()\"></xref> will return the certificate information for the certificates.</p>\r\n<p></p>"
  syntax:
    content: public class X509Attestation extends Attestation
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  href: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo.yml
  name: X509CertificateInfo
  nameWithType: X509CertificateInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo
  type: Class
  summary: "<p>Representation of a single X509 Certificate Info for the Device Provisioning Service.</p>\r\n<p>User receive this info from the provisioning service as result of X509 operations.</p>\r\n<p>This info contains a set of parameters, The following JSON is an example of the X509 certificate info. <pre><code>{\r\n        \"subjectName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n        \"sha1Thumbprint\": \"0000000000000000000000000000000000\",\r\n        \"sha256Thumbprint\": \"validEnrollmentGroupId\",\r\n        \"issuerName\": \"CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US\",\r\n        \"notBeforeUtc\": \"2017-11-14T12:34:182Z\",\r\n        \"notAfterUtc\": \"2017-11-20T12:34:183Z\",\r\n        \"serialNumber\": \"000000000000000000\",\r\n        \"version\": 3\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax:
    content: public class X509CertificateInfo
