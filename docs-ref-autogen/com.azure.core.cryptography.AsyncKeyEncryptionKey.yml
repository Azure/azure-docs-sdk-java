### YamlMime:JavaType
uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey"
name: "AsyncKeyEncryptionKey"
nameWithType: "AsyncKeyEncryptionKey"
summary: "The Async<wbr>Key<wbr>Encryption<wbr>Key defines asynchronous methods for encrypting and decrypting keys, also known as key wrapping and unwrapping."
syntax: "public interface **AsyncKeyEncryptionKey**"
methods:
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId()"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.getKeyId()"
  name: "getKeyId()"
  nameWithType: "AsyncKeyEncryptionKey.getKeyId()"
  summary: "Retrieves the key identifier."
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<String> getKeyId()"
  desc: "Retrieves the key identifier."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing key identifier."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey(java.lang.String,byte[])"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.unwrapKey(String algorithm, byte[] encryptedKey)"
  name: "unwrapKey(String algorithm, byte[] encryptedKey)"
  nameWithType: "AsyncKeyEncryptionKey.unwrapKey(String algorithm, byte[] encryptedKey)"
  summary: "Decrypts the specified encrypted key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "The key wrap algorithm which was used to encrypt the specified encrypted key."
    name: "algorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The encrypted key content to be decrypted."
    name: "encryptedKey"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> unwrapKey(String algorithm, byte[] encryptedKey)"
  desc: "Decrypts the specified encrypted key using the specified algorithm."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the decrypted key bytes."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey(java.lang.String,byte[])"
  fullName: "com.azure.core.cryptography.AsyncKeyEncryptionKey.wrapKey(String algorithm, byte[] key)"
  name: "wrapKey(String algorithm, byte[] key)"
  nameWithType: "AsyncKeyEncryptionKey.wrapKey(String algorithm, byte[] key)"
  summary: "Encrypts the specified key using the specified algorithm."
  modifiers:
  - "abstract"
  parameters:
  - description: "The key wrap algorithm used to encrypt the specified key."
    name: "algorithm"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The key content to be encrypted."
    name: "key"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public abstract Mono<byte[]> wrapKey(String algorithm, byte[] key)"
  desc: "Encrypts the specified key using the specified algorithm."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the encrypted key bytes."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
type: "interface"
desc: "The AsyncKeyEncryptionKey defines asynchronous methods for encrypting and decrypting keys, also known as key wrapping and unwrapping. It also supports signing and verifying data using the configured key."
metadata: {}
package: "com.azure.core.cryptography"
artifact: com.azure:azure-core:1.53.0
