### YamlMime:JavaType
uid: "com.azure.monitor.query.LogsQueryAsyncClient"
fullName: "com.azure.monitor.query.LogsQueryAsyncClient"
name: "LogsQueryAsyncClient"
nameWithType: "LogsQueryAsyncClient"
summary: "The asynchronous client for querying Azure Monitor logs."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class LogsQueryAsyncClient"
methods:
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspace(java.lang.String,java.lang.String,com.azure.monitor.query.models.QueryTimeInterval,java.lang.Class<T>)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type)"
  name: "<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type)"
  nameWithType: "LogsQueryAsyncClient.<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type)"
  summary: "Returns all the Azure Monitor logs matching the given query in the specified workspace<wbr>Id."
  parameters:
  - description: "The workspaceId where the query should be executed."
    name: "workspaceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Kusto query to fetch the logs."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time period for which the logs should be looked up."
    name: "timeInterval"
    type: "<xref href=\"com.azure.monitor.query.models.QueryTimeInterval?alt=com.azure.monitor.query.models.QueryTimeInterval&text=QueryTimeInterval\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type the result of this query should be mapped to."
    name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<List<T>> <T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type)"
  desc: "Returns all the Azure Monitor logs matching the given query in the specified workspaceId."
  returns:
    description: "The logs matching the query as a list of objects of type T."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspace(java.lang.String,java.lang.String,com.azure.monitor.query.models.QueryTimeInterval,java.lang.Class<T>,com.azure.monitor.query.models.LogsQueryOptions)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  name: "<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  nameWithType: "LogsQueryAsyncClient.<T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  summary: "Returns all the Azure Monitor logs matching the given query in the specified workspace<wbr>Id."
  parameters:
  - description: "The workspaceId where the query should be executed."
    name: "workspaceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Kusto query to fetch the logs."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time period for which the logs should be looked up."
    name: "timeInterval"
    type: "<xref href=\"com.azure.monitor.query.models.QueryTimeInterval?alt=com.azure.monitor.query.models.QueryTimeInterval&text=QueryTimeInterval\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type the result of this query should be mapped to."
    name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The log query options to configure server timeout, set additional workspaces or enable\n statistics and rendering information in response."
    name: "options"
    type: "<xref href=\"com.azure.monitor.query.models.LogsQueryOptions?alt=com.azure.monitor.query.models.LogsQueryOptions&text=LogsQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<List<T>> <T>queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  desc: "Returns all the Azure Monitor logs matching the given query in the specified workspaceId."
  returns:
    description: "The logs matching the query as a list of objects of type T."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspaceWithResponse(java.lang.String,java.lang.String,com.azure.monitor.query.models.QueryTimeInterval,java.lang.Class<T>,com.azure.monitor.query.models.LogsQueryOptions)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.<T>queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  name: "<T>queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  nameWithType: "LogsQueryAsyncClient.<T>queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  summary: "Returns all the Azure Monitor logs matching the given query in the specified workspace<wbr>Id."
  parameters:
  - description: "The workspaceId where the query should be executed."
    name: "workspaceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Kusto query to fetch the logs."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time period for which the logs should be looked up."
    name: "timeInterval"
    type: "<xref href=\"com.azure.monitor.query.models.QueryTimeInterval?alt=com.azure.monitor.query.models.QueryTimeInterval&text=QueryTimeInterval\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type the result of this query should be mapped to."
    name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The log query options to configure server timeout, set additional workspaces or enable\n statistics and rendering information in response."
    name: "options"
    type: "<xref href=\"com.azure.monitor.query.models.LogsQueryOptions?alt=com.azure.monitor.query.models.LogsQueryOptions&text=LogsQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<List<T>>> <T>queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, Class<T> type, LogsQueryOptions options)"
  desc: "Returns all the Azure Monitor logs matching the given query in the specified workspaceId."
  returns:
    description: "The logs matching the query including the HTTP response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch(com.azure.monitor.query.models.LogsBatchQuery)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatch(LogsBatchQuery logsBatchQuery)"
  name: "queryBatch(LogsBatchQuery logsBatchQuery)"
  nameWithType: "LogsQueryAsyncClient.queryBatch(LogsBatchQuery logsBatchQuery)"
  summary: "Returns all the Azure Monitor logs matching the given batch of queries."
  parameters:
  - description: "<xref uid=\"com.azure.monitor.query.models.LogsBatchQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LogsBatchQuery\"></xref> containing a batch of queries."
    name: "logsBatchQuery"
    type: "<xref href=\"com.azure.monitor.query.models.LogsBatchQuery?alt=com.azure.monitor.query.models.LogsBatchQuery&text=LogsBatchQuery\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LogsBatchQueryResultCollection> queryBatch(LogsBatchQuery logsBatchQuery)"
  desc: "Returns all the Azure Monitor logs matching the given batch of queries.\n\n**Execute a batch of logs queries**\n\n```java\nLogsBatchQuery batchQuery = new LogsBatchQuery();\n String queryId1 = batchQuery.addWorkspaceQuery(\"{workspace-id-1}\", \"{kusto-query-1}\", QueryTimeInterval.LAST_DAY);\n String queryId2 = batchQuery.addWorkspaceQuery(\"{workspace-id-2}\", \"{kusto-query-2}\",\n         QueryTimeInterval.LAST_7_DAYS, new LogsQueryOptions().setServerTimeout(Duration.ofMinutes(2)));\n\n Mono<LogsBatchQueryResultCollection> batchQueryResponse = logsQueryAsyncClient.queryBatch(batchQuery);\n\n batchQueryResponse.subscribe(result -> {\n     for (LogsBatchQueryResult queryResult : result.getBatchResults()) {\n         System.out.println(\"Logs query result for query id \" + queryResult.getId());\n         for (LogsTableRow row : queryResult.getTable().getRows()) {\n             System.out.println(row.getRow()\n                     .stream()\n                     .map(LogsTableCell::getValueAsString)\n                     .collect(Collectors.joining(\",\")));\n         }\n     }\n });\n```"
  returns:
    description: "A collection of query results corresponding to the input batch of queries.@return"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.monitor.query.models.LogsBatchQueryResultCollection?alt=com.azure.monitor.query.models.LogsBatchQueryResultCollection&text=LogsBatchQueryResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatchWithResponse(com.azure.monitor.query.models.LogsBatchQuery)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryBatchWithResponse(LogsBatchQuery logsBatchQuery)"
  name: "queryBatchWithResponse(LogsBatchQuery logsBatchQuery)"
  nameWithType: "LogsQueryAsyncClient.queryBatchWithResponse(LogsBatchQuery logsBatchQuery)"
  summary: "Returns all the Azure Monitor logs matching the given batch of queries."
  parameters:
  - description: "<xref uid=\"com.azure.monitor.query.models.LogsBatchQuery\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LogsBatchQuery\"></xref> containing a batch of queries."
    name: "logsBatchQuery"
    type: "<xref href=\"com.azure.monitor.query.models.LogsBatchQuery?alt=com.azure.monitor.query.models.LogsBatchQuery&text=LogsBatchQuery\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LogsBatchQueryResultCollection>> queryBatchWithResponse(LogsBatchQuery logsBatchQuery)"
  desc: "Returns all the Azure Monitor logs matching the given batch of queries."
  returns:
    description: "A collection of query results corresponding to the input batch of queries.@return"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.monitor.query.models.LogsBatchQueryResultCollection?alt=com.azure.monitor.query.models.LogsBatchQueryResultCollection&text=LogsBatchQueryResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryWorkspace(java.lang.String,java.lang.String,com.azure.monitor.query.models.QueryTimeInterval)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval)"
  name: "queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval)"
  nameWithType: "LogsQueryAsyncClient.queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval)"
  summary: "Returns all the Azure Monitor logs matching the given query in the specified workspace<wbr>Id."
  parameters:
  - description: "The workspaceId where the query should be executed."
    name: "workspaceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Kusto query to fetch the logs."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time period for which the logs should be looked up."
    name: "timeInterval"
    type: "<xref href=\"com.azure.monitor.query.models.QueryTimeInterval?alt=com.azure.monitor.query.models.QueryTimeInterval&text=QueryTimeInterval\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LogsQueryResult> queryWorkspace(String workspaceId, String query, QueryTimeInterval timeInterval)"
  desc: "Returns all the Azure Monitor logs matching the given query in the specified workspaceId.\n\n**Query logs from the last 24 hours**\n\n```java\nMono<LogsQueryResult> queryResult = logsQueryAsyncClient.queryWorkspace(\"{workspace-id}\", \"{kusto-query}\",\n         QueryTimeInterval.LAST_DAY);\n queryResult.subscribe(result -> {\n     for (LogsTableRow row : result.getTable().getRows()) {\n         System.out.println(row.getRow()\n                 .stream()\n                 .map(LogsTableCell::getValueAsString)\n                 .collect(Collectors.joining(\",\")));\n     }\n });\n```"
  returns:
    description: "The logs matching the query."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.monitor.query.models.LogsQueryResult?alt=com.azure.monitor.query.models.LogsQueryResult&text=LogsQueryResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.monitor.query.LogsQueryAsyncClient.queryWorkspaceWithResponse(java.lang.String,java.lang.String,com.azure.monitor.query.models.QueryTimeInterval,com.azure.monitor.query.models.LogsQueryOptions)"
  fullName: "com.azure.monitor.query.LogsQueryAsyncClient.queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, LogsQueryOptions options)"
  name: "queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, LogsQueryOptions options)"
  nameWithType: "LogsQueryAsyncClient.queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, LogsQueryOptions options)"
  summary: "Returns all the Azure Monitor logs matching the given query in the specified workspace<wbr>Id."
  parameters:
  - description: "The workspaceId where the query should be executed."
    name: "workspaceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Kusto query to fetch the logs."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The time period for which the logs should be looked up."
    name: "timeInterval"
    type: "<xref href=\"com.azure.monitor.query.models.QueryTimeInterval?alt=com.azure.monitor.query.models.QueryTimeInterval&text=QueryTimeInterval\" data-throw-if-not-resolved=\"False\" />"
  - description: "The log query options to configure server timeout, set additional workspaces or enable\n statistics and rendering information in response."
    name: "options"
    type: "<xref href=\"com.azure.monitor.query.models.LogsQueryOptions?alt=com.azure.monitor.query.models.LogsQueryOptions&text=LogsQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LogsQueryResult>> queryWorkspaceWithResponse(String workspaceId, String query, QueryTimeInterval timeInterval, LogsQueryOptions options)"
  desc: "Returns all the Azure Monitor logs matching the given query in the specified workspaceId.\n\n**Query logs from the last 7 days and set the service timeout to 2 minutes**\n\n```java\nMono<Response<LogsQueryResult>> queryResult = logsQueryAsyncClient.queryWorkspaceWithResponse(\"{workspace-id}\",\n         \"{kusto-query}\",\n         QueryTimeInterval.LAST_7_DAYS,\n         new LogsQueryOptions().setServerTimeout(Duration.ofMinutes(2)));\n\n queryResult.subscribe(result -> {\n     for (LogsTableRow row : result.getValue().getTable().getRows()) {\n         System.out.println(row.getRow()\n                 .stream()\n                 .map(LogsTableCell::getValueAsString)\n                 .collect(Collectors.joining(\",\")));\n     }\n });\n```"
  returns:
    description: "The logs matching the query."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.monitor.query.models.LogsQueryResult?alt=com.azure.monitor.query.models.LogsQueryResult&text=LogsQueryResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "The asynchronous client for querying Azure Monitor logs.\n\n**Instantiating an asynchronous Logs query Client**\n\n```java\nLogsQueryAsyncClient logsQueryAsyncClient = new LogsQueryClientBuilder()\n         .credential(tokenCredential)\n         .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.monitor.query"
artifact: com.azure:azure-monitor-query:1.0.9
