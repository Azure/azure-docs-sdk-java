### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost._base_lease
  id: _base_lease
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._base_lease.BaseLease()
  - com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(BaseLease)
  - com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(String)
  - com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(String,String,boolean)
  - com.microsoft.azure.eventprocessorhost._base_lease.compareTo(BaseLease)
  - com.microsoft.azure.eventprocessorhost._base_lease.getIsOwned()
  - com.microsoft.azure.eventprocessorhost._base_lease.getOwner()
  - com.microsoft.azure.eventprocessorhost._base_lease.getPartitionId()
  - com.microsoft.azure.eventprocessorhost._base_lease.isOwnedBy(String)
  - com.microsoft.azure.eventprocessorhost._base_lease.setIsOwned(boolean)
  - com.microsoft.azure.eventprocessorhost._base_lease.setOwner(String)
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: BaseLease
  nameWithType: BaseLease
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 20
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>This lightweight base exists to allow <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()" data-throw-if-not-resolved="false">ILeaseManager.getAllLeases</xref> to operate as quickly as possible <ndash></ndash> for some lease manager implementations, loading the entire contents of a lease form the store may be expensive. <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> contains only the minimum amount of information required to allow PartitionScanner to operate. </p>

    <p>Note that a Lease object just carries information about a partition lease. The APIs to acquire/renew/release a lease are all on <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax: &o1
    content: public class BaseLease
  inheritance:
  - java.lang.Object
  - Comparable<BaseLease>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease()
  id: BaseLease()
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: BaseLease()
  nameWithType: BaseLease.BaseLease()
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
  overload: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 28
  package: com.microsoft.azure.eventprocessorhost
  summary: <p>Do not use; added only for GSon deserializer </p>
  syntax:
    content: protected BaseLease()
- uid: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(BaseLease)
  id: BaseLease(BaseLease)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: BaseLease(BaseLease source)
  nameWithType: BaseLease.BaseLease(BaseLease source)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease source)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 59
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create a <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> by duplicating the given Lease.</p>

    <p></p>
  syntax:
    content: public BaseLease(BaseLease source)
    parameters:
    - id: source
      type: com.microsoft.azure.eventprocessorhost._base_lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> to clone. </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(String)
  id: BaseLease(String)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: BaseLease(String partitionId)
  nameWithType: BaseLease.BaseLease(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 37
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create a <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> for the given partition.</p>

    <p></p>
  syntax:
    content: public BaseLease(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition id for this lease. </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease(String,String,boolean)
  id: BaseLease(String,String,boolean)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: BaseLease(String partitionId, String owner, boolean isOwned)
  nameWithType: BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 48
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create and populate a <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> for the given partition.</p>

    <p></p>
  syntax:
    content: public BaseLease(String partitionId, String owner, boolean isOwned)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>Partition id for this lease. </p>
    - id: owner
      type: "26831127"
      description: <p>Current owner of this lease, or empty. </p>
    - id: isOwned
      type: 4fc6e284
      description: <p>True if the lease is owned, false if not. </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.compareTo(BaseLease)
  id: compareTo(BaseLease)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: compareTo(BaseLease other)
  nameWithType: BaseLease.compareTo(BaseLease other)
  fullName: int com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease other)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.compareTo*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 126
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public int compareTo(BaseLease other)
    parameters:
    - id: other
      type: com.microsoft.azure.eventprocessorhost._base_lease
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getIsOwned()
  id: getIsOwned()
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: getIsOwned()
  nameWithType: BaseLease.getIsOwned()
  fullName: boolean com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
  overload: com.microsoft.azure.eventprocessorhost._base_lease.getIsOwned*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 97
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Get the owned state of the lease.</p>

    <p></p>
  syntax:
    content: public boolean getIsOwned()
    return:
      type: 4fc6e284
      description: <p>true if the lease is owned, or false if it is not </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getOwner()
  id: getOwner()
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: getOwner()
  nameWithType: BaseLease.getOwner()
  fullName: String com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
  overload: com.microsoft.azure.eventprocessorhost._base_lease.getOwner*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 70
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>The owner of a lease is the name of the <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref> instance which currently holds the lease.</p>

    <p></p>
  syntax:
    content: public String getOwner()
    return:
      type: "26831127"
      description: <p>name of the owning instance </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: BaseLease.getPartitionId()
  fullName: String com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
  overload: com.microsoft.azure.eventprocessorhost._base_lease.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 120
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Returns the id of the partition that this Lease is for. Immutable so there is no corresponding setter.</p>

    <p></p>
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
      description: <p>partition id </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.isOwnedBy(String)
  id: isOwnedBy(String)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: isOwnedBy(String possibleOwner)
  nameWithType: BaseLease.isOwnedBy(String possibleOwner)
  fullName: boolean com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String possibleOwner)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.isOwnedBy*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 107
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Convenience function for comparing possibleOwner against this.owner</p>

    <p></p>
  syntax:
    content: public boolean isOwnedBy(String possibleOwner)
    parameters:
    - id: possibleOwner
      type: "26831127"
      description: <p>name to check </p>
    return:
      type: 4fc6e284
      description: <p>true if possibleOwner is the same as this.owner, false otherwise </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.setIsOwned(boolean)
  id: setIsOwned(boolean)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: setIsOwned(boolean newState)
  nameWithType: BaseLease.setIsOwned(boolean newState)
  fullName: void com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean newState)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.setIsOwned*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 88
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Set the owned state of the lease.</p>

    <p></p>
  syntax:
    content: public void setIsOwned(boolean newState)
    parameters:
    - id: newState
      type: 4fc6e284
      description: <p>true if the lease is owned, or false if it is not </p>
- uid: com.microsoft.azure.eventprocessorhost._base_lease.setOwner(String)
  id: setOwner(String)
  parent: com.microsoft.azure.eventprocessorhost._base_lease
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  langs:
  - java
  name: setOwner(String owner)
  nameWithType: BaseLease.setOwner(String owner)
  fullName: void com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String owner)
  overload: com.microsoft.azure.eventprocessorhost._base_lease.setOwner*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/BaseLease.java
    startLine: 79
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Set the owner string. Used when a host steals a lease.</p>

    <p></p>
  syntax:
    content: public void setOwner(String owner)
    parameters:
    - id: owner
      type: "26831127"
      description: <p>name of the new owning instance </p>
references:
- uid: com.microsoft.azure.eventprocessorhost._base_lease.BaseLease*
  name: BaseLease
  nameWithType: BaseLease.BaseLease
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getOwner*
  name: getOwner
  nameWithType: BaseLease.getOwner
  fullName: String com.microsoft.azure.eventprocessorhost.BaseLease.getOwner
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._base_lease.setOwner*
  name: setOwner
  nameWithType: BaseLease.setOwner
  fullName: void com.microsoft.azure.eventprocessorhost.BaseLease.setOwner
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._base_lease.setIsOwned*
  name: setIsOwned
  nameWithType: BaseLease.setIsOwned
  fullName: void com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getIsOwned*
  name: getIsOwned
  nameWithType: BaseLease.getIsOwned
  fullName: boolean com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._base_lease.isOwnedBy*
  name: isOwnedBy
  nameWithType: BaseLease.isOwnedBy
  fullName: boolean com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._base_lease.getPartitionId*
  name: getPartitionId
  nameWithType: BaseLease.getPartitionId
  fullName: String com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId
  package: com.microsoft.azure.eventprocessorhost
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.eventprocessorhost._base_lease.compareTo*
  name: compareTo
  nameWithType: BaseLease.compareTo
  fullName: int com.microsoft.azure.eventprocessorhost.BaseLease.compareTo
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._complete_lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._complete_lease.yml
  name: CompleteLease
  nameWithType: CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._complete_lease" data-throw-if-not-resolved="false">CompleteLease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._complete_lease" data-throw-if-not-resolved="false">CompleteLease</xref> carries around complete information about a lease. By itself, it has the epoch. Any lease manager implementation can derive from this class to add data which the lease manager needs to function <ndash></ndash> see AzureBlobLease for an example. Having two distinct classes allows the code to clearly express which variety of lease any variable holds or a method requires, and avoids the problem of accidentally supplying a lightweight <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> to a method which needs the lease-manager-specific fields. </p>
  syntax:
    content: public class CompleteLease
- uid: com.microsoft.azure.eventprocessorhost._base_lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._base_lease.yml
  name: BaseLease
  nameWithType: BaseLease
  fullName: com.microsoft.azure.eventprocessorhost.BaseLease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly. </p>

    <p>This lightweight base exists to allow <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()" data-throw-if-not-resolved="false">ILeaseManager.getAllLeases</xref> to operate as quickly as possible <ndash></ndash> for some lease manager implementations, loading the entire contents of a lease form the store may be expensive. <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> contains only the minimum amount of information required to allow PartitionScanner to operate. </p>

    <p>Note that a Lease object just carries information about a partition lease. The APIs to acquire/renew/release a lease are all on <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: ILeaseManager
  nameWithType: ILeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager
  type: Interface
  syntax:
    content: public interface ILeaseManager
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: getAllLeases()
  nameWithType: ILeaseManager.getAllLeases()
  fullName: CompletableFuture<List<BaseLease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases()
  type: Method
  summary: >-
    <p>Returns lightweight <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref> for all leases, which includes name of owning host and whether lease is expired. An implementation is free to return <xref uid="com.microsoft.azure.eventprocessorhost._complete_lease" data-throw-if-not-resolved="false">CompleteLease</xref> or its own class derived from <xref uid="com.microsoft.azure.eventprocessorhost._complete_lease" data-throw-if-not-resolved="false">CompleteLease</xref>, but it is important that getAllLeases run as fast as possible. If it is faster to obtain only the information required for a <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref>, we heavily recommend doing that.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<List<BaseLease>> getAllLeases()
    return:
      type: 0eb76d20com.microsoft.azure.eventprocessorhost._base_leasee7daa122
      description: <p>CompletableFuture { -&gt;} list of <xref uid="com.microsoft.azure.eventprocessorhost._base_lease" data-throw-if-not-resolved="false">BaseLease</xref>, completes exceptionally on error. </p>
