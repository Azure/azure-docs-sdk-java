### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.BlobServiceAsyncClient
  id: BlobServiceAsyncClient
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob
  children:
  - com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer(java.lang.String)
  - com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType)
  - com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer(java.lang.String)
  - com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse(java.lang.String)
  - com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions)
  - com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(java.lang.String)
  - com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  - com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo()
  - com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse()
  - com.azure.storage.blob.BlobServiceAsyncClient.getAccountName()
  - com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl()
  - com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient(java.lang.String)
  - com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline()
  - com.azure.storage.blob.BlobServiceAsyncClient.getProperties()
  - com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse()
  - com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion()
  - com.azure.storage.blob.BlobServiceAsyncClient.getStatistics()
  - com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse()
  - com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers()
  - com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers(com.azure.storage.blob.models.ListBlobContainersOptions)
  - com.azure.storage.blob.BlobServiceAsyncClient.setProperties(com.azure.storage.blob.models.BlobServiceProperties)
  - com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.blob.models.BlobServiceProperties)
  langs:
  - java
  name: BlobServiceAsyncClient
  nameWithType: BlobServiceAsyncClient
  fullName: com.azure.storage.blob.BlobServiceAsyncClient
  type: Class
  package: com.azure.storage.blob
  summary: >-
    Client to a storage account. It may only be instantiated through a <xref uid="com.azure.storage.blob.BlobServiceClientBuilder" data-throw-if-not-resolved="false">BlobServiceClientBuilder</xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to blobs and containers.


    This client contains operations on a blob. Operations on a container are available on <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> through <xref uid="com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">#getBlobContainerAsyncClient(String)</xref>, and operations on a blob are available on <xref uid="com.azure.storage.blob.BlobAsyncClient" data-throw-if-not-resolved="false">BlobAsyncClient</xref>.


    Please see [here][] for more information on containers.


    Note this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> object through <xref uid="reactor.core.publisher.Mono.toFuture*" data-throw-if-not-resolved="false">Mono#toFuture()</xref>.



    [here]: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blobs-introduction
  syntax:
    content: public final class BlobServiceAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.BlobServiceAsyncClient.BlobServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.storage.blob.models.BlobContainerEncryptionScope,boolean)
  id: BlobServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,com.azure.storage.blob.models.BlobContainerEncryptionScope,boolean)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: BlobServiceAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, BlobContainerEncryptionScope blobContainerEncryptionScope, boolean anonymousAccess)
  nameWithType: BlobServiceAsyncClient.BlobServiceAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, BlobContainerEncryptionScope blobContainerEncryptionScope, boolean anonymousAccess)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.BlobServiceAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, BlobContainerEncryptionScope blobContainerEncryptionScope, boolean anonymousAccess)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.BlobServiceAsyncClient*
  type: Constructor
  package: com.azure.storage.blob
  summary: Package-private constructor for use by <xref uid="com.azure.storage.blob.BlobServiceClientBuilder" data-throw-if-not-resolved="false">BlobServiceClientBuilder</xref>.
  syntax:
    content: " BlobServiceAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, BlobContainerEncryptionScope blobContainerEncryptionScope, boolean anonymousAccess)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.blob.BlobServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: customerProvidedKey
      type: com.azure.storage.blob.models.CpkInfo
      description: >-
        Customer provided key used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: encryptionScope
      type: com.azure.storage.blob.implementation.models.EncryptionScope
      description: >-
        Encryption scope used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: blobContainerEncryptionScope
      type: com.azure.storage.blob.models.BlobContainerEncryptionScope
    - id: anonymousAccess
      type: boolean
      description: Whether or not the client was built with anonymousAccess
- uid: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer(java.lang.String)
  id: createBlobContainer(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: createBlobContainer(String containerName)
  nameWithType: BlobServiceAsyncClient.createBlobContainer(String containerName)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer(String containerName)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    BlobContainerAsyncClient blobContainerAsyncClient =
         client.createBlobContainer("containerName").block();
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public Mono<BlobContainerAsyncClient> createBlobContainer(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Name of the container to create
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.BlobContainerAsyncClient>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> used to interact with the container created.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType)
  id: createBlobContainerWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType)
  nameWithType: BlobServiceAsyncClient.createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n \n BlobContainerAsyncClient containerClient = client\n     .createBlobContainerWithResponse(\"containerName\", metadata, PublicAccessType.CONTAINER).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  syntax:
    content: public Mono<Response<BlobContainerAsyncClient>> createBlobContainerWithResponse(String containerName, Map<String,String> metadata, PublicAccessType accessType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Name of the container to create
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the container
    - id: accessType
      type: com.azure.storage.blob.models.PublicAccessType
      description: >-
        Specifies how the data in this container is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.BlobContainerAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> used to interact with the container created.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer(java.lang.String)
  id: deleteBlobContainer(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: deleteBlobContainer(String containerName)
  nameWithType: BlobServiceAsyncClient.deleteBlobContainer(String containerName)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer(String containerName)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Deletes the specified container in the storage account. If the container doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteBlobContainer("containerName").subscribe(
         response -> System.out.printf("Delete container completed%n"),
         error -> System.out.printf("Delete container failed: %s%n", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public Mono<Void> deleteBlobContainer(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Name of the container to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse(java.lang.String)
  id: deleteBlobContainerWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: deleteBlobContainerWithResponse(String containerName)
  nameWithType: BlobServiceAsyncClient.deleteBlobContainerWithResponse(String containerName)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse(String containerName)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Deletes the specified container in the storage account. If the container doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     client.deleteBlobContainerWithResponse("containerName").subscribe(response ->
         System.out.printf("Delete container completed with status %d%n", response.getStatusCode()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public Mono<Response<Void>> deleteBlobContainerWithResponse(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Name of the container to delete
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions)
  id: findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: findBlobsByTags(FindBlobsOptions options)
  nameWithType: BlobServiceAsyncClient.findBlobsByTags(FindBlobsOptions options)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(FindBlobsOptions options)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more information, including information on the query syntax, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.findBlobsByTags(new FindBlobsOptions("where=tag=value").setMaxResultsPerPage(10))
         .subscribe(blob -> System.out.printf("Name: %s%n", blob.getName()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/find-blobs-by-tags
  syntax:
    content: public PagedFlux<TaggedBlobItem> findBlobsByTags(FindBlobsOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.FindBlobsOptions
      description: <xref uid="com.azure.storage.blob.options.FindBlobsOptions" data-throw-if-not-resolved="false">FindBlobsOptions</xref>
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.TaggedBlobItem>
      description: A reactive response emitting the list of blobs.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(java.lang.String)
  id: findBlobsByTags(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: findBlobsByTags(String query)
  nameWithType: BlobServiceAsyncClient.findBlobsByTags(String query)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags(String query)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more information, including information on the query syntax, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.findBlobsByTags("where=tag=value").subscribe(blob -> System.out.printf("Name: %s%n", blob.getName()));

    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/find-blobs-by-tags
  syntax:
    content: public PagedFlux<TaggedBlobItem> findBlobsByTags(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: Filters the results to return only blobs whose tags match the specified expression.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.TaggedBlobItem>
      description: A reactive response emitting the list of blobs.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  id: generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  nameWithType: BlobServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas*
  type: Method
  package: com.azure.storage.blob
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref>. Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to blob containers and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n \n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n \n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  syntax:
    content: public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
    parameters:
    - id: accountSasSignatureValues
      type: com.azure.storage.common.sas.AccountSasSignatureValues
      description: <xref uid="com.azure.storage.common.sas.AccountSasSignatureValues" data-throw-if-not-resolved="false">AccountSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo()
  id: getAccountInfo()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getAccountInfo()
  nameWithType: BlobServiceAsyncClient.getAccountInfo()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getAccountInfo().subscribe(response ->
         System.out.printf("Account kind: %s, SKU: %s%n", response.getAccountKind(), response.getSkuName()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
  syntax:
    content: public Mono<StorageAccountInfo> getAccountInfo()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.StorageAccountInfo>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing the storage account info.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse()
  id: getAccountInfoWithResponse()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getAccountInfoWithResponse()
  nameWithType: BlobServiceAsyncClient.getAccountInfoWithResponse()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getAccountInfoWithResponse().subscribe(response ->
         System.out.printf("Account kind: %s, SKU: %s%n", response.getValue().getAccountKind(),
             response.getValue().getSkuName()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
  syntax:
    content: public Mono<Response<StorageAccountInfo>> getAccountInfoWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.StorageAccountInfo>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> the storage account
         info.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: BlobServiceAsyncClient.getAccountName()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountName()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.blob
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl()
  id: getAccountUrl()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getAccountUrl()
  nameWithType: BlobServiceAsyncClient.getAccountUrl()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the URL of the storage account represented by this client.
  syntax:
    content: public String getAccountUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient(java.lang.String)
  id: getBlobContainerAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getBlobContainerAsyncClient(String containerName)
  nameWithType: BlobServiceAsyncClient.getBlobContainerAsyncClient(String containerName)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient(String containerName)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Initializes a <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> object pointing to the specified container. This method does not create a container. It simply constructs the URL to the container and offers access to methods relevant to containers.


    **Code Samples**


    ```java

    BlobContainerAsyncClient blobContainerAsyncClient = client.getBlobContainerAsyncClient("containerName");

    ```
  syntax:
    content: public BlobContainerAsyncClient getBlobContainerAsyncClient(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: >-
        The name of the container to point to. A value of null or empty string will be interpreted
                              as pointing to the root container and will be replaced by "$root".
    return:
      type: com.azure.storage.blob.BlobContainerAsyncClient
      description: A <xref uid="com.azure.storage.blob.BlobContainerAsyncClient" data-throw-if-not-resolved="false">BlobContainerAsyncClient</xref> object pointing to the specified container
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: BlobServiceAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: BlobServiceAsyncClient.getProperties()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getProperties()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets the properties of a storage account\\u2019s Blob service. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getProperties().subscribe(response ->
         System.out.printf("Hour metrics enabled: %b, Minute metrics enabled: %b%n",
             response.getHourMetrics().isEnabled(),
             response.getMinuteMetrics().isEnabled()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
  syntax:
    content: public Mono<BlobServiceProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlobServiceProperties>
      description: A reactive response containing the storage account properties.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse()
  id: getPropertiesWithResponse()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse()
  nameWithType: BlobServiceAsyncClient.getPropertiesWithResponse()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets the properties of a storage account\\u2019s Blob service. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getPropertiesWithResponse().subscribe(response ->
         System.out.printf("Hour metrics enabled: %b, Minute metrics enabled: %b%n",
             response.getValue().getHourMetrics().isEnabled(),
             response.getValue().getMinuteMetrics().isEnabled()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
  syntax:
    content: public Mono<Response<BlobServiceProperties>> getPropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobServiceProperties>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the storage
         account properties.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: BlobServiceAsyncClient.getServiceVersion()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the service version the client is using.
  syntax:
    content: public BlobServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.blob.BlobServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getStatistics()
  id: getStatistics()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getStatistics()
  nameWithType: BlobServiceAsyncClient.getStatistics()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getStatistics()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getStatistics*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getStatistics().subscribe(response ->
         System.out.printf("Geo-replication status: %s%n", response.getGeoReplication().getStatus()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
  syntax:
    content: public Mono<BlobServiceStatistics> getStatistics()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlobServiceStatistics>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the storage account statistics.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse()
  id: getStatisticsWithResponse()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getStatisticsWithResponse()
  nameWithType: BlobServiceAsyncClient.getStatisticsWithResponse()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Retrieves statistics related to replication for the Blob service. It is only available on the secondary location endpoint when read-access geo-redundant replication is enabled for the storage account. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.getStatisticsWithResponse().subscribe(response ->
         System.out.printf("Geo-replication status: %s%n", response.getValue().getGeoReplication().getStatus()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
  syntax:
    content: public Mono<Response<BlobServiceStatistics>> getStatisticsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobServiceStatistics>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> containing the
         storage account statistics.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  nameWithType: BlobServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets a user delegation key for use with this account's blob storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    client.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->
         System.out.printf("User delegation key: %s%n", response.getValue()));
    ```
  syntax:
    content: public Mono<UserDelegationKey> getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.UserDelegationKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the user delegation key.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  nameWithType: BlobServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets a user delegation key for use with this account's blob storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    client.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->
         System.out.printf("User delegation key: %s%n", response.getValue().getValue()));
    ```
  syntax:
    content: public Mono<Response<UserDelegationKey>> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.UserDelegationKey>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> containing the user
         delegation key.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers()
  id: listBlobContainers()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: listBlobContainers()
  nameWithType: BlobServiceAsyncClient.listBlobContainers()
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers()
  overload: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns a reactive Publisher emitting all the containers in this account lazily as needed. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.listBlobContainers().subscribe(container -> System.out.printf("Name: %s%n", container.getName()));

    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2
  syntax:
    content: public PagedFlux<BlobContainerItem> listBlobContainers()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.BlobContainerItem>
      description: A reactive response emitting the list of containers.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers(com.azure.storage.blob.models.ListBlobContainersOptions)
  id: listBlobContainers(com.azure.storage.blob.models.ListBlobContainersOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: listBlobContainers(ListBlobContainersOptions options)
  nameWithType: BlobServiceAsyncClient.listBlobContainers(ListBlobContainersOptions options)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers(ListBlobContainersOptions options)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns a reactive Publisher emitting all the containers in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobContainersOptions options = new ListBlobContainersOptions()\n     .setPrefix(\"containerNamePrefixToMatch\")\n     .setDetails(new BlobContainerListDetails().setRetrieveMetadata(true));\n \n client.listBlobContainers(options).subscribe(container -> System.out.printf(\"Name: %s%n\", container.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  syntax:
    content: public PagedFlux<BlobContainerItem> listBlobContainers(ListBlobContainersOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.models.ListBlobContainersOptions
      description: A <xref uid="com.azure.storage.blob.models.ListBlobContainersOptions" data-throw-if-not-resolved="false">ListBlobContainersOptions</xref> which specifies what data should be returned by the service.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.BlobContainerItem>
      description: A reactive response emitting the list of containers.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.setProperties(com.azure.storage.blob.models.BlobServiceProperties)
  id: setProperties(com.azure.storage.blob.models.BlobServiceProperties)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: setProperties(BlobServiceProperties properties)
  nameWithType: BlobServiceAsyncClient.setProperties(BlobServiceProperties properties)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.setProperties(BlobServiceProperties properties)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.setProperties*
  type: Method
  package: com.azure.storage.blob
  summary: "Sets properties for a storage account's Blob service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nBlobRetentionPolicy loggingRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(3);\n BlobRetentionPolicy metricsRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(1);\n \n BlobServiceProperties properties = new BlobServiceProperties()\n     .setLogging(new BlobAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n \n client.setProperties(properties).subscribe(\n     response -> System.out.printf(\"Setting properties completed%n\"),\n     error -> System.out.printf(\"Setting properties failed: %s%n\", error));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties"
  syntax:
    content: public Mono<Void> setProperties(BlobServiceProperties properties)
    parameters:
    - id: properties
      type: com.azure.storage.blob.models.BlobServiceProperties
      description: Configures the service.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the storage account properties.
- uid: com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.blob.models.BlobServiceProperties)
  id: setPropertiesWithResponse(com.azure.storage.blob.models.BlobServiceProperties)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobServiceAsyncClient
  langs:
  - java
  name: setPropertiesWithResponse(BlobServiceProperties properties)
  nameWithType: BlobServiceAsyncClient.setPropertiesWithResponse(BlobServiceProperties properties)
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse(BlobServiceProperties properties)
  overload: com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Sets properties for a storage account's Blob service endpoint. For more information, see the [Azure Docs][]. Note that setting the default service version has no effect when using this client because this client explicitly sets the version header on each request, overriding the default.\n\nThis method checks to ensure the properties being sent follow the specifications indicated in the Azure Docs. If CORS policies are set, CORS parameters that are not set default to the empty string.\n\n**Code Samples**\n\n```java\nBlobRetentionPolicy loggingRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(3);\n BlobRetentionPolicy metricsRetentionPolicy = new BlobRetentionPolicy().setEnabled(true).setDays(1);\n \n BlobServiceProperties properties = new BlobServiceProperties()\n     .setLogging(new BlobAnalyticsLogging()\n         .setWrite(true)\n         .setDelete(true)\n         .setRetentionPolicy(loggingRetentionPolicy))\n     .setHourMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy))\n     .setMinuteMetrics(new BlobMetrics()\n         .setEnabled(true)\n         .setRetentionPolicy(metricsRetentionPolicy));\n \n client.setPropertiesWithResponse(properties).subscribe(response ->\n     System.out.printf(\"Setting properties completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties"
  syntax:
    content: public Mono<Response<Void>> setPropertiesWithResponse(BlobServiceProperties properties)
    parameters:
    - id: properties
      type: com.azure.storage.blob.models.BlobServiceProperties
      description: Configures the service.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the storage account properties.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.BlobServiceVersion
  name: BlobServiceVersion
  nameWithType: BlobServiceVersion
  fullName: com.azure.storage.blob.BlobServiceVersion
- uid: com.azure.storage.blob.models.CpkInfo
  name: CpkInfo
  nameWithType: CpkInfo
  fullName: com.azure.storage.blob.models.CpkInfo
- uid: com.azure.storage.blob.implementation.models.EncryptionScope
  name: EncryptionScope
  nameWithType: EncryptionScope
  fullName: com.azure.storage.blob.implementation.models.EncryptionScope
- uid: com.azure.storage.blob.models.BlobContainerEncryptionScope
  name: BlobContainerEncryptionScope
  nameWithType: BlobContainerEncryptionScope
  fullName: com.azure.storage.blob.models.BlobContainerEncryptionScope
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.BlobServiceAsyncClient.BlobServiceAsyncClient*
  name: BlobServiceAsyncClient
  nameWithType: BlobServiceAsyncClient.BlobServiceAsyncClient
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.BlobServiceAsyncClient
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerAsyncClient
  name: BlobContainerAsyncClient
  nameWithType: BlobContainerAsyncClient
  fullName: com.azure.storage.blob.BlobContainerAsyncClient
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient*
  name: getBlobContainerAsyncClient
  nameWithType: BlobServiceAsyncClient.getBlobContainerAsyncClient
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getBlobContainerAsyncClient
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: BlobServiceAsyncClient.getHttpPipeline
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getHttpPipeline
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: BlobServiceAsyncClient.getServiceVersion
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getServiceVersion
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.BlobContainerAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.BlobContainerAsyncClient
    name: BlobContainerAsyncClient
    fullName: com.azure.storage.blob.BlobContainerAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer*
  name: createBlobContainer
  nameWithType: BlobServiceAsyncClient.createBlobContainer
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainer
  package: com.azure.storage.blob
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.PublicAccessType
  name: PublicAccessType
  nameWithType: PublicAccessType
  fullName: com.azure.storage.blob.models.PublicAccessType
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.BlobContainerAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.BlobContainerAsyncClient
    name: BlobContainerAsyncClient
    fullName: com.azure.storage.blob.BlobContainerAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse*
  name: createBlobContainerWithResponse
  nameWithType: BlobServiceAsyncClient.createBlobContainerWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.createBlobContainerWithResponse
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer*
  name: deleteBlobContainer
  nameWithType: BlobServiceAsyncClient.deleteBlobContainer
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainer
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse*
  name: deleteBlobContainerWithResponse
  nameWithType: BlobServiceAsyncClient.deleteBlobContainerWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.deleteBlobContainerWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl*
  name: getAccountUrl
  nameWithType: BlobServiceAsyncClient.getAccountUrl
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountUrl
  package: com.azure.storage.blob
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.BlobContainerItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobContainerItem
    name: BlobContainerItem
    fullName: com.azure.storage.blob.models.BlobContainerItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers*
  name: listBlobContainers
  nameWithType: BlobServiceAsyncClient.listBlobContainers
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.listBlobContainers
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.ListBlobContainersOptions
  name: ListBlobContainersOptions
  nameWithType: ListBlobContainersOptions
  fullName: com.azure.storage.blob.models.ListBlobContainersOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.blob.models.TaggedBlobItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.TaggedBlobItem
    name: TaggedBlobItem
    fullName: com.azure.storage.blob.models.TaggedBlobItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags*
  name: findBlobsByTags
  nameWithType: BlobServiceAsyncClient.findBlobsByTags
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTags
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.options.FindBlobsOptions
  name: FindBlobsOptions
  nameWithType: FindBlobsOptions
  fullName: com.azure.storage.blob.options.FindBlobsOptions
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlobServiceProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobServiceProperties
    name: BlobServiceProperties
    fullName: com.azure.storage.blob.models.BlobServiceProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getProperties*
  name: getProperties
  nameWithType: BlobServiceAsyncClient.getProperties
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getProperties
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobServiceProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobServiceProperties
    name: BlobServiceProperties
    fullName: com.azure.storage.blob.models.BlobServiceProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: BlobServiceAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.BlobServiceProperties
  name: BlobServiceProperties
  nameWithType: BlobServiceProperties
  fullName: com.azure.storage.blob.models.BlobServiceProperties
- uid: com.azure.storage.blob.BlobServiceAsyncClient.setProperties*
  name: setProperties
  nameWithType: BlobServiceAsyncClient.setProperties
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.setProperties
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse*
  name: setPropertiesWithResponse
  nameWithType: BlobServiceAsyncClient.setPropertiesWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.setPropertiesWithResponse
  package: com.azure.storage.blob
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.UserDelegationKey>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.UserDelegationKey
    name: UserDelegationKey
    fullName: com.azure.storage.blob.models.UserDelegationKey
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey*
  name: getUserDelegationKey
  nameWithType: BlobServiceAsyncClient.getUserDelegationKey
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.UserDelegationKey>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.UserDelegationKey
    name: UserDelegationKey
    fullName: com.azure.storage.blob.models.UserDelegationKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse*
  name: getUserDelegationKeyWithResponse
  nameWithType: BlobServiceAsyncClient.getUserDelegationKeyWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKeyWithResponse
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlobServiceStatistics>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobServiceStatistics
    name: BlobServiceStatistics
    fullName: com.azure.storage.blob.models.BlobServiceStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getStatistics*
  name: getStatistics
  nameWithType: BlobServiceAsyncClient.getStatistics
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getStatistics
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobServiceStatistics>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobServiceStatistics
    name: BlobServiceStatistics
    fullName: com.azure.storage.blob.models.BlobServiceStatistics
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse*
  name: getStatisticsWithResponse
  nameWithType: BlobServiceAsyncClient.getStatisticsWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getStatisticsWithResponse
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.StorageAccountInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.StorageAccountInfo
    name: StorageAccountInfo
    fullName: com.azure.storage.blob.models.StorageAccountInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo*
  name: getAccountInfo
  nameWithType: BlobServiceAsyncClient.getAccountInfo
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfo
  package: com.azure.storage.blob
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.StorageAccountInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.StorageAccountInfo
    name: StorageAccountInfo
    fullName: com.azure.storage.blob.models.StorageAccountInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse*
  name: getAccountInfoWithResponse
  nameWithType: BlobServiceAsyncClient.getAccountInfoWithResponse
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountInfoWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: BlobServiceAsyncClient.getAccountName
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.getAccountName
  package: com.azure.storage.blob
- uid: com.azure.storage.common.sas.AccountSasSignatureValues
  spec.java:
  - uid: com.azure.storage.common.sas.AccountSasSignatureValues
    name: AccountSasSignatureValues
    fullName: com.azure.storage.common.sas.AccountSasSignatureValues
- uid: com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas*
  name: generateAccountSas
  nameWithType: BlobServiceAsyncClient.generateAccountSas
  fullName: com.azure.storage.blob.BlobServiceAsyncClient.generateAccountSas
  package: com.azure.storage.blob
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.blob.models.BlobContainerItem
  name: BlobContainerItem
  nameWithType: BlobContainerItem
  fullName: com.azure.storage.blob.models.BlobContainerItem
- uid: com.azure.storage.blob.models.TaggedBlobItem
  name: TaggedBlobItem
  nameWithType: TaggedBlobItem
  fullName: com.azure.storage.blob.models.TaggedBlobItem
- uid: com.azure.storage.blob.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.blob.models.UserDelegationKey
- uid: com.azure.storage.blob.models.BlobServiceStatistics
  name: BlobServiceStatistics
  nameWithType: BlobServiceStatistics
  fullName: com.azure.storage.blob.models.BlobServiceStatistics
- uid: com.azure.storage.blob.models.StorageAccountInfo
  name: StorageAccountInfo
  nameWithType: StorageAccountInfo
  fullName: com.azure.storage.blob.models.StorageAccountInfo
