### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery"
fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery"
name: "CosmosQuery"
nameWithType: "CosmosQuery"
summary: "Class for cosmos query"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosQuery"
constructors:
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(com.azure.spring.data.cosmos.core.query.Criteria)"
methods:
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(com.azure.spring.data.cosmos.core.query.CriteriaType)"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(java.util.List<java.lang.String>)"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int)"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Pageable)"
- "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Sort)"
type: "class"
metadata: {}
package: "com.azure.spring.data.cosmos.core.query"
artifact: com.azure:azure-spring-data-cosmos:3.3.0
