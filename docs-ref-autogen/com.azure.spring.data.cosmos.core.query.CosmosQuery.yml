### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  id: CosmosQuery
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query
  children:
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(com.azure.spring.data.cosmos.core.query.Criteria)
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(com.azure.spring.data.cosmos.core.query.CriteriaType)
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(java.util.List<java.lang.String>)
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int)
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Pageable)
  - com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Sort)
  langs:
  - java
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
  type: Class
  package: com.azure.spring.data.cosmos.core.query
  summary: Class for cosmos query
  syntax:
    content: public class CosmosQuery
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(com.azure.spring.data.cosmos.core.query.Criteria)
  id: CosmosQuery(com.azure.spring.data.cosmos.core.query.Criteria)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: CosmosQuery(Criteria criteria)
  nameWithType: CosmosQuery.CosmosQuery(Criteria criteria)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(Criteria criteria)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery*
  type: Constructor
  package: com.azure.spring.data.cosmos.core.query
  summary: Initialization
  syntax:
    content: public CosmosQuery(Criteria criteria)
    parameters:
    - id: criteria
      type: com.azure.spring.data.cosmos.core.query.Criteria
      description: object
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()
  id: getCriteria()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: getCriteria()
  nameWithType: CosmosQuery.getCriteria()
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To get Criteria object
  syntax:
    content: public Criteria getCriteria()
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
      description: Criteria
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(com.azure.spring.data.cosmos.core.query.CriteriaType)
  id: getCriteriaByType(com.azure.spring.data.cosmos.core.query.CriteriaType)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: getCriteriaByType(CriteriaType criteriaType)
  nameWithType: CosmosQuery.getCriteriaByType(CriteriaType criteriaType)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(CriteriaType criteriaType)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To get criteria by type
  syntax:
    content: public Optional<Criteria> getCriteriaByType(CriteriaType criteriaType)
    parameters:
    - id: criteriaType
      type: com.azure.spring.data.cosmos.core.query.CriteriaType
      description: the criteria type
    return:
      type: java.util.Optional<com.azure.spring.data.cosmos.core.query.Criteria>
      description: Optional
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()
  id: getLimit()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: getLimit()
  nameWithType: CosmosQuery.getLimit()
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To get limit number
  syntax:
    content: public int getLimit()
    return:
      type: int
      description: int limit
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()
  id: getPageable()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: getPageable()
  nameWithType: CosmosQuery.getPageable()
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To get Pageable object
  syntax:
    content: public Pageable getPageable()
    return:
      type: org.springframework.data.domain.Pageable
      description: Pageable
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()
  id: getSort()
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: getSort()
  nameWithType: CosmosQuery.getSort()
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To get Sort object
  syntax:
    content: public Sort getSort()
    return:
      type: org.springframework.data.domain.Sort
      description: Sort
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(java.util.List<java.lang.String>)
  id: isCrossPartitionQuery(java.util.List<java.lang.String>)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: isCrossPartitionQuery(List<String> partitionKeys)
  nameWithType: CosmosQuery.isCrossPartitionQuery(List<String> partitionKeys)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(List<String> partitionKeys)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: Indicate if DocumentQuery should enable cross partition query.
  syntax:
    content: public boolean isCrossPartitionQuery(List<String> partitionKeys)
    parameters:
    - id: partitionKeys
      type: java.util.List<java.lang.String>
      description: The list of partitionKey names.
    return:
      type: boolean
      description: If DocumentQuery should enable cross partition query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int)
  id: setLimit(int)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: setLimit(int limit)
  nameWithType: CosmosQuery.setLimit(int limit)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int limit)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: To set limit number
  syntax:
    content: public void setLimit(int limit)
    parameters:
    - id: limit
      type: int
      description: int
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Pageable)
  id: with(org.springframework.data.domain.Pageable)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: with(Pageable pageable)
  nameWithType: CosmosQuery.with(Pageable pageable)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.with(Pageable pageable)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.with*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: With Sort
  syntax:
    content: public CosmosQuery with(Pageable pageable)
    parameters:
    - id: pageable
      type: org.springframework.data.domain.Pageable
      description: Sort
    return:
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: DocumentQuery object
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Sort)
  id: with(org.springframework.data.domain.Sort)
  artifact: com.azure:azure-spring-data-cosmos:3.1.0
  parent: com.azure.spring.data.cosmos.core.query.CosmosQuery
  langs:
  - java
  name: with(Sort sort)
  nameWithType: CosmosQuery.with(Sort sort)
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.with(Sort sort)
  overload: com.azure.spring.data.cosmos.core.query.CosmosQuery.with*
  type: Method
  package: com.azure.spring.data.cosmos.core.query
  summary: With Sort
  syntax:
    content: public CosmosQuery with(Sort sort)
    parameters:
    - id: sort
      type: org.springframework.data.domain.Sort
      description: Sort
    return:
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: DocumentQuery object
references:
- uid: com.azure.spring.data.cosmos.core.query.Criteria
  name: Criteria
  nameWithType: Criteria
  fullName: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery*
  name: CosmosQuery
  nameWithType: CosmosQuery.CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery
  package: com.azure.spring.data.cosmos.core.query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria*
  name: getCriteria
  nameWithType: CosmosQuery.getCriteria
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria
  package: com.azure.spring.data.cosmos.core.query
- uid: org.springframework.data.domain.Sort
  spec.java:
  - uid: org.springframework.data.domain.Sort
    name: Sort
    fullName: org.springframework.data.domain.Sort
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort*
  name: getSort
  nameWithType: CosmosQuery.getSort
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort
  package: com.azure.spring.data.cosmos.core.query
- uid: org.springframework.data.domain.Pageable
  spec.java:
  - uid: org.springframework.data.domain.Pageable
    name: Pageable
    fullName: org.springframework.data.domain.Pageable
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable*
  name: getPageable
  nameWithType: CosmosQuery.getPageable
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable
  package: com.azure.spring.data.cosmos.core.query
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit*
  name: getLimit
  nameWithType: CosmosQuery.getLimit
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit
  package: com.azure.spring.data.cosmos.core.query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit*
  name: setLimit
  nameWithType: CosmosQuery.setLimit
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit
  package: com.azure.spring.data.cosmos.core.query
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.with*
  name: with
  nameWithType: CosmosQuery.with
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.with
  package: com.azure.spring.data.cosmos.core.query
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery*
  name: isCrossPartitionQuery
  nameWithType: CosmosQuery.isCrossPartitionQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery
  package: com.azure.spring.data.cosmos.core.query
- uid: com.azure.spring.data.cosmos.core.query.CriteriaType
  name: CriteriaType
  nameWithType: CriteriaType
  fullName: com.azure.spring.data.cosmos.core.query.CriteriaType
- uid: java.util.Optional<com.azure.spring.data.cosmos.core.query.Criteria>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: com.azure.spring.data.cosmos.core.query.Criteria
    name: Criteria
    fullName: com.azure.spring.data.cosmos.core.query.Criteria
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType*
  name: getCriteriaByType
  nameWithType: CosmosQuery.getCriteriaByType
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType
  package: com.azure.spring.data.cosmos.core.query
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.String
  name: String
  nameWithType: String
  fullName: java.lang.String
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
