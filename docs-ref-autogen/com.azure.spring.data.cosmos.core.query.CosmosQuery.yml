### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery"
fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery"
name: "CosmosQuery"
nameWithType: "CosmosQuery"
summary: "Class for cosmos query"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **CosmosQuery**"
constructors:
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(com.azure.spring.data.cosmos.core.query.Criteria)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.CosmosQuery(Criteria criteria)"
  name: "CosmosQuery(Criteria criteria)"
  nameWithType: "CosmosQuery.CosmosQuery(Criteria criteria)"
  summary: "Initialization"
  parameters:
  - description: "object"
    name: "criteria"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.Criteria?alt=com.azure.spring.data.cosmos.core.query.Criteria&text=Criteria\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQuery(Criteria criteria)"
  desc: "Initialization"
methods:
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteria()"
  name: "getCriteria()"
  nameWithType: "CosmosQuery.getCriteria()"
  summary: "To get Criteria object"
  syntax: "public Criteria getCriteria()"
  desc: "To get Criteria object"
  returns:
    description: "Criteria"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.Criteria?alt=com.azure.spring.data.cosmos.core.query.Criteria&text=Criteria\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(com.azure.spring.data.cosmos.core.query.CriteriaType)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getCriteriaByType(CriteriaType criteriaType)"
  name: "getCriteriaByType(CriteriaType criteriaType)"
  nameWithType: "CosmosQuery.getCriteriaByType(CriteriaType criteriaType)"
  summary: "To get criteria by type"
  parameters:
  - description: "the criteria type"
    name: "criteriaType"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CriteriaType?alt=com.azure.spring.data.cosmos.core.query.CriteriaType&text=CriteriaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Optional<Criteria> getCriteriaByType(CriteriaType criteriaType)"
  desc: "To get criteria by type"
  returns:
    description: "Optional"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">Optional</a>&lt;<xref href=\"com.azure.spring.data.cosmos.core.query.Criteria?alt=com.azure.spring.data.cosmos.core.query.Criteria&text=Criteria\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getLimit()"
  name: "getLimit()"
  nameWithType: "CosmosQuery.getLimit()"
  summary: "To get limit number"
  syntax: "public int getLimit()"
  desc: "To get limit number"
  returns:
    description: "int limit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getOffset()"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getOffset()"
  name: "getOffset()"
  nameWithType: "CosmosQuery.getOffset()"
  summary: "To get offset number"
  syntax: "public long getOffset()"
  desc: "To get offset number"
  returns:
    description: "long offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getPageable()"
  name: "getPageable()"
  nameWithType: "CosmosQuery.getPageable()"
  summary: "To get Pageable object"
  syntax: "public Pageable getPageable()"
  desc: "To get Pageable object"
  returns:
    description: "Pageable"
    type: "<xref href=\"org.springframework.data.domain.Pageable?alt=org.springframework.data.domain.Pageable&text=Pageable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.<T>getPartitionKeyValue(java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getPartitionKeyValue(Class<T> domainType)"
  name: "getPartitionKeyValue(Class<T> domainType)"
  nameWithType: "CosmosQuery.getPartitionKeyValue(Class<T> domainType)"
  summary: "Returns partition key value based on the criteria."
  parameters:
  - description: "domain type"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Optional<Object> <T>getPartitionKeyValue(Class<T> domainType)"
  desc: "Returns partition key value based on the criteria."
  returns:
    description: "Optional of partition key value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">Optional</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>&gt;"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.getSort()"
  name: "getSort()"
  nameWithType: "CosmosQuery.getSort()"
  summary: "To get Sort object"
  syntax: "public Sort getSort()"
  desc: "To get Sort object"
  returns:
    description: "Sort"
    type: "<xref href=\"org.springframework.data.domain.Sort?alt=org.springframework.data.domain.Sort&text=Sort\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.hasPartitionKeyCriteria(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.hasPartitionKeyCriteria(String partitionKeyFieldName)"
  name: "hasPartitionKeyCriteria(String partitionKeyFieldName)"
  nameWithType: "CosmosQuery.hasPartitionKeyCriteria(String partitionKeyFieldName)"
  summary: "Returns true if this criteria or sub-criteria has partition key field present as one of the subjects."
  parameters:
  - description: "partition key field name"
    name: "partitionKeyFieldName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public boolean hasPartitionKeyCriteria(String partitionKeyFieldName)"
  desc: "Returns true if this criteria or sub-criteria has partition key field present as one of the subjects."
  returns:
    description: "returns true if this criteria or sub criteria has partition key field present as one of the subjects."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(java.util.List<java.lang.String>)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.isCrossPartitionQuery(List<String> partitionKeys)"
  name: "isCrossPartitionQuery(List<String> partitionKeys)"
  nameWithType: "CosmosQuery.isCrossPartitionQuery(List<String> partitionKeys)"
  summary: "Indicate if Document<wbr>Query should enable cross partition query."
  parameters:
  - description: "The list of partitionKey names."
    name: "partitionKeys"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public boolean isCrossPartitionQuery(List<String> partitionKeys)"
  desc: "Indicate if DocumentQuery should enable cross partition query."
  returns:
    description: "If DocumentQuery should enable cross partition query"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.setLimit(int limit)"
  name: "setLimit(int limit)"
  nameWithType: "CosmosQuery.setLimit(int limit)"
  summary: "To set limit number"
  deprecatedTag: "use with<wbr>Limit instead"
  parameters:
  - description: "int"
    name: "limit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html\">@Deprecated</a></br>public void setLimit(int limit)"
  desc: "To set limit number"
  hasDeprecatedTag: true
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Pageable)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(Pageable pageable)"
  name: "with(Pageable pageable)"
  nameWithType: "CosmosQuery.with(Pageable pageable)"
  summary: "With Sort"
  parameters:
  - description: "Sort"
    name: "pageable"
    type: "<xref href=\"org.springframework.data.domain.Pageable?alt=org.springframework.data.domain.Pageable&text=Pageable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQuery with(Pageable pageable)"
  desc: "With Sort"
  returns:
    description: "CosmosQuery object"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(org.springframework.data.domain.Sort)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.with(Sort sort)"
  name: "with(Sort sort)"
  nameWithType: "CosmosQuery.with(Sort sort)"
  summary: "With Sort"
  parameters:
  - description: "Sort"
    name: "sort"
    type: "<xref href=\"org.springframework.data.domain.Sort?alt=org.springframework.data.domain.Sort&text=Sort\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQuery with(Sort sort)"
  desc: "With Sort"
  returns:
    description: "CosmosQuery object"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.withLimit(int)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.withLimit(int limit)"
  name: "withLimit(int limit)"
  nameWithType: "CosmosQuery.withLimit(int limit)"
  summary: "To set limit number"
  parameters:
  - description: "int"
    name: "limit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQuery withLimit(int limit)"
  desc: "To set limit number"
  returns:
    description: "CosmosQuery object"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.query.CosmosQuery.withOffsetAndLimit(long,int)"
  fullName: "com.azure.spring.data.cosmos.core.query.CosmosQuery.withOffsetAndLimit(long offset, int limit)"
  name: "withOffsetAndLimit(long offset, int limit)"
  nameWithType: "CosmosQuery.withOffsetAndLimit(long offset, int limit)"
  summary: "To set limit number and offset number"
  parameters:
  - description: "long"
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "int"
    name: "limit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQuery withOffsetAndLimit(long offset, int limit)"
  desc: "To set limit number and offset number"
  returns:
    description: "CosmosQuery object"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Class for cosmos query"
metadata: {}
package: "com.azure.spring.data.cosmos.core.query"
artifact: com.azure:azure-spring-data-cosmos:5.21.0
