### YamlMime:ManagedReference
items:
- uid: system.fabric._fault_type
  id: _fault_type
  parent: system.fabric
  children:
  - system.fabric._fault_type.getValue()
  - system.fabric._fault_type.Invalid
  - system.fabric._fault_type.Permanent
  - system.fabric._fault_type.Transient
  href: system.fabric._fault_type.yml
  langs:
  - java
  name: FaultType
  nameWithType: FaultType
  fullName: system.fabric.FaultType
  type: Enum
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
    startLine: 13
  package: system.fabric
  summary: "<p>Indicates the type of fault that a service reports: invalid, transient or permanent. </p>\r\n<p>\r\n  <b>Remarks : </b> Services can report faults during runtime by using the <xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(FaultType)</xref> method to indicate the type of fault. </p>"
  syntax:
    content: public enum FaultType
  inheritance:
  - java.lang.Object
  - java.lang.Enum<FaultType>
- uid: system.fabric._fault_type.getValue()
  id: getValue()
  parent: system.fabric._fault_type
  href: system.fabric._fault_type.yml
  langs:
  - java
  name: getValue()
  nameWithType: FaultType.getValue()
  fullName: system.fabric.FaultType.getValue()
  overload: system.fabric._fault_type.getValue*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
    startLine: 64
  package: system.fabric
  summary: "<p>Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.FaultType</xref> value. </p>"
  syntax:
    content: public int getValue()
    return:
      type: f75371fa
      description: <p>Returns an integer representing <xref uid="" data-throw-if-not-resolved="false">system.fabric.FaultType</xref></p>
- uid: system.fabric._fault_type.Invalid
  id: Invalid
  parent: system.fabric._fault_type
  href: system.fabric._fault_type.yml
  langs:
  - java
  name: Invalid
  nameWithType: FaultType.Invalid
  fullName: system.fabric.FaultType.Invalid
  type: Field
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
    startLine: 18
  package: system.fabric
  summary: "<p>The type is invalid. </p>"
  syntax:
    content: public Invalid=(0)
- uid: system.fabric._fault_type.Permanent
  id: Permanent
  parent: system.fabric._fault_type
  href: system.fabric._fault_type.yml
  langs:
  - java
  name: Permanent
  nameWithType: FaultType.Permanent
  fullName: system.fabric.FaultType.Permanent
  type: Field
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
    startLine: 36
  package: system.fabric
  summary: "<p>A permanent fault is a fault that the replica cannot recover from. This type of fault indicates that the replica can make no further progress and should be removed and replaced. </p>\r\n<p>\r\n  <b>Remarks : </b> An example of a permanent fault would be a persistent stateful service that tries to write information to disk and determines that the disk had been removed or was unusable. Calling <xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(system.fabric.FaultType)</xref> and reporting a permanent fault result in the service to be Aborted via StatefulServiceReplica <xref uid=\"system.fabric._stateful_service_replica.abort()\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceReplica#abort()</xref> or StatelessServiceInstance <xref uid=\"system.fabric._stateless_service_instance.abort()\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceInstance#abort()</xref> without a chance to gracefully clean up state or complete operations. Therefore, if any cleanup or other long-running work is necessary, it should be performed before <xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(system.fabric.FaultType)</xref> is called. Note that the distinction between permanent and transient faults is useful mainly for persistent stateful services. Other than the call sequence, the effects on other service types are the same: the replica or instance is removed, all state at that replica or instance is lost, and the replica or instance is recreated, potentially in a different location. </p>"
  syntax:
    content: public Permanent=(1)
- uid: system.fabric._fault_type.Transient
  id: Transient
  parent: system.fabric._fault_type
  href: system.fabric._fault_type.yml
  langs:
  - java
  name: Transient
  nameWithType: FaultType.Transient
  fullName: system.fabric.FaultType.Transient
  type: Field
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FaultType.java
    startLine: 51
  package: system.fabric
  summary: "<p>A transient fault indicates that there is some temporary condition which prevents the replica from making further progress or from processing further user requests. </p>\r\n<p>\r\n  <b> Remarks : </b> An example of a transient fault is a service that determines that a portion of its state or some reference file is corrupted, but can be repaired if the service were to be re-initialized. In this case, the service uses the <xref uid=\"system.fabric._service_partition.reportFault(FaultType)\" data-throw-if-not-resolved=\"false\">system.fabric.ServicePartition#reportFault(system.fabric.FaultType)</xref> method to report a transient fault. Reporting a transient fault closes the service via StatefulServiceReplica. <xref uid=\"system.fabric._stateful_service_replica.closeAsync(CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceReplica#closeAsync(system.fabric.CancellationToken)</xref> or StatelessServiceInstance <xref uid=\"system.fabric._stateless_service_instance.closeAsync(CancellationToken)\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceInstance#closeAsync(system.fabric.CancellationToken)</xref>. Note that for stateless and stateful services, volatile transient faults are not very useful because state is not preserved across the failure. For these services, whether to use transient or permanent faults is dependent on whether the service should be gracefully closed asynchronously with cleanup or ungracefully closed with a synchronous StatefulServiceReplica <xref uid=\"system.fabric._stateful_service_replica.abort()\" data-throw-if-not-resolved=\"false\">system.fabric.StatefulServiceReplica#abort()</xref> or StatelessServiceInstance <xref uid=\"system.fabric._stateless_service_instance.abort()\" data-throw-if-not-resolved=\"false\">system.fabric.StatelessServiceInstance#abort()</xref> method.</p>"
  syntax:
    content: public Transient=(2)
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: system.fabric._fault_type.getValue*
  name: getValue
  nameWithType: FaultType.getValue
  fullName: system.fabric.FaultType.getValue
  package: system.fabric
- uid: system.fabric._service_partition.reportFault(FaultType)
  parent: system.fabric._service_partition
  href: system.fabric._service_partition.yml
  name: reportFault(FaultType faultType)
  nameWithType: ServicePartition.reportFault(FaultType faultType)
  fullName: system.fabric.ServicePartition.reportFault(FaultType faultType)
  type: Method
  summary: >-
    <p>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <xref uid="" data-throw-if-not-resolved="false">java.util.Collection</xref> of <xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">LoadMetric</xref> method and provides one or more properties of the <xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">system.fabric.LoadMetric</xref> method.</p>

    <p>

      <b>Remarks:</b>A fault is typically reported when the service code encounters some issue from which it cannot recover. </p>
  syntax:
    content: public void reportFault(FaultType faultType)
    parameters:
    - id: faultType
      type: system.fabric._fault_type
      description: <p>The <xref uid="system.fabric._load_metric" data-throw-if-not-resolved="false">system.fabric.LoadMetric</xref> that the service has encountered. </p>
- uid: system.fabric._stateful_service_replica.abort()
  parent: system.fabric._stateful_service_replica
  href: system.fabric._stateful_service_replica.yml
  name: abort()
  nameWithType: StatefulServiceReplica.abort()
  fullName: system.fabric.StatefulServiceReplica.abort()
  type: Method
  summary: >-
    <p>Ungracefully terminates an instance. </p>

    <p>

      <b>Remarks:</b>Lease loss and, in response to the service, the use of <xref uid="system.fabric._service_partition.reportFault(FaultType)" data-throw-if-not-resolved="false">system.fabric.ServicePartition#reportFault(FaultType)</xref> to report a <xref uid="system.fabric._fault_type.Permanent" data-throw-if-not-resolved="false">system.fabric.FaultType#Permanent</xref> fault are examples of ungraceful termination. When this method is invoked, the service instance should immediately release and clean up all references and return. </p>
  syntax:
    content: public void abort()
- uid: system.fabric._stateless_service_instance.abort()
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  name: abort()
  nameWithType: StatelessServiceInstance.abort()
  fullName: system.fabric.StatelessServiceInstance.abort()
  type: Method
  summary: >-
    <p>Terminates this instance ungracefully with this synchronous method call. </p>

    <p>

      <b>Remarks:</b>Examples of ungraceful termination are lease loss and, in response to the service, the use of <xref uid="system.fabric._service_partition.reportFault(FaultType)" data-throw-if-not-resolved="false">system.fabric.ServicePartition#reportFault(FaultType)</xref> to report a <xref uid="system.fabric._fault_type.Permanent" data-throw-if-not-resolved="false">system.fabric.FaultType#Permanent</xref> fault. When the service instance receives this method, it should immediately release and clean up all references and return. </p>
  syntax:
    content: public void abort()
- uid: system.fabric._stateful_service_replica.closeAsync(CancellationToken)
  parent: system.fabric._stateful_service_replica
  href: system.fabric._stateful_service_replica.yml
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
  fullName: system.fabric.StatefulServiceReplica.closeAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Closes the service replica when it is being shut down. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: db03ee24
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>. </p>
- uid: system.fabric._stateless_service_instance.closeAsync(CancellationToken)
  parent: system.fabric._stateless_service_instance
  href: system.fabric._stateless_service_instance.yml
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  fullName: system.fabric.StatelessServiceInstance.closeAsync(CancellationToken cancellationToken)
  type: Method
  summary: >-
    <p>Closes this service instance gracefully when the service instance is being shut down.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>Returns <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref>. </p>
