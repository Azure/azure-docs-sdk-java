items:
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor
  id: _i_event_processor
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)
  - com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)
  - com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable<EventData>)
  - com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen(PartitionContext)
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  langs:
  - java
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
    startLine: 27
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Interface that must be implemented by event processor classes.</p>

    <p>Any given instance of an event processor class will only process events from one partition of one Event Hub. A <xref href="com.microsoft.azure.eventprocessorhost._partition_context" data-throw-if-not-resolved="false"></xref> is provided with each call to the event processor because some parameters could change, but it will always be the same partition. </p>

    <p>Although <xref href="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false"></xref> is multithreaded, calls to a given instance of an event processor class are serialized, except for <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)" data-throw-if-not-resolved="false"></xref>. <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen(PartitionContext)" data-throw-if-not-resolved="false"></xref> is called first, then <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false"></xref> will be called zero or more times. When the event processor needs to be shut down, whether because there was a failure somewhere, or the lease for the partition has been lost, or because the entire processor host is being shut down, <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)" data-throw-if-not-resolved="false"></xref> is called after the last <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false"></xref> call returns. </p>

    <p>

      <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)" data-throw-if-not-resolved="false"></xref> could be called while <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable&lt;EventData&gt;)" data-throw-if-not-resolved="false"></xref> or <xref href="com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)" data-throw-if-not-resolved="false"></xref> is executing. No synchronization is attempted in order to avoid possibly deadlocking. </p>
  syntax:
    content: public interface IEventProcessor
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)
  id: onClose(PartitionContext,CloseReason)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  langs:
  - java
  name: onClose(PartitionContext context, CloseReason reason)
  nameWithType: IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  overload: com.microsoft.azure.eventprocessorhost._i_event_processor.onClose*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
    startLine: 44
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Called by processor host to indicate that the event processor is being stopped.</p>

    <p></p>
  syntax: &o4
    content: public void onClose(PartitionContext context, CloseReason reason)
    parameters:
    - id: context
      type: com.microsoft.azure.eventprocessorhost._partition_context
      description: <p>Information about the partition. </p>
    - id: reason
      type: com.microsoft.azure.eventprocessorhost._close_reason
      description: <p>Reason why the event processor is being stopped. </p>
  exceptions:
  - type: 8a99d4b0
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)
  id: onError(PartitionContext,Throwable)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  langs:
  - java
  name: onError(PartitionContext context, Throwable error)
  nameWithType: IEventProcessor.onError(PartitionContext context, Throwable error)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onError(PartitionContext context, Throwable error)
  overload: com.microsoft.azure.eventprocessorhost._i_event_processor.onError*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
    startLine: 69
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Called when the underlying client experiences an error while receiving. <xref href="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false"></xref> will take care of recovering from the error and continuing to pump messages, so no action is required from your code. This method is provided for informational purposes.</p>

    <p></p>
  syntax: &o1
    content: public void onError(PartitionContext context, Throwable error)
    parameters:
    - id: context
      type: com.microsoft.azure.eventprocessorhost._partition_context
      description: <p>Information about the partition. </p>
    - id: error
      type: a04fafd7
      description: <p>The error that occured. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable<EventData>)
  id: onEvents(PartitionContext,Iterable<EventData>)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  langs:
  - java
  name: onEvents(PartitionContext context, Iterable<EventData> messages)
  nameWithType: IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> messages)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> messages)
  overload: com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
    startLine: 59
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Called by the processor host when a batch of events has arrived.</p>

    <p>This is where the real work of the event processor is done. It is normally called when one or more events have arrived. If the <xref href="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false"></xref> instance was set up with an <xref href="com.microsoft.azure.eventprocessorhost._event_processor_options" data-throw-if-not-resolved="false"></xref> on which setInvokeProcessorAfterReceiveTimeout(true) has been called, then if a receive times out, it will be called with an empty iterable. By default this option is false and receive timeouts do not cause a call to this method.</p>

    <p></p>
  syntax: &o3
    content: public void onEvents(PartitionContext context, Iterable<EventData> messages)
    parameters:
    - id: context
      type: com.microsoft.azure.eventprocessorhost._partition_context
      description: <p>Information about the partition. </p>
    - id: messages
      type: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
      description: <p>The events to be processed. May be empty. </p>
  exceptions:
  - type: 8a99d4b0
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen(PartitionContext)
  id: onOpen(PartitionContext)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  langs:
  - java
  name: onOpen(PartitionContext context)
  nameWithType: IEventProcessor.onOpen(PartitionContext context)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen(PartitionContext context)
  overload: com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessor.java
    startLine: 35
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Called by processor host to initialize the event processor.</p>

    <p></p>
  syntax: &o2
    content: public void onOpen(PartitionContext context)
    parameters:
    - id: context
      type: com.microsoft.azure.eventprocessorhost._partition_context
      description: <p>Information about the partition that this event processor will process events from. </p>
  exceptions:
  - type: 8a99d4b0
references:
- uid: 8a99d4b0
  spec.java:
  - name: Exception
    fullName: Exception
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen*
  name: onOpen
  nameWithType: IEventProcessor.onOpen
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onClose*
  name: onClose
  nameWithType: IEventProcessor.onClose
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose
  package: com.microsoft.azure.eventprocessorhost
- uid: 2a13b5a5com.microsoft.azure.eventhubs._event_dataa08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.microsoft.azure.eventhubs._event_data
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs._event_data.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents*
  name: onEvents
  nameWithType: IEventProcessor.onEvents
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents
  package: com.microsoft.azure.eventprocessorhost
- uid: a04fafd7
  spec.java:
  - name: Throwable
    fullName: Throwable
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onError*
  name: onError
  nameWithType: IEventProcessor.onError
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onError
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._partition_context
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._partition_context.yml
  name: PartitionContext
  nameWithType: PartitionContext
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
  type: Class
  syntax:
    content: public class PartitionContext
- uid: com.microsoft.azure.eventprocessorhost._close_reason
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._close_reason.yml
  name: CloseReason
  nameWithType: CloseReason
  fullName: com.microsoft.azure.eventprocessorhost.CloseReason
  type: Enum
  syntax:
    content: public enum CloseReason
- uid: com.microsoft.azure.eventhubs._event_data
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs._event_data.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Class
  summary: >-
    <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>

    <p>Serializing a received <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

    <p>Here's how AMQP message sections map to <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. Here's the reference used for AMQP 1.0 specification: <ulink url="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</ulink><preformatted>

    i.   <xref href="com.microsoft.azure.eventhubs._event_data.getProperties()" data-throw-if-not-resolved="false"></xref> - AMQPMessage.ApplicationProperties section

    ii.  <xref href="com.microsoft.azure.eventhubs._event_data.getBytes()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has Data section

    iii. <xref href="com.microsoft.azure.eventhubs._event_data.getObject()" data-throw-if-not-resolved="false"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

    </preformatted> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref href="com.microsoft.azure.eventhubs._event_data" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public class EventData
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._event_processor_options
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_options.yml
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorOptions
  type: Class
  syntax:
    content: public class EventProcessorOptions
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onError(PartitionContext,Throwable)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  name: onError(PartitionContext context, Throwable error)
  nameWithType: IEventProcessor.onError(PartitionContext context, Throwable error)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onError(PartitionContext context, Throwable error)
  type: Method
  summary: >-
    <p>Called when the underlying client experiences an error while receiving. <xref href="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false"></xref> will take care of recovering from the error and continuing to pump messages, so no action is required from your code. This method is provided for informational purposes.</p>

    <p></p>
  syntax: *o1
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onOpen(PartitionContext)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  name: onOpen(PartitionContext context)
  nameWithType: IEventProcessor.onOpen(PartitionContext context)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen(PartitionContext context)
  type: Method
  summary: >-
    <p>Called by processor host to initialize the event processor.</p>

    <p></p>
  syntax: *o2
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onEvents(PartitionContext,Iterable<EventData>)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  name: onEvents(PartitionContext context, Iterable<EventData> messages)
  nameWithType: IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> messages)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> messages)
  type: Method
  summary: >-
    <p>Called by the processor host when a batch of events has arrived.</p>

    <p>This is where the real work of the event processor is done. It is normally called when one or more events have arrived. If the <xref href="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false"></xref> instance was set up with an <xref href="com.microsoft.azure.eventprocessorhost._event_processor_options" data-throw-if-not-resolved="false"></xref> on which setInvokeProcessorAfterReceiveTimeout(true) has been called, then if a receive times out, it will be called with an empty iterable. By default this option is false and receive timeouts do not cause a call to this method.</p>

    <p></p>
  syntax: *o3
- uid: com.microsoft.azure.eventprocessorhost._i_event_processor.onClose(PartitionContext,CloseReason)
  parent: com.microsoft.azure.eventprocessorhost._i_event_processor
  href: com.microsoft.azure.eventprocessorhost._i_event_processor.yml
  name: onClose(PartitionContext context, CloseReason reason)
  nameWithType: IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  fullName: void com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  type: Method
  summary: >-
    <p>Called by processor host to indicate that the event processor is being stopped.</p>

    <p></p>
  syntax: *o4
