### YamlMime:ManagedReference
items:
- uid: system.fabric._cancellation_token
  id: _cancellation_token
  parent: system.fabric
  children:
  - system.fabric._cancellation_token.canBeCancelled()
  - system.fabric._cancellation_token.close()
  - system.fabric._cancellation_token.getDefault()
  - system.fabric._cancellation_token.isCancelled()
  - system.fabric._cancellation_token.registerCancellationCallback(Runnable)
  - system.fabric._cancellation_token.registerCancellationCallback(String,Runnable)
  - system.fabric._cancellation_token.throwIfCancellationRequested()
  - system.fabric._cancellation_token.unregisterCancellationCallback()
  - system.fabric._cancellation_token.unregisterCancellationCallback(String)
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 18
  package: system.fabric
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric._cancellation_token_source\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric._cancellation_token_source.getToken()\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric._cancellation_token_source.cancel()\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax: &o2
    content: public class CancellationToken
  inheritance:
  - java.lang.Object
  - AutoCloseable
- uid: system.fabric._cancellation_token.canBeCancelled()
  id: canBeCancelled()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: canBeCancelled()
  nameWithType: CancellationToken.canBeCancelled()
  fullName: system.fabric.CancellationToken.canBeCancelled()
  overload: system.fabric._cancellation_token.canBeCancelled*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 34
  package: system.fabric
  summary: "<p>Specifies if the Cancellation token can be cancelled or not. If the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> is created using <xref uid=\"system.fabric._cancellation_token_source.getToken()\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationTokenSource#getToken()</xref>, then the token can cancelled using <xref uid=\"system.fabric._cancellation_token_source.cancel()\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationTokenSource#cancel()</xref> method. If the <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> is created using <xref uid=\"system.fabric._cancellation_token.getDefault()\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken#getDefault()</xref>, then it can not be cancelled. It simply acts as a dummy token. </p>"
  syntax:
    content: public boolean canBeCancelled()
    return:
      type: 4fc6e284
      description: <p>Returns true if the token can be cancelled, else false. </p>
- uid: system.fabric._cancellation_token.close()
  id: close()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: close()
  nameWithType: CancellationToken.close()
  fullName: system.fabric.CancellationToken.close()
  overload: system.fabric._cancellation_token.close*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 118
  package: system.fabric
  syntax:
    content: public void close()
- uid: system.fabric._cancellation_token.getDefault()
  id: getDefault()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: getDefault()
  nameWithType: CancellationToken.getDefault()
  fullName: system.fabric.CancellationToken.getDefault()
  overload: system.fabric._cancellation_token.getDefault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 61
  package: system.fabric
  summary: "<p>Creates and returns a Cancellation token object. This method should be used when the CancellationToken doesn't support cancellation. Only Cancellation tokens created through <xref uid=\"system.fabric._cancellation_token_source.getToken()\" data-throw-if-not-resolved=\"false\">CancellationTokenSource#getToken()</xref> supports cancellations.</p>\r\n<p></p>"
  syntax: &o1
    content: public static CancellationToken getDefault()
    return:
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref>

        </p>
- uid: system.fabric._cancellation_token.isCancelled()
  id: isCancelled()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: isCancelled()
  nameWithType: CancellationToken.isCancelled()
  fullName: system.fabric.CancellationToken.isCancelled()
  overload: system.fabric._cancellation_token.isCancelled*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 50
  package: system.fabric
  summary: "<p>Gets whether cancellation has been requested for this token.</p>\r\n<p></p>"
  syntax:
    content: public boolean isCancelled()
    return:
      type: 4fc6e284
      description: <p>boolean cancellation status </p>
- uid: system.fabric._cancellation_token.registerCancellationCallback(Runnable)
  id: registerCancellationCallback(Runnable)
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: registerCancellationCallback(Runnable callback)
  nameWithType: CancellationToken.registerCancellationCallback(Runnable callback)
  fullName: system.fabric.CancellationToken.registerCancellationCallback(Runnable callback)
  overload: system.fabric._cancellation_token.registerCancellationCallback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 76
  package: system.fabric
  summary: "<p>Registers a callback which will be executed when this <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> object is cancelled. </p>"
  syntax:
    content: public void registerCancellationCallback(Runnable callback)
    parameters:
    - id: callback
      type: 2b8852ea
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">java.lang.Runnable</xref> to be executed when on token cancel event. </p>
- uid: system.fabric._cancellation_token.registerCancellationCallback(String,Runnable)
  id: registerCancellationCallback(String,Runnable)
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: registerCancellationCallback(String name, Runnable callback)
  nameWithType: CancellationToken.registerCancellationCallback(String name, Runnable callback)
  fullName: system.fabric.CancellationToken.registerCancellationCallback(String name, Runnable callback)
  overload: system.fabric._cancellation_token.registerCancellationCallback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 85
  package: system.fabric
  summary: "<p>Registers a callback which will be executed when this <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> object is cancelled. </p>"
  syntax:
    content: public void registerCancellationCallback(String name, Runnable callback)
    parameters:
    - id: name
      type: "26831127"
      description: <p>callback name. </p>
    - id: callback
      type: 2b8852ea
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">java.lang.Runnable</xref> to be executed when on token cancel event. </p>
- uid: system.fabric._cancellation_token.throwIfCancellationRequested()
  id: throwIfCancellationRequested()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: throwIfCancellationRequested()
  nameWithType: CancellationToken.throwIfCancellationRequested()
  fullName: system.fabric.CancellationToken.throwIfCancellationRequested()
  overload: system.fabric._cancellation_token.throwIfCancellationRequested*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 68
  package: system.fabric
  summary: "<p>Throws a CancellationException if this token has had cancellation requested. </p>"
  syntax:
    content: public void throwIfCancellationRequested()
- uid: system.fabric._cancellation_token.unregisterCancellationCallback()
  id: unregisterCancellationCallback()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: unregisterCancellationCallback()
  nameWithType: CancellationToken.unregisterCancellationCallback()
  fullName: system.fabric.CancellationToken.unregisterCancellationCallback()
  overload: system.fabric._cancellation_token.unregisterCancellationCallback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 92
  package: system.fabric
  summary: "<p>unregister the callback for this <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> object. </p>"
  syntax:
    content: public void unregisterCancellationCallback()
- uid: system.fabric._cancellation_token.unregisterCancellationCallback(String)
  id: unregisterCancellationCallback(String)
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  langs:
  - java
  name: unregisterCancellationCallback(String name)
  nameWithType: CancellationToken.unregisterCancellationCallback(String name)
  fullName: system.fabric.CancellationToken.unregisterCancellationCallback(String name)
  overload: system.fabric._cancellation_token.unregisterCancellationCallback*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/CancellationToken.java
    startLine: 101
  package: system.fabric
  summary: "<p>unregister the callback for this <xref uid=\"\" data-throw-if-not-resolved=\"false\">system.fabric.CancellationToken</xref> object. </p>"
  syntax:
    content: public void unregisterCancellationCallback(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>callback name registered for this <xref uid="" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object. </p>
references:
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: system.fabric._cancellation_token.canBeCancelled*
  name: canBeCancelled
  nameWithType: CancellationToken.canBeCancelled
  fullName: system.fabric.CancellationToken.canBeCancelled
  package: system.fabric
- uid: system.fabric._cancellation_token.isCancelled*
  name: isCancelled
  nameWithType: CancellationToken.isCancelled
  fullName: system.fabric.CancellationToken.isCancelled
  package: system.fabric
- uid: system.fabric._cancellation_token.throwIfCancellationRequested*
  name: throwIfCancellationRequested
  nameWithType: CancellationToken.throwIfCancellationRequested
  fullName: system.fabric.CancellationToken.throwIfCancellationRequested
  package: system.fabric
- uid: 2b8852ea
  spec.java:
  - name: Runnable
    fullName: Runnable
- uid: system.fabric._cancellation_token.registerCancellationCallback*
  name: registerCancellationCallback
  nameWithType: CancellationToken.registerCancellationCallback
  fullName: system.fabric.CancellationToken.registerCancellationCallback
  package: system.fabric
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: system.fabric._cancellation_token.unregisterCancellationCallback*
  name: unregisterCancellationCallback
  nameWithType: CancellationToken.unregisterCancellationCallback
  fullName: system.fabric.CancellationToken.unregisterCancellationCallback
  package: system.fabric
- uid: system.fabric._cancellation_token.close*
  name: close
  nameWithType: CancellationToken.close
  fullName: system.fabric.CancellationToken.close
  package: system.fabric
- uid: system.fabric._cancellation_token.getDefault*
  name: getDefault
  nameWithType: CancellationToken.getDefault
  fullName: system.fabric.CancellationToken.getDefault
  package: system.fabric
- uid: system.fabric._cancellation_token_source.getToken()
  parent: system.fabric._cancellation_token_source
  href: system.fabric._cancellation_token_source.yml
  name: getToken()
  nameWithType: CancellationTokenSource.getToken()
  fullName: system.fabric.CancellationTokenSource.getToken()
  type: Method
  summary: >-
    <p>Returns the cancellation token which is being by this <xref uid="" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object.</p>

    <p></p>
  syntax:
    content: public CancellationToken getToken()
    return:
      type: system.fabric._cancellation_token
      description: >-
        <p>

          <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref>

        </p>
- uid: system.fabric._cancellation_token_source.cancel()
  parent: system.fabric._cancellation_token_source
  href: system.fabric._cancellation_token_source.yml
  name: cancel()
  nameWithType: CancellationTokenSource.cancel()
  fullName: system.fabric.CancellationTokenSource.cancel()
  type: Method
  summary: <p>Requests cancel on the <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> being managed by this object. </p>
  syntax:
    content: public void cancel()
- uid: system.fabric._cancellation_token.getDefault()
  parent: system.fabric._cancellation_token
  href: system.fabric._cancellation_token.yml
  name: getDefault()
  nameWithType: CancellationToken.getDefault()
  fullName: system.fabric.CancellationToken.getDefault()
  type: Method
  summary: >-
    <p>Creates and returns a Cancellation token object. This method should be used when the CancellationToken doesn't support cancellation. Only Cancellation tokens created through <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">CancellationTokenSource#getToken()</xref> supports cancellations.</p>

    <p></p>
  syntax: *o1
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax: *o2
- uid: system.fabric._cancellation_token_source
  parent: system.fabric
  href: system.fabric._cancellation_token_source.yml
  name: CancellationTokenSource
  nameWithType: CancellationTokenSource
  fullName: system.fabric.CancellationTokenSource
  type: Class
  summary: <p>A CancellationTokenSource is used to create <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object and manage it. </p>
  syntax:
    content: public class CancellationTokenSource
