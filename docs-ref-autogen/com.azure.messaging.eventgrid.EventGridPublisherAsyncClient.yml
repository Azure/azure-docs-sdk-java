### YamlMime:JavaType
uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient"
fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>"
name: "EventGridPublisherAsyncClient<T>"
nameWithType: "EventGridPublisherAsyncClient<T>"
summary: "A service client that publishes events to an Event<wbr>Grid topic or domain asynchronously."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class EventGridPublisherAsyncClient<T>"
methods:
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.generateSas(java.lang.String,com.azure.core.credential.AzureKeyCredential,java.time.OffsetDateTime)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime)"
  name: "generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime)"
  nameWithType: "EventGridPublisherAsyncClient<T>.generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime)"
  summary: "Generate a shared access signature to provide time-limited authentication for requests to the Event Grid service with the latest Event Grid service API defined in <xref uid=\"com.azure.messaging.eventgrid.EventGridServiceVersion.getLatest()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridServiceVersion#getLatest()\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "the endpoint of the Event Grid topic or domain."
    name: "endpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the access key obtained from the Event Grid topic or domain."
    name: "keyCredential"
    type: "<xref href=\"com.azure.core.credential.AzureKeyCredential?alt=com.azure.core.credential.AzureKeyCredential&text=AzureKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  - description: "the time in which the signature should expire, no longer providing authentication."
    name: "expirationTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime)"
  desc: "Generate a shared access signature to provide time-limited authentication for requests to the Event Grid service with the latest Event Grid service API defined in <xref uid=\"com.azure.messaging.eventgrid.EventGridServiceVersion.getLatest()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridServiceVersion#getLatest()\"></xref>."
  returns:
    description: "the shared access signature string which can be used to construct an instance of\n <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref>."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.generateSas(java.lang.String,com.azure.core.credential.AzureKeyCredential,java.time.OffsetDateTime,com.azure.messaging.eventgrid.EventGridServiceVersion)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime, EventGridServiceVersion apiVersion)"
  name: "generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime, EventGridServiceVersion apiVersion)"
  nameWithType: "EventGridPublisherAsyncClient<T>.generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime, EventGridServiceVersion apiVersion)"
  summary: "Generate a shared access signature to provide time-limited authentication for requests to the Event Grid service."
  modifiers:
  - "static"
  parameters:
  - description: "the endpoint of the Event Grid topic or domain."
    name: "endpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the access key obtained from the Event Grid topic or domain."
    name: "keyCredential"
    type: "<xref href=\"com.azure.core.credential.AzureKeyCredential?alt=com.azure.core.credential.AzureKeyCredential&text=AzureKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  - description: "the time in which the signature should expire, no longer providing authentication."
    name: "expirationTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "the EventGrid service api version defined in <xref uid=\"com.azure.messaging.eventgrid.EventGridServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridServiceVersion\"></xref>"
    name: "apiVersion"
    type: "<xref href=\"com.azure.messaging.eventgrid.EventGridServiceVersion?alt=com.azure.messaging.eventgrid.EventGridServiceVersion&text=EventGridServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static String generateSas(String endpoint, AzureKeyCredential keyCredential, OffsetDateTime expirationTime, EventGridServiceVersion apiVersion)"
  desc: "Generate a shared access signature to provide time-limited authentication for requests to the Event Grid service."
  returns:
    description: "the shared access signature string which can be used to construct an instance of\n <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref>."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.sendEvent(T)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.sendEvent(T event)"
  name: "sendEvent(T event)"
  nameWithType: "EventGridPublisherAsyncClient<T>.sendEvent(T event)"
  summary: "Publishes the given events to the set topic or domain."
  parameters:
  - description: "the event to publish."
    name: "event"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> sendEvent(T event)"
  desc: "Publishes the given events to the set topic or domain."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the event is sent to the service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.sendEvents(java.lang.Iterable<T>)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.sendEvents(Iterable<T> events)"
  name: "sendEvents(Iterable<T> events)"
  nameWithType: "EventGridPublisherAsyncClient<T>.sendEvents(Iterable<T> events)"
  summary: "Publishes the given events to the set topic or domain."
  parameters:
  - description: "the events to publish."
    name: "events"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> sendEvents(Iterable<T> events)"
  desc: "Publishes the given events to the set topic or domain."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the events are sent to the service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.sendEventsWithResponse(java.lang.Iterable<T>)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.sendEventsWithResponse(Iterable<T> events)"
  name: "sendEventsWithResponse(Iterable<T> events)"
  nameWithType: "EventGridPublisherAsyncClient<T>.sendEventsWithResponse(Iterable<T> events)"
  summary: "Publishes the given events to the set topic or domain and gives the response issued by Event<wbr>Grid."
  parameters:
  - description: "the events to publish."
    name: "events"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> sendEventsWithResponse(Iterable<T> events)"
  desc: "Publishes the given events to the set topic or domain and gives the response issued by EventGrid."
  returns:
    description: "the response from the EventGrid service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient.sendEventsWithResponse(java.lang.Iterable<T>,java.lang.String)"
  fullName: "com.azure.messaging.eventgrid.EventGridPublisherAsyncClient<T>.sendEventsWithResponse(Iterable<T> events, String channelName)"
  name: "sendEventsWithResponse(Iterable<T> events, String channelName)"
  nameWithType: "EventGridPublisherAsyncClient<T>.sendEventsWithResponse(Iterable<T> events, String channelName)"
  summary: "Publishes the given events to the set topic or domain and gives the response issued by Event<wbr>Grid."
  parameters:
  - description: "the events to publish."
    name: "events"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the channel name to send to Event Grid service. This is only applicable for sending\n   Cloud Events to a partner topic in partner namespace. For more details, refer to\n   <a href=https://docs.microsoft.com/azure/event-grid/partner-events-overview>Partner Events Overview.</a>"
    name: "channelName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> sendEventsWithResponse(Iterable<T> events, String channelName)"
  desc: "Publishes the given events to the set topic or domain and gives the response issued by EventGrid."
  returns:
    description: "the response from the EventGrid service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
typeParameters:
- name: "T"
desc: "A service client that publishes events to an EventGrid topic or domain asynchronously. Use <xref uid=\"com.azure.messaging.eventgrid.EventGridPublisherClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventGridPublisherClientBuilder\"></xref> to create an instance of this client.\n\n**Create EventGridPublisherAsyncClient for CloudEvent Samples**\n\n```java\n// Create a client to send events of CloudEvent schema (com.azure.core.models.CloudEvent)\n EventGridPublisherAsyncClient<CloudEvent> cloudEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_ENDPOINT\"))  // make sure it accepts CloudEvent\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_CLOUDEVENT_KEY\")))\n     .buildCloudEventPublisherAsyncClient();\n```\n\n**Send CloudEvent Samples**\n\n```java\n// Create a com.azure.models.CloudEvent.\n User user = new User(\"Stephen\", \"James\");\n CloudEvent cloudEventDataObject = new CloudEvent(\"/cloudevents/example/source\", \"Example.EventType\",\n     BinaryData.fromObject(user), CloudEventDataFormat.JSON, \"application/json\");\n\n // Send a single CloudEvent\n cloudEventPublisherClient.sendEvent(cloudEventDataObject).block();\n\n // Send a list of CloudEvents to the EventGrid service altogether.\n // This has better performance than sending one by one.\n cloudEventPublisherClient.sendEvents(Arrays.asList(\n     cloudEventDataObject\n     // add more CloudEvents objects\n )).block();\n```\n\n**Create EventGridPublisherAsyncClient for EventGridEvent Samples**\n\n```java\n// Create a client to send events of EventGridEvent schema\n EventGridPublisherAsyncClient<EventGridEvent> eventGridEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_EVENTGRID_EVENT_ENDPOINT\"))  // make sure it accepts EventGridEvent\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_EVENTGRID_EVENT_KEY\")))\n     .buildEventGridEventPublisherAsyncClient();\n```\n\n**Send EventGridEvent Samples**\n\n```java\n// Create an EventGridEvent\n User user = new User(\"John\", \"James\");\n EventGridEvent eventGridEvent = new EventGridEvent(\"/EventGridEvents/example/source\",\n     \"Example.EventType\", BinaryData.fromObject(user), \"0.1\");\n\n // Send a single EventGridEvent\n eventGridEventPublisherClient.sendEvent(eventGridEvent).block();\n\n // Send a list of EventGridEvents to the EventGrid service altogether.\n // This has better performance than sending one by one.\n eventGridEventPublisherClient.sendEvents(Arrays.asList(\n     eventGridEvent\n     // add more EventGridEvents objects\n )).block();\n```\n\n**Create EventGridPublisherAsyncClient for Custom Event Schema Samples**\n\n```java\n// Create a client to send events of custom event\n EventGridPublisherAsyncClient<BinaryData> customEventPublisherClient = new EventGridPublisherClientBuilder()\n     .endpoint(System.getenv(\"AZURE_CUSTOM_EVENT_ENDPOINT\"))  // make sure it accepts custom events\n     .credential(new AzureKeyCredential(System.getenv(\"AZURE_CUSTOM_EVENT_KEY\")))\n     .buildCustomEventPublisherAsyncClient();\n```\n\n**Send Custom Event Schema Samples**\n\n```java\n// Create an custom event object (both POJO and Map work)\n Map<String, Object> customEvent = new HashMap<String, Object>() {\n     {\n         put(\"id\", UUID.randomUUID().toString());\n         put(\"subject\", \"Test\");\n         put(\"foo\", \"bar\");\n         put(\"type\", \"Microsoft.MockPublisher.TestEvent\");\n         put(\"data\", 100.0);\n         put(\"dataVersion\", \"0.1\");\n     }\n };\n\n // Send a single custom event\n customEventPublisherClient.sendEvent(BinaryData.fromObject(customEvent)).block();\n\n // Send a list of EventGridEvents to the EventGrid service altogether.\n // This has better performance than sending one by one.\n customEventPublisherClient.sendEvents(Arrays.asList(\n     BinaryData.fromObject(customEvent)\n     // add more custom events in BinaryData\n )).block();\n```"
metadata: {}
package: "com.azure.messaging.eventgrid"
artifact: com.azure:azure-messaging-eventgrid:4.12.1
