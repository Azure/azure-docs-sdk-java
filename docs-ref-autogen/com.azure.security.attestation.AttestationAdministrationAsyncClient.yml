### YamlMime:JavaType
uid: "com.azure.security.attestation.AttestationAdministrationAsyncClient"
fullName: "com.azure.security.attestation.AttestationAdministrationAsyncClient"
name: "AttestationAdministrationAsyncClient"
nameWithType: "AttestationAdministrationAsyncClient"
summary: "The AttestationAdministrationAsyncClient provides access to the administrative policy APIs implemented by the Attestation Service.\n\nMore information on attestation policies can be found [here][]\n\nThere are two main families of APIs available from the Administration client.\n\n *  Attestation Policy Management\n *  Policy Management Certificate Management\n\nAttestation service instances operate in three different modes:\n\n *  Shared - a shared instance is a regional instance which is available to all customers. It does NOT support customer specified policy documents - there is only a default policy available for each attestation type\n *  AAD - An attestation instance where the customer trusts Azure Active Directory (and Azure Role Based Access Control) to manage the security of their enclave.\n *  Isolated - an attestation instance where the customer does \\*not\\* trust Azure Active Directory (and RBAC) to manage the security of their enclave\n\nWhen an attestation instance is in Isolated mode, additional proof needs to be provided by the customer to verify that they are authorized to perform the operation specified.\n\nWhen an Isolated mode attestation instance is created, the creator provides an X.509 certificate which forms the set of policy management certificates. Under the covers, each <xref uid=\"com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicy(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationAdministrationAsyncClient#setAttestationPolicy(AttestationType, AttestationPolicySetOptions)\"></xref>. API call must be signed with the private key which is associated with one of the policy management certificates. This signing operation allows the attestation service to verify that the caller is in possession of a private key which has been authorized to add or reset policies, or to modify the set of attestation policy certificates.\n\n\n[here]: https://docs.microsoft.com/azure/attestation/basic-concepts#attestation-policy"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AttestationAdministrationAsyncClient"
methods:
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.addPolicyManagementCertificate(com.azure.security.attestation.models.PolicyManagementCertificateOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.addPolicyManagementCertificateWithResponse(com.azure.security.attestation.models.PolicyManagementCertificateOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.calculatePolicyTokenHash(java.lang.String,com.azure.security.attestation.models.AttestationSigningKey)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.deletePolicyManagementCertificate(com.azure.security.attestation.models.PolicyManagementCertificateOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.deletePolicyManagementCertificateWithResponse(com.azure.security.attestation.models.PolicyManagementCertificateOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(com.azure.security.attestation.models.AttestationType)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicy(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationTokenValidationOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.getAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationTokenValidationOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.listPolicyManagementCertificates()"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.listPolicyManagementCertificatesWithResponse(com.azure.security.attestation.models.AttestationTokenValidationOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.resetAttestationPolicy(com.azure.security.attestation.models.AttestationType)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.resetAttestationPolicy(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.resetAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicy(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicy(com.azure.security.attestation.models.AttestationType,java.lang.String)"
- "com.azure.security.attestation.AttestationAdministrationAsyncClient.setAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions)"
type: "class"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
