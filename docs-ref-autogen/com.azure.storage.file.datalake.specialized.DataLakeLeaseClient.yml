### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient"
fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient"
name: "DataLakeLeaseClient"
nameWithType: "DataLakeLeaseClient"
summary: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient\" data-throw-if-not-resolved=\"false\">file systems</xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakePathClient\" data-throw-if-not-resolved=\"false\">files and directories</xref>. This client acts as a supplement to those clients and only handles leasing operations.\n\n**Instantiating a DataLakeLeaseClient**\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .fileClient(fileClient)\n     .buildClient();\n```\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .directoryClient(directoryClient)\n     .buildClient();\n```\n\n```java\nDataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()\n     .fileSystemClient(dataLakeFileSystemClient)\n     .buildClient();\n```\n\nView <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client.\n\nFor more information about leasing see the [file system leasing][] or [path leasing][] documentation.\n\n\n[file system leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n[path leasing]: https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeLeaseClient"
methods:
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.acquireLease(int)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.breakLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.changeLease(java.lang.String)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.getAccountName()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.getLeaseId()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.getResourceUrl()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.releaseLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.renewLease()"
- "com.azure.storage.file.datalake.specialized.DataLakeLeaseClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions,java.time.Duration,com.azure.core.util.Context)"
type: "class"
metadata: {}
package: "com.azure.storage.file.datalake.specialized"
artifact: com.azure:azure-storage-file-datalake:12.2.0
