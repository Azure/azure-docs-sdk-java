### YamlMime:JavaMember
uid: "com.azure.messaging.eventhubs.models.EventBatchContext.updateCheckpointAsync*"
fullName: "com.azure.messaging.eventhubs.models.EventBatchContext.updateCheckpointAsync"
name: "updateCheckpointAsync"
nameWithType: "EventBatchContext.updateCheckpointAsync"
members:
- uid: "com.azure.messaging.eventhubs.models.EventBatchContext.updateCheckpointAsync()"
  fullName: "com.azure.messaging.eventhubs.models.EventBatchContext.updateCheckpointAsync()"
  name: "updateCheckpointAsync()"
  nameWithType: "EventBatchContext.updateCheckpointAsync()"
  summary: "Updates the checkpoint asynchronously for this partition using the last event in the list provided by <xref uid=\"com.azure.messaging.eventhubs.models.EventBatchContext.getEvents()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getEvents()\"></xref>. This will serve as the last known successfully processed event in this partition if the update is successful. If <xref uid=\"com.azure.messaging.eventhubs.models.EventBatchContext.getEvents()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getEvents()\"></xref> returns an empty, no update to checkpoint will be done."
  syntax: "public Mono<Void> updateCheckpointAsync()"
  returns:
    description: "Gets a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the checkpoint is updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.messaging.eventhubs.models"
artifact: com.azure:azure-messaging-eventhubs:5.4.0
