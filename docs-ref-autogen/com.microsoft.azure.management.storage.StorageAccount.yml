### YamlMime:JavaType
uid: "com.microsoft.azure.management.storage.StorageAccount"
fullName: "com.microsoft.azure.management.storage.StorageAccount"
name: "StorageAccount"
nameWithType: "StorageAccount"
summary: "An immutable client-side representation of an Azure storage account."
syntax: "public interface StorageAccount extends GroupableResource<StorageManager,StorageAccountInner>, Refreshable<StorageAccount>, Updatable<StorageAccount.Update>"
methods:
- uid: "com.microsoft.azure.management.storage.StorageAccount.accessTier()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.accessTier()"
  name: "accessTier()"
  nameWithType: "StorageAccount.accessTier()"
  modifiers:
  - "abstract"
  syntax: "public abstract AccessTier accessTier()"
  returns:
    description: "access tier used for billing. Access tier cannot be changed more\n than once every 7 days (168 hours). Access tier cannot be set for\n StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types.\n Possible values include: 'Hot', 'Cool'."
    type: "<xref href=\"com.microsoft.azure.management.storage.AccessTier?alt=com.microsoft.azure.management.storage.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.accountStatuses()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.accountStatuses()"
  name: "accountStatuses()"
  nameWithType: "StorageAccount.accountStatuses()"
  modifiers:
  - "abstract"
  syntax: "public abstract AccountStatuses accountStatuses()"
  returns:
    description: "the status indicating whether the primary and secondary location of\n the storage account is available or unavailable. Possible values include:\n 'Available', 'Unavailable'"
    type: "<xref href=\"com.microsoft.azure.management.storage.implementation.AccountStatuses?alt=com.microsoft.azure.management.storage.implementation.AccountStatuses&text=AccountStatuses\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.canAccessFromAzureServices()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.canAccessFromAzureServices()"
  name: "canAccessFromAzureServices()"
  nameWithType: "StorageAccount.canAccessFromAzureServices()"
  summary: "Checks storage account can be accessed from applications running on azure."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canAccessFromAzureServices()"
  desc: "Checks storage account can be accessed from applications running on azure."
  returns:
    description: "true if storage can be accessed from application running on azure, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.canReadLogEntriesFromAnyNetwork()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.canReadLogEntriesFromAnyNetwork()"
  name: "canReadLogEntriesFromAnyNetwork()"
  nameWithType: "StorageAccount.canReadLogEntriesFromAnyNetwork()"
  summary: "Checks storage log entries can be read from any network."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canReadLogEntriesFromAnyNetwork()"
  desc: "Checks storage log entries can be read from any network."
  returns:
    description: "true if storage log entries can be read from any network, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.canReadMetricsFromAnyNetwork()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.canReadMetricsFromAnyNetwork()"
  name: "canReadMetricsFromAnyNetwork()"
  nameWithType: "StorageAccount.canReadMetricsFromAnyNetwork()"
  summary: "Checks storage metrics can be read from any network."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean canReadMetricsFromAnyNetwork()"
  desc: "Checks storage metrics can be read from any network."
  returns:
    description: "true if storage metrics can be read from any network, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.creationTime()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.creationTime()"
  name: "creationTime()"
  nameWithType: "StorageAccount.creationTime()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime creationTime()"
  returns:
    description: "the creation date and time of the storage account in UTC"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.customDomain()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.customDomain()"
  name: "customDomain()"
  nameWithType: "StorageAccount.customDomain()"
  modifiers:
  - "abstract"
  syntax: "public abstract CustomDomain customDomain()"
  returns:
    description: "the user assigned custom domain assigned to this storage account"
    type: "<xref href=\"com.microsoft.azure.management.storage.CustomDomain?alt=com.microsoft.azure.management.storage.CustomDomain&text=CustomDomain\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.encryption()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.encryption()"
  name: "encryption()"
  nameWithType: "StorageAccount.encryption()"
  deprecatedTag: "use <xref uid=\"com.microsoft.azure.management.storage.StorageAccount.encryptionKeySource()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionKeySource()\"></xref>, <xref uid=\"com.microsoft.azure.management.storage.StorageAccount.encryptionStatuses()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#encryptionStatuses()\"></xref> instead."
  modifiers:
  - "abstract"
  syntax: "@Deprecated\npublic abstract Encryption encryption()"
  hasDeprecatedTag: true
  returns:
    description: "the encryption settings on the account."
    type: "<xref href=\"com.microsoft.azure.management.storage.Encryption?alt=com.microsoft.azure.management.storage.Encryption&text=Encryption\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.encryptionKeySource()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.encryptionKeySource()"
  name: "encryptionKeySource()"
  nameWithType: "StorageAccount.encryptionKeySource()"
  modifiers:
  - "abstract"
  syntax: "public abstract StorageAccountEncryptionKeySource encryptionKeySource()"
  returns:
    description: "the source of the key used for encryption."
    type: "<xref href=\"com.microsoft.azure.management.storage.StorageAccountEncryptionKeySource?alt=com.microsoft.azure.management.storage.StorageAccountEncryptionKeySource&text=StorageAccountEncryptionKeySource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.encryptionStatuses()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.encryptionStatuses()"
  name: "encryptionStatuses()"
  nameWithType: "StorageAccount.encryptionStatuses()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<StorageService,StorageAccountEncryptionStatus> encryptionStatuses()"
  returns:
    description: "the encryption statuses indexed by storage service type."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageService?alt=com.microsoft.azure.management.storage.StorageService&text=StorageService\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.storage.StorageAccountEncryptionStatus?alt=com.microsoft.azure.management.storage.StorageAccountEncryptionStatus&text=StorageAccountEncryptionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.endPoints()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.endPoints()"
  name: "endPoints()"
  nameWithType: "StorageAccount.endPoints()"
  modifiers:
  - "abstract"
  syntax: "public abstract PublicEndpoints endPoints()"
  returns:
    description: "the URLs that are used to perform a retrieval of a public blob,\n queue or table object. Note that StandardZRS and PremiumLRS accounts\n only return the blob endpoint"
    type: "<xref href=\"com.microsoft.azure.management.storage.PublicEndpoints?alt=com.microsoft.azure.management.storage.PublicEndpoints&text=PublicEndpoints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.getKeys()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.getKeys()"
  name: "getKeys()"
  nameWithType: "StorageAccount.getKeys()"
  summary: "Fetch the up-to-date access keys from Azure for this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract List<StorageAccountKey> getKeys()"
  desc: "Fetch the up-to-date access keys from Azure for this storage account."
  returns:
    description: "the access keys for this storage account"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.getKeysAsync()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.getKeysAsync()"
  name: "getKeysAsync()"
  nameWithType: "StorageAccount.getKeysAsync()"
  summary: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<List<StorageAccountKey>> getKeysAsync()"
  desc: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  returns:
    description: "a representation of the deferred computation of this call, returning the access keys"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.getKeysAsync(com.microsoft.rest.ServiceCallback<java.util.List<com.microsoft.azure.management.storage.StorageAccountKey>>)"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)"
  name: "getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)"
  nameWithType: "StorageAccount.getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)"
  summary: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "the callback to call on success or failure, with access keys as parameter."
    name: "callback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public abstract ServiceFuture<List<StorageAccountKey>> getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)"
  desc: "Fetch the up-to-date access keys from Azure for this storage account asynchronously."
  returns:
    description: "a handle to cancel the request"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.ipAddressRangesWithAccess()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.ipAddressRangesWithAccess()"
  name: "ipAddressRangesWithAccess()"
  nameWithType: "StorageAccount.ipAddressRangesWithAccess()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> ipAddressRangesWithAccess()"
  returns:
    description: "the list of ip address ranges having access to the storage account."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.ipAddressesWithAccess()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.ipAddressesWithAccess()"
  name: "ipAddressesWithAccess()"
  nameWithType: "StorageAccount.ipAddressesWithAccess()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> ipAddressesWithAccess()"
  returns:
    description: "the list of ip addresses having access to the storage account."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isAccessAllowedFromAllNetworks()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isAccessAllowedFromAllNetworks()"
  name: "isAccessAllowedFromAllNetworks()"
  nameWithType: "StorageAccount.isAccessAllowedFromAllNetworks()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAccessAllowedFromAllNetworks()"
  returns:
    description: "true if authenticated application from any network is allowed to access the\n storage account, false if only application from whitelisted network (subnet, ip address,\n ip address range) can access the storage account."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isAzureFilesAadIntegrationEnabled()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isAzureFilesAadIntegrationEnabled()"
  name: "isAzureFilesAadIntegrationEnabled()"
  nameWithType: "StorageAccount.isAzureFilesAadIntegrationEnabled()"
  summary: "Checks whether Aad Integration is enabled for files on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAzureFilesAadIntegrationEnabled()"
  desc: "Checks whether Aad Integration is enabled for files on this storage account."
  returns:
    description: "true if Aad integration is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isBlobPublicAccessAllowed()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isBlobPublicAccessAllowed()"
  name: "isBlobPublicAccessAllowed()"
  nameWithType: "StorageAccount.isBlobPublicAccessAllowed()"
  summary: "Checks whether blob public access is allowed."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isBlobPublicAccessAllowed()"
  desc: "Checks whether blob public access is allowed."
  returns:
    description: "true if blob public access is allowed, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isHnsEnabled()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isHnsEnabled()"
  name: "isHnsEnabled()"
  nameWithType: "StorageAccount.isHnsEnabled()"
  summary: "Checks whether Hns is enabled on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isHnsEnabled()"
  desc: "Checks whether Hns is enabled on this storage account."
  returns:
    description: "true if Hns is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isHttpsTrafficOnly()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isHttpsTrafficOnly()"
  name: "isHttpsTrafficOnly()"
  nameWithType: "StorageAccount.isHttpsTrafficOnly()"
  summary: "Checks whether storage account only allow HTTPS traffic."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isHttpsTrafficOnly()"
  desc: "Checks whether storage account only allow HTTPS traffic."
  returns:
    description: "true if only allow HTTPS traffic, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.isLargeFileSharesEnabled()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.isLargeFileSharesEnabled()"
  name: "isLargeFileSharesEnabled()"
  nameWithType: "StorageAccount.isLargeFileSharesEnabled()"
  summary: "Checks whether large file shares enabled on this storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isLargeFileSharesEnabled()"
  desc: "Checks whether large file shares enabled on this storage account."
  returns:
    description: "true if large file shares is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.kind()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.kind()"
  name: "kind()"
  nameWithType: "StorageAccount.kind()"
  modifiers:
  - "abstract"
  syntax: "public abstract Kind kind()"
  returns:
    description: "the kind of the storage account. Possible values are 'Storage',\n 'BlobStorage'."
    type: "<xref href=\"com.microsoft.azure.management.storage.Kind?alt=com.microsoft.azure.management.storage.Kind&text=Kind\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.lastGeoFailoverTime()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.lastGeoFailoverTime()"
  name: "lastGeoFailoverTime()"
  nameWithType: "StorageAccount.lastGeoFailoverTime()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime lastGeoFailoverTime()"
  returns:
    description: "the timestamp of the most recent instance of a failover to the\n secondary location. Only the most recent timestamp is retained. This\n element is not returned if there has never been a failover instance.\n Only available if the accountType is StandardGRS or StandardRAGRS"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.minimumTlsVersion()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.minimumTlsVersion()"
  name: "minimumTlsVersion()"
  nameWithType: "StorageAccount.minimumTlsVersion()"
  modifiers:
  - "abstract"
  syntax: "public abstract MinimumTlsVersion minimumTlsVersion()"
  returns:
    description: "the minimum TLS version for HTTPS traffic."
    type: "<xref href=\"com.microsoft.azure.management.storage.MinimumTlsVersion?alt=com.microsoft.azure.management.storage.MinimumTlsVersion&text=MinimumTlsVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.networkSubnetsWithAccess()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.networkSubnetsWithAccess()"
  name: "networkSubnetsWithAccess()"
  nameWithType: "StorageAccount.networkSubnetsWithAccess()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> networkSubnetsWithAccess()"
  returns:
    description: "the list of resource id of virtual network subnet having access to the storage account."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.provisioningState()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.provisioningState()"
  name: "provisioningState()"
  nameWithType: "StorageAccount.provisioningState()"
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  returns:
    description: "the status of the storage account at the time the operation was\n called. Possible values include: 'Creating', 'ResolvingDNS',\n 'Succeeded'"
    type: "<xref href=\"com.microsoft.azure.management.storage.ProvisioningState?alt=com.microsoft.azure.management.storage.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.regenerateKey(java.lang.String)"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.regenerateKey(String keyName)"
  name: "regenerateKey(String keyName)"
  nameWithType: "StorageAccount.regenerateKey(String keyName)"
  summary: "Regenerates the access keys for this storage account."
  modifiers:
  - "abstract"
  parameters:
  - description: "if the key name"
    name: "keyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<StorageAccountKey> regenerateKey(String keyName)"
  desc: "Regenerates the access keys for this storage account."
  returns:
    description: "the generated access keys for this storage account"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(java.lang.String)"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String keyName)"
  name: "regenerateKeyAsync(String keyName)"
  nameWithType: "StorageAccount.regenerateKeyAsync(String keyName)"
  summary: "Regenerates the access keys for this storage account asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "if the key name"
    name: "keyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<List<StorageAccountKey>> regenerateKeyAsync(String keyName)"
  desc: "Regenerates the access keys for this storage account asynchronously."
  returns:
    description: "a representation of the deferred computation of this call, returning the regenerated access key"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(java.lang.String,com.microsoft.rest.ServiceCallback<java.util.List<com.microsoft.azure.management.storage.StorageAccountKey>>)"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)"
  name: "regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)"
  nameWithType: "StorageAccount.regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)"
  summary: "Regenerates the access keys for this storage account asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "if the key name"
    name: "keyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the callback to call on success or failure, with access keys as parameter."
    name: "callback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public abstract ServiceFuture<List<StorageAccountKey>> regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)"
  desc: "Regenerates the access keys for this storage account asynchronously."
  returns:
    description: "a handle to cancel the request"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.management.storage.StorageAccount.sku()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.sku()"
  name: "sku()"
  nameWithType: "StorageAccount.sku()"
  deprecatedTag: "use <xref uid=\"com.microsoft.azure.management.storage.StorageAccount.skuType()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageAccount#skuType()\"></xref> instead."
  modifiers:
  - "abstract"
  syntax: "@Deprecated\npublic abstract Sku sku()"
  hasDeprecatedTag: true
  returns:
    description: "the sku of this storage account."
    type: "<xref href=\"com.microsoft.azure.management.storage.Sku?alt=com.microsoft.azure.management.storage.Sku&text=Sku\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.skuType()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.skuType()"
  name: "skuType()"
  nameWithType: "StorageAccount.skuType()"
  modifiers:
  - "abstract"
  syntax: "public abstract StorageAccountSkuType skuType()"
  returns:
    description: "the sku of this storage account."
    type: "<xref href=\"com.microsoft.azure.management.storage.StorageAccountSkuType?alt=com.microsoft.azure.management.storage.StorageAccountSkuType&text=StorageAccountSkuType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  name: "systemAssignedManagedServiceIdentityPrincipalId()"
  nameWithType: "StorageAccount.systemAssignedManagedServiceIdentityPrincipalId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String systemAssignedManagedServiceIdentityPrincipalId()"
  returns:
    description: "the Managed Service Identity specific Active Directory service principal ID assigned\n to the storage account."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  fullName: "com.microsoft.azure.management.storage.StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  name: "systemAssignedManagedServiceIdentityTenantId()"
  nameWithType: "StorageAccount.systemAssignedManagedServiceIdentityTenantId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String systemAssignedManagedServiceIdentityTenantId()"
  returns:
    description: "the Managed Service Identity specific Active Directory tenant ID assigned to the\n storage account."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "An immutable client-side representation of an Azure storage account."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.GroupableResource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.GroupableResource&text=GroupableResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.implementation.StorageManager?alt=com.microsoft.azure.management.storage.implementation.StorageManager&text=StorageManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.storage.implementation.StorageAccountInner?alt=com.microsoft.azure.management.storage.implementation.StorageAccountInner&text=StorageAccountInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccount.Update?alt=com.microsoft.azure.management.storage.StorageAccount.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.storage"
artifact: com.microsoft.azure:azure-mgmt-storage:1.41.4
