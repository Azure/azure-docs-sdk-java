### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  id: BlockBlobAsyncClient
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized
  children:
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_BLOCKS
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES_LONG
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES_LONG
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>,boolean)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(com.azure.storage.blob.options.BlockBlobCommitBlockListOptions)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks(com.azure.storage.blob.models.BlockListType)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(com.azure.storage.blob.options.BlockBlobListBlocksOptions)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,byte[],java.lang.String)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,boolean)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(com.azure.storage.blob.options.BlockBlobSimpleUploadOptions)
  - com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions)
  langs:
  - java
  name: BlockBlobAsyncClient
  nameWithType: BlockBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  type: Class
  package: com.azure.storage.blob.specialized
  summary: >-
    Client to a block blob. It may only be instantiated through a <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref> or via the method <xref uid="com.azure.storage.blob.BlobAsyncClient.getBlockBlobAsyncClient()" data-throw-if-not-resolved="false">BlobAsyncClient#getBlockBlobAsyncClient()</xref>. This class does not hold any state about a particular blob, but is instead a convenient way of sending appropriate requests to the resource on the service.


    Please refer to the [Azure Docs][] for more information.


    Note this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> object through <xref uid="reactor.core.publisher.Mono.toFuture*" data-throw-if-not-resolved="false">Mono#toFuture()</xref>.



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs
  syntax:
    content: public final class BlockBlobAsyncClient extends BlobAsyncClientBase
  inheritance:
  - java.lang.Object
  - com.azure.storage.blob.specialized.BlobAsyncClientBase
  inheritedMembers:
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
  - com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.BlockBlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)
  id: BlockBlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: BlockBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  nameWithType: BlockBlobAsyncClient.BlockBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.BlockBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.BlockBlobAsyncClient*
  type: Constructor
  package: com.azure.storage.blob.specialized
  summary: Package-private constructor for use by <xref uid="com.azure.storage.blob.specialized.SpecializedBlobClientBuilder" data-throw-if-not-resolved="false">SpecializedBlobClientBuilder</xref>.
  syntax:
    content: " BlockBlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.blob.BlobServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: containerName
      type: java.lang.String
      description: The container name.
    - id: blobName
      type: java.lang.String
      description: The blob name.
    - id: snapshot
      type: java.lang.String
      description: The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly.
    - id: customerProvidedKey
      type: com.azure.storage.blob.models.CpkInfo
      description: >-
        Customer provided key used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: encryptionScope
      type: com.azure.storage.blob.implementation.models.EncryptionScope
      description: >-
        Encryption scope used during encryption of the blob's data on the server, pass
         <code>null</code> to allow the service to use its own encryption.
    - id: versionId
      type: java.lang.String
      description: The version identifier for the blob, pass <code>null</code> to interact with the latest blob version.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_BLOCKS
  id: MAX_BLOCKS
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: MAX_BLOCKS
  nameWithType: BlockBlobAsyncClient.MAX_BLOCKS
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_BLOCKS
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of blocks allowed in a block blob.
  syntax:
    content: public static final int MAX_BLOCKS
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES
  id: MAX_STAGE_BLOCK_BYTES
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: MAX_STAGE_BLOCK_BYTES
  nameWithType: BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to stageBlock.
  syntax:
    content: public static final int MAX_STAGE_BLOCK_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES_LONG
  id: MAX_STAGE_BLOCK_BYTES_LONG
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: MAX_STAGE_BLOCK_BYTES_LONG
  nameWithType: BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES_LONG
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_STAGE_BLOCK_BYTES_LONG
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to stageBlock.
  syntax:
    content: public static final long MAX_STAGE_BLOCK_BYTES_LONG
    return:
      type: long
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES
  id: MAX_UPLOAD_BLOB_BYTES
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: MAX_UPLOAD_BLOB_BYTES
  nameWithType: BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to upload.
  syntax:
    content: public static final int MAX_UPLOAD_BLOB_BYTES
    return:
      type: int
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES_LONG
  id: MAX_UPLOAD_BLOB_BYTES_LONG
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: MAX_UPLOAD_BLOB_BYTES_LONG
  nameWithType: BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES_LONG
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES_LONG
  type: Field
  package: com.azure.storage.blob.specialized
  summary: Indicates the maximum number of bytes that can be sent in a call to upload.
  syntax:
    content: public static final long MAX_UPLOAD_BLOB_BYTES_LONG
    return:
      type: long
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)
  id: commitBlockList(java.util.List<java.lang.String>)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: commitBlockList(List<String> base64BlockIds)
  nameWithType: BlockBlobAsyncClient.commitBlockList(List<String> base64BlockIds)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(List<String> base64BlockIds)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.commitBlockList(Collections.singletonList(base64BlockID)).subscribe(response ->
         System.out.printf("Committing block list completed. Last modified: %s%n", response.getLastModified()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list
  syntax:
    content: public Mono<BlockBlobItem> commitBlockList(List<String> base64BlockIds)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockBlobItem>
      description: A reactive response containing the information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>,boolean)
  id: commitBlockList(java.util.List<java.lang.String>,boolean)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: commitBlockList(List<String> base64BlockIds, boolean overwrite)
  nameWithType: BlockBlobAsyncClient.commitBlockList(List<String> base64BlockIds, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(List<String> base64BlockIds, boolean overwrite)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    boolean overwrite = false; // Default behavior
     client.commitBlockList(Collections.singletonList(base64BlockID), overwrite).subscribe(response ->
         System.out.printf("Committing block list completed. Last modified: %s%n", response.getLastModified()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list
  syntax:
    content: public Mono<BlockBlobItem> commitBlockList(List<String> base64BlockIds, boolean overwrite)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockBlobItem>
      description: A reactive response containing the information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(com.azure.storage.blob.options.BlockBlobCommitBlockListOptions)
  id: commitBlockListWithResponse(com.azure.storage.blob.options.BlockBlobCommitBlockListOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n client.commitBlockListWithResponse(new BlockBlobCommitBlockListOptions(Collections.singletonList(base64BlockID))\n     .setHeaders(headers).setMetadata(metadata).setTags(tags).setTier(AccessTier.HOT)\n     .setRequestConditions(requestConditions))\n     .subscribe(response ->\n     System.out.printf(\"Committing block list completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  syntax:
    content: public Mono<Response<BlockBlobItem>> commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlockBlobCommitBlockListOptions
      description: <xref uid="com.azure.storage.blob.options.BlockBlobCommitBlockListOptions" data-throw-if-not-resolved="false">BlockBlobCommitBlockListOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>>
      description: A reactive response containing the information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  id: commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more information, see the [Azure Docs][].\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n client.commitBlockListWithResponse(Collections.singletonList(base64BlockID), headers, metadata,\n     AccessTier.HOT, requestConditions).subscribe(response ->\n         System.out.printf(\"Committing block list completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  syntax:
    content: public Mono<Response<BlockBlobItem>> commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
    parameters:
    - id: base64BlockIds
      type: java.util.List<java.lang.String>
      description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>>
      description: A reactive response containing the information of the block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks(com.azure.storage.blob.models.BlockListType)
  id: listBlocks(com.azure.storage.blob.models.BlockListType)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: listBlocks(BlockListType listType)
  nameWithType: BlockBlobAsyncClient.listBlocks(BlockListType listType)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks(BlockListType listType)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of blocks that have been uploaded as part of a block blob using the specified block list filter. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listBlocks(BlockListType.ALL).subscribe(block -> {\n     System.out.println(\"Committed Blocks:\");\n     block.getCommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n \n     System.out.println(\"Uncommitted Blocks:\");\n     block.getUncommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-block-list"
  syntax:
    content: public Mono<BlockList> listBlocks(BlockListType listType)
    parameters:
    - id: listType
      type: com.azure.storage.blob.models.BlockListType
      description: Specifies which type of blocks to return.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockList>
      description: A reactive response containing the list of blocks.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String)
  id: listBlocksWithResponse(com.azure.storage.blob.models.BlockListType,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: listBlocksWithResponse(BlockListType listType, String leaseId)
  nameWithType: BlockBlobAsyncClient.listBlocksWithResponse(BlockListType listType, String leaseId)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(BlockListType listType, String leaseId)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of blocks that have been uploaded as part of a block blob using the specified block list filter. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listBlocksWithResponse(BlockListType.ALL, leaseId).subscribe(response -> {\n     BlockList block = response.getValue();\n     System.out.println(\"Committed Blocks:\");\n     block.getCommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n \n     System.out.println(\"Uncommitted Blocks:\");\n     block.getUncommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(), b.getSize()));\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-block-list"
  syntax:
    content: public Mono<Response<BlockList>> listBlocksWithResponse(BlockListType listType, String leaseId)
    parameters:
    - id: listType
      type: com.azure.storage.blob.models.BlockListType
      description: Specifies which type of blocks to return.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockList>>
      description: A reactive response containing the list of blocks.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(com.azure.storage.blob.options.BlockBlobListBlocksOptions)
  id: listBlocksWithResponse(com.azure.storage.blob.options.BlockBlobListBlocksOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: listBlocksWithResponse(BlockBlobListBlocksOptions options)
  nameWithType: BlockBlobAsyncClient.listBlocksWithResponse(BlockBlobListBlocksOptions options)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse(BlockBlobListBlocksOptions options)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Returns the list of blocks that have been uploaded as part of a block blob using the specified block list filter. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listBlocksWithResponse(new BlockBlobListBlocksOptions(BlockListType.ALL)\n     .setLeaseId(leaseId)\n     .setIfTagsMatch(tags)).subscribe(response -> {\n         BlockList block = response.getValue();\n         System.out.println(\"Committed Blocks:\");\n         block.getCommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(),\n             b.getSizeLong()));\n \n         System.out.println(\"Uncommitted Blocks:\");\n         block.getUncommittedBlocks().forEach(b -> System.out.printf(\"Name: %s, Size: %d\", b.getName(),\n             b.getSizeLong()));\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-block-list"
  syntax:
    content: public Mono<Response<BlockList>> listBlocksWithResponse(BlockBlobListBlocksOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlockBlobListBlocksOptions
      description: <xref uid="com.azure.storage.blob.options.BlockBlobListBlocksOptions" data-throw-if-not-resolved="false">BlockBlobListBlocksOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockList>>
      description: A reactive response containing the list of blocks.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: stageBlock(String base64BlockId, Flux<ByteBuffer> data, long length)
  nameWithType: BlockBlobAsyncClient.stageBlock(String base64BlockId, Flux<ByteBuffer> data, long length)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(String base64BlockId, Flux<ByteBuffer> data, long length)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList. For more information, see the [Azure Docs][].


    Note that the data passed must be replayable if retries are enabled (the default). In other words, the



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block
  syntax:
    content: public Mono<Void> stageBlock(String base64BlockId, Flux<ByteBuffer> data, long length)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the block. Note that this <code>Flux</code> must be replayable if retries are enabled
         (the default). In other words, the <code>Flux</code> must produce the same data each time it is subscribed to.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data emitted by the <code>Flux</code>.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: >-
        A reactive response signalling completion.

         <p><strong>Code Samples</strong></p>

         <pre>
         client.stageBlock&#40;base64BlockID, data, length&#41;
             .subscribe&#40;
                 response -&gt; System.out.println&#40;&quot;Staging block completed&quot;&#41;,
                 error -&gt; System.out.printf&#40;&quot;Error when calling stage Block: %s&quot;, error&#41;&#41;;
         </pre>
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  id: stageBlockFromUrl(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  nameWithType: BlockBlobAsyncClient.stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block to be committed as part of a blob where the contents are read from a URL. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.stageBlockFromUrl(base64BlockID, sourceUrl, new BlobRange(offset, count))
         .subscribe(
             response -> System.out.println("Staging block completed"),
             error -> System.out.printf("Error when calling stage Block: %s", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
  syntax:
    content: public Mono<Void> stageBlockFromUrl(String base64BlockId, String sourceUrl, BlobRange sourceRange)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  id: stageBlockFromUrlWithResponse(java.lang.String,java.lang.String,com.azure.storage.blob.models.BlobRange,byte[],java.lang.String,com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions)
  nameWithType: BlockBlobAsyncClient.stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a new block to be committed as part of a blob where the contents are read from a URL. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions sourceRequestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.stageBlockFromUrlWithResponse(base64BlockID, sourceUrl, new BlobRange(offset, count), null,\n     leaseId, sourceRequestConditions).subscribe(response ->\n     System.out.printf(\"Staging block from URL completed with status %d%n\", response.getStatusCode()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block-from-url"
  syntax:
    content: public Mono<Response<Void>> stageBlockFromUrlWithResponse(String base64BlockId, String sourceUrl, BlobRange sourceRange, byte[] sourceContentMd5, String leaseId, BlobRequestConditions sourceRequestConditions)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: sourceUrl
      type: java.lang.String
      description: >-
        The url to the blob that will be the source of the copy.  A source blob in the same storage
         account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
         must either be public or must be authenticated via a shared access signature. If the source blob is public, no
         authentication is required to perform the operation.
    - id: sourceRange
      type: com.azure.storage.blob.models.BlobRange
      description: <xref uid="com.azure.storage.blob.models.BlobRange" data-throw-if-not-resolved="false">BlobRange</xref>
    - id: sourceContentMd5
      type: byte[]
      description: >-
        An MD5 hash of the block content. This hash is used to verify the integrity of the block
         during transport. When this header is specified, the storage service compares the hash of the content that has
         arrived with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not
         match, the operation will fail.
    - id: leaseId
      type: java.lang.String
      description: The lease ID that the active lease on the blob must match.
    - id: sourceRequestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,byte[],java.lang.String)
  id: stageBlockWithResponse(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,byte[],java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: stageBlockWithResponse(String base64BlockId, Flux<ByteBuffer> data, long length, byte[] contentMd5, String leaseId)
  nameWithType: BlockBlobAsyncClient.stageBlockWithResponse(String base64BlockId, Flux<ByteBuffer> data, long length, byte[] contentMd5, String leaseId)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse(String base64BlockId, Flux<ByteBuffer> data, long length, byte[] contentMd5, String leaseId)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Uploads the specified block to the block blob's "staging area" to be later committed by a call to commitBlockList. For more information, see the [Azure Docs][].


    Note that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code Samples**


    ```java

    client.stageBlockWithResponse(base64BlockID, data, length, md5, leaseId).subscribe(response ->
         System.out.printf("Staging block completed with status %d%n", response.getStatusCode()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-block
  syntax:
    content: public Mono<Response<Void>> stageBlockWithResponse(String base64BlockId, Flux<ByteBuffer> data, long length, byte[] contentMd5, String leaseId)
    parameters:
    - id: base64BlockId
      type: java.lang.String
      description: >-
        A Base64 encoded <code>String</code> that specifies the ID for this block. Note that all block
         ids for a given blob must be the same length.
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the block. Note that this <code>Flux</code> must be replayable if retries are enabled
         (the default). In other words, the Flux must produce the same data each time it is subscribed to.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data emitted by the <code>Flux</code>.
    - id: contentMd5
      type: byte[]
      description: >-
        An MD5 hash of the block content. This hash is used to verify the integrity of the block during
         transport. When this header is specified, the storage service compares the hash of the content that has arrived
         with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
         operation will fail.
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the blob must match.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive response signalling completion.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: upload(Flux<ByteBuffer> data, long length)
  nameWithType: BlockBlobAsyncClient.upload(Flux<ByteBuffer> data, long length)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(Flux<ByteBuffer> data, long length)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block blob. By default this method will not overwrite an existing blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].


    Note that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code Samples**


    ```java

    client.upload(data, length).subscribe(response ->
         System.out.printf("Uploaded BlockBlob MD5 is %s%n",
             Base64.getEncoder().encodeToString(response.getContentMd5())));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public Mono<BlockBlobItem> upload(Flux<ByteBuffer> data, long length)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the blob. Note that this <code>Flux</code> must be replayable if retries are enabled
         (the default). In other words, the Flux must produce the same data each time it is subscribed to.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data emitted by the <code>Flux</code>.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockBlobItem>
      description: A reactive response containing the information of the uploaded block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,boolean)
  id: upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,boolean)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: upload(Flux<ByteBuffer> data, long length, boolean overwrite)
  nameWithType: BlockBlobAsyncClient.upload(Flux<ByteBuffer> data, long length, boolean overwrite)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload(Flux<ByteBuffer> data, long length, boolean overwrite)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: >-
    Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].


    Note that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code Samples**


    ```java

    boolean overwrite = false; // Default behavior
     client.upload(data, length, overwrite).subscribe(response ->
         System.out.printf("Uploaded BlockBlob MD5 is %s%n",
             Base64.getEncoder().encodeToString(response.getContentMd5())));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob
  syntax:
    content: public Mono<BlockBlobItem> upload(Flux<ByteBuffer> data, long length, boolean overwrite)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the blob. Note that this <code>Flux</code> must be replayable if retries are enabled
         (the default). In other words, the Flux must produce the same data each time it is subscribed to.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data emitted by the <code>Flux</code>.
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the blob.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockBlobItem>
      description: A reactive response containing the information of the uploaded block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(com.azure.storage.blob.options.BlockBlobSimpleUploadOptions)
  id: uploadWithResponse(com.azure.storage.blob.options.BlockBlobSimpleUploadOptions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: uploadWithResponse(BlockBlobSimpleUploadOptions options)
  nameWithType: BlockBlobAsyncClient.uploadWithResponse(BlockBlobSimpleUploadOptions options)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(BlockBlobSimpleUploadOptions options)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a new block blob, or updates the content of an existing block blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.uploadWithResponse(new BlockBlobSimpleUploadOptions(data, length).setHeaders(headers)\n     .setMetadata(metadata).setTags(tags).setTier(AccessTier.HOT).setContentMd5(md5)\n     .setRequestConditions(requestConditions))\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  syntax:
    content: public Mono<Response<BlockBlobItem>> uploadWithResponse(BlockBlobSimpleUploadOptions options)
    parameters:
    - id: options
      type: com.azure.storage.blob.options.BlockBlobSimpleUploadOptions
      description: <xref uid="com.azure.storage.blob.options.BlockBlobSimpleUploadOptions" data-throw-if-not-resolved="false">BlockBlobSimpleUploadOptions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>>
      description: A reactive response containing the information of the uploaded block blob.
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions)
  id: uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.specialized.BlockBlobAsyncClient
  langs:
  - java
  name: uploadWithResponse(Flux<ByteBuffer> data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions)
  nameWithType: BlockBlobAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions)
  overload: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse*
  type: Method
  package: com.azure.storage.blob.specialized
  summary: "Creates a new block blob, or updates the content of an existing block blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock and PutBlockList. For more information, see the [Azure Docs][].\n\nNote that the data passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n \n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n byte[] md5 = MessageDigest.getInstance(\"MD5\").digest(\"data\".getBytes(StandardCharsets.UTF_8));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n client.uploadWithResponse(data, length, headers, metadata, AccessTier.HOT, md5, requestConditions)\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-blob"
  syntax:
    content: public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions)
    parameters:
    - id: data
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: >-
        The data to write to the blob. Note that this <code>Flux</code> must be replayable if retries are enabled
         (the default). In other words, the Flux must produce the same data each time it is subscribed to.
    - id: length
      type: long
      description: >-
        The exact length of the data. It is important that this value match precisely the length of the
         data emitted by the <code>Flux</code>.
    - id: headers
      type: com.azure.storage.blob.models.BlobHttpHeaders
      description: <xref uid="com.azure.storage.blob.models.BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the blob.
    - id: tier
      type: com.azure.storage.blob.models.AccessTier
      description: <xref uid="com.azure.storage.blob.models.AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    - id: contentMd5
      type: byte[]
      description: >-
        An MD5 hash of the blob content. This hash is used to verify the integrity of the blob during
         transport. When this header is specified, the storage service compares the hash of the content that has arrived
         with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
         operation will fail.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>>
      description: A reactive response containing the information of the uploaded block blob.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.BlobServiceVersion
  name: BlobServiceVersion
  nameWithType: BlobServiceVersion
  fullName: com.azure.storage.blob.BlobServiceVersion
- uid: com.azure.storage.blob.models.CpkInfo
  name: CpkInfo
  nameWithType: CpkInfo
  fullName: com.azure.storage.blob.models.CpkInfo
- uid: com.azure.storage.blob.implementation.models.EncryptionScope
  name: EncryptionScope
  nameWithType: EncryptionScope
  fullName: com.azure.storage.blob.implementation.models.EncryptionScope
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.BlockBlobAsyncClient*
  name: BlockBlobAsyncClient
  nameWithType: BlockBlobAsyncClient.BlockBlobAsyncClient
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.BlockBlobAsyncClient
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockBlobItem>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockBlobItem
    name: BlockBlobItem
    fullName: com.azure.storage.blob.models.BlockBlobItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload*
  name: upload
  nameWithType: BlockBlobAsyncClient.upload
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.upload
  package: com.azure.storage.blob.specialized
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.models.BlobHttpHeaders
  name: BlobHttpHeaders
  nameWithType: BlobHttpHeaders
  fullName: com.azure.storage.blob.models.BlobHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.AccessTier
  name: AccessTier
  nameWithType: AccessTier
  fullName: com.azure.storage.blob.models.AccessTier
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.blob.models.BlobRequestConditions
  name: BlobRequestConditions
  nameWithType: BlobRequestConditions
  fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockBlobItem>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockBlobItem
    name: BlockBlobItem
    fullName: com.azure.storage.blob.models.BlockBlobItem
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse*
  name: uploadWithResponse
  nameWithType: BlockBlobAsyncClient.uploadWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.uploadWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlockBlobSimpleUploadOptions
  name: BlockBlobSimpleUploadOptions
  nameWithType: BlockBlobSimpleUploadOptions
  fullName: com.azure.storage.blob.options.BlockBlobSimpleUploadOptions
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock*
  name: stageBlock
  nameWithType: BlockBlobAsyncClient.stageBlock
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse*
  name: stageBlockWithResponse
  nameWithType: BlockBlobAsyncClient.stageBlockWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.BlobRange
  name: BlobRange
  nameWithType: BlobRange
  fullName: com.azure.storage.blob.models.BlobRange
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl*
  name: stageBlockFromUrl
  nameWithType: BlockBlobAsyncClient.stageBlockFromUrl
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrl
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse*
  name: stageBlockFromUrlWithResponse
  nameWithType: BlockBlobAsyncClient.stageBlockFromUrlWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlockFromUrlWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.models.BlockListType
  name: BlockListType
  nameWithType: BlockListType
  fullName: com.azure.storage.blob.models.BlockListType
- uid: reactor.core.publisher.Mono<com.azure.storage.blob.models.BlockList>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockList
    name: BlockList
    fullName: com.azure.storage.blob.models.BlockList
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks*
  name: listBlocks
  nameWithType: BlockBlobAsyncClient.listBlocks
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocks
  package: com.azure.storage.blob.specialized
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlockList>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlockList
    name: BlockList
    fullName: com.azure.storage.blob.models.BlockList
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse*
  name: listBlocksWithResponse
  nameWithType: BlockBlobAsyncClient.listBlocksWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.listBlocksWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlockBlobListBlocksOptions
  name: BlockBlobListBlocksOptions
  nameWithType: BlockBlobListBlocksOptions
  fullName: com.azure.storage.blob.options.BlockBlobListBlocksOptions
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList*
  name: commitBlockList
  nameWithType: BlockBlobAsyncClient.commitBlockList
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse*
  name: commitBlockListWithResponse
  nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse
  package: com.azure.storage.blob.specialized
- uid: com.azure.storage.blob.options.BlockBlobCommitBlockListOptions
  name: BlockBlobCommitBlockListOptions
  nameWithType: BlockBlobCommitBlockListOptions
  fullName: com.azure.storage.blob.options.BlockBlobCommitBlockListOptions
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase
  name: BlobAsyncClientBase
  nameWithType: BlobAsyncClientBase
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String>,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
  name: BlobAsyncClientBase.getServiceVersion()
  nameWithType: BlobAsyncClientBase.getServiceVersion()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
  name: BlobAsyncClientBase.beginCopy(String,Duration)
  nameWithType: BlobAsyncClientBase.beginCopy(String,Duration)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
  name: BlobAsyncClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String)
  nameWithType: BlobAsyncClientBase.setAccessTierWithResponse(AccessTier,RehydratePriority,String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
  name: BlobAsyncClientBase.abortCopyFromUrl(String)
  nameWithType: BlobAsyncClientBase.abortCopyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
  name: BlobAsyncClientBase.undeleteWithResponse()
  nameWithType: BlobAsyncClientBase.undeleteWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
  name: BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions)
  nameWithType: BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
  name: BlobAsyncClientBase.getAccountInfo()
  nameWithType: BlobAsyncClientBase.getAccountInfo()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobAsyncClientBase.setMetadata(Map<String,String>)
  nameWithType: BlobAsyncClientBase.setMetadata(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
  name: BlobAsyncClientBase.setTags(Map<String,String>)
  nameWithType: BlobAsyncClientBase.setTags(Map<String,String>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
  name: BlobAsyncClientBase.getTags()
  nameWithType: BlobAsyncClientBase.getTags()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
  name: BlobAsyncClientBase.setAccessTier(AccessTier)
  nameWithType: BlobAsyncClientBase.setAccessTier(AccessTier)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map<String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
  name: BlobAsyncClientBase.delete()
  nameWithType: BlobAsyncClientBase.delete()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  name: BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  nameWithType: BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues,UserDelegationKey)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
  name: BlobAsyncClientBase.getHttpPipeline()
  nameWithType: BlobAsyncClientBase.getHttpPipeline()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
  name: BlobAsyncClientBase.queryWithResponse(BlobQueryOptions)
  nameWithType: BlobAsyncClientBase.queryWithResponse(BlobQueryOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
  name: BlobAsyncClientBase.getVersionClient(String)
  nameWithType: BlobAsyncClientBase.getVersionClient(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
  name: BlobAsyncClientBase.abortCopyFromUrlWithResponse(String,String)
  nameWithType: BlobAsyncClientBase.abortCopyFromUrlWithResponse(String,String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
  name: BlobAsyncClientBase.getAccountName()
  nameWithType: BlobAsyncClientBase.getAccountName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
  name: BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions)
  nameWithType: BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
  name: BlobAsyncClientBase.getProperties()
  nameWithType: BlobAsyncClientBase.getProperties()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
  name: BlobAsyncClientBase.getAccountInfoWithResponse()
  nameWithType: BlobAsyncClientBase.getAccountInfoWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
  name: BlobAsyncClientBase.getCustomerProvidedKey()
  nameWithType: BlobAsyncClientBase.getCustomerProvidedKey()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
  name: BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions)
  nameWithType: BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
  name: BlobAsyncClientBase.getVersionId()
  nameWithType: BlobAsyncClientBase.getVersionId()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
  name: BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders)
  nameWithType: BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>)
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set<OpenOption>)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
  name: BlobAsyncClientBase.download()
  nameWithType: BlobAsyncClientBase.download()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.download()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
  name: BlobAsyncClientBase.getBlobUrl()
  nameWithType: BlobAsyncClientBase.getBlobUrl()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.setMetadataWithResponse(Map<String,String>,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
  name: BlobAsyncClientBase.getSnapshotClient(String)
  nameWithType: BlobAsyncClientBase.getSnapshotClient(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
  name: BlobAsyncClientBase.getEncryptionScope()
  nameWithType: BlobAsyncClientBase.getEncryptionScope()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
  name: BlobAsyncClientBase.exists()
  nameWithType: BlobAsyncClientBase.exists()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType,BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
  name: BlobAsyncClientBase.getSnapshotId()
  nameWithType: BlobAsyncClientBase.getSnapshotId()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
  name: BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions)
  nameWithType: BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
  name: BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions)
  nameWithType: BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
  name: BlobAsyncClientBase.getContainerName()
  nameWithType: BlobAsyncClientBase.getContainerName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean)
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
  name: BlobAsyncClientBase.createSnapshot()
  nameWithType: BlobAsyncClientBase.createSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
  name: BlobAsyncClientBase.getBlobName()
  nameWithType: BlobAsyncClientBase.getBlobName()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
  name: BlobAsyncClientBase.copyFromUrl(String)
  nameWithType: BlobAsyncClientBase.copyFromUrl(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: BlobAsyncClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: BlobAsyncClientBase.beginCopy(String,Map<String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
  name: BlobAsyncClientBase.undelete()
  nameWithType: BlobAsyncClientBase.undelete()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
  name: BlobAsyncClientBase.downloadToFile(String,boolean)
  nameWithType: BlobAsyncClientBase.downloadToFile(String,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  name: BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues)
  nameWithType: BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
  name: BlobAsyncClientBase.query(String)
  nameWithType: BlobAsyncClientBase.query(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
  name: BlobAsyncClientBase.downloadWithResponse(BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean)
  nameWithType: BlobAsyncClientBase.downloadWithResponse(BlobRange,DownloadRetryOptions,BlobRequestConditions,boolean)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
  name: BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions)
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
  name: BlobAsyncClientBase.downloadToFile(String)
  nameWithType: BlobAsyncClientBase.downloadToFile(String)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
  name: BlobAsyncClientBase.existsWithResponse()
  nameWithType: BlobAsyncClientBase.existsWithResponse()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
  name: BlobAsyncClientBase.isSnapshot()
  nameWithType: BlobAsyncClientBase.isSnapshot()
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.storage.blob.models.BlockBlobItem
  name: BlockBlobItem
  nameWithType: BlockBlobItem
  fullName: com.azure.storage.blob.models.BlockBlobItem
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.blob.models.BlockList
  name: BlockList
  nameWithType: BlockList
  fullName: com.azure.storage.blob.models.BlockList
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
  name: String,String>,BlobRequestConditions)
  nameWithType: String,String>,BlobRequestConditions)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map
  name: BlobAsyncClientBase.createSnapshotWithResponse(Map
  nameWithType: BlobAsyncClientBase.createSnapshotWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map
- uid: java.lang.String,java.lang.String>)
  name: String,String>)
  nameWithType: String,String>)
  fullName: java.lang.String,java.lang.String>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map
  name: BlobAsyncClientBase.setMetadata(Map
  nameWithType: BlobAsyncClientBase.setMetadata(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map
  name: BlobAsyncClientBase.setTags(Map
  nameWithType: BlobAsyncClientBase.setTags(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
  name: String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  nameWithType: String,String>,AccessTier,RequestConditions,BlobRequestConditions)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
  name: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map
  nameWithType: BlobAsyncClientBase.copyFromUrlWithResponse(String,Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
  name: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  nameWithType: BlobAsyncClientBase.downloadToFileWithResponse(String,BlobRange,ParallelTransferOptions,DownloadRetryOptions,BlobRequestConditions,boolean,Set
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set
- uid: java.nio.file.OpenOption>)
  name: OpenOption>)
  nameWithType: OpenOption>)
  fullName: java.nio.file.OpenOption>)
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map
  name: BlobAsyncClientBase.setMetadataWithResponse(Map
  nameWithType: BlobAsyncClientBase.setMetadataWithResponse(Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map
  name: BlobAsyncClientBase.beginCopy(String,Map
  nameWithType: BlobAsyncClientBase.beginCopy(String,Map
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map
- uid: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
  name: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  nameWithType: String,String>,AccessTier,RehydratePriority,RequestConditions,BlobRequestConditions,Duration)
  fullName: java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)
