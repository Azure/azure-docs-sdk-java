### YamlMime:JavaMember
uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync*"
fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync"
name: "getWithResponseAsync"
nameWithType: "ExpressRoutePortsLocationsClient.getWithResponseAsync"
members:
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync(String locationName)"
  name: "getWithResponseAsync(String locationName)"
  nameWithType: "ExpressRoutePortsLocationsClient.getWithResponseAsync(String locationName)"
  summary: "Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location."
  parameters:
  - description: "Name of the requested ExpressRoutePort peering location."
    name: "locationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<ExpressRoutePortsLocationInner>> getWithResponseAsync(String locationName)"
  returns:
    description: "definition of the ExpressRoutePorts peering location resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.network.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-network:2.1.0
