### YamlMime:JavaType
uid: "com.azure.spring.data.cosmos.core.CosmosTemplate"
fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate"
name: "CosmosTemplate"
nameWithType: "CosmosTemplate"
summary: "Template class for cosmos db"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **CosmosTemplate**</br> implements <xref href=\"com.azure.spring.data.cosmos.core.CosmosOperations?alt=com.azure.spring.data.cosmos.core.CosmosOperations&text=CosmosOperations\" data-throw-if-not-resolved=\"False\" />, <xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  name: "CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  nameWithType: "CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "databaseName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  name: "CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  nameWithType: "CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "client"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClient?alt=com.azure.cosmos.CosmosAsyncClient&text=CosmosAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "databaseName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  - description: "can be null"
    name: "cosmosAuditingHandler"
    type: "<xref href=\"org.springframework.data.auditing.IsNewAwareAuditingHandler?alt=org.springframework.data.auditing.IsNewAwareAuditingHandler&text=IsNewAwareAuditingHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  name: "CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  nameWithType: "CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "cosmosFactory"
    type: "<xref href=\"com.azure.spring.data.cosmos.CosmosFactory?alt=com.azure.spring.data.cosmos.CosmosFactory&text=CosmosFactory\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)"
  desc: "Initialization"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  name: "CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  nameWithType: "CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  summary: "Initialization"
  parameters:
  - description: "must not be null"
    name: "cosmosFactory"
    type: "<xref href=\"com.azure.spring.data.cosmos.CosmosFactory?alt=com.azure.spring.data.cosmos.CosmosFactory&text=CosmosFactory\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "cosmosConfig"
    type: "<xref href=\"com.azure.spring.data.cosmos.config.CosmosConfig?alt=com.azure.spring.data.cosmos.config.CosmosConfig&text=CosmosConfig\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "mappingCosmosConverter"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
  - description: "can be null"
    name: "cosmosAuditingHandler"
    type: "<xref href=\"org.springframework.data.auditing.IsNewAwareAuditingHandler?alt=org.springframework.data.auditing.IsNewAwareAuditingHandler&text=IsNewAwareAuditingHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)"
  desc: "Initialization"
methods:
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<S,T>deleteEntities(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,java.lang.Iterable<S>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  name: "<S,T>deleteEntities(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  nameWithType: "CosmosTemplate.<S,T>deleteEntities(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  summary: "Deletes the entities using bulk"
  parameters:
  - description: "the CosmosEntityInformation"
    name: "information"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Iterable entities to be inserted"
    name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void <S,T>deleteEntities(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  desc: "Deletes the entities using bulk"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<S,T>insertAll(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,?>,java.lang.Iterable<S>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  name: "<S,T>insertAll(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  nameWithType: "CosmosTemplate.<S,T>insertAll(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  summary: "Insert all items with bulk."
  parameters:
  - description: "the CosmosEntityInformation"
    name: "information"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  - description: "the Iterable entities to be inserted"
    name: "entities"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<S> <S,T>insertAll(CosmosEntityInformation<T,?> information, Iterable<S> entities)"
  desc: "Insert all items with bulk."
  returns:
    description: "Flux of result"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)"
  name: "<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)"
  summary: "Find by ids"
  parameters:
  - name: "ids"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"ID?alt=ID&text=ID\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Iterable<T> <T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)"
  desc: "Find by ids"
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>count(com.azure.cosmos.models.SqlQuerySpec,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.count(SqlQuerySpec querySpec, String containerName)"
  name: "count(SqlQuerySpec querySpec, String containerName)"
  nameWithType: "CosmosTemplate.count(SqlQuerySpec querySpec, String containerName)"
  summary: "Count"
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public long <T>count(SqlQuerySpec querySpec, String containerName)"
  desc: "Count"
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.count(CosmosQuery query, String containerName)"
  name: "count(CosmosQuery query, String containerName)"
  nameWithType: "CosmosTemplate.count(CosmosQuery query, String containerName)"
  summary: "Count"
  parameters:
  - name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public long <T>count(CosmosQuery query, String containerName)"
  desc: "Count"
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.delete(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "delete(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.delete(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Delete the Document<wbr>Query, need to query the domains at first, then delete the item from the result."
  parameters:
  - description: "The representation for query method."
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "Class of domain"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Iterable<T> <T>delete(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Delete the DocumentQuery, need to query the domains at first, then delete the item from the result. The cosmos db Sql API do \\_NOT\\_ support DELETE query, we cannot add one DeleteQueryGenerator. Uses bulk if possible."
  returns:
    description: "All the deleted items as List."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>deleteEntity(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteEntity(String containerName, T entity)"
  name: "deleteEntity(String containerName, T entity)"
  nameWithType: "CosmosTemplate.deleteEntity(String containerName, T entity)"
  summary: "Deletes the entity"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the entity object"
    name: "entity"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void <T>deleteEntity(String containerName, T entity)"
  desc: "Deletes the entity"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.exists(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "exists(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.exists(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Checks if document query items exist"
  parameters:
  - description: "The representation for query method."
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "Class of domain"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Boolean <T>exists(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Checks if document query items exist"
  returns:
    description: "if items exist"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.find(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "find(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.find(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Finds the document query items"
  parameters:
  - description: "The representation for query method."
    name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - description: "Class of domain"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Iterable<T> <T>find(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Finds the document query items"
  returns:
    description: "All the found items as List."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findAll(PartitionKey partitionKey, Class<T> domainType)"
  name: "findAll(PartitionKey partitionKey, Class<T> domainType)"
  nameWithType: "CosmosTemplate.findAll(PartitionKey partitionKey, Class<T> domainType)"
  summary: "Find the Document<wbr>Query, find all the items specified by domain type in the given container."
  parameters:
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<T> <T>findAll(PartitionKey partitionKey, Class<T> domainType)"
  desc: "Find the DocumentQuery, find all the items specified by domain type in the given container."
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findAll(Class<T> domainType)"
  name: "findAll(Class<T> domainType)"
  nameWithType: "CosmosTemplate.findAll(Class<T> domainType)"
  summary: "Find the Document<wbr>Query, find all the items specified by domain type."
  parameters:
  - description: "the domain type"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<T> <T>findAll(Class<T> domainType)"
  desc: "Find the DocumentQuery, find all the items specified by domain type."
  returns:
    description: "found results in a List"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findAll(String containerName, Class<T> domainType)"
  name: "findAll(String containerName, Class<T> domainType)"
  nameWithType: "CosmosTemplate.findAll(String containerName, Class<T> domainType)"
  summary: "Find the Document<wbr>Query, find all the items specified by domain type in the given container."
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the domain type"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<T> <T>findAll(String containerName, Class<T> domainType)"
  desc: "Find the DocumentQuery, find all the items specified by domain type in the given container."
  returns:
    description: "found results in a List"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findAll(Pageable pageable, Class<T> domainType, String containerName)"
  name: "findAll(Pageable pageable, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.findAll(Pageable pageable, Class<T> domainType, String containerName)"
  summary: "Find all items in a given container with partition key"
  parameters:
  - name: "pageable"
    type: "<xref href=\"org.springframework.data.domain.Pageable?alt=org.springframework.data.domain.Pageable&text=Pageable\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Page<T> <T>findAll(Pageable pageable, Class<T> domainType, String containerName)"
  desc: "Find all items in a given container with partition key"
  returns:
    type: "<xref href=\"org.springframework.data.domain.Page?alt=org.springframework.data.domain.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findById(Object id, Class<T> domainType)"
  name: "findById(Object id, Class<T> domainType)"
  nameWithType: "CosmosTemplate.findById(Object id, Class<T> domainType)"
  summary: "Finds item by id"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>findById(Object id, Class<T> domainType)"
  desc: "Finds item by id"
  returns:
    description: "found item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  name: "findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  nameWithType: "CosmosTemplate.findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  summary: "Finds item by id"
  parameters:
  - name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)"
  desc: "Finds item by id"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.findById(String containerName, Object id, Class<T> domainType)"
  name: "findById(String containerName, Object id, Class<T> domainType)"
  nameWithType: "CosmosTemplate.findById(String containerName, Object id, Class<T> domainType)"
  summary: "Finds item by id"
  parameters:
  - description: "must not be null"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>findById(String containerName, Object id, Class<T> domainType)"
  desc: "Finds item by id"
  returns:
    description: "found item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(T,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.insert(T objectToSave, PartitionKey partitionKey)"
  name: "insert(T objectToSave, PartitionKey partitionKey)"
  nameWithType: "CosmosTemplate.insert(T objectToSave, PartitionKey partitionKey)"
  summary: "Inserts item"
  parameters:
  - description: "must not be null"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>insert(T objectToSave, PartitionKey partitionKey)"
  desc: "Inserts item"
  returns:
    description: "the inserted item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.insert(String containerName, T objectToSave)"
  name: "insert(String containerName, T objectToSave)"
  nameWithType: "CosmosTemplate.insert(String containerName, T objectToSave)"
  summary: "Inserts item into the given container"
  parameters:
  - description: "must not be null"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>insert(String containerName, T objectToSave)"
  desc: "Inserts item into the given container"
  returns:
    description: "the inserted item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  name: "insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  nameWithType: "CosmosTemplate.insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  summary: "Inserts item into the given container"
  parameters:
  - description: "must not be null"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "must not be null"
    name: "objectToSave"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)"
  desc: "Inserts item into the given container"
  returns:
    description: "the inserted item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Pagination query"
  parameters:
  - name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Page<T> <T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Pagination query"
  returns:
    type: "<xref href=\"org.springframework.data.domain.Page?alt=org.springframework.data.domain.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>patch(java.lang.Object,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>,com.azure.cosmos.models.CosmosPatchOperations)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  name: "patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  nameWithType: "CosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  summary: "Patches item applies partial update (patch) to an item"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations)"
  desc: "Patches item applies partial update (patch) to an item"
  returns:
    description: "the patched item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>patch(java.lang.Object,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>,com.azure.cosmos.models.CosmosPatchOperations,com.azure.cosmos.models.CosmosPatchItemRequestOptions)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  name: "patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  nameWithType: "CosmosTemplate.patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  summary: "applies partial update (patch) to an item with Cosmos<wbr>Patch<wbr>Item<wbr>Request<wbr>Options"
  parameters:
  - description: "must not be null"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "must not be null"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "must not be null"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "must not be null"
    name: "patchOperations"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchOperations?alt=com.azure.cosmos.models.CosmosPatchOperations&text=CosmosPatchOperations\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional CosmosPatchItemRequestOptions, e.g. options.setFilterPredicate(\"FROM products p WHERE p.used = false\");"
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosPatchItemRequestOptions?alt=com.azure.cosmos.models.CosmosPatchItemRequestOptions&text=CosmosPatchItemRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>patch(Object id, PartitionKey partitionKey, Class<T> domainType, CosmosPatchOperations patchOperations, CosmosPatchItemRequestOptions options)"
  desc: "applies partial update (patch) to an item with CosmosPatchItemRequestOptions"
  returns:
    description: "the patched item"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runPaginationQuery(com.azure.cosmos.models.SqlQuerySpec,org.springframework.data.domain.Pageable,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.runPaginationQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  name: "runPaginationQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  nameWithType: "CosmosTemplate.runPaginationQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  summary: "Run the query."
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "pageable"
    type: "<xref href=\"org.springframework.data.domain.Pageable?alt=org.springframework.data.domain.Pageable&text=Pageable\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Page<T> <T>runPaginationQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  desc: "Run the query."
  returns:
    type: "<xref href=\"org.springframework.data.domain.Page?alt=org.springframework.data.domain.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  name: "runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  nameWithType: "CosmosTemplate.runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  summary: "Run the query."
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<T> <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)"
  desc: "Run the query."
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,org.springframework.data.domain.Sort,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  name: "runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  nameWithType: "CosmosTemplate.runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  summary: "Run the query."
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "sort"
    type: "<xref href=\"org.springframework.data.domain.Sort?alt=org.springframework.data.domain.Sort&text=Sort\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Iterable<T> <T>runQuery(SqlQuerySpec querySpec, Sort sort, Class<?> domainType, Class<T> returnType)"
  desc: "Run the query."
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runSliceQuery(com.azure.cosmos.models.SqlQuerySpec,org.springframework.data.domain.Pageable,java.lang.Class<?>,java.lang.Class<T>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.runSliceQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  name: "runSliceQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  nameWithType: "CosmosTemplate.runSliceQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  summary: "Run custom SQL query"
  parameters:
  - name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - name: "pageable"
    type: "<xref href=\"org.springframework.data.domain.Pageable?alt=org.springframework.data.domain.Pageable&text=Pageable\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - name: "returnType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Slice<T> <T>runSliceQuery(SqlQuerySpec querySpec, Pageable pageable, Class<?> domainType, Class<T> returnType)"
  desc: "Run custom SQL query"
  returns:
    type: "<xref href=\"org.springframework.data.domain.Slice?alt=org.springframework.data.domain.Slice&text=Slice\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>sliceQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.sliceQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  name: "sliceQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  nameWithType: "CosmosTemplate.sliceQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  summary: "Slice query"
  parameters:
  - name: "query"
    type: "<xref href=\"com.azure.spring.data.cosmos.core.query.CosmosQuery?alt=com.azure.spring.data.cosmos.core.query.CosmosQuery&text=CosmosQuery\" data-throw-if-not-resolved=\"False\" />"
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Slice<T> <T>sliceQuery(CosmosQuery query, Class<T> domainType, String containerName)"
  desc: "Slice query"
  returns:
    type: "<xref href=\"org.springframework.data.domain.Slice?alt=org.springframework.data.domain.Slice&text=Slice\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(T)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.upsert(T object)"
  name: "upsert(T object)"
  nameWithType: "CosmosTemplate.upsert(T object)"
  summary: "Upserts an item with partition key"
  parameters:
  - description: "upsert object"
    name: "object"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void <T>upsert(T object)"
  desc: "Upserts an item with partition key"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.upsert(String containerName, T object)"
  name: "upsert(String containerName, T object)"
  nameWithType: "CosmosTemplate.upsert(String containerName, T object)"
  summary: "Upserts an item into container with partition key"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "upsert object"
    name: "object"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void <T>upsert(String containerName, T object)"
  desc: "Upserts an item into container with partition key"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsertAndReturnEntity(java.lang.String,T)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.upsertAndReturnEntity(String containerName, T object)"
  name: "upsertAndReturnEntity(String containerName, T object)"
  nameWithType: "CosmosTemplate.upsertAndReturnEntity(String containerName, T object)"
  summary: "Upserts an item and return item properties"
  parameters:
  - description: "the container name"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "upsert object"
    name: "object"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>upsertAndReturnEntity(String containerName, T object)"
  desc: "Upserts an item and return item properties"
  returns:
    description: "upsert object entity"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.count(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.count(String containerName)"
  name: "count(String containerName)"
  nameWithType: "CosmosTemplate.count(String containerName)"
  summary: "Count"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public long count(String containerName)"
  desc: "Count"
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  name: "createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  nameWithType: "CosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  summary: "Creates container if not exists"
  parameters:
  - name: "information"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;?,?&gt;"
  syntax: "public CosmosContainerProperties createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  desc: "Creates container if not exists"
  returns:
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll(java.lang.String,java.lang.Class<?>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll(String containerName, Class<?> domainType)"
  name: "deleteAll(String containerName, Class<?> domainType)"
  nameWithType: "CosmosTemplate.deleteAll(String containerName, Class<?> domainType)"
  summary: "Delete the Document<wbr>Query, delete all the items in the given container."
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the domain type"
    name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  syntax: "public void deleteAll(String containerName, Class<?> domainType)"
  desc: "Delete the DocumentQuery, delete all the items in the given container."
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)"
  name: "deleteById(String containerName, Object id, PartitionKey partitionKey)"
  nameWithType: "CosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)"
  summary: "Deletes the item by id and partition key."
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "item id"
    name: "id"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "the partition key"
    name: "partitionKey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteById(String containerName, Object id, PartitionKey partitionKey)"
  desc: "Deletes the item by id and partition key."
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer(String containerName)"
  name: "deleteContainer(String containerName)"
  nameWithType: "CosmosTemplate.deleteContainer(String containerName)"
  summary: "Delete container"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteContainer(String containerName)"
  desc: "Delete container"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName(java.lang.Class<?>)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName(Class<?> domainType)"
  name: "getContainerName(Class<?> domainType)"
  nameWithType: "CosmosTemplate.getContainerName(Class<?> domainType)"
  summary: "To get container name by domain<wbr>Type"
  parameters:
  - name: "domainType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  syntax: "public String getContainerName(Class<?> domainType)"
  desc: "To get container name by domainType"
  returns:
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerNameOverride(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerNameOverride(String containerName)"
  name: "getContainerNameOverride(String containerName)"
  nameWithType: "CosmosTemplate.getContainerNameOverride(String containerName)"
  summary: "Check if an overridden version of container<wbr>Name is present, and if so, return it"
  parameters:
  - description: "Container name of database"
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public String getContainerNameOverride(String containerName)"
  desc: "Check if an overridden version of containerName is present, and if so, return it"
  returns:
    description: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerProperties(java.lang.String)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerProperties(String containerName)"
  name: "getContainerProperties(String containerName)"
  nameWithType: "CosmosTemplate.getContainerProperties(String containerName)"
  summary: "Get properties for specified container"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public CosmosContainerProperties getContainerProperties(String containerName)"
  desc: "Get properties for specified container"
  returns:
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter()"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter()"
  name: "getConverter()"
  nameWithType: "CosmosTemplate.getConverter()"
  summary: "To get converter"
  syntax: "public MappingCosmosConverter getConverter()"
  desc: "To get converter"
  returns:
    type: "<xref href=\"com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter?alt=com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter&text=MappingCosmosConverter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.replaceContainerProperties(java.lang.String,com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  name: "replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  nameWithType: "CosmosTemplate.replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  summary: "Replace container properties for the specified container"
  parameters:
  - name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - name: "properties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties replaceContainerProperties(String containerName, CosmosContainerProperties properties)"
  desc: "Replace container properties for the specified container"
  returns:
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext(org.springframework.context.ApplicationContext)"
  fullName: "com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext(ApplicationContext applicationContext)"
  name: "setApplicationContext(ApplicationContext applicationContext)"
  nameWithType: "CosmosTemplate.setApplicationContext(ApplicationContext applicationContext)"
  summary: "Sets the application context"
  parameters:
  - description: "must not be null"
    name: "applicationContext"
    type: "<xref href=\"org.springframework.context.ApplicationContext?alt=org.springframework.context.ApplicationContext&text=ApplicationContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setApplicationContext(ApplicationContext applicationContext)"
  exceptions:
  - description: "the bean exception"
    type: "<xref href=\"org.springframework.beans.BeansException?alt=org.springframework.beans.BeansException&text=BeansException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sets the application context"
type: "class"
desc: "Template class for cosmos db"
implements:
- "<xref href=\"com.azure.spring.data.cosmos.core.CosmosOperations?alt=com.azure.spring.data.cosmos.core.CosmosOperations&text=CosmosOperations\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.springframework.context.ApplicationContextAware?alt=org.springframework.context.ApplicationContextAware&text=ApplicationContextAware\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.spring.data.cosmos.core"
artifact: com.azure:azure-spring-data-cosmos:3.43.0
