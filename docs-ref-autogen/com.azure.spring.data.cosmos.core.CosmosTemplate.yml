### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate
  id: CosmosTemplate
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core
  children:
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>deleteEntity(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.String,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(T)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsertAndReturnEntity(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.count(java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll(java.lang.String,java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer(java.lang.String)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName(java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter()
  - com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext(org.springframework.context.ApplicationContext)
  langs:
  - java
  name: CosmosTemplate
  nameWithType: CosmosTemplate
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate
  type: Class
  package: com.azure.spring.data.cosmos.core
  summary: Template class for cosmos db
  syntax:
    content: public class CosmosTemplate implements CosmosOperations, ApplicationContextAware
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.spring.data.cosmos.core.CosmosOperations
  - org.springframework.context.ApplicationContextAware
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  id: <T,ID>findByIds(java.lang.Iterable<ID>,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findByIds*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find by ids
  syntax:
    content: public Iterable<T> <T,ID>findByIds(Iterable<ID> ids, Class<T> domainType, String containerName)
    parameters:
    - id: ids
      type: java.lang.Iterable<ID>
    - id: domainType
      type: java.lang.Class<T>
    - id: containerName
      type: java.lang.String
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  id: <T>count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>count(CosmosQuery query, String containerName)
  nameWithType: CosmosTemplate.<T>count(CosmosQuery query, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>count(CosmosQuery query, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public long <T>count(CosmosQuery query, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
    - id: containerName
      type: java.lang.String
    return:
      type: long
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.delete*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete the DocumentQuery, need to query the domains at first, then delete the item from the result. The cosmos db Sql API do \_NOT\_ support DELETE query, we cannot add one DeleteQueryGenerator.
  syntax:
    content: public Iterable<T> <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: The representation for query method.
    - id: domainType
      type: java.lang.Class<T>
      description: Class of domain
    - id: containerName
      type: java.lang.String
      description: Container name of database
    return:
      type: java.lang.Iterable<T>
      description: All the deleted items as List.
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>deleteEntity(java.lang.String,T)
  id: <T>deleteEntity(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>deleteEntity(String containerName, T entity)
  nameWithType: CosmosTemplate.<T>deleteEntity(String containerName, T entity)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>deleteEntity(String containerName, T entity)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Deletes the entity
  syntax:
    content: public void <T>deleteEntity(String containerName, T entity)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: entity
      type: T
      description: the entity object
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>exists(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.exists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Checks if document query items exist
  syntax:
    content: public Boolean <T>exists(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: The representation for query method.
    - id: domainType
      type: java.lang.Class<T>
      description: Class of domain
    - id: containerName
      type: java.lang.String
      description: Container name of database
    return:
      type: java.lang.Boolean
      description: if items exist
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>find(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.find*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds the document query items
  syntax:
    content: public Iterable<T> <T>find(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: The representation for query method.
    - id: domainType
      type: java.lang.Class<T>
      description: Class of domain
    - id: containerName
      type: java.lang.String
      description: Container name of database
    return:
      type: java.lang.Iterable<T>
      description: All the found items as List.
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  id: <T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findAll(PartitionKey partitionKey, Class<T> domainType)
  nameWithType: CosmosTemplate.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type in the given container.
  syntax:
    content: public Iterable<T> <T>findAll(PartitionKey partitionKey, Class<T> domainType)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    - id: domainType
      type: java.lang.Class<T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.Class<T>)
  id: <T>findAll(java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findAll(Class<T> domainType)
  nameWithType: CosmosTemplate.<T>findAll(Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type.
  syntax:
    content: public Iterable<T> <T>findAll(Class<T> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<T>
      description: the domain type
    return:
      type: java.lang.Iterable<T>
      description: found results in a List
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(java.lang.String,java.lang.Class<T>)
  id: <T>findAll(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findAll(String containerName, Class<T> domainType)
  nameWithType: CosmosTemplate.<T>findAll(String containerName, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(String containerName, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find the DocumentQuery, find all the items specified by domain type in the given container.
  syntax:
    content: public Iterable<T> <T>findAll(String containerName, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: domainType
      type: java.lang.Class<T>
      description: the domain type
    return:
      type: java.lang.Iterable<T>
      description: found results in a List
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  id: <T>findAll(org.springframework.data.domain.Pageable,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll(Pageable pageable, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find all items in a given container with partition key
  syntax:
    content: public Page<T> <T>findAll(Pageable pageable, Class<T> domainType, String containerName)
    parameters:
    - id: pageable
      type: org.springframework.data.domain.Pageable
    - id: domainType
      type: java.lang.Class<T>
    - id: containerName
      type: java.lang.String
    return:
      type: org.springframework.data.domain.Page<T>
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType)
  nameWithType: CosmosTemplate.<T>findById(Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public T <T>findById(Object id, Class<T> domainType)
    parameters:
    - id: id
      type: java.lang.Object
      description: must not be null
    - id: domainType
      type: java.lang.Class<T>
      description: must not be null
    return:
      type: T
      description: found item
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  id: <T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  nameWithType: CosmosTemplate.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public T <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
    parameters:
    - id: id
      type: java.lang.Object
    - id: domainType
      type: java.lang.Class<T>
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: T
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>findById(String containerName, Object id, Class<T> domainType)
  nameWithType: CosmosTemplate.<T>findById(String containerName, Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById(String containerName, Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Finds item by id
  syntax:
    content: public T <T>findById(String containerName, Object id, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: id
      type: java.lang.Object
      description: must not be null
    - id: domainType
      type: java.lang.Class<T>
      description: must not be null
    return:
      type: T
      description: found item
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(T,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>insert(T objectToSave, PartitionKey partitionKey)
  nameWithType: CosmosTemplate.<T>insert(T objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(T objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item
  syntax:
    content: public T <T>insert(T objectToSave, PartitionKey partitionKey)
    parameters:
    - id: objectToSave
      type: T
      description: must not be null
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T)
  id: <T>insert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>insert(String containerName, T objectToSave)
  nameWithType: CosmosTemplate.<T>insert(String containerName, T objectToSave)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(String containerName, T objectToSave)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item into the given container
  syntax:
    content: public T <T>insert(String containerName, T objectToSave)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: objectToSave
      type: T
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(java.lang.String,T,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  nameWithType: CosmosTemplate.<T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Inserts item into the given container
  syntax:
    content: public T <T>insert(String containerName, T objectToSave, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: objectToSave
      type: T
      description: must not be null
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: must not be null
    return:
      type: T
      description: the inserted item
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>paginationQuery(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: CosmosTemplate.<T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.paginationQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Pagination query
  syntax:
    content: public Page<T> <T>paginationQuery(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
    - id: domainType
      type: java.lang.Class<T>
    - id: containerName
      type: java.lang.String
    return:
      type: org.springframework.data.domain.Page<T>
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  id: <T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  nameWithType: CosmosTemplate.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.runQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Run the query.
  syntax:
    content: public Iterable<T> <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
    - id: domainType
      type: java.lang.Class<?>
    - id: returnType
      type: java.lang.Class<T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(T)
  id: <T>upsert(T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>upsert(T object)
  nameWithType: CosmosTemplate.<T>upsert(T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(T object)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item with partition key
  syntax:
    content: public void <T>upsert(T object)
    parameters:
    - id: object
      type: T
      description: upsert object
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(java.lang.String,T)
  id: <T>upsert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>upsert(String containerName, T object)
  nameWithType: CosmosTemplate.<T>upsert(String containerName, T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert(String containerName, T object)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item into container with partition key
  syntax:
    content: public void <T>upsert(String containerName, T object)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: object
      type: T
      description: upsert object
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsertAndReturnEntity(java.lang.String,T)
  id: <T>upsertAndReturnEntity(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: <T>upsertAndReturnEntity(String containerName, T object)
  nameWithType: CosmosTemplate.<T>upsertAndReturnEntity(String containerName, T object)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsertAndReturnEntity(String containerName, T object)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.upsertAndReturnEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upserts an item and return item properties
  syntax:
    content: public T <T>upsertAndReturnEntity(String containerName, T object)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: object
      type: T
      description: upsert object
    return:
      type: T
      description: upsert object entity
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  id: CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  nameWithType: CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate*
  type: Constructor
  package: com.azure.spring.data.cosmos.core
  summary: Initialization
  syntax:
    content: public CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
    parameters:
    - id: client
      type: com.azure.cosmos.CosmosAsyncClient
      description: must not be null
    - id: databaseName
      type: java.lang.String
      description: must not be null
    - id: cosmosConfig
      type: com.azure.spring.data.cosmos.config.CosmosConfig
      description: must not be null
    - id: mappingCosmosConverter
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: must not be null
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  id: CosmosTemplate(com.azure.cosmos.CosmosAsyncClient,java.lang.String,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  nameWithType: CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate*
  type: Constructor
  package: com.azure.spring.data.cosmos.core
  summary: Initialization
  syntax:
    content: public CosmosTemplate(CosmosAsyncClient client, String databaseName, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
    parameters:
    - id: client
      type: com.azure.cosmos.CosmosAsyncClient
      description: must not be null
    - id: databaseName
      type: java.lang.String
      description: must not be null
    - id: cosmosConfig
      type: com.azure.spring.data.cosmos.config.CosmosConfig
      description: must not be null
    - id: mappingCosmosConverter
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: must not be null
    - id: cosmosAuditingHandler
      type: org.springframework.data.auditing.IsNewAwareAuditingHandler
      description: can be null
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  id: CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  nameWithType: CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate*
  type: Constructor
  package: com.azure.spring.data.cosmos.core
  summary: Initialization
  syntax:
    content: public CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter)
    parameters:
    - id: cosmosFactory
      type: com.azure.spring.data.cosmos.CosmosFactory
      description: must not be null
    - id: cosmosConfig
      type: com.azure.spring.data.cosmos.config.CosmosConfig
      description: must not be null
    - id: mappingCosmosConverter
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: must not be null
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  id: CosmosTemplate(com.azure.spring.data.cosmos.CosmosFactory,com.azure.spring.data.cosmos.config.CosmosConfig,com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter,org.springframework.data.auditing.IsNewAwareAuditingHandler)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  nameWithType: CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate*
  type: Constructor
  package: com.azure.spring.data.cosmos.core
  summary: Initialization
  syntax:
    content: public CosmosTemplate(CosmosFactory cosmosFactory, CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter, IsNewAwareAuditingHandler cosmosAuditingHandler)
    parameters:
    - id: cosmosFactory
      type: com.azure.spring.data.cosmos.CosmosFactory
      description: must not be null
    - id: cosmosConfig
      type: com.azure.spring.data.cosmos.config.CosmosConfig
      description: must not be null
    - id: mappingCosmosConverter
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: must not be null
    - id: cosmosAuditingHandler
      type: org.springframework.data.auditing.IsNewAwareAuditingHandler
      description: can be null
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.count(java.lang.String)
  id: count(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: count(String containerName)
  nameWithType: CosmosTemplate.count(String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.count(String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public long count(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
    return:
      type: long
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  id: createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  nameWithType: CosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Creates container if not exists
  syntax:
    content: public CosmosContainerProperties createContainerIfNotExists(CosmosEntityInformation<?,?> information)
    parameters:
    - id: information
      type: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
    return:
      type: com.azure.cosmos.models.CosmosContainerProperties
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll(java.lang.String,java.lang.Class<?>)
  id: deleteAll(java.lang.String,java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: deleteAll(String containerName, Class<?> domainType)
  nameWithType: CosmosTemplate.deleteAll(String containerName, Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll(String containerName, Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete the DocumentQuery, delete all the items in the given container.
  syntax:
    content: public void deleteAll(String containerName, Class<?> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Container name of database
    - id: domainType
      type: java.lang.Class<?>
      description: the domain type
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  id: deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: deleteById(String containerName, Object id, PartitionKey partitionKey)
  nameWithType: CosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById(String containerName, Object id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Deletes the item by id and partition key.
  syntax:
    content: public void deleteById(String containerName, Object id, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: Container name of database
    - id: id
      type: java.lang.Object
      description: item id
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer(java.lang.String)
  id: deleteContainer(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: deleteContainer(String containerName)
  nameWithType: CosmosTemplate.deleteContainer(String containerName)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer(String containerName)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete container
  syntax:
    content: public void deleteContainer(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName(java.lang.Class<?>)
  id: getContainerName(java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: getContainerName(Class<?> domainType)
  nameWithType: CosmosTemplate.getContainerName(Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName(Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: To get container name by domainType
  syntax:
    content: public String getContainerName(Class<?> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<?>
    return:
      type: java.lang.String
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter()
  id: getConverter()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: getConverter()
  nameWithType: CosmosTemplate.getConverter()
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter()
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: To get converter
  syntax:
    content: public MappingCosmosConverter getConverter()
    return:
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext(org.springframework.context.ApplicationContext)
  id: setApplicationContext(org.springframework.context.ApplicationContext)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.core.CosmosTemplate
  langs:
  - java
  name: setApplicationContext(ApplicationContext applicationContext)
  nameWithType: CosmosTemplate.setApplicationContext(ApplicationContext applicationContext)
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext(ApplicationContext applicationContext)
  overload: com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Sets the application context
  syntax:
    content: public void setApplicationContext(ApplicationContext applicationContext)
    parameters:
    - id: applicationContext
      type: org.springframework.context.ApplicationContext
      description: must not be null
  exceptions:
  - type: org.springframework.beans.BeansException
    description: the bean exception
references:
- uid: com.azure.cosmos.CosmosAsyncClient
  spec.java:
  - uid: com.azure.cosmos.CosmosAsyncClient
    name: CosmosAsyncClient
    fullName: com.azure.cosmos.CosmosAsyncClient
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.spring.data.cosmos.config.CosmosConfig
  name: CosmosConfig
  nameWithType: CosmosConfig
  fullName: com.azure.spring.data.cosmos.config.CosmosConfig
- uid: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
  name: MappingCosmosConverter
  nameWithType: MappingCosmosConverter
  fullName: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
- uid: org.springframework.data.auditing.IsNewAwareAuditingHandler
  spec.java:
  - uid: org.springframework.data.auditing.IsNewAwareAuditingHandler
    name: IsNewAwareAuditingHandler
    fullName: org.springframework.data.auditing.IsNewAwareAuditingHandler
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate*
  name: CosmosTemplate
  nameWithType: CosmosTemplate.CosmosTemplate
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.CosmosTemplate
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.CosmosFactory
  name: CosmosFactory
  nameWithType: CosmosFactory
  fullName: com.azure.spring.data.cosmos.CosmosFactory
- uid: org.springframework.beans.BeansException
  spec.java:
  - uid: org.springframework.beans.BeansException
    name: BeansException
    fullName: org.springframework.beans.BeansException
- uid: org.springframework.context.ApplicationContext
  spec.java:
  - uid: org.springframework.context.ApplicationContext
    name: ApplicationContext
    fullName: org.springframework.context.ApplicationContext
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext*
  name: setApplicationContext
  nameWithType: CosmosTemplate.setApplicationContext
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.setApplicationContext
  package: com.azure.spring.data.cosmos.core
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.insert*
  name: <T>insert
  nameWithType: CosmosTemplate.<T>insert
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>insert
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.findById*
  name: <T>findById
  nameWithType: CosmosTemplate.<T>findById
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findById
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.upsert*
  name: <T>upsert
  nameWithType: CosmosTemplate.<T>upsert
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsert
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.upsertAndReturnEntity*
  name: <T>upsertAndReturnEntity
  nameWithType: CosmosTemplate.<T>upsertAndReturnEntity
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>upsertAndReturnEntity
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.findAll*
  name: <T>findAll
  nameWithType: CosmosTemplate.<T>findAll
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>findAll
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll*
  name: deleteAll
  nameWithType: CosmosTemplate.deleteAll
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteAll
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer*
  name: deleteContainer
  nameWithType: CosmosTemplate.deleteContainer
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteContainer
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName*
  name: getContainerName
  nameWithType: CosmosTemplate.getContainerName
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.getContainerName
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
  spec.java:
  - uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
    name: CosmosEntityInformation
    fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.models.CosmosContainerProperties
  spec.java:
  - uid: com.azure.cosmos.models.CosmosContainerProperties
    name: CosmosContainerProperties
    fullName: com.azure.cosmos.models.CosmosContainerProperties
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists*
  name: createContainerIfNotExists
  nameWithType: CosmosTemplate.createContainerIfNotExists
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.createContainerIfNotExists
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById*
  name: deleteById
  nameWithType: CosmosTemplate.deleteById
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteById
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.deleteEntity*
  name: <T>deleteEntity
  nameWithType: CosmosTemplate.<T>deleteEntity
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>deleteEntity
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Iterable<ID>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: ID
    name: ID
    fullName: ID
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.findByIds*
  name: <T,ID>findByIds
  nameWithType: CosmosTemplate.<T,ID>findByIds
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T,ID>findByIds
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.find*
  name: <T>find
  nameWithType: CosmosTemplate.<T>find
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>find
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.exists*
  name: <T>exists
  nameWithType: CosmosTemplate.<T>exists
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>exists
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.delete*
  name: <T>delete
  nameWithType: CosmosTemplate.<T>delete
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>delete
  package: com.azure.spring.data.cosmos.core
- uid: org.springframework.data.domain.Pageable
  spec.java:
  - uid: org.springframework.data.domain.Pageable
    name: Pageable
    fullName: org.springframework.data.domain.Pageable
- uid: org.springframework.data.domain.Page<T>
  spec.java:
  - uid: org.springframework.data.domain.Page
    name: Page
    fullName: org.springframework.data.domain.Page
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.paginationQuery*
  name: <T>paginationQuery
  nameWithType: CosmosTemplate.<T>paginationQuery
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>paginationQuery
  package: com.azure.spring.data.cosmos.core
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.count*
  name: count
  nameWithType: CosmosTemplate.count
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.count
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter*
  name: getConverter
  nameWithType: CosmosTemplate.getConverter
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.getConverter
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.cosmos.models.SqlQuerySpec
  spec.java:
  - uid: com.azure.cosmos.models.SqlQuerySpec
    name: SqlQuerySpec
    fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.spring.data.cosmos.core.CosmosTemplate.runQuery*
  name: <T>runQuery
  nameWithType: CosmosTemplate.<T>runQuery
  fullName: com.azure.spring.data.cosmos.core.CosmosTemplate.<T>runQuery
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
- uid: org.springframework.context.ApplicationContextAware
  name: ApplicationContextAware
  nameWithType: ApplicationContextAware
  fullName: org.springframework.context.ApplicationContextAware
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  name: CosmosEntityInformation
  nameWithType: CosmosEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
- uid: ID
  name: ID
  nameWithType: ID
  fullName: ID
- uid: org.springframework.data.domain.Page
  name: Page
  nameWithType: Page
  fullName: org.springframework.data.domain.Page
