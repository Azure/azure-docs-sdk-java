### YamlMime:JavaPackage
uid: "com.azure.security.keyvault.administration"
fullName: "com.azure.security.keyvault.administration"
name: "com.azure.security.keyvault.administration"
summary: "[Azure Key Vault Managed HSM][] is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\n\n[Azure Key Vault Managed HSM]: https://learn.microsoft.com/azure/key-vault/managed-hsm/"
classes:
- "com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultAccessControlClient"
- "com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder"
- "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultBackupClient"
- "com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder"
- "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultSettingsClient"
- "com.azure.security.keyvault.administration.KeyVaultSettingsClientBuilder"
enums:
- "com.azure.security.keyvault.administration.KeyVaultAdministrationServiceVersion"
desc: "[Azure Key Vault Managed HSM][] is a fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\nThe Azure Key Vault Administration client library allows developers to interact with the Azure Key Vault Managed HSM service from their applications. The library provides a set of APIs that enable developers to perform administrative tasks such as full backup/restore, key-level role-based access control (RBAC), and account settings management.\n\n**Key Concepts:**\n\n**What is a Key Vault Access Control Client?**\n\nThe Key Vault Access Control client performs the interactions with the Azure Key Vault service for getting, setting, deleting, and listing role assignments, as well as listing role definitions. Asynchronous (KeyVaultAccessControlAsyncClient) and synchronous (KeyVaultAccessControlClient) clients exist in the SDK allowing for the selection of a client based on an application's use case. Once you've initialized a role assignment, you can interact with the primary resource types in Key Vault.\n\n**What is a Role Definition?**\n\nA role definition is a collection of permissions. It defines the operations that can be performed, such as read, write, and delete. It can also define the operations that are excluded from allowed operations.\n\nRole definitions can be listed and specified as part of a role assignment.\n\n**What is a Role Assignment?**\n\nA role assignment is the association of a role definition to a service principal. They can be created, listed, fetched individually, and deleted.\n\n**What is a Key Vault Backup Client**\n\nThe Key Vault Backup Client provides both synchronous and asynchronous operations for performing full key backups, full key restores, and selective key restores. Asynchronous (KeyVaultBackupAsyncClient) and synchronous (KeyVaultBackupClient) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n**NOTE:** The backing store for key backups is a blob storage container using Shared Access Signature authentication. For more details on creating a SAS token using the BlobServiceClient, see the [Azure Storage Blobs client README][]. Alternatively, it is possible to [ generate a SAS token in Storage Explorer][generate a SAS token in Storage Explorer].\n\n**What is a Backup Operation?**\n\nA backup operation represents a long-running operation for a full key backup.\n\n**What is a Restore Operation**\n\nA restore operation represents a long-running operation for both a full key and selective key restore.\n\n**What is a Key Vault Settings Client?**\n\nThe Key Vault Settings client allows manipulation of an Azure Key Vault account's settings, with operations such as: getting, updating, and listing. Asynchronous (KeyVaultSettingsAsyncClient) and synchronous (KeyVaultSettingsClient) clients exist in the SDK allowing for the selection of a client based on an application's use case.\n\n## Getting Started ##\n\nIn order to interact with the Azure Key Vault service, you will need to create an instance of the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref> class, a vault url and a credential object.\n\nThe examples shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using a [ managed identity][managed identity] for authentication in production environments. You can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation\"][Azure Identity documentation].\n\n**Sample: Construct Synchronous Access Control Client**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref>, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\"></xref> to configure it.\n\n```java\nKeyVaultAccessControlClient keyVaultAccessControlClient = new KeyVaultAccessControlClientBuilder()\n     .vaultUrl(\"<your-managed-hsm-url>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```\n\n**Sample: Construct Asynchronous Access Control Client**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\"></xref> to configure it.\n\n```java\nKeyVaultAccessControlAsyncClient keyVaultAccessControlAsyncClient = new KeyVaultAccessControlClientBuilder()\n     .vaultUrl(\"<your-managed-hsm-url>\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\n\n--------------------\n\n## Set a Role Definition ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to set a role definition in the key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously create a role definition in the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#setRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.setRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n\n```java\nKeyVaultRoleDefinition roleDefinition = keyVaultAccessControlClient.setRoleDefinition(KeyVaultRoleScope.GLOBAL);\n\n System.out.printf(\"Created role definition with randomly generated name '%s' and role name '%s'.%n\",\n     roleDefinition.getName(), roleDefinition.getRoleName());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Get a Role Definition ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to retrieve a role definition from the key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously retrieve a role definition from the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#getRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n\n```java\nString roleDefinitionName = \"de8df120-987e-4477-b9cc-570fd219a62c\";\n KeyVaultRoleDefinition roleDefinition =\n     keyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName);\n\n System.out.printf(\"Retrieved role definition with name '%s' and role name '%s'.%n\", roleDefinition.getName(),\n     roleDefinition.getRoleName());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Delete a Role Definition ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to delete a role definition from the key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously delete a role definition from the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#deleteRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n\n```java\nString roleDefinitionName = \"6a709e6e-8964-4012-a99b-6b0131e8ce40\";\n\n keyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope.GLOBAL, roleDefinitionName);\n\n System.out.printf(\"Deleted role definition with name '%s'.%n\", roleDefinitionName);\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Create a Role Assignment ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to set a role assignment in the key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously create a role assignment in the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#createRoleAssignment(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String, java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.createRoleAssignment(KeyVaultRoleScope, String,\n String)\"></xref> API.\n\n```java\nString roleDefinitionId = \"b0b43a39-920c-475b-b34c-32ecc2bbb0ea\";\n String servicePrincipalId = \"169d6a86-61b3-4615-ac7e-2da09edfeed4\";\n KeyVaultRoleAssignment roleAssignment =\n     keyVaultAccessControlClient.createRoleAssignment(KeyVaultRoleScope.GLOBAL, roleDefinitionId,\n         servicePrincipalId);\n\n System.out.printf(\"Created role assignment with randomly generated name '%s' for principal with id '%s'.%n\",\n     roleAssignment.getName(), roleAssignment.getProperties().getPrincipalId());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Get a Role Definition ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to retrieve a role definition from the key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously retrieve a role definition from the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#getRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n\n```java\nString roleAssignmentName = \"06d1ae8b-0791-4f02-b976-f631251f5a95\";\n KeyVaultRoleAssignment roleAssignment =\n     keyVaultAccessControlClient.getRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName);\n\n System.out.printf(\"Retrieved role assignment with name '%s'.%n\", roleAssignment.getName());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Delete a Role Definition ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to delete a role definition from an Azure Key Vault account.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to asynchronously delete a role definition from the key vault, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#deleteRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n\n```java\nString roleAssignmentName = \"c3ed874a-64a9-4a87-8581-2a1ad84b9ddb\";\n\n keyVaultAccessControlClient.deleteRoleAssignment(KeyVaultRoleScope.GLOBAL, roleAssignmentName);\n\n System.out.printf(\"Deleted role assignment with name '%s'.%n\", roleAssignmentName);\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>.\n\n\n--------------------\n\n## Back Up a Collection of Keys ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to back up the entire collection of keys from a key vault.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously back up an entire collection of keys using, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient.beginBackup*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginBackup(String, String)\"></xref> API.\n\n```java\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n SyncPoller<KeyVaultBackupOperation, String> backupPoller = client.beginBackup(blobStorageUrl, sasToken);\n\n PollResponse<KeyVaultBackupOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultBackupOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     String folderUrl = backupPoller.getFinalResult();\n\n     System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl);\n } else {\n     KeyVaultBackupOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Backup failed with error: %s.%n\", operation.getError().getMessage());\n }\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>.\n\n\n--------------------\n\n## Restore a Collection of Keys ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to restore an entire collection of keys from a backup.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously restore an entire collection of keys from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient.beginRestore*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginRestore(String, String)\"></xref> API.\n\n```java\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n SyncPoller<KeyVaultRestoreOperation, KeyVaultRestoreResult> backupPoller =\n     client.beginRestore(folderUrl, sasToken);\n\n PollResponse<KeyVaultRestoreOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultRestoreOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     System.out.printf(\"Backup restored successfully.%n\");\n } else {\n     KeyVaultRestoreOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Restore failed with error: %s.%n\", operation.getError().getMessage());\n }\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>.\n\n\n--------------------\n\n## Selectively Restore a Key ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to restore a specific key from a backup.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously restore a specific key from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient.beginSelectiveKeyRestore*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginSelectiveKeyRestore(String, String, String)\"></xref> API.\n\n```java\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n String keyName = \"myKey\";\n\n SyncPoller<KeyVaultSelectiveKeyRestoreOperation, KeyVaultSelectiveKeyRestoreResult> backupPoller =\n     client.beginSelectiveKeyRestore(folderUrl, sasToken, keyName);\n\n PollResponse<KeyVaultSelectiveKeyRestoreOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultSelectiveKeyRestoreOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     System.out.printf(\"Key restored successfully.%n\");\n } else {\n     KeyVaultSelectiveKeyRestoreOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Key restore failed with error: %s.%n\", operation.getError().getMessage());\n }\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>.\n\n\n--------------------\n\n## Get All Settings ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to list all the settings for an Azure Key Vault account.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously back up an entire collection of keys using, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSettings()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSettings()\"></xref> API.\n\n```java\nKeyVaultGetSettingsResult getSettingsResult = keyVaultSettingsClient.getSettings();\n List<KeyVaultSetting> settings = getSettingsResult.getSettings();\n\n settings.forEach(setting ->\n     System.out.printf(\"Retrieved setting with name '%s' and value %s'.%n\", setting.getName(),\n         setting.asBoolean()));\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>.\n\n\n--------------------\n\n## Retrieve a Specific Setting ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to retrieve a specific setting.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously restore an entire collection of keys from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSetting(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSetting(String)\"></xref> API.\n\n```java\nKeyVaultSetting setting = keyVaultSettingsClient.getSetting(settingName);\n\n System.out.printf(\"Retrieved setting '%s' with value '%s'.%n\", setting.getName(), setting.asBoolean());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>.\n\n\n--------------------\n\n## Update a Specific Setting ##\n\nThe <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to restore a specific key from a backup.\n\n**Code Sample:**\n\nThe following code sample demonstrates how to synchronously restore a specific key from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient.updateSetting(com.azure.security.keyvault.administration.models.KeyVaultSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient.updateSetting(KeyVaultSetting)\"></xref>\n\n```java\nKeyVaultSetting settingToUpdate = new KeyVaultSetting(settingName, true);\n KeyVaultSetting updatedSetting = keyVaultSettingsClient.updateSetting(settingToUpdate);\n\n System.out.printf(\"Updated setting '%s' to '%s'.%n\", updatedSetting.getName(), updatedSetting.asBoolean());\n```\n\n**Note:** For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>.\n\n\n--------------------\n\n\n[Azure Key Vault Managed HSM]: https://learn.microsoft.com/azure/key-vault/managed-hsm/\n[Azure Storage Blobs client README]: https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-blob#get-credentials\n[generate a SAS token in Storage Explorer]: https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer\n[managed identity]: https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\n[Azure Identity documentation]: https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable"
metadata: {}
package: "com.azure.security.keyvault.administration"
artifact: com.azure:azure-security-keyvault-administration:4.5.6
