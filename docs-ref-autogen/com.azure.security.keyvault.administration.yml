### YamlMime:JavaPackage
uid: "com.azure.security.keyvault.administration"
fullName: "com.azure.security.keyvault.administration"
name: "com.azure.security.keyvault.administration"
summary: "<a href=\"https://learn.microsoft.com/azure/key-vault/managed-hsm/\">Azure Key Vault Managed HSM</a> is a\n fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard\n cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs."
classes:
- "com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultAccessControlClient"
- "com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder"
- "com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultBackupClient"
- "com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder"
- "com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient"
- "com.azure.security.keyvault.administration.KeyVaultSettingsClient"
- "com.azure.security.keyvault.administration.KeyVaultSettingsClientBuilder"
enums:
- "com.azure.security.keyvault.administration.KeyVaultAdministrationServiceVersion"
desc: "<a href=\"https://learn.microsoft.com/azure/key-vault/managed-hsm/\">Azure Key Vault Managed HSM</a> is a\n fully-managed, highly-available, single-tenant, standards-compliant cloud service that enables you to safeguard\n cryptographic keys for your cloud applications using FIPS 140-2 Level 3 validated HSMs.\n\n <p>\n The Azure Key Vault Administration client library allows developers to interact with the Azure Key Vault Managed\n HSM service from their applications. The library provides a set of APIs that enable developers to perform\n administrative tasks such as full backup/restore, key-level role-based access control (RBAC), and account settings\n management.\n\n <p>\n <strong>Key Concepts:</strong>\n\n <p>\n <strong>What is a Key Vault Access Control Client?</strong>\n <p>\n The Key Vault Access Control client performs the interactions with the Azure Key Vault service for getting,\n setting, deleting, and listing role assignments, as well as listing role definitions. Asynchronous\n (KeyVaultAccessControlAsyncClient) and synchronous (KeyVaultAccessControlClient) clients exist in the SDK allowing\n for the selection of a client based on an application's use case. Once you've initialized a role assignment, you can\n interact with the primary resource types in Key Vault.\n\n <p>\n <strong>What is a Role Definition?</strong>\n <p>\n A role definition is a collection of permissions. It defines the operations that can be performed, such as read,\n write, and delete. It can also define the operations that are excluded from allowed operations.\n\n <p>\n Role definitions can be listed and specified as part of a role assignment.\n\n <p>\n <strong>What is a Role Assignment?</strong>\n <p>\n A role assignment is the association of a role definition to a service principal. They can be created, listed,\n fetched individually, and deleted.\n\n <p>\n <strong>What is a Key Vault Backup Client</strong>\n <p>\n The Key Vault Backup Client provides both synchronous and asynchronous operations for performing full key backups,\n full key restores, and selective key restores. Asynchronous (KeyVaultBackupAsyncClient) and synchronous\n (KeyVaultBackupClient) clients exist in the SDK allowing for the selection of a client based on an application's use\n case.\n\n <p>\n <strong>NOTE:</strong> The backing store for key backups is a blob storage container using Shared Access Signature\n authentication. For more details on creating a SAS token using the BlobServiceClient, see the <a href=\"https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/storage/azure-storage-blob#get-credentials\">Azure\n Storage Blobs client README</a>. Alternatively, it is possible to <a href=\"https://docs.microsoft.com/azure/vs-azure-tools-storage-manage-with-storage-explorer?tabs=windows#generate-a-shared-access-signature-in-storage-explorer\">\n generate a SAS token in Storage Explorer</a>.\n\n <p>\n <strong>What is a Backup Operation?</strong>\n <p>\n A backup operation represents a long-running operation for a full key backup.\n\n <p>\n <strong>What is a Restore Operation</strong>\n <p>\n A restore operation represents a long-running operation for both a full key and selective key restore.\n\n <p>\n <strong>What is a Key Vault Settings Client?</strong>\n <p>\n The Key Vault Settings client allows manipulation of an Azure Key Vault account's settings, with operations\n such as: getting, updating, and listing. Asynchronous (KeyVaultSettingsAsyncClient) and synchronous\n (KeyVaultSettingsClient) clients exist in the SDK allowing for the selection of a client based on an application's\n use case.\n\n <h2>Getting Started</h2>\n\n In order to interact with the Azure Key Vault service, you will need to create an instance of the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref> class, a vault url and a credential\n object.\n\n <p>\n The examples shown in this document use a credential object named DefaultAzureCredential for authentication, which\n is appropriate for most scenarios, including local development and production environments. Additionally, we\n recommend using a <a href=\"https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\">\n managed identity</a> for authentication in production environments. You can find more information on different ways\n of authenticating and their corresponding credential types in the <a href=\"https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable\">Azure Identity\n documentation\"</a>.\n\n <p>\n <strong>Sample: Construct Synchronous Access Control Client</strong>\n\n <p>\n The following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref>, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\"></xref> to configure it.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultAccessControlClient.instantiation -->\n <pre>\n KeyVaultAccessControlClient keyVaultAccessControlClient = new KeyVaultAccessControlClientBuilder&#40;&#41;\n     .vaultUrl&#40;&quot;&lt;your-managed-hsm-url&gt;&quot;&#41;\n     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;\n     .buildClient&#40;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultAccessControlClient.instantiation -->\n\n <p>\n <strong>Sample: Construct Asynchronous Access Control Client</strong>\n\n <p>\n The following code sample demonstrates the creation of a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClientBuilder\"></xref> to configure it.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient.instantiation -->\n <pre>\n KeyVaultAccessControlAsyncClient keyVaultAccessControlAsyncClient = new KeyVaultAccessControlClientBuilder&#40;&#41;\n     .vaultUrl&#40;&quot;&lt;your-managed-hsm-url&gt;&quot;&#41;\n     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;\n     .buildAsyncClient&#40;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient.instantiation -->\n <br>\n <hr/>\n\n <h2>Set a Role Definition</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to set a role\n definition in the key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously create a role definition in the key vault, using the\n <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#setRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.setRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.setRoleDefinition#KeyVaultRoleScope -->\n <pre>\n KeyVaultRoleDefinition roleDefinition = keyVaultAccessControlClient.setRoleDefinition&#40;KeyVaultRoleScope.GLOBAL&#41;;\n\n System.out.printf&#40;&quot;Created role definition with randomly generated name '%s' and role name '%s'.%n&quot;,\n     roleDefinition.getName&#40;&#41;, roleDefinition.getRoleName&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultAccessControlClient.setRoleDefinition#KeyVaultRoleScope\n -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Get a Role Definition</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to retrieve a role\n definition from the key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously retrieve a role definition from the key vault, using\n the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#getRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.getRoleDefinition#KeyVaultRoleScope-String -->\n <pre>\n String roleDefinitionName = &quot;de8df120-987e-4477-b9cc-570fd219a62c&quot;;\n KeyVaultRoleDefinition roleDefinition =\n     keyVaultAccessControlClient.getRoleDefinition&#40;KeyVaultRoleScope.GLOBAL, roleDefinitionName&#41;;\n\n System.out.printf&#40;&quot;Retrieved role definition with name '%s' and role name '%s'.%n&quot;, roleDefinition.getName&#40;&#41;,\n     roleDefinition.getRoleName&#40;&#41;&#41;;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.getRoleDefinition#KeyVaultRoleScope-String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Delete a Role Definition</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to delete a role\n definition from the key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously delete a role definition from the key vault, using\n the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#deleteRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.deleteRoleDefinition#KeyVaultRoleScope-String\n -->\n <pre>\n String roleDefinitionName = &quot;6a709e6e-8964-4012-a99b-6b0131e8ce40&quot;;\n\n keyVaultAccessControlClient.deleteRoleDefinition&#40;KeyVaultRoleScope.GLOBAL, roleDefinitionName&#41;;\n\n System.out.printf&#40;&quot;Deleted role definition with name '%s'.%n&quot;, roleDefinitionName&#41;;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.deleteRoleDefinition#KeyVaultRoleScope-String\n -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Create a Role Assignment</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to set a role\n assignment in the key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously create a role assignment in the key vault, using the\n <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#createRoleAssignment(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String, java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.createRoleAssignment(KeyVaultRoleScope, String,\n String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.createRoleAssignment#KeyVaultRoleScope-String-String\n -->\n <pre>\n String roleDefinitionId = &quot;b0b43a39-920c-475b-b34c-32ecc2bbb0ea&quot;;\n String servicePrincipalId = &quot;169d6a86-61b3-4615-ac7e-2da09edfeed4&quot;;\n KeyVaultRoleAssignment roleAssignment =\n     keyVaultAccessControlClient.createRoleAssignment&#40;KeyVaultRoleScope.GLOBAL, roleDefinitionId,\n         servicePrincipalId&#41;;\n\n System.out.printf&#40;&quot;Created role assignment with randomly generated name '%s' for principal with id '%s'.%n&quot;,\n     roleAssignment.getName&#40;&#41;, roleAssignment.getProperties&#40;&#41;.getPrincipalId&#40;&#41;&#41;;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.createRoleAssignment#KeyVaultRoleScope-String-String\n -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Get a Role Definition</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to retrieve a role\n definition from the key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously retrieve a role definition from the key vault, using\n the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#getRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.getRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.getRoleAssignment#KeyVaultRoleScope-String -->\n <pre>\n String roleAssignmentName = &quot;06d1ae8b-0791-4f02-b976-f631251f5a95&quot;;\n KeyVaultRoleAssignment roleAssignment =\n     keyVaultAccessControlClient.getRoleAssignment&#40;KeyVaultRoleScope.GLOBAL, roleAssignmentName&#41;;\n\n System.out.printf&#40;&quot;Retrieved role assignment with name '%s'.%n&quot;, roleAssignment.getName&#40;&#41;&#41;;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.getRoleAssignment#KeyVaultRoleScope-String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Delete a Role Definition</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient\"></xref> can be used to delete a role\n definition from an Azure Key Vault account.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to asynchronously delete a role definition from the key vault, using\n the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlClient#deleteRoleDefinition(com.azure.security.keyvault.administration.models.KeyVaultRoleScope,\n java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultAccessControlClient.deleteRoleDefinition(KeyVaultRoleScope, String)\"></xref> API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.deleteRoleAssignment#KeyVaultRoleScope-String\n -->\n <pre>\n String roleAssignmentName = &quot;c3ed874a-64a9-4a87-8581-2a1ad84b9ddb&quot;;\n\n keyVaultAccessControlClient.deleteRoleAssignment&#40;KeyVaultRoleScope.GLOBAL, roleAssignmentName&#41;;\n\n System.out.printf&#40;&quot;Deleted role assignment with name '%s'.%n&quot;, roleAssignmentName&#41;;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultAccessControlClient.deleteRoleAssignment#KeyVaultRoleScope-String\n -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultAccessControlAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Back Up a Collection of Keys</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to back up the entire\n collection of keys from a key vault.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously back up an entire collection of keys using, using the\n <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginBackup(String, String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginBackup(String, String)\"></xref> API.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultBackupClient.beginBackup#String-String -->\n <pre>\n String blobStorageUrl = &quot;https:&#47;&#47;myaccount.blob.core.windows.net&#47;myContainer&quot;;\n String sasToken = &quot;sv=2020-02-10&amp;ss=b&amp;srt=o&amp;sp=rwdlactfx&amp;se=2021-06-17T07:13:07Z&amp;st=2021-06-16T23:13:07Z&quot;\n     + &quot;&amp;spr=https&amp;sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D&quot;;\n\n SyncPoller&lt;KeyVaultBackupOperation, String&gt; backupPoller = client.beginBackup&#40;blobStorageUrl, sasToken&#41;;\n\n PollResponse&lt;KeyVaultBackupOperation&gt; pollResponse = backupPoller.poll&#40;&#41;;\n\n System.out.printf&#40;&quot;The current status of the operation is: %s.%n&quot;, pollResponse.getStatus&#40;&#41;&#41;;\n\n PollResponse&lt;KeyVaultBackupOperation&gt; finalPollResponse = backupPoller.waitForCompletion&#40;&#41;;\n\n if &#40;finalPollResponse.getStatus&#40;&#41; == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED&#41; &#123;\n     String folderUrl = backupPoller.getFinalResult&#40;&#41;;\n\n     System.out.printf&#40;&quot;Backup completed. The storage location of this backup is: %s.%n&quot;, folderUrl&#41;;\n &#125; else &#123;\n     KeyVaultBackupOperation operation = backupPoller.poll&#40;&#41;.getValue&#40;&#41;;\n\n     System.out.printf&#40;&quot;Backup failed with error: %s.%n&quot;, operation.getError&#40;&#41;.getMessage&#40;&#41;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultBackupClient.beginBackup#String-String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Restore a Collection of Keys</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to restore an entire\n collection of keys from a backup.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously restore an entire collection of keys from a backup,\n using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginRestore(String, String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginRestore(String, String)\"></xref> API.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultBackupClient.beginRestore#String-String -->\n <pre>\n String folderUrl = &quot;https:&#47;&#47;myaccount.blob.core.windows.net&#47;myContainer&#47;mhsm-myaccount-2020090117323313&quot;;\n String sasToken = &quot;sv=2020-02-10&amp;ss=b&amp;srt=o&amp;sp=rwdlactfx&amp;se=2021-06-17T07:13:07Z&amp;st=2021-06-16T23:13:07Z&quot;\n     + &quot;&amp;spr=https&amp;sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D&quot;;\n\n SyncPoller&lt;KeyVaultRestoreOperation, KeyVaultRestoreResult&gt; backupPoller =\n     client.beginRestore&#40;folderUrl, sasToken&#41;;\n\n PollResponse&lt;KeyVaultRestoreOperation&gt; pollResponse = backupPoller.poll&#40;&#41;;\n\n System.out.printf&#40;&quot;The current status of the operation is: %s.%n&quot;, pollResponse.getStatus&#40;&#41;&#41;;\n\n PollResponse&lt;KeyVaultRestoreOperation&gt; finalPollResponse = backupPoller.waitForCompletion&#40;&#41;;\n\n if &#40;finalPollResponse.getStatus&#40;&#41; == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED&#41; &#123;\n     System.out.printf&#40;&quot;Backup restored successfully.%n&quot;&#41;;\n &#125; else &#123;\n     KeyVaultRestoreOperation operation = backupPoller.poll&#40;&#41;.getValue&#40;&#41;;\n\n     System.out.printf&#40;&quot;Restore failed with error: %s.%n&quot;, operation.getError&#40;&#41;.getMessage&#40;&#41;&#41;;\n &#125;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultBackupClient.beginRestore#String-String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Selectively Restore a Key</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\"></xref> can be used to restore a specific key\n from a backup.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously restore a specific key from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginSelectiveKeyRestore(String, String, String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupClient#beginSelectiveKeyRestore(String, String, String)\"></xref>\n API.\n <!-- src_embed\n com.azure.security.keyvault.administration.KeyVaultBackupClient.beginSelectiveKeyRestore#String-String-String -->\n <pre>\n String folderUrl = &quot;https:&#47;&#47;myaccount.blob.core.windows.net&#47;myContainer&#47;mhsm-myaccount-2020090117323313&quot;;\n String sasToken = &quot;sv=2020-02-10&amp;ss=b&amp;srt=o&amp;sp=rwdlactfx&amp;se=2021-06-17T07:13:07Z&amp;st=2021-06-16T23:13:07Z&quot;\n     &quot;&amp;spr=https&amp;sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D&quot;;\n String keyName = &quot;myKey&quot;;\n\n SyncPoller&lt;KeyVaultSelectiveKeyRestoreOperation, KeyVaultSelectiveKeyRestoreResult&gt; backupPoller =\n     client.beginSelectiveKeyRestore&#40;folderUrl, sasToken, keyName&#41;;\n\n PollResponse&lt;KeyVaultSelectiveKeyRestoreOperation&gt; pollResponse = backupPoller.poll&#40;&#41;;\n\n System.out.printf&#40;&quot;The current status of the operation is: %s.%n&quot;, pollResponse.getStatus&#40;&#41;&#41;;\n\n PollResponse&lt;KeyVaultSelectiveKeyRestoreOperation&gt; finalPollResponse = backupPoller.waitForCompletion&#40;&#41;;\n\n if &#40;finalPollResponse.getStatus&#40;&#41; == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED&#41; &#123;\n     System.out.printf&#40;&quot;Key restored successfully.%n&quot;&#41;;\n &#125; else &#123;\n     KeyVaultSelectiveKeyRestoreOperation operation = backupPoller.poll&#40;&#41;.getValue&#40;&#41;;\n\n     System.out.printf&#40;&quot;Key restore failed with error: %s.%n&quot;, operation.getError&#40;&#41;.getMessage&#40;&#41;&#41;;\n &#125;\n </pre>\n <!-- end\n com.azure.security.keyvault.administration.KeyVaultBackupClient.beginSelectiveKeyRestore#String-String-String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultBackupAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Get All Settings</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to list all the settings\n for an Azure Key Vault account.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously back up an entire collection of keys using, using the\n <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSettings()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSettings()\"></xref> API.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSettings -->\n <pre>\n KeyVaultGetSettingsResult getSettingsResult = keyVaultSettingsClient.getSettings&#40;&#41;;\n List&lt;KeyVaultSetting&gt; settings = getSettingsResult.getSettings&#40;&#41;;\n\n settings.forEach&#40;setting -&gt;\n     System.out.printf&#40;&quot;Retrieved setting with name '%s' and value %s'.%n&quot;, setting.getName&#40;&#41;,\n         setting.asBoolean&#40;&#41;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSettings -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Retrieve a Specific Setting</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to retrieve a specific\n setting.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously restore an entire collection of keys from a backup,\n using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSetting(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#getSetting(String)\"></xref> API.\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSetting#String -->\n <pre>\n KeyVaultSetting setting = keyVaultSettingsClient.getSetting&#40;settingName&#41;;\n\n System.out.printf&#40;&quot;Retrieved setting '%s' with value '%s'.%n&quot;, setting.getName&#40;&#41;, setting.asBoolean&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultSettingsClient.getSetting#String -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>. <br>\n <hr/>\n\n <h2>Update a Specific Setting</h2>\n\n The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient\"></xref> can be used to restore a specific key\n from a backup.\n\n <p>\n <strong>Code Sample:</strong>\n\n <p>\n The following code sample demonstrates how to synchronously restore a specific key from a backup, using the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsClient#updateSetting(com.azure.security.keyvault.administration.models.KeyVaultSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSettingsClient.updateSetting(KeyVaultSetting)\"></xref>\n <!-- src_embed com.azure.security.keyvault.administration.KeyVaultSettingsClient.updateSetting#KeyVaultSetting -->\n <pre>\n KeyVaultSetting settingToUpdate = new KeyVaultSetting&#40;settingName, true&#41;;\n KeyVaultSetting updatedSetting = keyVaultSettingsClient.updateSetting&#40;settingToUpdate&#41;;\n\n System.out.printf&#40;&quot;Updated setting '%s' to '%s'.%n&quot;, updatedSetting.getName&#40;&#41;, updatedSetting.asBoolean&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.security.keyvault.administration.KeyVaultSettingsClient.updateSetting#KeyVaultSetting -->\n\n <p>\n <strong>Note:</strong> For the asynchronous sample, refer to <xref uid=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.keyvault.administration.KeyVaultSettingsAsyncClient\"></xref>. <br>\n <hr/>"
metadata: {}
package: "com.azure.security.keyvault.administration"
artifact: com.azure:azure-security-keyvault-administration:4.5.3
