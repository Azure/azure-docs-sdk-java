### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStream()
  name: addPersonFaceFromStream()
  nameWithType: PersonGroupPersons.addPersonFaceFromStream()
  returns:
    description: <p>the first stage of the addPersonFaceFromStream call </p>
    type: <xref href="PersonGroupPersonsAddPersonFaceFromStreamDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsAddPersonFaceFromStreamDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsAddPersonFaceFromStreamDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public PersonGroupPersonsAddPersonFaceFromStreamDefinitionStages.WithPersonGroupId addPersonFaceFromStream()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStream(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  name: addPersonFaceFromStream(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  nameWithType: PersonGroupPersons.addPersonFaceFromStream(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addPersonFaceFromStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromStreamOptionalParameter&text=AddPersonFaceFromStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersistedFace object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public PersistedFace addPersonFaceFromStream(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStream(String,UUID,byte [],AddPersonFaceFromStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  name: addPersonFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  nameWithType: PersonGroupPersons.addPersonFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addPersonFaceFromStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromStreamOptionalParameter&text=AddPersonFaceFromStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersistedFace object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public Observable<PersistedFace> addPersonFaceFromStreamAsync(String personGroupId, UUID personId, byte[] image, AddPersonFaceFromStreamOptionalParameter addPersonFaceFromStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromStreamAsync(String,UUID,byte [],AddPersonFaceFromStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrl()
  name: addPersonFaceFromUrl()
  nameWithType: PersonGroupPersons.addPersonFaceFromUrl()
  returns:
    description: <p>the first stage of the addPersonFaceFromUrl call </p>
    type: <xref href="PersonGroupPersonsAddPersonFaceFromUrlDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsAddPersonFaceFromUrlDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsAddPersonFaceFromUrlDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public PersonGroupPersonsAddPersonFaceFromUrlDefinitionStages.WithPersonGroupId addPersonFaceFromUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrl(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  name: addPersonFaceFromUrl(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  nameWithType: PersonGroupPersons.addPersonFaceFromUrl(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addPersonFaceFromUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromUrlOptionalParameter&text=AddPersonFaceFromUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersistedFace object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public PersistedFace addPersonFaceFromUrl(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrl(String,UUID,String,AddPersonFaceFromUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  name: addPersonFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  nameWithType: PersonGroupPersons.addPersonFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addPersonFaceFromUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddPersonFaceFromUrlOptionalParameter&text=AddPersonFaceFromUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersistedFace object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a representative face to a person for identification. The input face is specified as an image with a targetFace rectangle.</p>

    <p></p>
  syntax: public Observable<PersistedFace> addPersonFaceFromUrlAsync(String personGroupId, UUID personId, String url, AddPersonFaceFromUrlOptionalParameter addPersonFaceFromUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.addPersonFaceFromUrlAsync(String,UUID,String,AddPersonFaceFromUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.create()
  name: create()
  nameWithType: PersonGroupPersons.create()
  returns:
    description: <p>the first stage of the create call </p>
    type: <xref href="PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new person in a specified person group.</p>

    <p></p>
  syntax: public PersonGroupPersonsCreateDefinitionStages.WithPersonGroupId create()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.create()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  name: create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  nameWithType: PersonGroupPersons.create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter&text=CreatePersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Person object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new person in a specified person group.</p>

    <p></p>
  syntax: public Person create(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.create(String,CreatePersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  name: createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  nameWithType: PersonGroupPersons.createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupPersonsOptionalParameter&text=CreatePersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Person object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a new person in a specified person group.</p>

    <p></p>
  syntax: public Observable<Person> createAsync(String personGroupId, CreatePersonGroupPersonsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.createAsync(String,CreatePersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.delete(String personGroupId, UUID personId)
  name: delete(String personGroupId, UUID personId)
  nameWithType: PersonGroupPersons.delete(String personGroupId, UUID personId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete an existing person from a person group. Persisted face images of the person will also be deleted.</p>

    <p></p>
  syntax: public void delete(String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.delete(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteAsync(String personGroupId, UUID personId)
  name: deleteAsync(String personGroupId, UUID personId)
  nameWithType: PersonGroupPersons.deleteAsync(String personGroupId, UUID personId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an existing person from a person group. Persisted face images of the person will also be deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteAsync(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteFace(String personGroupId, UUID personId, UUID persistedFaceId)
  name: deleteFace(String personGroupId, UUID personId, UUID persistedFaceId)
  nameWithType: PersonGroupPersons.deleteFace(String personGroupId, UUID personId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a face from a person. Relative image for the persisted face will also be deleted.</p>

    <p></p>
  syntax: public void deleteFace(String personGroupId, UUID personId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteFace(String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  name: deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  nameWithType: PersonGroupPersons.deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a face from a person. Relative image for the persisted face will also be deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.deleteFaceAsync(String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.get(String personGroupId, UUID personId)
  name: get(String personGroupId, UUID personId)
  nameWithType: PersonGroupPersons.get(String personGroupId, UUID personId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Person object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve a person's information, including registered persisted faces, name and userData.</p>

    <p></p>
  syntax: public Person get(String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.get(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getAsync(String personGroupId, UUID personId)
  name: getAsync(String personGroupId, UUID personId)
  nameWithType: PersonGroupPersons.getAsync(String personGroupId, UUID personId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Person object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve a person's information, including registered persisted faces, name and userData.</p>

    <p></p>
  syntax: public Observable<Person> getAsync(String personGroupId, UUID personId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getAsync(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getFace(String personGroupId, UUID personId, UUID persistedFaceId)
  name: getFace(String personGroupId, UUID personId, UUID persistedFaceId)
  nameWithType: PersonGroupPersons.getFace(String personGroupId, UUID personId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersistedFace object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging personGroupId).</p>

    <p></p>
  syntax: public PersistedFace getFace(String personGroupId, UUID personId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getFace(String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  name: getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  nameWithType: PersonGroupPersons.getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersistedFace object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve information about a persisted face (specified by persistedFaceId, personId and its belonging personGroupId).</p>

    <p></p>
  syntax: public Observable<PersistedFace> getFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.getFaceAsync(String,UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.list()
  name: list()
  nameWithType: PersonGroupPersons.list()
  returns:
    description: <p>the first stage of the list call </p>
    type: <xref href="PersonGroupPersonsListDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsListDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsListDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).</p>

    <p></p>
  syntax: public PersonGroupPersonsListDefinitionStages.WithPersonGroupId list()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.list()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  name: list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  nameWithType: PersonGroupPersons.list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter&text=ListPersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Person&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).</p>

    <p></p>
  syntax: public List<Person> list(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.list(String,ListPersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  name: listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  nameWithType: PersonGroupPersons.listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupPersonsOptionalParameter&text=ListPersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Person&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Person&text=Person" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List all persons in a person group, and retrieve person information (including personId, name, userData and persistedFaceIds of registered faces of the person).</p>

    <p></p>
  syntax: public Observable<List<Person>> listAsync(String personGroupId, ListPersonGroupPersonsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.listAsync(String,ListPersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.update()
  name: update()
  nameWithType: PersonGroupPersons.update()
  returns:
    description: <p>the first stage of the update call </p>
    type: <xref href="PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update name or userData of a person.</p>

    <p></p>
  syntax: public PersonGroupPersonsUpdateDefinitionStages.WithPersonGroupId update()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.update()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  name: update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  nameWithType: PersonGroupPersons.update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter&text=UpdatePersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Update name or userData of a person.</p>

    <p></p>
  syntax: public void update(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.update(String,UUID,UpdatePersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  name: updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  nameWithType: PersonGroupPersons.updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupPersonsOptionalParameter&text=UpdatePersonGroupPersonsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update name or userData of a person.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String personGroupId, UUID personId, UpdatePersonGroupPersonsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateAsync(String,UUID,UpdatePersonGroupPersonsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFace()
  name: updateFace()
  nameWithType: PersonGroupPersons.updateFace()
  returns:
    description: <p>the first stage of the updateFace call </p>
    type: <xref href="PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId?alt=PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId&text=PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a person persisted face's userData field.</p>

    <p></p>
  syntax: public PersonGroupPersonsUpdateFaceDefinitionStages.WithPersonGroupId updateFace()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFace()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  name: updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  nameWithType: PersonGroupPersons.updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateFaceOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceOptionalParameter&text=UpdateFaceOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Update a person persisted face's userData field.</p>

    <p></p>
  syntax: public void updateFace(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFace(String,UUID,UUID,UpdateFaceOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  name: updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  nameWithType: PersonGroupPersons.updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular person. </p>
    name: personId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateFaceOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceOptionalParameter&text=UpdateFaceOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a person persisted face's userData field.</p>

    <p></p>
  syntax: public Observable<Void> updateFaceAsync(String personGroupId, UUID personId, UUID persistedFaceId, UpdateFaceOptionalParameter updateFaceOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons.updateFaceAsync(String,UUID,UUID,UpdateFaceOptionalParameter)
nameWithType: PersonGroupPersons
syntax: public interface PersonGroupPersons
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroupPersons
name: PersonGroupPersons
package: com.microsoft.azure.cognitiveservices.vision.faceapi
summary: <p>An instance of this class provides access to all the operations defined in PersonGroupPersons. </p>
metadata: {}
