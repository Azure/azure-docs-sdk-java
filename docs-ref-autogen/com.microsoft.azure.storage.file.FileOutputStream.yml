### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream(final CloudFile parentFile, final long length, final AccessCondition accessCondition, final FileRequestOptions options, final OperationContext opContext)
  name: FileOutputStream(final CloudFile parentFile, final long length, final AccessCondition accessCondition, final FileRequestOptions options, final OperationContext opContext)
  nameWithType: FileOutputStream.FileOutputStream(final CloudFile parentFile, final long length, final AccessCondition accessCondition, final FileRequestOptions options, final OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFile" data-throw-if-not-resolved="false" data-raw-source="CloudFile"></xref> object which represents the file that this stream is associated with. </p>
    name: parentFile
    type: final <xref href="com.microsoft.azure.storage.file.CloudFile?alt=com.microsoft.azure.storage.file.CloudFile&text=CloudFile" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length of the file in bytes. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object which specifies any additional options for the request. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which is used to track the execution of the operation</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>An exception representing any error which occurred during the operation. </p>
  summary: >-
    <p>Initializes a new instance of the FileOutputStream class.</p>

    <p></p>
  syntax: protected FileOutputStream(final CloudFile parentFile, final long length, final AccessCondition accessCondition, final FileRequestOptions options, final OperationContext opContext)
  uid: com.microsoft.azure.storage.file.FileOutputStream.FileOutputStream(final CloudFile,final long,final AccessCondition,final FileRequestOptions,final OperationContext)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="OutputStream" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.file.FileOutputStream.close()
  name: close()
  nameWithType: FileOutputStream.close()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  summary: >-
    <p>Closes this output stream and releases any system resources associated with this stream. If any data remains in the buffer it is committed to the service.</p>

    <p></p>
  syntax: public void close()
  uid: com.microsoft.azure.storage.file.FileOutputStream.close()
- fullName: com.microsoft.azure.storage.file.FileOutputStream.flush()
  name: flush()
  nameWithType: FileOutputStream.flush()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Flushes this output stream and forces any buffered output bytes to be written out. If any data remains in the buffer it is committed to the service.</p>

    <p></p>
  syntax: public synchronized void flush()
  uid: com.microsoft.azure.storage.file.FileOutputStream.flush()
- fullName: com.microsoft.azure.storage.file.FileOutputStream.write(final byte[] data)
  name: write(final byte[] data)
  nameWithType: FileOutputStream.write(final byte[] data)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to write.</p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been closed. </p>
  summary: >-
    <p>Writes  bytes from the specified byte array to this output stream.</p>

    <p></p>
  syntax: public void write(final byte[] data)
  uid: com.microsoft.azure.storage.file.FileOutputStream.write(final byte [])
- fullName: com.microsoft.azure.storage.file.FileOutputStream.write(final byte[] data, final int offset, final int length)
  name: write(final byte[] data, final int offset, final int length)
  nameWithType: FileOutputStream.write(final byte[] data, final int offset, final int length)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to write. </p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the start offset in the data. </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the number of bytes to write.</p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been closed. </p>
  summary: >-
    <p>Writes length bytes from the specified byte array starting at offset to this output stream.</p>

    <p></p>
  syntax: public void write(final byte[] data, final int offset, final int length)
  uid: com.microsoft.azure.storage.file.FileOutputStream.write(final byte [],final int,final int)
- fullName: com.microsoft.azure.storage.file.FileOutputStream.write(final InputStream sourceStream, final long writeLength)
  name: write(final InputStream sourceStream, final long writeLength)
  nameWithType: FileOutputStream.write(final InputStream sourceStream, final long writeLength)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object which species the data to write to the File.</p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - name: writeLength
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been closed. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>An exception representing any error which occurred during the operation. </p>
  summary: >-
    <p>Writes all data from the InputStream to the File.</p>

    <p></p>
  syntax: public void write(final InputStream sourceStream, final long writeLength)
  uid: com.microsoft.azure.storage.file.FileOutputStream.write(final InputStream,final long)
- fullName: com.microsoft.azure.storage.file.FileOutputStream.write(final int byteVal)
  name: write(final int byteVal)
  nameWithType: FileOutputStream.write(final int byteVal)
  parameters:
  - description: <p>An <code>int</code> which represents the bye value to write.</p>
    name: byteVal
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. In particular, an IOException may be thrown if the output stream has been closed. </p>
  summary: >-
    <p>Writes the specified byte to this output stream. The general contract for write is that one byte is written to the output stream. The byte to be written is the eight low-order bits of the argument b. The 24 high-order bits of b are ignored.</p>

    <p></p>
  syntax: public void write(final int byteVal)
  uid: com.microsoft.azure.storage.file.FileOutputStream.write(final int)
nameWithType: FileOutputStream
syntax: public class FileOutputStream
type: class
uid: com.microsoft.azure.storage.file.FileOutputStream
fullName: com.microsoft.azure.storage.file.FileOutputStream
name: FileOutputStream
package: com.microsoft.azure.storage.file
summary: <p>The class is an append-only stream for writing into storage. </p>
metadata: {}
