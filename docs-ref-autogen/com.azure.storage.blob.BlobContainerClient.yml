### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.BlobContainerClient
  id: BlobContainerClient
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob
  children:
  - com.azure.storage.blob.BlobContainerClient.LOG_CONTAINER_NAME
  - com.azure.storage.blob.BlobContainerClient.ROOT_CONTAINER_NAME
  - com.azure.storage.blob.BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME
  - com.azure.storage.blob.BlobContainerClient.create()
  - com.azure.storage.blob.BlobContainerClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.delete()
  - com.azure.storage.blob.BlobContainerClient.deleteWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.exists()
  - com.azure.storage.blob.BlobContainerClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  - com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  - com.azure.storage.blob.BlobContainerClient.getAccessPolicy()
  - com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.getAccountInfo(java.time.Duration)
  - com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.getAccountName()
  - com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)
  - com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String,java.lang.String)
  - com.azure.storage.blob.BlobContainerClient.getBlobContainerName()
  - com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl()
  - com.azure.storage.blob.BlobContainerClient.getBlobVersionClient(java.lang.String,java.lang.String)
  - com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey()
  - com.azure.storage.blob.BlobContainerClient.getEncryptionScope()
  - com.azure.storage.blob.BlobContainerClient.getHttpPipeline()
  - com.azure.storage.blob.BlobContainerClient.getProperties()
  - com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.getServiceVersion()
  - com.azure.storage.blob.BlobContainerClient.listBlobs()
  - com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.lang.String,java.time.Duration)
  - com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  - com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String)
  - com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String,com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  - com.azure.storage.blob.BlobContainerClient.setAccessPolicy(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>)
  - com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.blob.BlobContainerClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: BlobContainerClient
  nameWithType: BlobContainerClient
  fullName: com.azure.storage.blob.BlobContainerClient
  type: Class
  package: com.azure.storage.blob
  summary: >-
    Client to a container. It may only be instantiated through a <xref uid="com.azure.storage.blob.BlobContainerClientBuilder" data-throw-if-not-resolved="false">BlobContainerClientBuilder</xref> or via the method <xref uid="com.azure.storage.blob.BlobServiceClient.getBlobContainerClient(java.lang.String)" data-throw-if-not-resolved="false">BlobServiceClient#getBlobContainerClient(String)</xref>. This class does not hold any state about a particular container but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to blobs.


    This client contains operations on a container. Operations on a blob are available on <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">BlobClient</xref> through <xref uid="com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)" data-throw-if-not-resolved="false">#getBlobClient(String)</xref>, and operations on the service are available on <xref uid="com.azure.storage.blob.BlobServiceClient" data-throw-if-not-resolved="false">BlobServiceClient</xref>.


    Please refer to the [Azure Docs][] for more information on containers.



    [Azure Docs]: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blobs-introduction
  syntax:
    content: public final class BlobContainerClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.BlobContainerClient.BlobContainerClient(com.azure.storage.blob.BlobContainerAsyncClient)
  id: BlobContainerClient(com.azure.storage.blob.BlobContainerAsyncClient)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: BlobContainerClient(BlobContainerAsyncClient client)
  nameWithType: BlobContainerClient.BlobContainerClient(BlobContainerAsyncClient client)
  fullName: com.azure.storage.blob.BlobContainerClient.BlobContainerClient(BlobContainerAsyncClient client)
  overload: com.azure.storage.blob.BlobContainerClient.BlobContainerClient*
  type: Constructor
  package: com.azure.storage.blob
  summary: Package-private constructor for use by <xref uid="com.azure.storage.blob.BlobContainerClientBuilder" data-throw-if-not-resolved="false">BlobContainerClientBuilder</xref>.
  syntax:
    content: " BlobContainerClient(BlobContainerAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.storage.blob.BlobContainerAsyncClient
      description: the async container client
- uid: com.azure.storage.blob.BlobContainerClient.LOG_CONTAINER_NAME
  id: LOG_CONTAINER_NAME
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: LOG_CONTAINER_NAME
  nameWithType: BlobContainerClient.LOG_CONTAINER_NAME
  fullName: com.azure.storage.blob.BlobContainerClient.LOG_CONTAINER_NAME
  type: Field
  package: com.azure.storage.blob
  syntax:
    content: public static final String LOG_CONTAINER_NAME
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.BlobContainerClient.ROOT_CONTAINER_NAME
  id: ROOT_CONTAINER_NAME
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: ROOT_CONTAINER_NAME
  nameWithType: BlobContainerClient.ROOT_CONTAINER_NAME
  fullName: com.azure.storage.blob.BlobContainerClient.ROOT_CONTAINER_NAME
  type: Field
  package: com.azure.storage.blob
  syntax:
    content: public static final String ROOT_CONTAINER_NAME
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME
  id: STATIC_WEBSITE_CONTAINER_NAME
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: STATIC_WEBSITE_CONTAINER_NAME
  nameWithType: BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME
  fullName: com.azure.storage.blob.BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME
  type: Field
  package: com.azure.storage.blob
  syntax:
    content: public static final String STATIC_WEBSITE_CONTAINER_NAME
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.BlobContainerClient.create()
  id: create()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: create()
  nameWithType: BlobContainerClient.create()
  fullName: com.azure.storage.blob.BlobContainerClient.create()
  overload: com.azure.storage.blob.BlobContainerClient.create*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    try {
         client.create();
         System.out.printf("Create completed%n");
     } catch (BlobStorageException error) {
         if (error.getErrorCode().equals(BlobErrorCode.CONTAINER_ALREADY_EXISTS)) {
             System.out.printf("Can't create container. It already exists %n");
         }
     }
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public void create()
- uid: com.azure.storage.blob.BlobContainerClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType,java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)
  nameWithType: BlobContainerClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.createWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n \n System.out.printf(\"Create completed with status %d%n\",\n     client.createWithResponse(metadata, PublicAccessType.CONTAINER, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  syntax:
    content: public Response<Void> createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the container.
    - id: accessType
      type: com.azure.storage.blob.models.PublicAccessType
      description: >-
        Specifies how the data in this container is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.blob.BlobContainerClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: delete()
  nameWithType: BlobContainerClient.delete()
  fullName: com.azure.storage.blob.BlobContainerClient.delete()
  overload: com.azure.storage.blob.BlobContainerClient.delete*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    try {
         client.delete();
         System.out.printf("Delete completed%n");
     } catch (BlobStorageException error) {
         if (error.getErrorCode().equals(BlobErrorCode.CONTAINER_NOT_FOUND)) {
             System.out.printf("Delete failed. Container was not found %n");
         }
     }
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container
  syntax:
    content: public void delete()
- uid: com.azure.storage.blob.BlobContainerClient.deleteWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: deleteWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlobContainerClient.deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"Key\", \"Value\");\n \n System.out.printf(\"Delete completed with status %d%n\", client.deleteWithResponse(\n     requestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  syntax:
    content: public Response<Void> deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.blob.BlobContainerClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: exists()
  nameWithType: BlobContainerClient.exists()
  fullName: com.azure.storage.blob.BlobContainerClient.exists()
  overload: com.azure.storage.blob.BlobContainerClient.exists*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets if the container this client represents exists in the cloud.


    **Code Samples**


    ```java

    System.out.printf("Exists? %b%n", client.exists());

    ```
  syntax:
    content: public boolean exists()
    return:
      type: boolean
      description: true if the container exists, false if it doesn't
- uid: com.azure.storage.blob.BlobContainerClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: existsWithResponse(Duration timeout, Context context)
  nameWithType: BlobContainerClient.existsWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.existsWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.existsWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Gets if the container this client represents exists in the cloud.


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     System.out.printf("Exists? %b%n", client.existsWithResponse(timeout, context).getValue());
    ```
  syntax:
    content: public Response<Boolean> existsWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Boolean>
      description: true if the container exists, false if it doesn't
- uid: com.azure.storage.blob.BlobContainerClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  id: generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)
  nameWithType: BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)
  fullName: com.azure.storage.blob.BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)
  overload: com.azure.storage.blob.BlobContainerClient.generateSas*
  type: Method
  package: com.azure.storage.blob
  summary: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">BlobServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">BlobServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission permission = new BlobContainerSasPermission().setReadPermission(true);\n \n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)
    parameters:
    - id: blobServiceSasSignatureValues
      type: com.azure.storage.blob.sas.BlobServiceSasSignatureValues
      description: <xref uid="com.azure.storage.blob.sas.BlobServiceSasSignatureValues" data-throw-if-not-resolved="false">BlobServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  id: generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  nameWithType: BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  fullName: com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  overload: com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas*
  type: Method
  package: com.azure.storage.blob
  summary: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">BlobServiceSasSignatureValues</xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">BlobServiceSasSignatureValues</xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission myPermission = new BlobContainerSasPermission().setReadPermission(true);\n \n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  syntax:
    content: public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)
    parameters:
    - id: blobServiceSasSignatureValues
      type: com.azure.storage.blob.sas.BlobServiceSasSignatureValues
      description: <xref uid="com.azure.storage.blob.sas.BlobServiceSasSignatureValues" data-throw-if-not-resolved="false">BlobServiceSasSignatureValues</xref>
    - id: userDelegationKey
      type: com.azure.storage.blob.models.UserDelegationKey
      description: A <xref uid="com.azure.storage.blob.models.UserDelegationKey" data-throw-if-not-resolved="false">UserDelegationKey</xref> object used to sign the SAS values.
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.blob.BlobContainerClient.getAccessPolicy()
  id: getAccessPolicy()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getAccessPolicy()
  nameWithType: BlobContainerClient.getAccessPolicy()
  fullName: com.azure.storage.blob.BlobContainerClient.getAccessPolicy()
  overload: com.azure.storage.blob.BlobContainerClient.getAccessPolicy*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobContainerAccessPolicies accessPolicies = client.getAccessPolicy();\n System.out.printf(\"Blob Access Type: %s%n\", accessPolicies.getBlobAccessType());\n \n for (BlobSignedIdentifier identifier : accessPolicies.getIdentifiers()) {\n     System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n         identifier.getId(),\n         identifier.getAccessPolicy().getPermissions());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  syntax:
    content: public BlobContainerAccessPolicies getAccessPolicy()
    return:
      type: com.azure.storage.blob.models.BlobContainerAccessPolicies
      description: The container access policy.
- uid: com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: getAccessPolicyWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  nameWithType: BlobContainerClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n BlobContainerAccessPolicies accessPolicies = client.getAccessPolicyWithResponse(leaseId, timeout, context)\n     .getValue();\n System.out.printf(\"Blob Access Type: %s%n\", accessPolicies.getBlobAccessType());\n \n for (BlobSignedIdentifier identifier : accessPolicies.getIdentifiers()) {\n     System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n         identifier.getId(),\n         identifier.getAccessPolicy().getPermissions());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  syntax:
    content: public Response<BlobContainerAccessPolicies> getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
    parameters:
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the container must match.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobContainerAccessPolicies>
      description: The container access policy.
- uid: com.azure.storage.blob.BlobContainerClient.getAccountInfo(java.time.Duration)
  id: getAccountInfo(java.time.Duration)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getAccountInfo(Duration timeout)
  nameWithType: BlobContainerClient.getAccountInfo(Duration timeout)
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountInfo(Duration timeout)
  overload: com.azure.storage.blob.BlobContainerClient.getAccountInfo*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
  syntax:
    content: public StorageAccountInfo getAccountInfo(Duration timeout)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: >-
        An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.

         <p><strong>Code Samples</strong></p>

         <pre>
         StorageAccountInfo accountInfo = client.getAccountInfo&#40;timeout&#41;;
         System.out.printf&#40;&quot;Account Kind: %s, SKU: %s%n&quot;, accountInfo.getAccountKind&#40;&#41;, accountInfo.getSkuName&#40;&#41;&#41;;
         </pre>
    return:
      type: com.azure.storage.blob.models.StorageAccountInfo
      description: The account info.
- uid: com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getAccountInfoWithResponse(Duration timeout, Context context)
  nameWithType: BlobContainerClient.getAccountInfoWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].


    **Code Samples**


    ```java

    Context context = new Context("Key", "Value");
     StorageAccountInfo accountInfo = client.getAccountInfoWithResponse(timeout, context).getValue();
     System.out.printf("Account Kind: %s, SKU: %s%n", accountInfo.getAccountKind(), accountInfo.getSkuName());
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
  syntax:
    content: public Response<StorageAccountInfo> getAccountInfoWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.StorageAccountInfo>
      description: The account info.
- uid: com.azure.storage.blob.BlobContainerClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getAccountName()
  nameWithType: BlobContainerClient.getAccountName()
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountName()
  overload: com.azure.storage.blob.BlobContainerClient.getAccountName*
  type: Method
  package: com.azure.storage.blob
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)
  id: getBlobClient(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getBlobClient(String blobName)
  nameWithType: BlobContainerClient.getBlobClient(String blobName)
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobClient(String blobName)
  overload: com.azure.storage.blob.BlobContainerClient.getBlobClient*
  type: Method
  package: com.azure.storage.blob
  summary: Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient.
  syntax:
    content: public BlobClient getBlobClient(String blobName)
    parameters:
    - id: blobName
      type: java.lang.String
      description: >-
        A <code>String</code> representing the name of the blob.

         <p><strong>Code Samples</strong></p>

         <pre>
         BlobClient blobClient = client.getBlobClient&#40;blobName&#41;;
         </pre>
    return:
      type: com.azure.storage.blob.BlobClient
      description: A new <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">BlobClient</xref> object which references the blob with the specified name in this container.
- uid: com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String,java.lang.String)
  id: getBlobClient(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getBlobClient(String blobName, String snapshot)
  nameWithType: BlobContainerClient.getBlobClient(String blobName, String snapshot)
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobClient(String blobName, String snapshot)
  overload: com.azure.storage.blob.BlobContainerClient.getBlobClient*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient.


    **Code Samples**


    ```java

    BlobClient blobClient = client.getBlobClient(blobName, snapshot);

    ```
  syntax:
    content: public BlobClient getBlobClient(String blobName, String snapshot)
    parameters:
    - id: blobName
      type: java.lang.String
      description: A <code>String</code> representing the name of the blob.
    - id: snapshot
      type: java.lang.String
      description: the snapshot identifier for the blob.
    return:
      type: com.azure.storage.blob.BlobClient
      description: A new <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">BlobClient</xref> object which references the blob with the specified name in this container.
- uid: com.azure.storage.blob.BlobContainerClient.getBlobContainerName()
  id: getBlobContainerName()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getBlobContainerName()
  nameWithType: BlobContainerClient.getBlobContainerName()
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobContainerName()
  overload: com.azure.storage.blob.BlobContainerClient.getBlobContainerName*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Get the container name.


    **Code Samples**


    ```java

    String containerName = client.getBlobContainerName();
     System.out.println("The name of the blob is " + containerName);
    ```
  syntax:
    content: public String getBlobContainerName()
    return:
      type: java.lang.String
      description: The name of container.
- uid: com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl()
  id: getBlobContainerUrl()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getBlobContainerUrl()
  nameWithType: BlobContainerClient.getBlobContainerUrl()
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl()
  overload: com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the URL of the container represented by this client.
  syntax:
    content: public String getBlobContainerUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.blob.BlobContainerClient.getBlobVersionClient(java.lang.String,java.lang.String)
  id: getBlobVersionClient(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getBlobVersionClient(String blobName, String versionId)
  nameWithType: BlobContainerClient.getBlobVersionClient(String blobName, String versionId)
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobVersionClient(String blobName, String versionId)
  overload: com.azure.storage.blob.BlobContainerClient.getBlobVersionClient*
  type: Method
  package: com.azure.storage.blob
  summary: Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient.
  syntax:
    content: public BlobClient getBlobVersionClient(String blobName, String versionId)
    parameters:
    - id: blobName
      type: java.lang.String
      description: A <code>String</code> representing the name of the blob.
    - id: versionId
      type: java.lang.String
      description: the version identifier for the blob, pass <code>null</code> to interact with the latest blob version.
    return:
      type: com.azure.storage.blob.BlobClient
      description: A new <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">BlobClient</xref> object which references the blob with the specified name in this container.
- uid: com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey()
  id: getCustomerProvidedKey()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getCustomerProvidedKey()
  nameWithType: BlobContainerClient.getCustomerProvidedKey()
  fullName: com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey()
  overload: com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the <xref uid="com.azure.storage.blob.models.CpkInfo" data-throw-if-not-resolved="false">CpkInfo</xref> associated with this client that will be passed to <xref uid="com.azure.storage.blob.BlobClient" data-throw-if-not-resolved="false">BlobClients</xref> when <xref uid="com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)" data-throw-if-not-resolved="false">getBlobClient</xref> is called.
  syntax:
    content: public CpkInfo getCustomerProvidedKey()
    return:
      type: com.azure.storage.blob.models.CpkInfo
      description: the customer provided key used for encryption.
- uid: com.azure.storage.blob.BlobContainerClient.getEncryptionScope()
  id: getEncryptionScope()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getEncryptionScope()
  nameWithType: BlobContainerClient.getEncryptionScope()
  fullName: com.azure.storage.blob.BlobContainerClient.getEncryptionScope()
  overload: com.azure.storage.blob.BlobContainerClient.getEncryptionScope*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the `encryption scope` used to encrypt this blob's content on the server.
  syntax:
    content: public String getEncryptionScope()
    return:
      type: java.lang.String
      description: the encryption scope used for encryption.
- uid: com.azure.storage.blob.BlobContainerClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: BlobContainerClient.getHttpPipeline()
  fullName: com.azure.storage.blob.BlobContainerClient.getHttpPipeline()
  overload: com.azure.storage.blob.BlobContainerClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.blob.BlobContainerClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getProperties()
  nameWithType: BlobContainerClient.getProperties()
  fullName: com.azure.storage.blob.BlobContainerClient.getProperties()
  overload: com.azure.storage.blob.BlobContainerClient.getProperties*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns the container's metadata and system properties. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    BlobContainerProperties properties = client.getProperties();
     System.out.printf("Public Access Type: %s, Legal Hold? %b, Immutable? %b%n",
         properties.getBlobPublicAccess(),
         properties.hasLegalHold(),
         properties.hasImmutabilityPolicy());
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata
  syntax:
    content: public BlobContainerProperties getProperties()
    return:
      type: com.azure.storage.blob.models.BlobContainerProperties
      description: The container properties.
- uid: com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  id: getPropertiesWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getPropertiesWithResponse(String leaseId, Duration timeout, Context context)
  nameWithType: BlobContainerClient.getPropertiesWithResponse(String leaseId, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse(String leaseId, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns the container's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n \n BlobContainerProperties properties = client.getPropertiesWithResponse(leaseId, timeout, context)\n     .getValue();\n System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n     properties.getBlobPublicAccess(),\n     properties.hasLegalHold(),\n     properties.hasImmutabilityPolicy());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  syntax:
    content: public Response<BlobContainerProperties> getPropertiesWithResponse(String leaseId, Duration timeout, Context context)
    parameters:
    - id: leaseId
      type: java.lang.String
      description: The lease ID the active lease on the container must match.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobContainerProperties>
      description: The container properties.
- uid: com.azure.storage.blob.BlobContainerClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: BlobContainerClient.getServiceVersion()
  fullName: com.azure.storage.blob.BlobContainerClient.getServiceVersion()
  overload: com.azure.storage.blob.BlobContainerClient.getServiceVersion*
  type: Method
  package: com.azure.storage.blob
  summary: Gets the service version the client is using.
  syntax:
    content: public BlobServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.blob.BlobServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.blob.BlobContainerClient.listBlobs()
  id: listBlobs()
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: listBlobs()
  nameWithType: BlobContainerClient.listBlobs()
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobs()
  overload: com.azure.storage.blob.BlobContainerClient.listBlobs*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> can be consumed through while new items are automatically retrieved as needed.


    Blob names are returned in lexicographic order.


    For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.listBlobs().forEach(blob ->
         System.out.printf("Name: %s, Directory? %b%n", blob.getName(), blob.isPrefix()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs
  syntax:
    content: public PagedIterable<BlobItem> listBlobs()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
      description: The listed blobs, flattened.
- uid: com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.lang.String,java.time.Duration)
  id: listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.lang.String,java.time.Duration)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)
  nameWithType: BlobContainerClient.listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)
  overload: com.azure.storage.blob.BlobContainerClient.listBlobs*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> can be consumed through while new items are automatically retrieved as needed.\n\nBlob names are returned in lexicographic order.\n\nFor more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n \n String continuationToken = \"continuationToken\";\n \n client.listBlobs(options, continuationToken, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  syntax:
    content: public PagedIterable<BlobItem> listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)
    parameters:
    - id: options
      type: com.azure.storage.blob.models.ListBlobsOptions
      description: <xref uid="com.azure.storage.blob.models.ListBlobsOptions" data-throw-if-not-resolved="false">ListBlobsOptions</xref>
    - id: continuationToken
      type: java.lang.String
      description: Identifies the portion of the list to be returned with the next list operation.
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
      description: The listed blobs, flattened.
- uid: com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  id: listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: listBlobs(ListBlobsOptions options, Duration timeout)
  nameWithType: BlobContainerClient.listBlobs(ListBlobsOptions options, Duration timeout)
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobs(ListBlobsOptions options, Duration timeout)
  overload: com.azure.storage.blob.BlobContainerClient.listBlobs*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> can be consumed through while new items are automatically retrieved as needed.\n\nBlob names are returned in lexicographic order.\n\nFor more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n \n client.listBlobs(options, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  syntax:
    content: public PagedIterable<BlobItem> listBlobs(ListBlobsOptions options, Duration timeout)
    parameters:
    - id: options
      type: com.azure.storage.blob.models.ListBlobsOptions
      description: <xref uid="com.azure.storage.blob.models.ListBlobsOptions" data-throw-if-not-resolved="false">ListBlobsOptions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
      description: The listed blobs, flattened.
- uid: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String)
  id: listBlobsByHierarchy(java.lang.String)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: listBlobsByHierarchy(String directory)
  nameWithType: BlobContainerClient.listBlobsByHierarchy(String directory)
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(String directory)
  overload: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Returns a reactive Publisher emitting all the blobs and directories (prefixes) under the given directory (prefix). Directories will have <xref uid="com.azure.storage.blob.models.BlobItem.isPrefix()" data-throw-if-not-resolved="false">BlobItem#isPrefix()</xref> set to true.


    Blob names are returned in lexicographic order. For more information, see the [Azure Docs][].


    E.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:

     *  foo/ (isPrefix = true)
     *  bar (isPrefix = false)

    will return the following results when prefix="foo/":

     *  foo/foo1 (isPrefix = false)
     *  foo/foo2 (isPrefix = false)

    **Code Samples**


    ```java

    client.listBlobsByHierarchy("directoryName").forEach(blob ->
         System.out.printf("Name: %s, Directory? %b%n", blob.getName(), blob.isPrefix()));
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs
  syntax:
    content: public PagedIterable<BlobItem> listBlobsByHierarchy(String directory)
    parameters:
    - id: directory
      type: java.lang.String
      description: The directory to list blobs underneath
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
      description: A reactive response emitting the prefixes and blobs.
- uid: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String,com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  id: listBlobsByHierarchy(java.lang.String,com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)
  nameWithType: BlobContainerClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)
  overload: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy*
  type: Method
  package: com.azure.storage.blob
  summary: "Returns a reactive Publisher emitting all the blobs and prefixes (directories) under the given prefix (directory). Directories will have <xref uid=\"com.azure.storage.blob.models.BlobItem.isPrefix()\" data-throw-if-not-resolved=\"false\">BlobItem#isPrefix()</xref> set to true.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:\n\n *  foo/ (isPrefix = true)\n *  bar (isPrefix = false)\n\nwill return the following results when prefix=\"foo/\":\n\n *  foo/foo1 (isPrefix = false)\n *  foo/foo2 (isPrefix = false)\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"directoryName\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n \n client.listBlobsByHierarchy(\"/\", options, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  syntax:
    content: public PagedIterable<BlobItem> listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)
    parameters:
    - id: delimiter
      type: java.lang.String
      description: The delimiter for blob hierarchy, "/" for hierarchy based on directories
    - id: options
      type: com.azure.storage.blob.models.ListBlobsOptions
      description: <xref uid="com.azure.storage.blob.models.ListBlobsOptions" data-throw-if-not-resolved="false">ListBlobsOptions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
      description: A reactive response emitting the prefixes and blobs.
- uid: com.azure.storage.blob.BlobContainerClient.setAccessPolicy(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>)
  id: setAccessPolicy(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)
  nameWithType: BlobContainerClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)
  fullName: com.azure.storage.blob.BlobContainerClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)
  overload: com.azure.storage.blob.BlobContainerClient.setAccessPolicy*
  type: Method
  package: com.azure.storage.blob
  summary: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n \n try {\n     client.setAccessPolicy(PublicAccessType.CONTAINER, Collections.singletonList(identifier));\n     System.out.printf(\"Set Access Policy completed %n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Set Access Policy completed %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  syntax:
    content: public void setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)
    parameters:
    - id: accessType
      type: com.azure.storage.blob.models.PublicAccessType
      description: >-
        Specifies how the data in this container is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: identifiers
      type: java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>
      description: >-
        A list of <xref uid="com.azure.storage.blob.models.BlobSignedIdentifier" data-throw-if-not-resolved="false">BlobSignedIdentifier</xref> objects that specify the permissions for the container.
         Please see
         <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy">here</a>
         for more information. Passing null will clear all access policies.
- uid: com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setAccessPolicyWithResponse(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlobContainerClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n \n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n \n Context context = new Context(\"Key\", \"Value\");\n \n System.out.printf(\"Set access policy completed with status %d%n\",\n     client.setAccessPolicyWithResponse(PublicAccessType.CONTAINER,\n         Collections.singletonList(identifier),\n         requestConditions,\n         timeout,\n         context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  syntax:
    content: public Response<Void> setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: accessType
      type: com.azure.storage.blob.models.PublicAccessType
      description: >-
        Specifies how the data in this container is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    - id: identifiers
      type: java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>
      description: >-
        A list of <xref uid="com.azure.storage.blob.models.BlobSignedIdentifier" data-throw-if-not-resolved="false">BlobSignedIdentifier</xref> objects that specify the permissions for the container.
         Please see
         <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy">here</a>
         for more information. Passing null will clear all access policies.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
- uid: com.azure.storage.blob.BlobContainerClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: BlobContainerClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.blob.BlobContainerClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.blob.BlobContainerClient.setMetadata*
  type: Method
  package: com.azure.storage.blob
  summary: >-
    Sets the container's metadata. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    Map<String, String> metadata = Collections.singletonMap("metadata", "value");
     try {
         client.setMetadata(metadata);
         System.out.printf("Set metadata completed with status %n");
     } catch (UnsupportedOperationException error) {
         System.out.printf("Fail while setting metadata %n");
     }
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata
  syntax:
    content: public void setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the container.
- uid: com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-blob:12.8.0
  parent: com.azure.storage.blob.BlobContainerClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlobContainerClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.blob
  summary: "Sets the container's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"Key\", \"Value\");\n \n System.out.printf(\"Set metadata completed with status %d%n\",\n     client.setMetadataWithResponse(metadata, requestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  syntax:
    content: public Response<Void> setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the container.
    - id: requestConditions
      type: com.azure.storage.blob.models.BlobRequestConditions
      description: <xref uid="com.azure.storage.blob.models.BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers
references:
- uid: com.azure.storage.blob.BlobContainerAsyncClient
  name: BlobContainerAsyncClient
  nameWithType: BlobContainerAsyncClient
  fullName: com.azure.storage.blob.BlobContainerAsyncClient
- uid: com.azure.storage.blob.BlobContainerClient.BlobContainerClient*
  name: BlobContainerClient
  nameWithType: BlobContainerClient.BlobContainerClient
  fullName: com.azure.storage.blob.BlobContainerClient.BlobContainerClient
  package: com.azure.storage.blob
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.BlobClient
  name: BlobClient
  nameWithType: BlobClient
  fullName: com.azure.storage.blob.BlobClient
- uid: com.azure.storage.blob.BlobContainerClient.getBlobClient*
  name: getBlobClient
  nameWithType: BlobContainerClient.getBlobClient
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobClient
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.getBlobVersionClient*
  name: getBlobVersionClient
  nameWithType: BlobContainerClient.getBlobVersionClient
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobVersionClient
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.getBlobContainerName*
  name: getBlobContainerName
  nameWithType: BlobContainerClient.getBlobContainerName
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobContainerName
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl*
  name: getBlobContainerUrl
  nameWithType: BlobContainerClient.getBlobContainerUrl
  fullName: com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.getAccountName*
  name: getAccountName
  nameWithType: BlobContainerClient.getAccountName
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountName
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobServiceVersion
  name: BlobServiceVersion
  nameWithType: BlobServiceVersion
  fullName: com.azure.storage.blob.BlobServiceVersion
- uid: com.azure.storage.blob.BlobContainerClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: BlobContainerClient.getServiceVersion
  fullName: com.azure.storage.blob.BlobContainerClient.getServiceVersion
  package: com.azure.storage.blob
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.blob.BlobContainerClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: BlobContainerClient.getHttpPipeline
  fullName: com.azure.storage.blob.BlobContainerClient.getHttpPipeline
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.CpkInfo
  name: CpkInfo
  nameWithType: CpkInfo
  fullName: com.azure.storage.blob.models.CpkInfo
- uid: com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey*
  name: getCustomerProvidedKey
  nameWithType: BlobContainerClient.getCustomerProvidedKey
  fullName: com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.getEncryptionScope*
  name: getEncryptionScope
  nameWithType: BlobContainerClient.getEncryptionScope
  fullName: com.azure.storage.blob.BlobContainerClient.getEncryptionScope
  package: com.azure.storage.blob
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.BlobContainerClient.exists*
  name: exists
  nameWithType: BlobContainerClient.exists
  fullName: com.azure.storage.blob.BlobContainerClient.exists
  package: com.azure.storage.blob
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<java.lang.Boolean>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: BlobContainerClient.existsWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.existsWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.create*
  name: create
  nameWithType: BlobContainerClient.create
  fullName: com.azure.storage.blob.BlobContainerClient.create
  package: com.azure.storage.blob
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.models.PublicAccessType
  name: PublicAccessType
  nameWithType: PublicAccessType
  fullName: com.azure.storage.blob.models.PublicAccessType
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.createWithResponse*
  name: createWithResponse
  nameWithType: BlobContainerClient.createWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.createWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.delete*
  name: delete
  nameWithType: BlobContainerClient.delete
  fullName: com.azure.storage.blob.BlobContainerClient.delete
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.BlobRequestConditions
  name: BlobRequestConditions
  nameWithType: BlobRequestConditions
  fullName: com.azure.storage.blob.models.BlobRequestConditions
- uid: com.azure.storage.blob.BlobContainerClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: BlobContainerClient.deleteWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.deleteWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.BlobContainerProperties
  name: BlobContainerProperties
  nameWithType: BlobContainerProperties
  fullName: com.azure.storage.blob.models.BlobContainerProperties
- uid: com.azure.storage.blob.BlobContainerClient.getProperties*
  name: getProperties
  nameWithType: BlobContainerClient.getProperties
  fullName: com.azure.storage.blob.BlobContainerClient.getProperties
  package: com.azure.storage.blob
- uid: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobContainerProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobContainerProperties
    name: BlobContainerProperties
    fullName: com.azure.storage.blob.models.BlobContainerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: BlobContainerClient.getPropertiesWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.setMetadata*
  name: setMetadata
  nameWithType: BlobContainerClient.setMetadata
  fullName: com.azure.storage.blob.BlobContainerClient.setMetadata
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: BlobContainerClient.setMetadataWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.BlobContainerAccessPolicies
  name: BlobContainerAccessPolicies
  nameWithType: BlobContainerAccessPolicies
  fullName: com.azure.storage.blob.models.BlobContainerAccessPolicies
- uid: com.azure.storage.blob.BlobContainerClient.getAccessPolicy*
  name: getAccessPolicy
  nameWithType: BlobContainerClient.getAccessPolicy
  fullName: com.azure.storage.blob.BlobContainerClient.getAccessPolicy
  package: com.azure.storage.blob
- uid: com.azure.core.http.rest.Response<com.azure.storage.blob.models.BlobContainerAccessPolicies>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobContainerAccessPolicies
    name: BlobContainerAccessPolicies
    fullName: com.azure.storage.blob.models.BlobContainerAccessPolicies
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse*
  name: getAccessPolicyWithResponse
  nameWithType: BlobContainerClient.getAccessPolicyWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse
  package: com.azure.storage.blob
- uid: java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobSignedIdentifier
    name: BlobSignedIdentifier
    fullName: com.azure.storage.blob.models.BlobSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.setAccessPolicy*
  name: setAccessPolicy
  nameWithType: BlobContainerClient.setAccessPolicy
  fullName: com.azure.storage.blob.BlobContainerClient.setAccessPolicy
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse*
  name: setAccessPolicyWithResponse
  nameWithType: BlobContainerClient.setAccessPolicyWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse
  package: com.azure.storage.blob
- uid: com.azure.core.http.rest.PagedIterable<com.azure.storage.blob.models.BlobItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.BlobItem
    name: BlobItem
    fullName: com.azure.storage.blob.models.BlobItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.listBlobs*
  name: listBlobs
  nameWithType: BlobContainerClient.listBlobs
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobs
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.ListBlobsOptions
  name: ListBlobsOptions
  nameWithType: ListBlobsOptions
  fullName: com.azure.storage.blob.models.ListBlobsOptions
- uid: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy*
  name: listBlobsByHierarchy
  nameWithType: BlobContainerClient.listBlobsByHierarchy
  fullName: com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.models.StorageAccountInfo
  name: StorageAccountInfo
  nameWithType: StorageAccountInfo
  fullName: com.azure.storage.blob.models.StorageAccountInfo
- uid: com.azure.storage.blob.BlobContainerClient.getAccountInfo*
  name: getAccountInfo
  nameWithType: BlobContainerClient.getAccountInfo
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountInfo
  package: com.azure.storage.blob
- uid: com.azure.core.http.rest.Response<com.azure.storage.blob.models.StorageAccountInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.blob.models.StorageAccountInfo
    name: StorageAccountInfo
    fullName: com.azure.storage.blob.models.StorageAccountInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse*
  name: getAccountInfoWithResponse
  nameWithType: BlobContainerClient.getAccountInfoWithResponse
  fullName: com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.sas.BlobServiceSasSignatureValues
  name: BlobServiceSasSignatureValues
  nameWithType: BlobServiceSasSignatureValues
  fullName: com.azure.storage.blob.sas.BlobServiceSasSignatureValues
- uid: com.azure.storage.blob.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.blob.models.UserDelegationKey
- uid: com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas*
  name: generateUserDelegationSas
  nameWithType: BlobContainerClient.generateUserDelegationSas
  fullName: com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas
  package: com.azure.storage.blob
- uid: com.azure.storage.blob.BlobContainerClient.generateSas*
  name: generateSas
  nameWithType: BlobContainerClient.generateSas
  fullName: com.azure.storage.blob.BlobContainerClient.generateSas
  package: com.azure.storage.blob
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.storage.blob.models.BlobSignedIdentifier
  name: BlobSignedIdentifier
  nameWithType: BlobSignedIdentifier
  fullName: com.azure.storage.blob.models.BlobSignedIdentifier
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
- uid: com.azure.storage.blob.models.BlobItem
  name: BlobItem
  nameWithType: BlobItem
  fullName: com.azure.storage.blob.models.BlobItem
