### YamlMime:JavaType
uid: "com.azure.storage.blob.BlobContainerClient"
fullName: "com.azure.storage.blob.BlobContainerClient"
name: "BlobContainerClient"
nameWithType: "BlobContainerClient"
summary: "Client to a container."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BlobContainerClient"
fields:
- uid: "com.azure.storage.blob.BlobContainerClient.LOG_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerClient.LOG_CONTAINER_NAME"
  name: "LOG_CONTAINER_NAME"
  nameWithType: "BlobContainerClient.LOG_CONTAINER_NAME"
  summary: "Special container name for the logs container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$logs"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String LOG_CONTAINER_NAME"
  desc: "Special container name for the logs container in the Storage account."
- uid: "com.azure.storage.blob.BlobContainerClient.ROOT_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerClient.ROOT_CONTAINER_NAME"
  name: "ROOT_CONTAINER_NAME"
  nameWithType: "BlobContainerClient.ROOT_CONTAINER_NAME"
  summary: "Special container name for the root container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$root"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String ROOT_CONTAINER_NAME"
  desc: "Special container name for the root container in the Storage account."
- uid: "com.azure.storage.blob.BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME"
  fullName: "com.azure.storage.blob.BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME"
  name: "STATIC_WEBSITE_CONTAINER_NAME"
  nameWithType: "BlobContainerClient.STATIC_WEBSITE_CONTAINER_NAME"
  summary: "Special container name for the static website container in the Storage account."
  modifiers:
  - "static"
  - "final"
  field:
    value: "$web"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String STATIC_WEBSITE_CONTAINER_NAME"
  desc: "Special container name for the static website container in the Storage account."
methods:
- uid: "com.azure.storage.blob.BlobContainerClient.create()"
  fullName: "com.azure.storage.blob.BlobContainerClient.create()"
  name: "create()"
  nameWithType: "BlobContainerClient.create()"
  summary: "Creates a new container within a storage account."
  syntax: "public void create()"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\ntry {\n     client.create();\n     System.out.printf(\"Create completed%n\");\n } catch (BlobStorageException error) {\n     if (error.getErrorCode().equals(BlobErrorCode.CONTAINER_ALREADY_EXISTS)) {\n         System.out.printf(\"Can't create container. It already exists %n\");\n     }\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
- uid: "com.azure.storage.blob.BlobContainerClient.createIfNotExists()"
  fullName: "com.azure.storage.blob.BlobContainerClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "BlobContainerClient.createIfNotExists()"
  summary: "Creates a new container within a storage account if it does not exist."
  syntax: "public boolean createIfNotExists()"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean result = client.createIfNotExists();\n System.out.println(\"Create completed: \" + result);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "<code>true</code> if container is successfully created, <code>false</code> if container already exists."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.createIfNotExistsWithResponse(com.azure.storage.blob.options.BlobContainerCreateOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.createIfNotExistsWithResponse(BlobContainerCreateOptions options, Duration timeout, Context context)"
  name: "createIfNotExistsWithResponse(BlobContainerCreateOptions options, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.createIfNotExistsWithResponse(BlobContainerCreateOptions options, Duration timeout, Context context)"
  summary: "Creates a new container within a storage account if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobContainerCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobContainerCreateOptions?alt=com.azure.storage.blob.options.BlobContainerCreateOptions&text=BlobContainerCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> createIfNotExistsWithResponse(BlobContainerCreateOptions options, Duration timeout, Context context)"
  desc: "Creates a new container within a storage account if it does not exist. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n BlobContainerCreateOptions options = new BlobContainerCreateOptions().setMetadata(metadata)\n     .setPublicAccessType(PublicAccessType.CONTAINER);\n\n Response<Boolean> response = client.createIfNotExistsWithResponse(options, timeout, context);\n if (response.getStatusCode() == 409) {\n     System.out.println(\"Already existed.\");\n } else {\n     System.out.printf(\"Create completed with status %d%n\", response.getStatusCode());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A response containing status code and HTTP headers. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 201, a new\n container was successfully created. If status code is 409, a container already existed at this location."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.PublicAccessType,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)"
  name: "createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)"
  summary: "Creates a new container within a storage account."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> createWithResponse(Map<String,String> metadata, PublicAccessType accessType, Duration timeout, Context context)"
  desc: "Creates a new container within a storage account. If a container with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Create completed with status %d%n\",\n     client.createWithResponse(metadata, PublicAccessType.CONTAINER, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.delete()"
  fullName: "com.azure.storage.blob.BlobContainerClient.delete()"
  name: "delete()"
  nameWithType: "BlobContainerClient.delete()"
  summary: "Marks the specified container for deletion."
  syntax: "public void delete()"
  desc: "Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\ntry {\n     client.delete();\n     System.out.printf(\"Delete completed%n\");\n } catch (BlobStorageException error) {\n     if (error.getErrorCode().equals(BlobErrorCode.CONTAINER_NOT_FOUND)) {\n         System.out.printf(\"Delete failed. Container was not found %n\");\n     }\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
- uid: "com.azure.storage.blob.BlobContainerClient.deleteIfExists()"
  fullName: "com.azure.storage.blob.BlobContainerClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "BlobContainerClient.deleteIfExists()"
  summary: "Marks the specified container for deletion if it exists."
  syntax: "public boolean deleteIfExists()"
  desc: "Marks the specified container for deletion if it exists. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean result = client.deleteIfExists();\n System.out.println(\"Delete completed: \" + result);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "<code>true</code> if container is successfully deleted, <code>false</code> if container does not exist."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.deleteIfExistsWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.deleteIfExistsWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "deleteIfExistsWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.deleteIfExistsWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Marks the specified container for deletion if it exists."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> deleteIfExistsWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Marks the specified container for deletion if it exists. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"Key\", \"Value\");\n\n Response<Boolean> response = client.deleteIfExistsWithResponse(requestConditions, timeout, context);\n if (response.getStatusCode() == 404) {\n     System.out.println(\"Does not exist.\");\n } else {\n     System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A response containing status code and HTTP headers. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the container\n was successfully deleted. If status code is 404, the container does not exist."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.deleteWithResponse(com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Marks the specified container for deletion."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteWithResponse(BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Delete completed with status %d%n\", client.deleteWithResponse(\n     requestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-container"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.exists()"
  fullName: "com.azure.storage.blob.BlobContainerClient.exists()"
  name: "exists()"
  nameWithType: "BlobContainerClient.exists()"
  summary: "Gets if the container this client represents exists in the cloud."
  syntax: "public boolean exists()"
  desc: "Gets if the container this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nSystem.out.printf(\"Exists? %b%n\", client.exists());\n```"
  returns:
    description: "true if the container exists, false if it doesn't"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.existsWithResponse(Duration timeout, Context context)"
  name: "existsWithResponse(Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.existsWithResponse(Duration timeout, Context context)"
  summary: "Gets if the container this client represents exists in the cloud."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boolean> existsWithResponse(Duration timeout, Context context)"
  desc: "Gets if the container this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n System.out.printf(\"Exists? %b%n\", client.existsWithResponse(timeout, context).getValue());\n```"
  returns:
    description: "true if the container exists, false if it doesn't"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.findBlobsByTags(com.azure.storage.blob.options.FindBlobsOptions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  name: "findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  summary: "Returns a lazy loaded list of blobs in this account whose tags match the query expression."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.FindBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FindBlobsOptions\"></xref>. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.FindBlobsOptions?alt=com.azure.storage.blob.options.FindBlobsOptions&text=FindBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<TaggedBlobItem> findBlobsByTags(FindBlobsOptions options, Duration timeout, Context context)"
  desc: "Returns a lazy loaded list of blobs in this account whose tags match the query expression. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n client.findBlobsByTags(new FindBlobsOptions(\"where=tag=value\").setMaxResultsPerPage(10), timeout, context)\n     .forEach(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "The list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.findBlobsByTags(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerClient.findBlobsByTags(String query)"
  name: "findBlobsByTags(String query)"
  nameWithType: "BlobContainerClient.findBlobsByTags(String query)"
  summary: "Returns a lazy loaded list of blobs in this container whose tags match the query expression."
  parameters:
  - description: "Filters the results to return only blobs whose tags match the specified expression."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<TaggedBlobItem> findBlobsByTags(String query)"
  desc: "Returns a lazy loaded list of blobs in this container whose tags match the query expression. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, including information on the query syntax, see the [Azure Docs][].\n\n**Code Samples**\n\nTODO\n\n```java\nclient.findBlobsByTags(\"where=tag=value\").forEach(blob -> System.out.printf(\"Name: %s%n\", blob.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/find-blobs-by-tags"
  returns:
    description: "The list of blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.TaggedBlobItem?alt=com.azure.storage.blob.models.TaggedBlobItem&text=TaggedBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
  fullName: "com.azure.storage.blob.BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  nameWithType: "BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  summary: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  desc: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission permission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  nameWithType: "BlobContainerClient.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission permission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
  fullName: "com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  summary: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  desc: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission myPermission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  nameWithType: "BlobContainerClient.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  summary: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key.."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  desc: "Generates a user delegation SAS for the container using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobContainerSasPermission myPermission = new BlobContainerSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey, accountName, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccessPolicy()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccessPolicy()"
  name: "getAccessPolicy()"
  nameWithType: "BlobContainerClient.getAccessPolicy()"
  summary: "Returns the container's permissions."
  syntax: "public BlobContainerAccessPolicies getAccessPolicy()"
  desc: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobContainerAccessPolicies accessPolicies = client.getAccessPolicy();\n System.out.printf(\"Blob Access Type: %s%n\", accessPolicies.getBlobAccessType());\n\n for (BlobSignedIdentifier identifier : accessPolicies.getIdentifiers()) {\n     System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n         identifier.getId(),\n         identifier.getAccessPolicy().getPermissions());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "The container access policy."
    type: "<xref href=\"com.azure.storage.blob.models.BlobContainerAccessPolicies?alt=com.azure.storage.blob.models.BlobContainerAccessPolicies&text=BlobContainerAccessPolicies\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)"
  name: "getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)"
  summary: "Returns the container's permissions."
  parameters:
  - description: "The lease ID the active lease on the container must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobContainerAccessPolicies> getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)"
  desc: "Returns the container's permissions. The permissions indicate whether container's blobs may be accessed publicly. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n BlobContainerAccessPolicies accessPolicies = client.getAccessPolicyWithResponse(leaseId, timeout, context)\n     .getValue();\n System.out.printf(\"Blob Access Type: %s%n\", accessPolicies.getBlobAccessType());\n\n for (BlobSignedIdentifier identifier : accessPolicies.getIdentifiers()) {\n     System.out.printf(\"Identifier Name: %s, Permissions %s%n\",\n         identifier.getId(),\n         identifier.getAccessPolicy().getPermissions());\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-acl"
  returns:
    description: "The container access policy."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerAccessPolicies?alt=com.azure.storage.blob.models.BlobContainerAccessPolicies&text=BlobContainerAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccountInfo(java.time.Duration)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccountInfo(Duration timeout)"
  name: "getAccountInfo(Duration timeout)"
  nameWithType: "BlobContainerClient.getAccountInfo(Duration timeout)"
  summary: "Returns the sku name and account kind for the account."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised.\n\n <p><strong>Code Samples</strong></p>\n\n <!-- src_embed com.azure.storage.blob.BlobContainerClient.getAccountInfo#Duration -->\n <pre>\n StorageAccountInfo accountInfo = client.getAccountInfo&#40;timeout&#41;;\n System.out.printf&#40;&quot;Account Kind: %s, SKU: %s%n&quot;, accountInfo.getAccountKind&#40;&#41;, accountInfo.getSkuName&#40;&#41;&#41;;\n </pre>\n <!-- end com.azure.storage.blob.BlobContainerClient.getAccountInfo#Duration -->"
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StorageAccountInfo getAccountInfo(Duration timeout)"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "The account info."
    type: "<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse(java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccountInfoWithResponse(Duration timeout, Context context)"
  name: "getAccountInfoWithResponse(Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.getAccountInfoWithResponse(Duration timeout, Context context)"
  summary: "Returns the sku name and account kind for the account."
  parameters:
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<StorageAccountInfo> getAccountInfoWithResponse(Duration timeout, Context context)"
  desc: "Returns the sku name and account kind for the account. For more information, please see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n StorageAccountInfo accountInfo = client.getAccountInfoWithResponse(timeout, context).getValue();\n System.out.printf(\"Account Kind: %s, SKU: %s%n\", accountInfo.getAccountKind(), accountInfo.getSkuName());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "The account info."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccountName()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "BlobContainerClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getAccountUrl()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "BlobContainerClient.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getBlobClient(String blobName)"
  name: "getBlobClient(String blobName)"
  nameWithType: "BlobContainerClient.getBlobClient(String blobName)"
  summary: "Initializes a new Blob<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n  pass in the url encoded version of the blob name.\n\n <p><strong>Code Samples</strong></p>\n\n <!-- src_embed com.azure.storage.blob.BlobContainerClient.getBlobClient#String -->\n <pre>\n BlobClient blobClient = client.getBlobClient&#40;blobName&#41;;\n </pre>\n <!-- end com.azure.storage.blob.BlobContainerClient.getBlobClient#String -->"
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobClient getBlobClient(String blobName)"
  desc: "Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient."
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobClient?alt=com.azure.storage.blob.BlobClient&text=BlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getBlobClient(String blobName, String snapshot)"
  name: "getBlobClient(String blobName, String snapshot)"
  nameWithType: "BlobContainerClient.getBlobClient(String blobName, String snapshot)"
  summary: "Initializes a new Blob<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n pass in the url encoded version of the blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the snapshot identifier for the blob."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobClient getBlobClient(String blobName, String snapshot)"
  desc: "Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient.\n\n**Code Samples**\n\n```java\nBlobClient blobClient = client.getBlobClient(blobName, snapshot);\n```"
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobClient?alt=com.azure.storage.blob.BlobClient&text=BlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getBlobContainerName()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getBlobContainerName()"
  name: "getBlobContainerName()"
  nameWithType: "BlobContainerClient.getBlobContainerName()"
  summary: "Get the container name."
  syntax: "public String getBlobContainerName()"
  desc: "Get the container name.\n\n**Code Samples**\n\n```java\nString containerName = client.getBlobContainerName();\n System.out.println(\"The name of the blob is \" + containerName);\n```"
  returns:
    description: "The name of container."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getBlobContainerUrl()"
  name: "getBlobContainerUrl()"
  nameWithType: "BlobContainerClient.getBlobContainerUrl()"
  summary: "Gets the URL of the container represented by this client."
  syntax: "public String getBlobContainerUrl()"
  desc: "Gets the URL of the container represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getBlobVersionClient(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getBlobVersionClient(String blobName, String versionId)"
  name: "getBlobVersionClient(String blobName, String versionId)"
  nameWithType: "BlobContainerClient.getBlobVersionClient(String blobName, String versionId)"
  summary: "Initializes a new Blob<wbr>Client object by concatenating blob<wbr>Name to the end of Container<wbr>Async<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the blob. If the blob name contains special characters,\n pass in the url encoded version of the blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the version identifier for the blob, pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobClient getBlobVersionClient(String blobName, String versionId)"
  desc: "Initializes a new BlobClient object by concatenating blobName to the end of ContainerAsyncClient's URL. The new BlobClient uses the same request policy pipeline as the ContainerAsyncClient."
  returns:
    description: "A new <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> object which references the blob with the specified name in this container."
    type: "<xref href=\"com.azure.storage.blob.BlobClient?alt=com.azure.storage.blob.BlobClient&text=BlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getCustomerProvidedKey()"
  name: "getCustomerProvidedKey()"
  nameWithType: "BlobContainerClient.getCustomerProvidedKey()"
  summary: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> associated with this client that will be passed to <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClients\"></xref> when <xref uid=\"com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlobClient\"></xref> is called."
  syntax: "public CpkInfo getCustomerProvidedKey()"
  desc: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> associated with this client that will be passed to <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClients\"></xref> when <xref uid=\"com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlobClient\"></xref> is called."
  returns:
    description: "the customer provided key used for encryption."
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getEncryptionScope()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getEncryptionScope()"
  name: "getEncryptionScope()"
  nameWithType: "BlobContainerClient.getEncryptionScope()"
  summary: "Gets the `encryption scope` used to encrypt this blob's content on the server."
  syntax: "public String getEncryptionScope()"
  desc: "Gets the `encryption scope` used to encrypt this blob's content on the server."
  returns:
    description: "the encryption scope used for encryption."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getHttpPipeline()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "BlobContainerClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getProperties()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getProperties()"
  name: "getProperties()"
  nameWithType: "BlobContainerClient.getProperties()"
  summary: "Returns the container's metadata and system properties."
  syntax: "public BlobContainerProperties getProperties()"
  desc: "Returns the container's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobContainerProperties properties = client.getProperties();\n System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n     properties.getBlobPublicAccess(),\n     properties.hasLegalHold(),\n     properties.hasImmutabilityPolicy());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "The container properties."
    type: "<xref href=\"com.azure.storage.blob.models.BlobContainerProperties?alt=com.azure.storage.blob.models.BlobContainerProperties&text=BlobContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.getPropertiesWithResponse(String leaseId, Duration timeout, Context context)"
  name: "getPropertiesWithResponse(String leaseId, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.getPropertiesWithResponse(String leaseId, Duration timeout, Context context)"
  summary: "Returns the container's metadata and system properties."
  parameters:
  - description: "The lease ID the active lease on the container must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BlobContainerProperties> getPropertiesWithResponse(String leaseId, Duration timeout, Context context)"
  desc: "Returns the container's metadata and system properties. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nContext context = new Context(\"Key\", \"Value\");\n\n BlobContainerProperties properties = client.getPropertiesWithResponse(leaseId, timeout, context)\n     .getValue();\n System.out.printf(\"Public Access Type: %s, Legal Hold? %b, Immutable? %b%n\",\n     properties.getBlobPublicAccess(),\n     properties.hasLegalHold(),\n     properties.hasImmutabilityPolicy());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-container-metadata"
  returns:
    description: "The container properties."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobContainerProperties?alt=com.azure.storage.blob.models.BlobContainerProperties&text=BlobContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.getServiceClient()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getServiceClient()"
  name: "getServiceClient()"
  nameWithType: "BlobContainerClient.getServiceClient()"
  summary: "Get a client pointing to the account."
  syntax: "public BlobServiceClient getServiceClient()"
  desc: "Get a client pointing to the account."
  returns:
    description: "<xref uid=\"com.azure.storage.blob.BlobServiceClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceClient?alt=com.azure.storage.blob.BlobServiceClient&text=BlobServiceClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.getServiceVersion()"
  fullName: "com.azure.storage.blob.BlobContainerClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "BlobContainerClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public BlobServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobContainerClient.listBlobs()"
  fullName: "com.azure.storage.blob.BlobContainerClient.listBlobs()"
  name: "listBlobs()"
  nameWithType: "BlobContainerClient.listBlobs()"
  summary: "Returns a lazy loaded list of blobs in this container, with folder structures flattened."
  syntax: "public PagedIterable<BlobItem> listBlobs()"
  desc: "Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed through while new items are automatically retrieved as needed.\n\nBlob names are returned in lexicographic order.\n\nFor more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listBlobs().forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b%n\", blob.getName(), blob.isPrefix()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "The listed blobs, flattened."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.lang.String,java.time.Duration)"
  fullName: "com.azure.storage.blob.BlobContainerClient.listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)"
  name: "listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)"
  nameWithType: "BlobContainerClient.listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)"
  summary: "Returns a lazy loaded list of blobs in this container, with folder structures flattened."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Identifies the portion of the list to be returned with the next list operation."
    name: "continuationToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BlobItem> listBlobs(ListBlobsOptions options, String continuationToken, Duration timeout)"
  desc: "Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed through while new items are automatically retrieved as needed.\n\nBlob names are returned in lexicographic order.\n\nFor more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n String continuationToken = \"continuationToken\";\n\n client.listBlobs(options, continuationToken, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "The listed blobs, flattened."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.listBlobs(com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)"
  fullName: "com.azure.storage.blob.BlobContainerClient.listBlobs(ListBlobsOptions options, Duration timeout)"
  name: "listBlobs(ListBlobsOptions options, Duration timeout)"
  nameWithType: "BlobContainerClient.listBlobs(ListBlobsOptions options, Duration timeout)"
  summary: "Returns a lazy loaded list of blobs in this container, with folder structures flattened."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BlobItem> listBlobs(ListBlobsOptions options, Duration timeout)"
  desc: "Returns a lazy loaded list of blobs in this container, with folder structures flattened. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed through while new items are automatically retrieved as needed.\n\nBlob names are returned in lexicographic order.\n\nFor more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"prefixToMatch\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n client.listBlobs(options, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "The listed blobs, flattened."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(String directory)"
  name: "listBlobsByHierarchy(String directory)"
  nameWithType: "BlobContainerClient.listBlobsByHierarchy(String directory)"
  summary: "Returns a reactive Publisher emitting all the blobs and directories (prefixes) under the given directory (prefix)."
  parameters:
  - description: "The directory to list blobs underneath"
    name: "directory"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BlobItem> listBlobsByHierarchy(String directory)"
  desc: "Returns a reactive Publisher emitting all the blobs and directories (prefixes) under the given directory (prefix). Directories will have <xref uid=\"com.azure.storage.blob.models.BlobItem.isPrefix()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobItem#isPrefix()\"></xref> set to true.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:\n\n *  foo/ (isPrefix = true)\n *  bar (isPrefix = false)\n\nwill return the following results when prefix=\"foo/\":\n\n *  foo/foo1 (isPrefix = false)\n *  foo/foo2 (isPrefix = false)\n\n**Code Samples**\n\n```java\nclient.listBlobsByHierarchy(\"directoryName\").forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b%n\", blob.getName(), blob.isPrefix()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the prefixes and blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(java.lang.String,com.azure.storage.blob.models.ListBlobsOptions,java.time.Duration)"
  fullName: "com.azure.storage.blob.BlobContainerClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)"
  name: "listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)"
  nameWithType: "BlobContainerClient.listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)"
  summary: "Returns a reactive Publisher emitting all the blobs and prefixes (directories) under the given prefix (directory)."
  parameters:
  - description: "The delimiter for blob hierarchy, \"/\" for hierarchy based on directories"
    name: "delimiter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.ListBlobsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListBlobsOptions\"></xref>. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over the value set on these options."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.ListBlobsOptions?alt=com.azure.storage.blob.models.ListBlobsOptions&text=ListBlobsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BlobItem> listBlobsByHierarchy(String delimiter, ListBlobsOptions options, Duration timeout)"
  desc: "Returns a reactive Publisher emitting all the blobs and prefixes (directories) under the given prefix (directory). Directories will have <xref uid=\"com.azure.storage.blob.models.BlobItem.isPrefix()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobItem#isPrefix()\"></xref> set to true.\n\nBlob names are returned in lexicographic order. For more information, see the [Azure Docs][].\n\nE.g. listing a container containing a 'foo' folder, which contains blobs 'foo1' and 'foo2', and a blob on the root level 'bar', will return the following results when prefix=null:\n\n *  foo/ (isPrefix = true)\n *  bar (isPrefix = false)\n\nwill return the following results when prefix=\"foo/\":\n\n *  foo/foo1 (isPrefix = false)\n *  foo/foo2 (isPrefix = false)\n\n**Code Samples**\n\n```java\nListBlobsOptions options = new ListBlobsOptions()\n     .setPrefix(\"directoryName\")\n     .setDetails(new BlobListDetails()\n         .setRetrieveDeletedBlobs(true)\n         .setRetrieveSnapshots(true));\n\n client.listBlobsByHierarchy(\"/\", options, timeout).forEach(blob ->\n     System.out.printf(\"Name: %s, Directory? %b, Deleted? %b, Snapshot ID: %s%n\",\n         blob.getName(),\n         blob.isPrefix(),\n         blob.isDeleted(),\n         blob.getSnapshot()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-blobs"
  returns:
    description: "A reactive response emitting the prefixes and blobs."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobItem?alt=com.azure.storage.blob.models.BlobItem&text=BlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.setAccessPolicy(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>)"
  fullName: "com.azure.storage.blob.BlobContainerClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  name: "setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  nameWithType: "BlobContainerClient.setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  summary: "Sets the container's permissions."
  parameters:
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.blob.models.BlobSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSignedIdentifier\"></xref> objects that specify the permissions for the container.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobSignedIdentifier?alt=com.azure.storage.blob.models.BlobSignedIdentifier&text=BlobSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setAccessPolicy(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers)"
  desc: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n try {\n     client.setAccessPolicy(PublicAccessType.CONTAINER, Collections.singletonList(identifier));\n     System.out.printf(\"Set Access Policy completed %n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Set Access Policy completed %s%n\", error);\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
- uid: "com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse(com.azure.storage.blob.models.PublicAccessType,java.util.List<com.azure.storage.blob.models.BlobSignedIdentifier>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Sets the container's permissions."
  parameters:
  - description: "Specifies how the data in this container is available to the public. See the\n x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access."
    name: "accessType"
    type: "<xref href=\"com.azure.storage.blob.models.PublicAccessType?alt=com.azure.storage.blob.models.PublicAccessType&text=PublicAccessType\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of <xref uid=\"com.azure.storage.blob.models.BlobSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSignedIdentifier\"></xref> objects that specify the permissions for the container.\n Please see\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/establishing-a-stored-access-policy\">here</a>\n for more information. Passing null will clear all access policies."
    name: "identifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobSignedIdentifier?alt=com.azure.storage.blob.models.BlobSignedIdentifier&text=BlobSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setAccessPolicyWithResponse(PublicAccessType accessType, List<BlobSignedIdentifier> identifiers, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Sets the container's permissions. The permissions indicate whether blobs in a container may be accessed publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest second to ensure the time formatting is compatible with the service. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobSignedIdentifier identifier = new BlobSignedIdentifier()\n     .setId(\"name\")\n     .setAccessPolicy(new BlobAccessPolicy()\n         .setStartsOn(OffsetDateTime.now())\n         .setExpiresOn(OffsetDateTime.now().plusDays(7))\n         .setPermissions(\"permissionString\"));\n\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Set access policy completed with status %d%n\",\n     client.setAccessPolicyWithResponse(PublicAccessType.CONTAINER,\n         Collections.singletonList(identifier),\n         requestConditions,\n         timeout,\n         context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-acl"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobContainerClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.BlobContainerClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "BlobContainerClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the container's metadata."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void setMetadata(Map<String,String> metadata)"
  desc: "Sets the container's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n try {\n     client.setMetadata(metadata);\n     System.out.printf(\"Set metadata completed with status %n\");\n } catch (UnsupportedOperationException error) {\n     System.out.printf(\"Fail while setting metadata %n\");\n }\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
- uid: "com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.BlobContainerClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  name: "setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "BlobContainerClient.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Sets the container's metadata."
  parameters:
  - description: "Metadata to associate with the container. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Sets the container's metadata. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n Context context = new Context(\"Key\", \"Value\");\n\n System.out.printf(\"Set metadata completed with status %d%n\",\n     client.setMetadataWithResponse(metadata, requestConditions, timeout, context).getStatusCode());\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-container-metadata"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Client to a container. It may only be instantiated through a <xref uid=\"com.azure.storage.blob.BlobContainerClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerClientBuilder\"></xref> or via the method <xref uid=\"com.azure.storage.blob.BlobServiceClient.getBlobContainerClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient#getBlobContainerClient(String)\"></xref>. This class does not hold any state about a particular container but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to blobs.\n\nThis client contains operations on a container. Operations on a blob are available on <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> through <xref uid=\"com.azure.storage.blob.BlobContainerClient.getBlobClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBlobClient(String)\"></xref>, and operations on the service are available on <xref uid=\"com.azure.storage.blob.BlobServiceClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceClient\"></xref>.\n\nPlease refer to the [Azure Docs][] for more information on containers.\n\n\n[Azure Docs]: https://docs.microsoft.com/azure/storage/blobs/storage-blobs-introduction"
metadata: {}
package: "com.azure.storage.blob"
artifact: com.azure:azure-storage-blob:12.19.0
