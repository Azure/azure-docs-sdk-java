### YamlMime:JavaType
uid: "com.microsoft.azure.management.servicebus.Topic"
fullName: "com.microsoft.azure.management.servicebus.Topic"
name: "Topic"
nameWithType: "Topic"
summary: "Type representing Service Bus topic."
syntax: "public interface Topic extends IndependentChildResource<ServiceBusManager,TopicInner>, Refreshable<Topic>, Updatable<Topic.Update>, HasInner<TopicInner>"
methods:
- uid: "com.microsoft.azure.management.servicebus.Topic.accessedAt()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.accessedAt()"
  name: "accessedAt()"
  nameWithType: "Topic.accessedAt()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime accessedAt()"
  returns:
    description: "last time a message was sent, or the last time there was a receive request to this topic"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.activeMessageCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.activeMessageCount()"
  name: "activeMessageCount()"
  nameWithType: "Topic.activeMessageCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract long activeMessageCount()"
  returns:
    description: "number of active messages in the topic"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.authorizationRules()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.authorizationRules()"
  name: "authorizationRules()"
  nameWithType: "Topic.authorizationRules()"
  modifiers:
  - "abstract"
  syntax: "public abstract TopicAuthorizationRules authorizationRules()"
  returns:
    description: "entry point to manage authorization rules for the Service Bus topic"
    type: "<xref href=\"com.microsoft.azure.management.servicebus.TopicAuthorizationRules?alt=com.microsoft.azure.management.servicebus.TopicAuthorizationRules&text=TopicAuthorizationRules\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.createdAt()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.createdAt()"
  name: "createdAt()"
  nameWithType: "Topic.createdAt()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime createdAt()"
  returns:
    description: "the exact time the topic was created"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.currentSizeInBytes()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.currentSizeInBytes()"
  name: "currentSizeInBytes()"
  nameWithType: "Topic.currentSizeInBytes()"
  modifiers:
  - "abstract"
  syntax: "public abstract long currentSizeInBytes()"
  returns:
    description: "current size of the topic, in bytes"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.deadLetterMessageCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.deadLetterMessageCount()"
  name: "deadLetterMessageCount()"
  nameWithType: "Topic.deadLetterMessageCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract long deadLetterMessageCount()"
  returns:
    description: "number of messages in the dead-letter topic"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.defaultMessageTtlDuration()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.defaultMessageTtlDuration()"
  name: "defaultMessageTtlDuration()"
  nameWithType: "Topic.defaultMessageTtlDuration()"
  modifiers:
  - "abstract"
  syntax: "public abstract Period defaultMessageTtlDuration()"
  returns:
    description: "the duration after which the message expires, starting from when the message is sent to topic"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.deleteOnIdleDurationInMinutes()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.deleteOnIdleDurationInMinutes()"
  name: "deleteOnIdleDurationInMinutes()"
  nameWithType: "Topic.deleteOnIdleDurationInMinutes()"
  modifiers:
  - "abstract"
  syntax: "public abstract long deleteOnIdleDurationInMinutes()"
  returns:
    description: "the idle duration after which the topic is automatically deleted"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.duplicateMessageDetectionHistoryDuration()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.duplicateMessageDetectionHistoryDuration()"
  name: "duplicateMessageDetectionHistoryDuration()"
  nameWithType: "Topic.duplicateMessageDetectionHistoryDuration()"
  modifiers:
  - "abstract"
  syntax: "public abstract Period duplicateMessageDetectionHistoryDuration()"
  returns:
    description: "the duration of the duplicate detection history"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.isBatchedOperationsEnabled()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.isBatchedOperationsEnabled()"
  name: "isBatchedOperationsEnabled()"
  nameWithType: "Topic.isBatchedOperationsEnabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isBatchedOperationsEnabled()"
  returns:
    description: "indicates whether server-side batched operations are enabled"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.isDuplicateDetectionEnabled()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.isDuplicateDetectionEnabled()"
  name: "isDuplicateDetectionEnabled()"
  nameWithType: "Topic.isDuplicateDetectionEnabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isDuplicateDetectionEnabled()"
  returns:
    description: "indicates if this topic requires duplicate detection"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.isExpressEnabled()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.isExpressEnabled()"
  name: "isExpressEnabled()"
  nameWithType: "Topic.isExpressEnabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isExpressEnabled()"
  returns:
    description: "indicates whether express entities are enabled"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.isPartitioningEnabled()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.isPartitioningEnabled()"
  name: "isPartitioningEnabled()"
  nameWithType: "Topic.isPartitioningEnabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isPartitioningEnabled()"
  returns:
    description: "indicates whether the topic is to be partitioned across multiple message brokers"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.maxSizeInMB()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.maxSizeInMB()"
  name: "maxSizeInMB()"
  nameWithType: "Topic.maxSizeInMB()"
  modifiers:
  - "abstract"
  syntax: "public abstract long maxSizeInMB()"
  returns:
    description: "the maximum size of memory allocated for the topic in megabytes"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.scheduledMessageCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.scheduledMessageCount()"
  name: "scheduledMessageCount()"
  nameWithType: "Topic.scheduledMessageCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract long scheduledMessageCount()"
  returns:
    description: "number of messages sent to the topic that are yet to be released\n for consumption"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.status()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.status()"
  name: "status()"
  nameWithType: "Topic.status()"
  modifiers:
  - "abstract"
  syntax: "public abstract EntityStatus status()"
  returns:
    description: "the current status of the topic"
    type: "<xref href=\"com.microsoft.azure.management.servicebus.EntityStatus?alt=com.microsoft.azure.management.servicebus.EntityStatus&text=EntityStatus\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.subscriptionCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.subscriptionCount()"
  name: "subscriptionCount()"
  nameWithType: "Topic.subscriptionCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract int subscriptionCount()"
  returns:
    description: "number of subscriptions for the topic"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.subscriptions()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.subscriptions()"
  name: "subscriptions()"
  nameWithType: "Topic.subscriptions()"
  modifiers:
  - "abstract"
  syntax: "public abstract ServiceBusSubscriptions subscriptions()"
  returns:
    description: "entry point to manage subscriptions associated with the topic"
    type: "<xref href=\"com.microsoft.azure.management.servicebus.ServiceBusSubscriptions?alt=com.microsoft.azure.management.servicebus.ServiceBusSubscriptions&text=ServiceBusSubscriptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.transferDeadLetterMessageCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.transferDeadLetterMessageCount()"
  name: "transferDeadLetterMessageCount()"
  nameWithType: "Topic.transferDeadLetterMessageCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract long transferDeadLetterMessageCount()"
  returns:
    description: "number of messages transferred into dead letters"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.transferMessageCount()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.transferMessageCount()"
  name: "transferMessageCount()"
  nameWithType: "Topic.transferMessageCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract long transferMessageCount()"
  returns:
    description: "number of messages transferred to another topic, topic, or subscription"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.servicebus.Topic.updatedAt()"
  fullName: "com.microsoft.azure.management.servicebus.Topic.updatedAt()"
  name: "updatedAt()"
  nameWithType: "Topic.updatedAt()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime updatedAt()"
  returns:
    description: "the exact time the topic was updated"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Type representing Service Bus topic."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.IndependentChildResource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.IndependentChildResource&text=IndependentChildResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.servicebus.implementation.ServiceBusManager?alt=com.microsoft.azure.management.servicebus.implementation.ServiceBusManager&text=ServiceBusManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.servicebus.implementation.TopicInner?alt=com.microsoft.azure.management.servicebus.implementation.TopicInner&text=TopicInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.servicebus.implementation.TopicInner?alt=com.microsoft.azure.management.servicebus.implementation.TopicInner&text=TopicInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.servicebus.Topic?alt=com.microsoft.azure.management.servicebus.Topic&text=Topic\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.servicebus.Topic.Update?alt=com.microsoft.azure.management.servicebus.Topic.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.servicebus"
artifact: com.microsoft.azure:azure-mgmt-servicebus:1.41.4
