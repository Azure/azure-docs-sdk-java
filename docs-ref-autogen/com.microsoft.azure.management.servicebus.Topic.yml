### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.servicebus.Topic.accessedAt()
  name: accessedAt()
  nameWithType: Topic.accessedAt()
  returns:
    description: <p>last time a message was sent, or the last time there was a receive request to this topic </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime accessedAt()
  uid: com.microsoft.azure.management.servicebus.Topic.accessedAt()
- fullName: com.microsoft.azure.management.servicebus.Topic.activeMessageCount()
  name: activeMessageCount()
  nameWithType: Topic.activeMessageCount()
  returns:
    description: <p>number of active messages in the topic </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long activeMessageCount()
  uid: com.microsoft.azure.management.servicebus.Topic.activeMessageCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.authorizationRules()
  name: authorizationRules()
  nameWithType: Topic.authorizationRules()
  returns:
    description: <p>entry point to manage authorization rules for the Service Bus topic </p>
    type: <xref href="com.microsoft.azure.management.servicebus.TopicAuthorizationRules?alt=com.microsoft.azure.management.servicebus.TopicAuthorizationRules&text=TopicAuthorizationRules" data-throw-if-not-resolved="False"/>
  syntax: public TopicAuthorizationRules authorizationRules()
  uid: com.microsoft.azure.management.servicebus.Topic.authorizationRules()
- fullName: com.microsoft.azure.management.servicebus.Topic.createdAt()
  name: createdAt()
  nameWithType: Topic.createdAt()
  returns:
    description: <p>the exact time the topic was created </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime createdAt()
  uid: com.microsoft.azure.management.servicebus.Topic.createdAt()
- fullName: com.microsoft.azure.management.servicebus.Topic.currentSizeInBytes()
  name: currentSizeInBytes()
  nameWithType: Topic.currentSizeInBytes()
  returns:
    description: <p>current size of the topic, in bytes </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long currentSizeInBytes()
  uid: com.microsoft.azure.management.servicebus.Topic.currentSizeInBytes()
- fullName: com.microsoft.azure.management.servicebus.Topic.deadLetterMessageCount()
  name: deadLetterMessageCount()
  nameWithType: Topic.deadLetterMessageCount()
  returns:
    description: <p>number of messages in the dead-letter topic </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long deadLetterMessageCount()
  uid: com.microsoft.azure.management.servicebus.Topic.deadLetterMessageCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.defaultMessageTtlDuration()
  name: defaultMessageTtlDuration()
  nameWithType: Topic.defaultMessageTtlDuration()
  returns:
    description: <p>the duration after which the message expires, starting from when the message is sent to topic </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  syntax: public Period defaultMessageTtlDuration()
  uid: com.microsoft.azure.management.servicebus.Topic.defaultMessageTtlDuration()
- fullName: com.microsoft.azure.management.servicebus.Topic.deleteOnIdleDurationInMinutes()
  name: deleteOnIdleDurationInMinutes()
  nameWithType: Topic.deleteOnIdleDurationInMinutes()
  returns:
    description: <p>the idle duration after which the topic is automatically deleted </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long deleteOnIdleDurationInMinutes()
  uid: com.microsoft.azure.management.servicebus.Topic.deleteOnIdleDurationInMinutes()
- fullName: com.microsoft.azure.management.servicebus.Topic.duplicateMessageDetectionHistoryDuration()
  name: duplicateMessageDetectionHistoryDuration()
  nameWithType: Topic.duplicateMessageDetectionHistoryDuration()
  returns:
    description: <p>the duration of the duplicate detection history </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  syntax: public Period duplicateMessageDetectionHistoryDuration()
  uid: com.microsoft.azure.management.servicebus.Topic.duplicateMessageDetectionHistoryDuration()
- fullName: com.microsoft.azure.management.servicebus.Topic.isBatchedOperationsEnabled()
  name: isBatchedOperationsEnabled()
  nameWithType: Topic.isBatchedOperationsEnabled()
  returns:
    description: <p>indicates whether server-side batched operations are enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isBatchedOperationsEnabled()
  uid: com.microsoft.azure.management.servicebus.Topic.isBatchedOperationsEnabled()
- fullName: com.microsoft.azure.management.servicebus.Topic.isDuplicateDetectionEnabled()
  name: isDuplicateDetectionEnabled()
  nameWithType: Topic.isDuplicateDetectionEnabled()
  returns:
    description: <p>indicates if this topic requires duplicate detection </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isDuplicateDetectionEnabled()
  uid: com.microsoft.azure.management.servicebus.Topic.isDuplicateDetectionEnabled()
- fullName: com.microsoft.azure.management.servicebus.Topic.isExpressEnabled()
  name: isExpressEnabled()
  nameWithType: Topic.isExpressEnabled()
  returns:
    description: <p>indicates whether express entities are enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isExpressEnabled()
  uid: com.microsoft.azure.management.servicebus.Topic.isExpressEnabled()
- fullName: com.microsoft.azure.management.servicebus.Topic.isPartitioningEnabled()
  name: isPartitioningEnabled()
  nameWithType: Topic.isPartitioningEnabled()
  returns:
    description: <p>indicates whether the topic is to be partitioned across multiple message brokers </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPartitioningEnabled()
  uid: com.microsoft.azure.management.servicebus.Topic.isPartitioningEnabled()
- fullName: com.microsoft.azure.management.servicebus.Topic.maxSizeInMB()
  name: maxSizeInMB()
  nameWithType: Topic.maxSizeInMB()
  returns:
    description: <p>the maximum size of memory allocated for the topic in megabytes </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long maxSizeInMB()
  uid: com.microsoft.azure.management.servicebus.Topic.maxSizeInMB()
- fullName: com.microsoft.azure.management.servicebus.Topic.scheduledMessageCount()
  name: scheduledMessageCount()
  nameWithType: Topic.scheduledMessageCount()
  returns:
    description: <p>number of messages sent to the topic that are yet to be released for consumption </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long scheduledMessageCount()
  uid: com.microsoft.azure.management.servicebus.Topic.scheduledMessageCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.status()
  name: status()
  nameWithType: Topic.status()
  returns:
    description: <p>the current status of the topic </p>
    type: <xref href="com.microsoft.azure.management.servicebus.EntityStatus?alt=com.microsoft.azure.management.servicebus.EntityStatus&text=EntityStatus" data-throw-if-not-resolved="False"/>
  syntax: public EntityStatus status()
  uid: com.microsoft.azure.management.servicebus.Topic.status()
- fullName: com.microsoft.azure.management.servicebus.Topic.subscriptionCount()
  name: subscriptionCount()
  nameWithType: Topic.subscriptionCount()
  returns:
    description: <p>number of subscriptions for the topic </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int subscriptionCount()
  uid: com.microsoft.azure.management.servicebus.Topic.subscriptionCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.subscriptions()
  name: subscriptions()
  nameWithType: Topic.subscriptions()
  returns:
    description: <p>entry point to manage subscriptions associated with the topic </p>
    type: <xref href="com.microsoft.azure.management.servicebus.ServiceBusSubscriptions?alt=com.microsoft.azure.management.servicebus.ServiceBusSubscriptions&text=ServiceBusSubscriptions" data-throw-if-not-resolved="False"/>
  syntax: public ServiceBusSubscriptions subscriptions()
  uid: com.microsoft.azure.management.servicebus.Topic.subscriptions()
- fullName: com.microsoft.azure.management.servicebus.Topic.transferDeadLetterMessageCount()
  name: transferDeadLetterMessageCount()
  nameWithType: Topic.transferDeadLetterMessageCount()
  returns:
    description: <p>number of messages transferred into dead letters </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long transferDeadLetterMessageCount()
  uid: com.microsoft.azure.management.servicebus.Topic.transferDeadLetterMessageCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.transferMessageCount()
  name: transferMessageCount()
  nameWithType: Topic.transferMessageCount()
  returns:
    description: <p>number of messages transferred to another topic, topic, or subscription </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long transferMessageCount()
  uid: com.microsoft.azure.management.servicebus.Topic.transferMessageCount()
- fullName: com.microsoft.azure.management.servicebus.Topic.updatedAt()
  name: updatedAt()
  nameWithType: Topic.updatedAt()
  returns:
    description: <p>the exact time the topic was updated </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime updatedAt()
  uid: com.microsoft.azure.management.servicebus.Topic.updatedAt()
nameWithType: Topic
syntax: public interface Topic extends IndependentChildResource<ServiceBusManager, TopicInner>,Refreshable<Topic>,Updatable<Topic.Update>,HasInner<TopicInner>
type: interface
uid: com.microsoft.azure.management.servicebus.Topic
fullName: com.microsoft.azure.management.servicebus.Topic
name: Topic
package: com.microsoft.azure.management.servicebus
summary: <p>Type representing Service Bus topic. </p>
metadata: {}
