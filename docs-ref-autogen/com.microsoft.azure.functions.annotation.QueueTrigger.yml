### YamlMime:JavaType
uid: "com.microsoft.azure.functions.annotation.QueueTrigger"
fullName: "com.microsoft.azure.functions.annotation.QueueTrigger"
name: "QueueTrigger"
nameWithType: "QueueTrigger"
summary: "Place this on a parameter whose value would come from a storage queue, and causing the method to run when a new item is pushed."
syntax: "public interface QueueTrigger implements Annotation"
methods:
- uid: "com.microsoft.azure.functions.annotation.QueueTrigger.connection()"
  fullName: "com.microsoft.azure.functions.annotation.QueueTrigger.connection()"
  name: "connection()"
  nameWithType: "QueueTrigger.connection()"
  summary: "Defines the app setting name that contains the Azure Storage connection string."
  modifiers:
  - "abstract"
  syntax: "public abstract String connection()"
  desc: "Defines the app setting name that contains the Azure Storage connection string."
  returns:
    description: "The app setting name of the connection string."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.functions.annotation.QueueTrigger.dataType()"
  fullName: "com.microsoft.azure.functions.annotation.QueueTrigger.dataType()"
  name: "dataType()"
  nameWithType: "QueueTrigger.dataType()"
  summary: "Defines how Functions runtime should treat the parameter value."
  modifiers:
  - "abstract"
  syntax: "public abstract String dataType()"
  desc: "Defines how Functions runtime should treat the parameter value. Possible values are:\n\n *  \"\": get the value as a string, and try to deserialize to actual parameter type like POJO\n *  string: always get the value as a string\n *  binary: get the value as a binary data, and try to deserialize to actual parameter type byte\\[\\]"
  returns:
    description: "The dataType which will be used by the Functions runtime."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.functions.annotation.QueueTrigger.name()"
  fullName: "com.microsoft.azure.functions.annotation.QueueTrigger.name()"
  name: "name()"
  nameWithType: "QueueTrigger.name()"
  summary: "The variable name used in function.<wbr>json."
  modifiers:
  - "abstract"
  syntax: "public abstract String name()"
  desc: "The variable name used in function.json."
  returns:
    description: "The variable name used in function.json."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.functions.annotation.QueueTrigger.queueName()"
  fullName: "com.microsoft.azure.functions.annotation.QueueTrigger.queueName()"
  name: "queueName()"
  nameWithType: "QueueTrigger.queueName()"
  summary: "Defines the name of the storage queue to which to bind."
  modifiers:
  - "abstract"
  syntax: "public abstract String queueName()"
  desc: "Defines the name of the storage queue to which to bind."
  returns:
    description: "The storage queue name string."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Place this on a parameter whose value would come from a storage queue, and causing the method to run when a new item is pushed. The parameter type can be one of the following:\n\n *  Any native Java types such as int, String, byte\\[\\]\n *  Nullable values using Optional<T>\n *  Any POJO type\n\nThe following example shows a Java function that polls the \"myqueue-items\" queue and writes a log each time a queue item is processed.\n\n```java\n@FunctionName(\"queueMonitor\")\n public void logQueueItem(\n    @QueueTrigger(name = \"msg\", queueName = \"myqueue-items\", connection = \"AzureWebJobsStorage\") \n     String message,\n     final ExecutionContext context\n ) {\n     context.getLogger().info(\"Queue message processed: \" + message);\n }\n```"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.functions.annotation"
artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
