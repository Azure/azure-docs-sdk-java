### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient"
fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient"
name: "ResourceNamesClient"
nameWithType: "ResourceNamesClient"
summary: "An instance of this class provides access to all the operations defined in Resource<wbr>Names<wbr>Client."
syntax: "public interface ResourceNamesClient"
methods:
- uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName()"
  fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName()"
  name: "checkResourceName()"
  nameWithType: "ResourceNamesClient.checkResourceName()"
  summary: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  modifiers:
  - "abstract"
  syntax: "public abstract CheckResourceNameResultInner checkResourceName()"
  desc: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  returns:
    description: "resource Name valid if not a reserved word, does not contain a reserved word and does not start with a\n     reserved word."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner?alt=com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner&text=CheckResourceNameResultInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync()"
  fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync()"
  name: "checkResourceNameAsync()"
  nameWithType: "ResourceNamesClient.checkResourceNameAsync()"
  summary: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<CheckResourceNameResultInner> checkResourceNameAsync()"
  desc: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  returns:
    description: "resource Name valid if not a reserved word, does not contain a reserved word and does not start with a\n     reserved word on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner?alt=com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner&text=CheckResourceNameResultInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)"
  fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync(ResourceName resourceNameDefinition)"
  name: "checkResourceNameAsync(ResourceName resourceNameDefinition)"
  nameWithType: "ResourceNamesClient.checkResourceNameAsync(ResourceName resourceNameDefinition)"
  summary: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource object with values for resource name and resource type."
    name: "resourceNameDefinition"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.ResourceName?alt=com.azure.resourcemanager.resources.models.ResourceName&text=ResourceName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<CheckResourceNameResultInner> checkResourceNameAsync(ResourceName resourceNameDefinition)"
  desc: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  returns:
    description: "resource Name valid if not a reserved word, does not contain a reserved word and does not start with a\n     reserved word on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner?alt=com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner&text=CheckResourceNameResultInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)"
  name: "checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)"
  nameWithType: "ResourceNamesClient.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)"
  summary: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource object with values for resource name and resource type."
    name: "resourceNameDefinition"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.ResourceName?alt=com.azure.resourcemanager.resources.models.ResourceName&text=ResourceName\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<CheckResourceNameResultInner> checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)"
  desc: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  returns:
    description: "resource Name valid if not a reserved word, does not contain a reserved word and does not start with a\n     reserved word along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner?alt=com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner&text=CheckResourceNameResultInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)"
  fullName: "com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)"
  name: "checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)"
  nameWithType: "ResourceNamesClient.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)"
  summary: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource object with values for resource name and resource type."
    name: "resourceNameDefinition"
    type: "<xref href=\"com.azure.resourcemanager.resources.models.ResourceName?alt=com.azure.resourcemanager.resources.models.ResourceName&text=ResourceName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<CheckResourceNameResultInner>> checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)"
  desc: "A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word."
  returns:
    description: "resource Name valid if not a reserved word, does not contain a reserved word and does not start with a\n     reserved word along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner?alt=com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner&text=CheckResourceNameResultInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in ResourceNamesClient."
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.19.0
