### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  id: ResourceNamesClient
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent
  children:
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName()
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync()
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  langs:
  - java
  name: ResourceNamesClient
  nameWithType: ResourceNamesClient
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  type: Interface
  package: com.azure.resourcemanager.resources.fluent
  summary: An instance of this class provides access to all the operations defined in ResourceNamesClient.
  syntax:
    content: public interface ResourceNamesClient
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName()
  id: checkResourceName()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  langs:
  - java
  name: checkResourceName()
  nameWithType: ResourceNamesClient.checkResourceName()
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName()
  overload: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName*
  type: Method
  package: com.azure.resourcemanager.resources.fluent
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public abstract CheckResourceNameResultInner checkResourceName()
    return:
      type: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync()
  id: checkResourceNameAsync()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  langs:
  - java
  name: checkResourceNameAsync()
  nameWithType: ResourceNamesClient.checkResourceNameAsync()
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync()
  overload: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync*
  type: Method
  package: com.azure.resourcemanager.resources.fluent
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public abstract Mono<CheckResourceNameResultInner> checkResourceNameAsync()
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  id: checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  langs:
  - java
  name: checkResourceNameAsync(ResourceName resourceNameDefinition)
  nameWithType: ResourceNamesClient.checkResourceNameAsync(ResourceName resourceNameDefinition)
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync(ResourceName resourceNameDefinition)
  overload: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync*
  type: Method
  package: com.azure.resourcemanager.resources.fluent
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public abstract Mono<CheckResourceNameResultInner> checkResourceNameAsync(ResourceName resourceNameDefinition)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  id: checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  langs:
  - java
  name: checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  nameWithType: ResourceNamesClient.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  overload: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse*
  type: Method
  package: com.azure.resourcemanager.resources.fluent
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public abstract Response<CheckResourceNameResultInner> checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  id: checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  langs:
  - java
  name: checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  nameWithType: ResourceNamesClient.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  overload: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync*
  type: Method
  package: com.azure.resourcemanager.resources.fluent
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public abstract Mono<Response<CheckResourceNameResultInner>> checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
references:
- uid: com.azure.resourcemanager.resources.models.ResourceName
  name: ResourceName
  nameWithType: ResourceName
  fullName: com.azure.resourcemanager.resources.models.ResourceName
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync*
  name: checkResourceNameWithResponseAsync
  nameWithType: ResourceNamesClient.checkResourceNameWithResponseAsync
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponseAsync
  package: com.azure.resourcemanager.resources.fluent
- uid: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync*
  name: checkResourceNameAsync
  nameWithType: ResourceNamesClient.checkResourceNameAsync
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameAsync
  package: com.azure.resourcemanager.resources.fluent
- uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  name: CheckResourceNameResultInner
  nameWithType: CheckResourceNameResultInner
  fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName*
  name: checkResourceName
  nameWithType: ResourceNamesClient.checkResourceName
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceName
  package: com.azure.resourcemanager.resources.fluent
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse*
  name: checkResourceNameWithResponse
  nameWithType: ResourceNamesClient.checkResourceNameWithResponse
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient.checkResourceNameWithResponse
  package: com.azure.resourcemanager.resources.fluent
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
