### YamlMime:ManagedReference
items:
- uid: system.fabric.FabricReplicator
  id: FabricReplicator
  parent: system.fabric
  children:
  - system.fabric.FabricReplicator.abort()
  - system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  - system.fabric.FabricReplicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  - system.fabric.FabricReplicator.closeAsync(CancellationToken)
  - system.fabric.FabricReplicator.FabricReplicator(long)
  - system.fabric.FabricReplicator.getCatchUpCapability()
  - system.fabric.FabricReplicator.getCurrentProgress()
  - system.fabric.FabricReplicator.onDataLossAsync(CancellationToken)
  - system.fabric.FabricReplicator.openAsync(CancellationToken)
  - system.fabric.FabricReplicator.removeReplica(long)
  - system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  - system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  - system.fabric.FabricReplicator.updateEpochAsync(Epoch,CancellationToken)
  - system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 20
  package: system.fabric
  summary: "<p>Replicates state for high availability and reliability. </p>\r\n<p>\r\n  <b>Remarks:</b>Provides the default implementation of the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref>, <xref uid=\"system.fabric.Replicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Replicator\"></xref>, and <xref uid=\"system.fabric.PrimaryReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.PrimaryReplicator\"></xref> interfaces, which user services can use, along with their implementation of the <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref> interface. An instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> class is obtained via the <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)\"></xref> method, which can be cast to <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for use. </p>"
  syntax: &o1
    content: public class FabricReplicator implements Replicator
  inheritance:
  - java.lang.Object
  - system.fabric.PrimaryReplicator
  - system.fabric.Replicator
- uid: system.fabric.FabricReplicator.abort()
  id: abort()
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: abort()
  nameWithType: FabricReplicator.abort()
  fullName: system.fabric.FabricReplicator.abort()
  overload: system.fabric.FabricReplicator.abort*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 54
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void abort()
  overridden: system.fabric.Replicator.abort()
- uid: system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  id: buildReplicaAsync(ReplicaInformation,CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.buildReplicaAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 98
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
    parameters:
    - id: replicaInfo
      type: system.fabric.ReplicaInformation
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
- uid: system.fabric.FabricReplicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  id: changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.changeRoleAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 44
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric.Epoch
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: role
      type: system.fabric.ReplicaRole
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.Replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
- uid: system.fabric.FabricReplicator.closeAsync(CancellationToken)
  id: closeAsync(CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.closeAsync(CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.closeAsync(CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.closeAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 49
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.Replicator.closeAsync(CancellationToken)
- uid: system.fabric.FabricReplicator.FabricReplicator(long)
  id: FabricReplicator(long)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: FabricReplicator(long replicator)
  nameWithType: FabricReplicator.FabricReplicator(long replicator)
  fullName: system.fabric.FabricReplicator.FabricReplicator(long replicator)
  overload: system.fabric.FabricReplicator.FabricReplicator*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 30
  package: system.fabric
  summary: "<p>Creates instance of <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FabricReplicator\"></xref>. </p>"
  syntax:
    content: protected FabricReplicator(long replicator)
    parameters:
    - id: replicator
      type: 0364520f
      description: <p>pointer to native replicator. </p>
- uid: system.fabric.FabricReplicator.getCatchUpCapability()
  id: getCatchUpCapability()
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: getCatchUpCapability()
  nameWithType: FabricReplicator.getCatchUpCapability()
  fullName: system.fabric.FabricReplicator.getCatchUpCapability()
  overload: system.fabric.FabricReplicator.getCatchUpCapability*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 64
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public long getCatchUpCapability()
    return:
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  overridden: system.fabric.Replicator.getCatchUpCapability()
- uid: system.fabric.FabricReplicator.getCurrentProgress()
  id: getCurrentProgress()
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: getCurrentProgress()
  nameWithType: FabricReplicator.getCurrentProgress()
  fullName: system.fabric.FabricReplicator.getCurrentProgress()
  overload: system.fabric.FabricReplicator.getCurrentProgress*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 59
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public long getCurrentProgress()
    return:
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  overridden: system.fabric.Replicator.getCurrentProgress()
- uid: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken)
  id: onDataLossAsync(CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.onDataLossAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 74
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>A CompletableFuture that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
- uid: system.fabric.FabricReplicator.openAsync(CancellationToken)
  id: openAsync(CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: openAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.openAsync(CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.openAsync(CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.openAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 39
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture<String> openAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 06be942d
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.Replicator.openAsync(CancellationToken)
- uid: system.fabric.FabricReplicator.removeReplica(long)
  id: removeReplica(long)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: removeReplica(long replicaId)
  nameWithType: FabricReplicator.removeReplica(long replicaId)
  fullName: system.fabric.FabricReplicator.removeReplica(long replicaId)
  overload: system.fabric.FabricReplicator.removeReplica*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 103
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>\r\n<p>\r\n  <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void removeReplica(long replicaId)
    parameters:
    - id: replicaId
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
  overridden: system.fabric.PrimaryReplicator.removeReplica(long)
- uid: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  id: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  nameWithType: FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  fullName: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  overload: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 79
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public void updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>For Internal Use Only. </p>
    - id: previousConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>For Internal Use Only. </p>
  overridden: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
- uid: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  id: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  nameWithType: FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  fullName: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  overload: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 93
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>\r\n<p>\r\n  <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
  overridden: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
- uid: system.fabric.FabricReplicator.updateEpochAsync(Epoch,CancellationToken)
  id: updateEpochAsync(Epoch,CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.updateEpochAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 69
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric.Epoch
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)
- uid: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  id: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  parent: system.fabric.FabricReplicator
  href: system.fabric.FabricReplicator.yml
  langs:
  - java
  name: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  fullName: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  overload: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/FabricReplicator.java
    startLine: 86
  package: system.fabric
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>\r\n<p>For Internal Use Only. </p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
    parameters:
    - id: quorumMode
      type: system.fabric.ReplicaSetQuorumMode
      description: <p>For Internal Use Only. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents asynchrnous completion. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
  overridden: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
references:
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: system.fabric.FabricReplicator.FabricReplicator*
  name: FabricReplicator
  nameWithType: FabricReplicator.FabricReplicator
  fullName: system.fabric.FabricReplicator.FabricReplicator
  package: system.fabric
- uid: 06be942d
  spec.java:
  - name: CompletableFuture<String>
    fullName: CompletableFuture<String>
- uid: system.fabric.FabricReplicator.openAsync*
  name: openAsync
  nameWithType: FabricReplicator.openAsync
  fullName: system.fabric.FabricReplicator.openAsync
  package: system.fabric
- uid: 5f2aaa64
  spec.java:
  - name: CompletableFuture
    fullName: CompletableFuture
- uid: system.fabric.FabricReplicator.changeRoleAsync*
  name: changeRoleAsync
  nameWithType: FabricReplicator.changeRoleAsync
  fullName: system.fabric.FabricReplicator.changeRoleAsync
  package: system.fabric
- uid: system.fabric.FabricReplicator.closeAsync*
  name: closeAsync
  nameWithType: FabricReplicator.closeAsync
  fullName: system.fabric.FabricReplicator.closeAsync
  package: system.fabric
- uid: system.fabric.FabricReplicator.abort*
  name: abort
  nameWithType: FabricReplicator.abort
  fullName: system.fabric.FabricReplicator.abort
  package: system.fabric
- uid: system.fabric.FabricReplicator.getCurrentProgress*
  name: getCurrentProgress
  nameWithType: FabricReplicator.getCurrentProgress
  fullName: system.fabric.FabricReplicator.getCurrentProgress
  package: system.fabric
- uid: system.fabric.FabricReplicator.getCatchUpCapability*
  name: getCatchUpCapability
  nameWithType: FabricReplicator.getCatchUpCapability
  fullName: system.fabric.FabricReplicator.getCatchUpCapability
  package: system.fabric
- uid: system.fabric.FabricReplicator.updateEpochAsync*
  name: updateEpochAsync
  nameWithType: FabricReplicator.updateEpochAsync
  fullName: system.fabric.FabricReplicator.updateEpochAsync
  package: system.fabric
- uid: 7e53ac82
  spec.java:
  - name: CompletableFuture<Boolean>
    fullName: CompletableFuture<Boolean>
- uid: system.fabric.FabricReplicator.onDataLossAsync*
  name: onDataLossAsync
  nameWithType: FabricReplicator.onDataLossAsync
  fullName: system.fabric.FabricReplicator.onDataLossAsync
  package: system.fabric
- uid: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration*
  name: updateCatchUpReplicaSetConfiguration
  nameWithType: FabricReplicator.updateCatchUpReplicaSetConfiguration
  fullName: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration
  package: system.fabric
- uid: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync*
  name: waitForCatchUpQuorumAsync
  nameWithType: FabricReplicator.waitForCatchUpQuorumAsync
  fullName: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync
  package: system.fabric
- uid: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration*
  name: updateCurrentReplicaSetConfiguration
  nameWithType: FabricReplicator.updateCurrentReplicaSetConfiguration
  fullName: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration
  package: system.fabric
- uid: system.fabric.FabricReplicator.buildReplicaAsync*
  name: buildReplicaAsync
  nameWithType: FabricReplicator.buildReplicaAsync
  fullName: system.fabric.FabricReplicator.buildReplicaAsync
  package: system.fabric
- uid: system.fabric.FabricReplicator.removeReplica*
  name: removeReplica
  nameWithType: FabricReplicator.removeReplica
  fullName: system.fabric.FabricReplicator.removeReplica
  package: system.fabric
- uid: system.fabric.Replicator
  parent: system.fabric
  href: system.fabric.Replicator.yml
  name: Replicator
  nameWithType: Replicator
  fullName: system.fabric.Replicator
  type: Interface
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public interface Replicator
- uid: system.fabric.FabricReplicator
  parent: system.fabric
  href: system.fabric.FabricReplicator.yml
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: system.fabric.FabricReplicator
  type: Class
  summary: "<p>Replicates state for high availability and reliability. </p>\r\n<p>\r\n  <b>Remarks:</b>Provides the default implementation of the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref>, <xref uid=\"system.fabric.Replicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Replicator\"></xref>, and <xref uid=\"system.fabric.PrimaryReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.PrimaryReplicator\"></xref> interfaces, which user services can use, along with their implementation of the <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref> interface. An instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> class is obtained via the <xref uid=\"system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)\"></xref> method, which can be cast to <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for use. </p>"
  syntax: *o1
- uid: system.fabric.Replicator.openAsync(CancellationToken)
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: openAsync(CancellationToken cancellationToken)
  nameWithType: Replicator.openAsync(CancellationToken cancellationToken)
  fullName: system.fabric.Replicator.openAsync(CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture<String> openAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 06be942d
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.CancellationToken
  parent: system.fabric
  href: system.fabric.CancellationToken.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric.CancellationTokenSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource\"></xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric.CancellationTokenSource.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#getToken()\"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric.CancellationTokenSource.cancel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#cancel()\"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax:
    content: public class CancellationToken
- uid: system.fabric.Replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  nameWithType: Replicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  fullName: system.fabric.Replicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric.Epoch
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: role
      type: system.fabric.ReplicaRole
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.Epoch
  parent: system.fabric
  href: system.fabric.Epoch.yml
  name: Epoch
  nameWithType: Epoch
  fullName: system.fabric.Epoch
  type: Class
  summary: "<p>Represents the current version of the partition in Service Fabric. </p>\r\n<p>\r\n  <b>Remarks:</b>An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica. The fact that the Primary has changed is not directly visible to Secondary replicas, which are usually unaffected by the failure that affected the original Primary replica. To track that the Primary replica has changed has to be communicated to the Secondary replica. This communication occurs via the <xref uid=\"system.fabric.StateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#updateEpochAsync(system.fabric.Epoch, system.fabric.SequenceNumber, system.fabric.CancellationToken)\"></xref> method. Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed and to compare Epochs to determine relative ordering of operations and events in the system. Comparison operations are provided for this purpose. </p>"
  syntax:
    content: public class Epoch
- uid: system.fabric.ReplicaRole
  parent: system.fabric
  href: system.fabric.ReplicaRole.yml
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: system.fabric.ReplicaRole
  type: Enum
  summary: "<p>Indicates the role of a stateful service replica. </p>\r\n<p>\r\n  <b>Remarks:</b>Service Fabric requires different behaviors from a service replica depending on what role it currently performs. </p>"
  syntax:
    content: public enum ReplicaRole
- uid: system.fabric.Replicator.closeAsync(CancellationToken)
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: Replicator.closeAsync(CancellationToken cancellationToken)
  fullName: system.fabric.Replicator.closeAsync(CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture closeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.Replicator.abort()
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: abort()
  nameWithType: Replicator.abort()
  fullName: system.fabric.Replicator.abort()
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void abort()
- uid: system.fabric.Replicator.getCurrentProgress()
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: getCurrentProgress()
  nameWithType: Replicator.getCurrentProgress()
  fullName: system.fabric.Replicator.getCurrentProgress()
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public long getCurrentProgress()
    return:
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
- uid: system.fabric.Replicator.getCatchUpCapability()
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: getCatchUpCapability()
  nameWithType: Replicator.getCatchUpCapability()
  fullName: system.fabric.Replicator.getCatchUpCapability()
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public long getCatchUpCapability()
    return:
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
- uid: system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)
  parent: system.fabric.Replicator
  href: system.fabric.Replicator.yml
  name: updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  nameWithType: Replicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  fullName: system.fabric.Replicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public CompletableFuture updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
    parameters:
    - id: epoch
      type: system.fabric.Epoch
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 5f2aaa64
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.onDataLossAsync(CancellationToken cancellationToken)
  fullName: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 7e53ac82
      description: <p>A CompletableFuture that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  nameWithType: PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  fullName: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public void updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>For Internal Use Only. </p>
    - id: previousConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>For Internal Use Only. </p>
- uid: system.fabric.ReplicaSetConfiguration
  parent: system.fabric
  href: system.fabric.ReplicaSetConfiguration.yml
  name: ReplicaSetConfiguration
  nameWithType: ReplicaSetConfiguration
  fullName: system.fabric.ReplicaSetConfiguration
  type: Class
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public class ReplicaSetConfiguration
- uid: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  fullName: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>\r\n<p>For Internal Use Only. </p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
    parameters:
    - id: quorumMode
      type: system.fabric.ReplicaSetQuorumMode
      description: <p>For Internal Use Only. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents asynchrnous completion. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.ReplicaSetQuorumMode
  parent: system.fabric
  href: system.fabric.ReplicaSetQuorumMode.yml
  name: ReplicaSetQuorumMode
  nameWithType: ReplicaSetQuorumMode
  fullName: system.fabric.ReplicaSetQuorumMode
  type: Enum
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public enum ReplicaSetQuorumMode
- uid: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  nameWithType: PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  fullName: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>\r\n<p>\r\n  <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
    parameters:
    - id: currentConfiguration
      type: system.fabric.ReplicaSetConfiguration
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
- uid: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  nameWithType: PrimaryReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  fullName: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
    parameters:
    - id: replicaInfo
      type: system.fabric.ReplicaInformation
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 5f2aaa64
      description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
- uid: system.fabric.ReplicaInformation
  parent: system.fabric
  href: system.fabric.ReplicaInformation.yml
  name: ReplicaInformation
  nameWithType: ReplicaInformation
  fullName: system.fabric.ReplicaInformation
  type: Class
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public class ReplicaInformation
- uid: system.fabric.PrimaryReplicator.removeReplica(long)
  parent: system.fabric.PrimaryReplicator
  href: system.fabric.PrimaryReplicator.yml
  name: removeReplica(long replicaId)
  nameWithType: PrimaryReplicator.removeReplica(long replicaId)
  fullName: system.fabric.PrimaryReplicator.removeReplica(long replicaId)
  type: Method
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\r\n<p></p>\r\n<p>\r\n  <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public void removeReplica(long replicaId)
    parameters:
    - id: replicaId
      type: 0364520f
      description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
- uid: system.fabric.StateReplicator
  parent: system.fabric
  href: system.fabric.StateReplicator.yml
  name: StateReplicator
  nameWithType: StateReplicator
  fullName: system.fabric.StateReplicator
  type: Interface
  summary: "<p>Exposes replication related functions of the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FabricReplicator\"></xref> class that are used by <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StateProvider\"></xref> to replicate state to ensure high availability. </p>"
  syntax:
    content: public interface StateReplicator
- uid: system.fabric.PrimaryReplicator
  parent: system.fabric
  href: system.fabric.PrimaryReplicator.yml
  name: PrimaryReplicator
  nameWithType: PrimaryReplicator
  fullName: system.fabric.PrimaryReplicator
  type: Interface
  summary: "<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>"
  syntax:
    content: public interface PrimaryReplicator
- uid: system.fabric.StateProvider
  parent: system.fabric
  href: system.fabric.StateProvider.yml
  name: StateProvider
  nameWithType: StateProvider
  fullName: system.fabric.StateProvider
  type: Interface
  summary: "<p>Defines the behavior that a service must implement to interact with the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FabricReplicator\"></xref>. </p>"
  syntax:
    content: public interface StateProvider
- uid: system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)
  parent: system.fabric.StatefulServicePartition
  href: system.fabric.StatefulServicePartition.yml
  name: createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  nameWithType: StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  fullName: system.fabric.StatefulServicePartition.createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
  type: Method
  summary: "<p>Creates a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> with the specified settings and returns it to the replica.</p>\r\n<p>\r\n  <b>Remarks:</b>This method should be used to create a <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> to service as the <xref uid=\"system.fabric.StateReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator\"></xref> for a stateful service that implements <xref uid=\"system.fabric.StateProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider\"></xref>. </p>"
  syntax:
    content: public FabricReplicator createReplicator(StateProvider stateProvider, ReplicatorSettings replicatorSettings)
    parameters:
    - id: stateProvider
      type: system.fabric.StateProvider
      description: <p>The <xref uid="system.fabric.StateProvider" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be associated. This is often the same object that implements <xref uid="system.fabric.StatefulServiceReplica" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServiceReplica"></xref>, but certain services might be factored differently. </p>
    - id: replicatorSettings
      type: system.fabric.ReplicatorSettings
      description: >-
        <p>

          <xref uid="system.fabric.ReplicatorSettings" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings"></xref> with which the returned <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> should be configured. </p>
    return:
      type: system.fabric.FabricReplicator
      description: <p>Returns <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref>. </p>
