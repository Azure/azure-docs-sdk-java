### YamlMime:JavaMember
uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource*"
fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource"
name: "listForResource"
nameWithType: "PolicyExemptionsClient.listForResource"
members:
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  nameWithType: "PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.13.0
