### YamlMime:ManagedReference
items:
- uid: system.fabric._utility
  id: _utility
  parent: system.fabric
  children:
  - system.fabric._utility.exceptionAsString(Throwable)
  - system.fabric._utility.getFabricException(Throwable)
  - system.fabric._utility.getFabricOrUserException(Throwable)
  - system.fabric._utility.getInnerException(Throwable)
  - system.fabric._utility.getRuntimeException(Throwable)
  - system.fabric._utility.isCompletableFutureType(Class<?>)
  - system.fabric._utility.isNullOrEmpty(String)
  - system.fabric._utility.isVoidType(Class<?>)
  - system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
  - system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
  - system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  href: system.fabric._utility.yml
  langs:
  - java
  name: Utility
  nameWithType: Utility
  fullName: system.fabric.Utility
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 16
  package: system.fabric
  syntax:
    content: public class Utility
  inheritance:
  - java.lang.Object
- uid: system.fabric._utility.exceptionAsString(Throwable)
  id: exceptionAsString(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: exceptionAsString(Throwable t)
  nameWithType: Utility.exceptionAsString(Throwable t)
  fullName: static String system.fabric.Utility.exceptionAsString(Throwable t)
  overload: system.fabric._utility.exceptionAsString*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 175
  package: system.fabric
  summary: <p>This method returns StackTrace as String. </p>
  syntax:
    content: public static String exceptionAsString(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
    return:
      type: "26831127"
      description: <p>printStackTrace() output as a String. </p>
- uid: system.fabric._utility.getFabricException(Throwable)
  id: getFabricException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getFabricException(Throwable t)
  nameWithType: Utility.getFabricException(Throwable t)
  fullName: static FabricException system.fabric.Utility.getFabricException(Throwable t)
  overload: system.fabric._utility.getFabricException*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 87
  package: system.fabric
  summary: >-
    <p>This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future. Ex1: f1.handle((r, e) -&gt; e != null ? throw new FabricException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new FabricException(e));</p>

    <p></p>
  syntax:
    content: public static FabricException getFabricException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: system.fabric.exception._fabric_exception
      description: <p>FabricException after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.getFabricOrUserException(Throwable)
  id: getFabricOrUserException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getFabricOrUserException(Throwable t)
  nameWithType: Utility.getFabricOrUserException(Throwable t)
  fullName: static RuntimeException system.fabric.Utility.getFabricOrUserException(Throwable t)
  overload: system.fabric._utility.getFabricOrUserException*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 149
  package: system.fabric
  summary: <p>This method should be used when the user's method throws Exception or completes exceptionally. 1) If the user's method completes exceptionally with checked exception, then the user's unwrapped exception is wrapped in RuntimeException. 2) If the user's method throws or completes exceptionally with unchecked exception, then the unwrapped exception is returned as is. 3) If the exception comes from the fabric code, then the unwrapped exception is wrapped in FabricException, if not done already. </p>
  syntax:
    content: public static RuntimeException getFabricOrUserException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: 9b2a4515
      description: <p>RuntimeException or FabricException after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.getInnerException(Throwable)
  id: getInnerException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getInnerException(Throwable t)
  nameWithType: Utility.getInnerException(Throwable t)
  fullName: static Throwable system.fabric.Utility.getInnerException(Throwable t)
  overload: system.fabric._utility.getInnerException*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 60
  package: system.fabric
  summary: >-
    <p>This method returns the exception by unwrapping the outer layers of ExecutionException and CompletionException(if any).</p>

    <p></p>
  syntax:
    content: public static Throwable getInnerException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: a04fafd7
      description: <p>Exception after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.getRuntimeException(Throwable)
  id: getRuntimeException(Throwable)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: getRuntimeException(Throwable t)
  nameWithType: Utility.getRuntimeException(Throwable t)
  fullName: static RuntimeException system.fabric.Utility.getRuntimeException(Throwable t)
  overload: system.fabric._utility.getRuntimeException*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 112
  package: system.fabric
  summary: >-
    <p>This method should be used when one future is being completed exceptionally with the exception caused by another future or if the exception is being rethrown from handle clause of the future. Ex1: f1.handle((r, e) -&gt; e != null ? throw new RuntimeException(e) : r ); Ex2: f1.handle((r, e) -&gt; f2.completeExceptionally(new RuntimeException(e));</p>

    <p></p>
  syntax:
    content: public static RuntimeException getRuntimeException(Throwable t)
    parameters:
    - id: t
      type: a04fafd7
      description: <p>exception to be unwrapped. </p>
    return:
      type: 9b2a4515
      description: <p>RuntimeException after removing the ExecutionException and CompletionException layers. </p>
- uid: system.fabric._utility.isCompletableFutureType(Class<?>)
  id: isCompletableFutureType(Class<?>)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: isCompletableFutureType(Class<?> type)
  nameWithType: Utility.isCompletableFutureType(Class<?> type)
  fullName: static boolean system.fabric.Utility.isCompletableFutureType(Class<?> type)
  overload: system.fabric._utility.isCompletableFutureType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 126
  package: system.fabric
  syntax:
    content: public static boolean isCompletableFutureType(Class<?> type)
    parameters:
    - id: type
      type: a19781f8
    return:
      type: 4fc6e284
- uid: system.fabric._utility.isNullOrEmpty(String)
  id: isNullOrEmpty(String)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: isNullOrEmpty(String str)
  nameWithType: Utility.isNullOrEmpty(String str)
  fullName: static boolean system.fabric.Utility.isNullOrEmpty(String str)
  overload: system.fabric._utility.isNullOrEmpty*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 165
  package: system.fabric
  summary: <p>This method returns true if the String is empty or Null. </p>
  syntax:
    content: public static boolean isNullOrEmpty(String str)
    parameters:
    - id: str
      type: "26831127"
      description: <p>string to be checked. </p>
    return:
      type: 4fc6e284
      description: '<p>returns a boolean value: true of false. </p>'
- uid: system.fabric._utility.isVoidType(Class<?>)
  id: isVoidType(Class<?>)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: isVoidType(Class<?> type)
  nameWithType: Utility.isVoidType(Class<?> type)
  fullName: static boolean system.fabric.Utility.isVoidType(Class<?> type)
  overload: system.fabric._utility.isVoidType*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 133
  package: system.fabric
  syntax:
    content: public static boolean isVoidType(Class<?> type)
    parameters:
    - id: type
      type: a19781f8
    return:
      type: 4fc6e284
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOM(Exception)
  id: TryTranslateJavaExceptionToCOM(Exception)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: TryTranslateJavaExceptionToCOM(Exception ex)
  nameWithType: Utility.TryTranslateJavaExceptionToCOM(Exception ex)
  fullName: static ComException system.fabric.Utility.TryTranslateJavaExceptionToCOM(Exception ex)
  overload: system.fabric._utility.TryTranslateJavaExceptionToCOM*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 19
  package: system.fabric
  syntax:
    content: public static ComException TryTranslateJavaExceptionToCOM(Exception ex)
    parameters:
    - id: ex
      type: 8a99d4b0
    return:
      type: system.fabric.exception._com_exception
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow(Exception)
  id: TryTranslateJavaExceptionToCOMAndThrow(Exception)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
  nameWithType: Utility.TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
  fullName: static void system.fabric.Utility.TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
  overload: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 29
  package: system.fabric
  syntax:
    content: public static void TryTranslateJavaExceptionToCOMAndThrow(Exception ex)
    parameters:
    - id: ex
      type: 8a99d4b0
- uid: system.fabric._utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  id: WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>>,long,String)
  parent: system.fabric._utility
  href: system.fabric._utility.yml
  langs:
  - java
  name: WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
  nameWithType: Utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
  fullName: static JFabricAsyncOperationContext system.fabric.Utility.WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
  overload: system.fabric._utility.WrapNativeAsyncMethodImplementation*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/Utility.java
    startLine: 36
  package: system.fabric
  syntax:
    content: public static JFabricAsyncOperationContext WrapNativeAsyncMethodImplementation(Function<CancellationToken, CompletableFuture<?>> func, long nativeContext, String functionTag)
    parameters:
    - id: func
      type: 432ffe41system.fabric._cancellation_token9c57e1ef
    - id: nativeContext
      type: 0364520f
    - id: functionTag
      type: "26831127"
    return:
      type: system.fabric._j_fabric_async_operation_context
references:
- uid: 8a99d4b0
  spec.java:
  - name: Exception
    fullName: Exception
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOM*
  name: TryTranslateJavaExceptionToCOM
  nameWithType: Utility.TryTranslateJavaExceptionToCOM
  fullName: static ComException system.fabric.Utility.TryTranslateJavaExceptionToCOM
  package: system.fabric
- uid: system.fabric._utility.TryTranslateJavaExceptionToCOMAndThrow*
  name: TryTranslateJavaExceptionToCOMAndThrow
  nameWithType: Utility.TryTranslateJavaExceptionToCOMAndThrow
  fullName: static void system.fabric.Utility.TryTranslateJavaExceptionToCOMAndThrow
  package: system.fabric
- uid: 432ffe41system.fabric._cancellation_token9c57e1ef
  spec.java:
  - name: Function<
    fullName: Function<
  - uid: system.fabric._cancellation_token
    name: CancellationToken
    fullName: system.fabric.CancellationToken
    href: system.fabric._cancellation_token.yml
  - name: ', CompletableFuture<?>>'
    fullName: ', CompletableFuture<?>>'
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: system.fabric._utility.WrapNativeAsyncMethodImplementation*
  name: WrapNativeAsyncMethodImplementation
  nameWithType: Utility.WrapNativeAsyncMethodImplementation
  fullName: static JFabricAsyncOperationContext system.fabric.Utility.WrapNativeAsyncMethodImplementation
  package: system.fabric
- uid: a04fafd7
  spec.java:
  - name: Throwable
    fullName: Throwable
- uid: system.fabric._utility.getInnerException*
  name: getInnerException
  nameWithType: Utility.getInnerException
  fullName: static Throwable system.fabric.Utility.getInnerException
  package: system.fabric
- uid: system.fabric._utility.getFabricException*
  name: getFabricException
  nameWithType: Utility.getFabricException
  fullName: static FabricException system.fabric.Utility.getFabricException
  package: system.fabric
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: system.fabric._utility.getRuntimeException*
  name: getRuntimeException
  nameWithType: Utility.getRuntimeException
  fullName: static RuntimeException system.fabric.Utility.getRuntimeException
  package: system.fabric
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: system.fabric._utility.isCompletableFutureType*
  name: isCompletableFutureType
  nameWithType: Utility.isCompletableFutureType
  fullName: static boolean system.fabric.Utility.isCompletableFutureType
  package: system.fabric
- uid: system.fabric._utility.isVoidType*
  name: isVoidType
  nameWithType: Utility.isVoidType
  fullName: static boolean system.fabric.Utility.isVoidType
  package: system.fabric
- uid: system.fabric._utility.getFabricOrUserException*
  name: getFabricOrUserException
  nameWithType: Utility.getFabricOrUserException
  fullName: static RuntimeException system.fabric.Utility.getFabricOrUserException
  package: system.fabric
- uid: system.fabric._utility.isNullOrEmpty*
  name: isNullOrEmpty
  nameWithType: Utility.isNullOrEmpty
  fullName: static boolean system.fabric.Utility.isNullOrEmpty
  package: system.fabric
- uid: system.fabric._utility.exceptionAsString*
  name: exceptionAsString
  nameWithType: Utility.exceptionAsString
  fullName: static String system.fabric.Utility.exceptionAsString
  package: system.fabric
- uid: system.fabric.exception._com_exception
  parent: system.fabric.exception
  href: system.fabric.exception._com_exception.yml
  name: ComException
  nameWithType: ComException
  fullName: system.fabric.exception.ComException
  type: Class
  summary: <p>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call. </p>
  syntax:
    content: public class ComException
- uid: system.fabric._j_fabric_async_operation_context
  parent: system.fabric
  href: system.fabric._j_fabric_async_operation_context.yml
  name: JFabricAsyncOperationContext
  nameWithType: JFabricAsyncOperationContext
  fullName: system.fabric.JFabricAsyncOperationContext
  type: Class
  syntax:
    content: public class JFabricAsyncOperationContext
- uid: system.fabric._cancellation_token
  parent: system.fabric
  href: system.fabric._cancellation_token.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: <p>A <xref uid="system.fabric._cancellation_token" data-throw-if-not-resolved="false">CancellationToken</xref> is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric._cancellation_token_source" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric._cancellation_token_source.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric._cancellation_token_source.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
  syntax:
    content: public class CancellationToken
- uid: system.fabric.exception._fabric_exception
  parent: system.fabric.exception
  href: system.fabric.exception._fabric_exception.yml
  name: FabricException
  nameWithType: FabricException
  fullName: system.fabric.exception.FabricException
  type: Class
  syntax:
    content: public class FabricException
