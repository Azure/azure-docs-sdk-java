### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  id: ReactiveCosmosQueryCreator
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  - com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  langs:
  - java
  name: ReactiveCosmosQueryCreator
  nameWithType: ReactiveCosmosQueryCreator
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  type: Class
  package: com.azure.spring.data.cosmos.repository.query
  summary: Class for reactive cosmos query creators that create criteria based queries from a <xref uid="org.springframework.data.repository.query.parser.PartTree" data-throw-if-not-resolved="false">PartTree</xref>.
  syntax:
    content: public class ReactiveCosmosQueryCreator extends AbstractQueryCreator<CosmosQuery,Criteria>
  inheritance:
  - java.lang.Object
  - org.springframework.data.repository.query.parser.AbstractQueryCreator
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  id: ReactiveCosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  langs:
  - java
  name: ReactiveCosmosQueryCreator(PartTree tree, ReactiveCosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  nameWithType: ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator(PartTree tree, ReactiveCosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator(PartTree tree, ReactiveCosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  summary: Creates a new <xref uid="com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator" data-throw-if-not-resolved="false">ReactiveCosmosQueryCreator</xref>. <xref uid="com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor" data-throw-if-not-resolved="false">ReactiveCosmosParameterAccessor</xref> is used to hand actual parameter values into the callback methods as well as to apply dynamic sorting via a <xref uid="org.springframework.data.domain.Sort" data-throw-if-not-resolved="false">Sort</xref> parameter.
  syntax:
    content: public ReactiveCosmosQueryCreator(PartTree tree, ReactiveCosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
    parameters:
    - id: tree
      type: org.springframework.data.repository.query.parser.PartTree
      description: must not be null.
    - id: accessor
      type: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor
      description: must not be null.
    - id: mappingContext
      type: org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
      description: must not be null.
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  id: and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  langs:
  - java
  name: and(Part part, Criteria base, Iterator<Object> parameters)
  nameWithType: ReactiveCosmosQueryCreator.and(Part part, Criteria base, Iterator<Object> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and(Part part, Criteria base, Iterator<Object> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria and(Part part, Criteria base, Iterator<Object> parameters)
    parameters:
    - id: part
      type: org.springframework.data.repository.query.parser.Part
    - id: base
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: parameters
      type: java.util.Iterator<java.lang.Object>
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  id: complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  langs:
  - java
  name: complete(Criteria criteria, Sort sort)
  nameWithType: ReactiveCosmosQueryCreator.complete(Criteria criteria, Sort sort)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete(Criteria criteria, Sort sort)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected CosmosQuery complete(Criteria criteria, Sort sort)
    parameters:
    - id: criteria
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: sort
      type: org.springframework.data.domain.Sort
    return:
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  id: create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  langs:
  - java
  name: create(Part part, Iterator<Object> parameters)
  nameWithType: ReactiveCosmosQueryCreator.create(Part part, Iterator<Object> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create(Part part, Iterator<Object> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria create(Part part, Iterator<Object> parameters)
    parameters:
    - id: part
      type: org.springframework.data.repository.query.parser.Part
    - id: parameters
      type: java.util.Iterator<java.lang.Object>
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  id: or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0
  parent: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator
  langs:
  - java
  name: or(Criteria base, Criteria criteria)
  nameWithType: ReactiveCosmosQueryCreator.or(Criteria base, Criteria criteria)
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or(Criteria base, Criteria criteria)
  overload: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria or(Criteria base, Criteria criteria)
    parameters:
    - id: base
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: criteria
      type: com.azure.spring.data.cosmos.core.query.Criteria
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
references:
- uid: org.springframework.data.repository.query.parser.PartTree
  spec.java:
  - uid: org.springframework.data.repository.query.parser.PartTree
    name: PartTree
    fullName: org.springframework.data.repository.query.parser.PartTree
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor
  name: ReactiveCosmosParameterAccessor
  nameWithType: ReactiveCosmosParameterAccessor
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosParameterAccessor
- uid: org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
  spec.java:
  - uid: org.springframework.data.mapping.context.MappingContext
    name: MappingContext
    fullName: org.springframework.data.mapping.context.MappingContext
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
    name: CosmosPersistentProperty
    fullName: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator*
  name: ReactiveCosmosQueryCreator
  nameWithType: ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.ReactiveCosmosQueryCreator
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.parser.Part
  spec.java:
  - uid: org.springframework.data.repository.query.parser.Part
    name: Part
    fullName: org.springframework.data.repository.query.parser.Part
- uid: java.util.Iterator<java.lang.Object>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.query.Criteria
  name: Criteria
  nameWithType: Criteria
  fullName: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create*
  name: create
  nameWithType: ReactiveCosmosQueryCreator.create
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.create
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and*
  name: and
  nameWithType: ReactiveCosmosQueryCreator.and
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.and
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or*
  name: or
  nameWithType: ReactiveCosmosQueryCreator.or
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.or
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.domain.Sort
  spec.java:
  - uid: org.springframework.data.domain.Sort
    name: Sort
    fullName: org.springframework.data.domain.Sort
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete*
  name: complete
  nameWithType: ReactiveCosmosQueryCreator.complete
  fullName: com.azure.spring.data.cosmos.repository.query.ReactiveCosmosQueryCreator.complete
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator<com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria>
  name: AbstractQueryCreator<CosmosQuery,Criteria>
  nameWithType: AbstractQueryCreator<CosmosQuery,Criteria>
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator<com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  name: AbstractQueryCreator.create(Part,Iterator<Object>)
  nameWithType: AbstractQueryCreator.create(Part,Iterator<Object>)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
  name: AbstractQueryCreator.or(S,S)
  nameWithType: AbstractQueryCreator.or(S,S)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
  name: AbstractQueryCreator.createQuery()
  nameWithType: AbstractQueryCreator.createQuery()
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
  name: AbstractQueryCreator.createQuery(Sort)
  nameWithType: AbstractQueryCreator.createQuery(Sort)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
  name: AbstractQueryCreator.complete(S,Sort)
  nameWithType: AbstractQueryCreator.complete(S,Sort)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
  name: AbstractQueryCreator.and(Part,S,Iterator<Object>)
  nameWithType: AbstractQueryCreator.and(Part,S,Iterator<Object>)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.mapping.context.MappingContext
  name: MappingContext
  nameWithType: MappingContext
  fullName: org.springframework.data.mapping.context.MappingContext
- uid: ?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  name: ?,CosmosPersistentProperty
  nameWithType: ?,CosmosPersistentProperty
  fullName: ?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator
  name: AbstractQueryCreator
  nameWithType: AbstractQueryCreator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria
  name: CosmosQuery,Criteria
  nameWithType: CosmosQuery,Criteria
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator
  name: AbstractQueryCreator.create(Part,Iterator
  nameWithType: AbstractQueryCreator.create(Part,Iterator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator
- uid: java.lang.Object>)
  name: Object>)
  nameWithType: Object>)
  fullName: java.lang.Object>)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator
  name: AbstractQueryCreator.and(Part,S,Iterator
  nameWithType: AbstractQueryCreator.and(Part,S,Iterator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator
