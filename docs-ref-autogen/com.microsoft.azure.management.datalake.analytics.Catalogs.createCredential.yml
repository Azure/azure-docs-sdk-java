### YamlMime:JavaMember
nameWithType: Catalogs.createCredential
type: method
members:
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  name: createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  nameWithType: Catalogs.createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. </p>'
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters&text=DataLakeAnalyticsCatalogCredentialCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Creates the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public void createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential(String,String,String,DataLakeAnalyticsCatalogCredentialCreateParameters)
uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential*
fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
name: createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
package: com.microsoft.azure.management.datalake.analytics
metadata: {}
