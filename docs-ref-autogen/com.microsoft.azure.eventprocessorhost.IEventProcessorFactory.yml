### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory
  id: IEventProcessorFactory
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.createEventProcessor(PartitionContext)
  href: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.yml
  langs:
  - java
  name: IEventProcessorFactory<T>
  nameWithType: IEventProcessorFactory<T>
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory<T>
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessorFactory.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessorFactory.java
    startLine: 16
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Interface that must be implemented by an event processor factory class. </p>\r\n<p>User-provided factories are needed if creating an event processor object requires more work than just a new with a parameterless constructor.</p>\r\n<p></p>"
  syntax:
    content: public interface IEventProcessorFactory<T extends IEventProcessor>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The type of event processor objects produced by this factory, which must implement IEventProcessor </p>
- uid: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.createEventProcessor(PartitionContext)
  id: createEventProcessor(PartitionContext)
  parent: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory
  href: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.yml
  langs:
  - java
  name: createEventProcessor(PartitionContext context)
  nameWithType: IEventProcessorFactory<T>.createEventProcessor(PartitionContext context)
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory<T extends IEventProcessor>.createEventProcessor(PartitionContext context)
  overload: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.createEventProcessor*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/IEventProcessorFactory.java
    startLine: 26
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Called to create an event processor for the given partition. </p>\r\n<p>If it throws an exception, that causes this event processor host instance to give up ownership of the partition.</p>\r\n<p></p>"
  syntax:
    content: public T createEventProcessor(PartitionContext context)
    parameters:
    - id: context
      type: com.microsoft.azure.eventprocessorhost.PartitionContext
      description: <p>Information about the partition that the event processor will handle events from. </p>
    return:
      type: 8ce1ecb9
      description: <p>The event processor object. </p>
  exceptions:
  - type: 8a99d4b0
    description: <p>to indicate failure. </p>
references:
- uid: 8ce1ecb9
  spec.java:
  - name: T
    fullName: T
- uid: 8a99d4b0
  spec.java:
  - name: Exception
    fullName: Exception
- uid: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory.createEventProcessor*
  name: createEventProcessor
  nameWithType: IEventProcessorFactory<T>.createEventProcessor
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessorFactory<T extends IEventProcessor>.createEventProcessor
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.IEventProcessor
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.IEventProcessor.yml
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor
  type: Interface
  summary: "<p>Interface that must be implemented by event processor classes. </p>\r\n<p>Any given instance of an event processor class will only process events from one partition of one Event Hub. A PartitionContext is provided with each call to the event processor because some parameters could change, but it will always be the same partition. </p>\r\n<p>Although EventProcessorHost is multithreaded, calls to a given instance of an event processor class are serialized, except for onError(). onOpen() is called first, then onEvents() will be called zero or more times. When the event processor needs to be shut down, whether because there was a failure somewhere, or the lease for the partition has been lost, or because the entire processor host is being shut down, onClose() is called after the last onEvents() call returns. </p>\r\n<p>onError() could be called while onEvents() or onClose() is executing. No synchronization is attempted in order to avoid possibly deadlocking. </p>"
  syntax:
    content: public interface IEventProcessor
- uid: com.microsoft.azure.eventprocessorhost.PartitionContext
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.PartitionContext.yml
  name: PartitionContext
  nameWithType: PartitionContext
  fullName: com.microsoft.azure.eventprocessorhost.PartitionContext
  type: Class
  syntax:
    content: public class PartitionContext
