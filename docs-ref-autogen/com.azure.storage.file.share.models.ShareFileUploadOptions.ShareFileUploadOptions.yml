### YamlMime:JavaMember
uid: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions*"
fullName: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions"
name: "ShareFileUploadOptions"
nameWithType: "ShareFileUploadOptions.ShareFileUploadOptions"
members:
- uid: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(java.io.InputStream)"
  fullName: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(InputStream dataStream)"
  name: "ShareFileUploadOptions(InputStream dataStream)"
  nameWithType: "ShareFileUploadOptions.ShareFileUploadOptions(InputStream dataStream)"
  summary: "Constructs a new `FileParallelUploadOptions`."
  parameters:
  - description: "The data to write to the file. The data must be markable. This is in order to support retries.\n If the data is not markable, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "dataStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareFileUploadOptions(InputStream dataStream)"
- uid: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(java.io.InputStream,long)"
  fullName: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(InputStream dataStream, long length)"
  name: "ShareFileUploadOptions(InputStream dataStream, long length)"
  nameWithType: "ShareFileUploadOptions.ShareFileUploadOptions(InputStream dataStream, long length)"
  summary: "Constructs a new `FileParallelUploadOptions`. Use <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(java.io.InputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ShareFileUploadOptions(InputStream)\"></xref> instead to supply an InputStream without knowing the exact length beforehand."
  parameters:
  - description: "The data to write to the file. The data must be markable. This is in order to support retries.\n If the data is not markable, consider wrapping your data source in a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.BufferedInputStream\"></xref> to add\n mark support."
    name: "dataStream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The exact length of the data. It is important that this value match precisely the length of the\n data provided in the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareFileUploadOptions(InputStream dataStream, long length)"
- uid: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.storage.file.share.models.ShareFileUploadOptions.ShareFileUploadOptions(Flux<ByteBuffer> dataFlux)"
  name: "ShareFileUploadOptions(Flux<ByteBuffer> dataFlux)"
  nameWithType: "ShareFileUploadOptions.ShareFileUploadOptions(Flux<ByteBuffer> dataFlux)"
  summary: "Constructs a new `FileParallelUploadOptions`."
  parameters:
  - description: "The data to write to the file. Unlike other upload methods, this method does not require that\n the <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not\n expected to produce the same values across subscriptions.\n data provided in the <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref>."
    name: "dataFlux"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ShareFileUploadOptions(Flux<ByteBuffer> dataFlux)"
type: "constructor"
metadata: {}
package: "com.azure.storage.file.share.models"
artifact: com.azure:azure-storage-file-share:12.12.0
