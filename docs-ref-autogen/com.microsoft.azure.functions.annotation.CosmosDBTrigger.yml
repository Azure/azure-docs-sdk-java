### YamlMime:JavaType
uid: "com.microsoft.azure.functions.annotation.CosmosDBTrigger"
fullName: "com.microsoft.azure.functions.annotation.CosmosDBTrigger"
name: "CosmosDBTrigger"
nameWithType: "CosmosDBTrigger"
summary: "Place this on a parameter whose value would come from CosmosDB, and causing the method to run when CosmosDB data is changed. The parameter type can be one of the following:\n\n *  Some native Java types such as String\n *  Nullable values using Optional<T>\n *  Any POJO type\n\nThe following example shows a Java function that is invoked when there are inserts or updates in the specified database and collection.\n\n```java\n@FunctionName(\"cosmosDBMonitor\")\n public void cosmosDbLog(\n    @CosmosDBTrigger(name = \"database\",\n                      databaseName = \"ToDoList\",\n                      collectionName = \"Items\",\n                      leaseCollectionName = \"leases\",\n                      createLeaseCollectionIfNotExists = true,\n                      connectionStringSetting = \"AzureCosmosDBConnection\") \n                      List<Map<String, String>> items,\n     final ExecutionContext context\n ) {\n     context.getLogger().info(items.size() + \" item(s) is/are inserted.\");\n     if (!items.isEmpty()) {\n         context.getLogger().info(\"The ID of the first item is: \" + items.get(0).get(\"id\"));\n     }\n }\n```"
syntax: "public interface CosmosDBTrigger implements Annotation"
methods:
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointDocumentCount()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointInterval()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.collectionName()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.connectionStringSetting()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.createLeaseCollectionIfNotExists()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.dataType()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.databaseName()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.feedPollDelay()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseAcquireInterval()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionName()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionPrefix()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseConnectionStringSetting()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseDatabaseName()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseExpirationInterval()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseRenewInterval()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.leasesCollectionThroughput()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.maxItemsPerInvocation()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.name()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.preferredLocations()"
- "com.microsoft.azure.functions.annotation.CosmosDBTrigger.startFromBeginning()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.functions.annotation"
artifact: com.microsoft.azure.functions:azure-functions-java-library:1.3.1
