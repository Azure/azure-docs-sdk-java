### YamlMime:JavaMember
nameWithType: ServiceProxyFactory.createServiceProxy
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  name: createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  nameWithType: ServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  parameters:
  - description: <p>Interface type that is being remoted </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the Service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> interface. </p>
    type: public&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface<code>&lt;T&gt; 

        </code> that the service implements.</p>

    <p></p>
  syntax: public public<T extends Service> T createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T>,URI)
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  name: createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  nameWithType: ServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  parameters:
  - description: <p>Interface type that is being remoted </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the Service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The Partition key that determines which service partition is responsible for handling requests from this service proxy. </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>Determines which replica or instance of the service partition the client should connect to. </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>This parameter is Optional if the service has a single communication listener. The endpoints from the service are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter identifies which of those endpoints to use for the remoting communication.</p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The proxy that implement the interface that is being remoted. The returned object also implement <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxy</xref> interface. </p>
    type: public&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to communicate to the specified service using the remoted interface<code>&lt;T&gt; 

        </code> that the service implements.</p>

    <p></p>
  syntax: public public<T extends Service> T createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName)
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T>,URI,ServicePartitionKey,TargetReplicaSelector,String)
uid: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy*
fullName: microsoft.servicefabric.services.remoting.client.ServiceProxyFactory.createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
name: createServiceProxy(Class<T> serviceInterfaceType, URI serviceUri)
package: microsoft.servicefabric.services.remoting.client
metadata: {}
