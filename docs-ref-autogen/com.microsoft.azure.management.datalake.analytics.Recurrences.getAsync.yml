### YamlMime:JavaMember
nameWithType: Recurrences.getAsync
type: method
members:
- fullName: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String accountName, UUID recurrenceIdentity)
  name: getAsync(String accountName, UUID recurrenceIdentity)
  nameWithType: Recurrences.getAsync(String accountName, UUID recurrenceIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Recurrence ID. </p>
    name: recurrenceIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobRecurrenceInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the recurrence information for the specified recurrence ID.</p>

    <p></p>
  syntax: public Observable<JobRecurrenceInformation> getAsync(String accountName, UUID recurrenceIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime)
  name: getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime)
  nameWithType: Recurrences.getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Recurrence ID. </p>
    name: recurrenceIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobRecurrenceInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the recurrence information for the specified recurrence ID.</p>

    <p></p>
  syntax: public Observable<JobRecurrenceInformation> getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String,UUID,DateTime,DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  name: getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  nameWithType: Recurrences.getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Recurrence ID. </p>
    name: recurrenceIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get recurrence and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the recurrence information for the specified recurrence ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobRecurrenceInformation> getAsync(String accountName, UUID recurrenceIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String,UUID,DateTime,DateTime,final ServiceCallback<JobRecurrenceInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String accountName, UUID recurrenceIdentity, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  name: getAsync(String accountName, UUID recurrenceIdentity, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  nameWithType: Recurrences.getAsync(String accountName, UUID recurrenceIdentity, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Recurrence ID. </p>
    name: recurrenceIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceFuture</xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobRecurrenceInformation&text=JobRecurrenceInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the recurrence information for the specified recurrence ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobRecurrenceInformation> getAsync(String accountName, UUID recurrenceIdentity, final ServiceCallback<JobRecurrenceInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String,UUID,final ServiceCallback<JobRecurrenceInformation>)
uid: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync*
fullName: com.microsoft.azure.management.datalake.analytics.Recurrences.getAsync(String accountName, UUID recurrenceIdentity)
name: getAsync(String accountName, UUID recurrenceIdentity)
package: com.microsoft.azure.management.datalake.analytics
metadata: {}
