### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  id: "TaskGroupEntry"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag"
  children:
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.TaskGroupEntry(java.lang.String,TaskT)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.hasFaultedDescentDependencyTasks()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.initialize()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync(boolean,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.proxy()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.setProxy(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.taskResult()"
  langs:
  - "java"
  name: "TaskGroupEntry<TaskT>"
  nameWithType: "TaskGroupEntry<TaskT>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>"
  type: "Class"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  summary: "Type representing an entry in <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup\" data-throw-if-not-resolved=\"false\">TaskGroup</xref> that holds one <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskItem\" data-throw-if-not-resolved=\"false\">TaskItem</xref> and associated information which includes: 1. references to other <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry\" data-throw-if-not-resolved=\"false\">TaskGroupEntry</xref> dependencies 2. references to the other <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry\" data-throw-if-not-resolved=\"false\">TaskGroupEntry</xref> dependents"
  syntax:
    content: "final class TaskGroupEntry<TaskT> extends DAGNode<TaskT,TaskGroupEntry<TaskT>>"
    typeParameters:
    - id: "TaskT"
  inheritance:
  - "java.lang.Object"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode"
  inheritedMembers:
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependencyKeys()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependentKeys()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasAllResolved()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasDependencies()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.initialize()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.isPreparer()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.lock()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.setPreparer(boolean)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.children()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.data()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.key()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)"
  - "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.TaskGroupEntry(java.lang.String,TaskT)"
  id: "TaskGroupEntry(java.lang.String,TaskT)"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "TaskGroupEntry(String taskId, TaskT taskItem)"
  nameWithType: "TaskGroupEntry<TaskT>.TaskGroupEntry(String taskId, TaskT taskItem)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.TaskGroupEntry(String taskId, TaskT taskItem)"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.TaskGroupEntry*"
  type: "Constructor"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  summary: "Creates TaskGroupEntry."
  syntax:
    content: " TaskGroupEntry(String taskId, TaskT taskItem)"
    parameters:
    - id: "taskId"
      type: "java.lang.String"
      description: "id that uniquely identifies the task from other tasks in the group"
    - id: "taskItem"
      type: "TaskT"
      description: "the task this entry holds"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.hasFaultedDescentDependencyTasks()"
  id: "hasFaultedDescentDependencyTasks()"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "hasFaultedDescentDependencyTasks()"
  nameWithType: "TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks()"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.hasFaultedDescentDependencyTasks*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  syntax:
    content: "public boolean hasFaultedDescentDependencyTasks()"
    return:
      type: "boolean"
      description: "true if one or more decedent dependency tasks are in faulted\n state, false otherwise."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.initialize()"
  id: "initialize()"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "initialize()"
  nameWithType: "TaskGroupEntry<TaskT>.initialize()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.initialize()"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.initialize*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  syntax:
    content: "public void initialize()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync(boolean,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  id: "invokeTaskAsync(boolean,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  nameWithType: "TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  summary: "Invokes the task this entry holds. if the task cannot be invoked due to faulted dependencies then an observable that emit <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.ErroredDependencyTaskException\" data-throw-if-not-resolved=\"false\">ErroredDependencyTaskException</xref> will be returned."
  syntax:
    content: "public Observable<Indexable> invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)"
    parameters:
    - id: "ignoreCachedResult"
      type: "boolean"
      description: "if the task is already invoked and has result cached then a value false for this\n                           parameter indicates the cached result can be returned without invoking task again,\n                           if true then cached result will be ignored and task will be invoked"
    - id: "context"
      type: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
      description: "the context object shared across all the entries in the group that this entry belongs to,\n                this will be passed to <xref uid=\"com.microsoft.azure.management.resources.fluentcore.dag.TaskItem.invokeAsync(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext)\" data-throw-if-not-resolved=\"false\">TaskItem#invokeAsync(TaskGroup.InvocationContext)</xref>\n                method of the task item"
    return:
      type: "rx.Observable<com.microsoft.azure.management.resources.fluentcore.model.Indexable>"
      description: "a cold Observable upon subscription invokes the task this entry hold, which produces a result of\n type <xref uid=\"com.microsoft.azure.management.resources.fluentcore.model.Indexable\" data-throw-if-not-resolved=\"false\">Indexable</xref>."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  id: "onFaultedResolution(java.lang.String,java.lang.Throwable)"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "onFaultedResolution(String dependencyKey, Throwable throwable)"
  nameWithType: "TaskGroupEntry<TaskT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.onFaultedResolution(String dependencyKey, Throwable throwable)"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.onFaultedResolution*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  syntax:
    content: "protected void onFaultedResolution(String dependencyKey, Throwable throwable)"
    parameters:
    - id: "dependencyKey"
      type: "java.lang.String"
    - id: "throwable"
      type: "java.lang.Throwable"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.proxy()"
  id: "proxy()"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "proxy()"
  nameWithType: "TaskGroupEntry<TaskT>.proxy()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.proxy()"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.proxy*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  syntax:
    content: "public TaskGroupEntry<TaskT> proxy()"
    return:
      type: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>"
      description: "the proxy entry if it is set, null if not set."
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.setProxy(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>)"
  id: "setProxy(com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>)"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "setProxy(TaskGroupEntry<TaskT> proxy)"
  nameWithType: "TaskGroupEntry<TaskT>.setProxy(TaskGroupEntry<TaskT> proxy)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.setProxy(TaskGroupEntry<TaskT> proxy)"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.setProxy*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  summary: "Set the proxy entry for this entry."
  syntax:
    content: "public void setProxy(TaskGroupEntry<TaskT> proxy)"
    parameters:
    - id: "proxy"
      type: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>"
      description: "the proxy entry"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.taskResult()"
  id: "taskResult()"
  parent: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  langs:
  - "java"
  name: "taskResult()"
  nameWithType: "TaskGroupEntry<TaskT>.taskResult()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.taskResult()"
  overload: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.taskResult*"
  type: "Method"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
  syntax:
    content: "public Indexable taskResult()"
    return:
      type: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
      description: "the result produced by the task."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "TaskT"
  spec.java:
  - uid: "TaskT"
    name: "TaskT"
    fullName: "TaskT"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.TaskGroupEntry*"
  name: "TaskGroupEntry"
  nameWithType: "TaskGroupEntry<TaskT>.TaskGroupEntry"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.TaskGroupEntry"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.initialize*"
  name: "initialize"
  nameWithType: "TaskGroupEntry<TaskT>.initialize"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.initialize"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>"
  spec.java:
  - uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
    name: "TaskGroupEntry"
    fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  - name: "<"
    fullName: "<"
  - uid: "TaskT"
    name: "TaskT"
    fullName: "TaskT"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.setProxy*"
  name: "setProxy"
  nameWithType: "TaskGroupEntry<TaskT>.setProxy"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.setProxy"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.proxy*"
  name: "proxy"
  nameWithType: "TaskGroupEntry<TaskT>.proxy"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.proxy"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
  name: "Indexable"
  nameWithType: "Indexable"
  fullName: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.taskResult*"
  name: "taskResult"
  nameWithType: "TaskGroupEntry<TaskT>.taskResult"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.taskResult"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.hasFaultedDescentDependencyTasks*"
  name: "hasFaultedDescentDependencyTasks"
  nameWithType: "TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.hasFaultedDescentDependencyTasks"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
  name: "TaskGroup.InvocationContext"
  nameWithType: "TaskGroup.InvocationContext"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroup.InvocationContext"
- uid: "rx.Observable<com.microsoft.azure.management.resources.fluentcore.model.Indexable>"
  spec.java:
  - uid: "rx.Observable"
    name: "Observable"
    fullName: "rx.Observable"
  - name: "<"
    fullName: "<"
  - uid: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
    name: "Indexable"
    fullName: "com.microsoft.azure.management.resources.fluentcore.model.Indexable"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync*"
  name: "invokeTaskAsync"
  nameWithType: "TaskGroupEntry<TaskT>.invokeTaskAsync"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.invokeTaskAsync"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry.onFaultedResolution*"
  name: "onFaultedResolution"
  nameWithType: "TaskGroupEntry<TaskT>.onFaultedResolution"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>.onFaultedResolution"
  package: "com.microsoft.azure.management.resources.fluentcore.dag"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<TaskT,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>>"
  name: "DAGNode<TaskT,TaskGroupEntry<TaskT>>"
  nameWithType: "DAGNode<TaskT,TaskGroupEntry<TaskT>>"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<TaskT,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry<TaskT>>"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.data()"
  name: "Node.data()"
  nameWithType: "Node.data()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.data()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.lock()"
  name: "DAGNode.lock()"
  nameWithType: "DAGNode.lock()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.lock()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.isPreparer()"
  name: "DAGNode.isPreparer()"
  nameWithType: "DAGNode.isPreparer()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.isPreparer()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)"
  name: "DAGNode.addDependent(String)"
  nameWithType: "DAGNode.addDependent(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependent(java.lang.String)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasDependencies()"
  name: "DAGNode.hasDependencies()"
  nameWithType: "DAGNode.hasDependencies()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasDependencies()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)"
  name: "Node.addChild(String)"
  nameWithType: "Node.addChild(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(java.lang.String)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()"
  name: "Node.owner()"
  nameWithType: "Node.owner()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasAllResolved()"
  name: "DAGNode.hasAllResolved()"
  nameWithType: "DAGNode.hasAllResolved()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasAllResolved()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)"
  name: "DAGNode.addDependency(String)"
  nameWithType: "DAGNode.addDependency(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependency(java.lang.String)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.initialize()"
  name: "DAGNode.initialize()"
  nameWithType: "DAGNode.initialize()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.initialize()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
  name: "DAGNode.onFaultedResolution(String,Throwable)"
  nameWithType: "DAGNode.onFaultedResolution(String,Throwable)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onFaultedResolution(java.lang.String,java.lang.Throwable)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.setPreparer(boolean)"
  name: "DAGNode.setPreparer(boolean)"
  nameWithType: "DAGNode.setPreparer(boolean)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.setPreparer(boolean)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.children()"
  name: "Node.children()"
  nameWithType: "Node.children()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.children()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()"
  name: "Node.hasChildren()"
  nameWithType: "Node.hasChildren()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)"
  name: "DAGNode.removeDependency(String)"
  nameWithType: "DAGNode.removeDependency(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.removeDependency(java.lang.String)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)"
  name: "DAGNode.onSuccessfulResolution(String)"
  nameWithType: "DAGNode.onSuccessfulResolution(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(java.lang.String)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependentKeys()"
  name: "DAGNode.dependentKeys()"
  nameWithType: "DAGNode.dependentKeys()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependentKeys()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)"
  name: "Node.setOwner(Graph<DataT,NodeT>)"
  nameWithType: "Node.setOwner(Graph<DataT,NodeT>)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph<DataT,NodeT>)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.key()"
  name: "Node.key()"
  nameWithType: "Node.key()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.key()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependencyKeys()"
  name: "DAGNode.dependencyKeys()"
  nameWithType: "DAGNode.dependencyKeys()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependencyKeys()"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)"
  name: "Node.removeChild(String)"
  nameWithType: "Node.removeChild(String)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.removeChild(java.lang.String)"
- uid: "rx.Observable"
  name: "Observable"
  nameWithType: "Observable"
  fullName: "rx.Observable"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode"
  name: "DAGNode"
  nameWithType: "DAGNode"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.DAGNode"
- uid: "TaskT,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
  name: "TaskT,TaskGroupEntry"
  nameWithType: "TaskT,TaskGroupEntry"
  fullName: "TaskT,com.microsoft.azure.management.resources.fluentcore.dag.TaskGroupEntry"
- uid: "DataT,NodeT>)"
  name: "DataT,NodeT>)"
  nameWithType: "DataT,NodeT>)"
  fullName: "DataT,NodeT>)"
- uid: "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph"
  name: "Node.setOwner(Graph"
  nameWithType: "Node.setOwner(Graph"
  fullName: "com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(com.microsoft.azure.management.resources.fluentcore.dag.Graph"
