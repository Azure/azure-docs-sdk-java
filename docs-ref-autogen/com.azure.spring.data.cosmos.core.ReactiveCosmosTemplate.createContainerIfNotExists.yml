### YamlMime:JavaMember
uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists*"
fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists"
name: "createContainerIfNotExists"
nameWithType: "ReactiveCosmosTemplate.createContainerIfNotExists"
members:
- uid: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)"
  fullName: "com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  name: "createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  nameWithType: "ReactiveCosmosTemplate.createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  summary: "Creates a container if it doesn't already exist"
  parameters:
  - description: "the CosmosEntityInformation"
    name: "information"
    type: "<xref href=\"com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation?alt=com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation&text=CosmosEntityInformation\" data-throw-if-not-resolved=\"False\" />&lt;?,?&gt;"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosEntityInformation<?,?> information)"
  returns:
    description: "Mono containing CosmosContainerResponse"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.spring.data.cosmos.core"
artifact: com.azure:azure-spring-data-cosmos:3.3.0
