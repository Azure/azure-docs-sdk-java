### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.runtime._actor_base
  id: _actor_base
  parent: microsoft.servicefabric.actors.runtime
  children:
  - microsoft.servicefabric.actors.runtime._actor_base.ActorBase(FabricActorService,ActorId)
  - microsoft.servicefabric.actors.runtime._actor_base.getActorService()
  - microsoft.servicefabric.actors.runtime._actor_base.getApplicationName()
  - microsoft.servicefabric.actors.runtime._actor_base.getDiagnosticsContext()
  - microsoft.servicefabric.actors.runtime._actor_base.getEvent(Class<T>)
  - microsoft.servicefabric.actors.runtime._actor_base.getId()
  - microsoft.servicefabric.actors.runtime._actor_base.getReminder(String)
  - microsoft.servicefabric.actors.runtime._actor_base.getServiceUri()
  - microsoft.servicefabric.actors.runtime._actor_base.isDirty()
  - microsoft.servicefabric.actors.runtime._actor_base.onActivateAsync()
  - microsoft.servicefabric.actors.runtime._actor_base.onDeactivateAsync()
  - microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync(ActorMethodContext)
  - microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync(ActorMethodContext)
  - microsoft.servicefabric.actors.runtime._actor_base.registerReminderAsync(String,byte [],Duration,Duration)
  - microsoft.servicefabric.actors.runtime._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  - microsoft.servicefabric.actors.runtime._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  - microsoft.servicefabric.actors.runtime._actor_base.setDirty(boolean)
  - microsoft.servicefabric.actors.runtime._actor_base.setDummy(boolean)
  - microsoft.servicefabric.actors.runtime._actor_base.unregisterReminderAsync(ActorReminder)
  - microsoft.servicefabric.actors.runtime._actor_base.unregisterTimer(ActorTimer)
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: ActorBase
  nameWithType: ActorBase
  fullName: microsoft.servicefabric.actors.runtime.ActorBase
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 30
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Represents base class for actors. <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.Actor</xref></p>\r\n<p>\r\n  <b>Remarks:</b>This is a base type for actor, it provides the functionality that is common across actors implemented by actor deriving from <xref uid=\"microsoft.servicefabric.actors._actor\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.Actor</xref> The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref uid=\"microsoft.servicefabric.actors.runtime._actor_state_provider\" data-throw-if-not-resolved=\"false\">microsoft.servicefabric.actors.runtime.ActorStateProvider</xref>. </p>"
  syntax:
    content: public class ActorBase
  inheritance:
  - java.lang.Object
- uid: microsoft.servicefabric.actors.runtime._actor_base.ActorBase(FabricActorService,ActorId)
  id: ActorBase(FabricActorService,ActorId)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: ActorBase(FabricActorService actorService, ActorId actorId)
  nameWithType: ActorBase.ActorBase(FabricActorService actorService, ActorId actorId)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.ActorBase(FabricActorService actorService, ActorId actorId)
  overload: microsoft.servicefabric.actors.runtime._actor_base.ActorBase*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 48
  package: microsoft.servicefabric.actors.runtime
  syntax:
    content: protected ActorBase(FabricActorService actorService, ActorId actorId)
    parameters:
    - id: actorService
      type: microsoft.servicefabric.actors.runtime._fabric_actor_service
    - id: actorId
      type: microsoft.servicefabric.actors._actor_id
- uid: microsoft.servicefabric.actors.runtime._actor_base.getActorService()
  id: getActorService()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getActorService()
  nameWithType: ActorBase.getActorService()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getActorService()
  overload: microsoft.servicefabric.actors.runtime._actor_base.getActorService*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 102
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the stateful service replica that is hosting the actor.</p>\r\n<p></p>"
  syntax:
    content: public FabricActorService getActorService()
    return:
      type: microsoft.servicefabric.actors.runtime._fabric_actor_service
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.runtime._fabric_actor_service" data-throw-if-not-resolved="false">microsoft.servicefabric.actors.runtime.FabricActorService</xref> that represents the stateful service replica hosting the actor. actor. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getApplicationName()
  id: getApplicationName()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getApplicationName()
  nameWithType: ActorBase.getApplicationName()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName()
  overload: microsoft.servicefabric.actors.runtime._actor_base.getApplicationName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 74
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the name of the application that contains the actor service that is hosting this actor.</p>\r\n<p></p>"
  syntax:
    content: public String getApplicationName()
    return:
      type: "26831127"
      description: <p>Name of application that contains the actor service that is hosting this actor. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getDiagnosticsContext()
  id: getDiagnosticsContext()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getDiagnosticsContext()
  nameWithType: ActorBase.getDiagnosticsContext()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext()
  overload: microsoft.servicefabric.actors.runtime._actor_base.getDiagnosticsContext*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 400
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Returns the diagnostics context for an actor. For internal use only. </p>"
  syntax:
    content: public DiagnosticsManagerActorContext getDiagnosticsContext()
    return:
      type: 04917904
      description: <p>diagnostics context. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getEvent(Class<T>)
  id: getEvent(Class<T>)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getEvent(Class<T> eventClass)
  nameWithType: ActorBase.getEvent(Class<T> eventClass)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getEvent(Class<T> eventClass)
  overload: microsoft.servicefabric.actors.runtime._actor_base.getEvent*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 265
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the event for the specified event interface.</p>\r\n<p></p>"
  syntax:
    content: protected <T> T getEvent(Class<T> eventClass)
    parameters:
    - id: eventClass
      type: ffb09d2d
      description: <p>Event class. </p>
    return:
      type: "34698212"
      description: <p>Returns Event that represents the specified interface. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getId()
  id: getId()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getId()
  nameWithType: ActorBase.getId()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getId()
  overload: microsoft.servicefabric.actors.runtime._actor_base.getId*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 83
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the identity of this actor with the actor service.</p>\r\n<p></p>"
  syntax:
    content: public ActorId getId()
    return:
      type: microsoft.servicefabric.actors._actor_id
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors._actor_id" data-throw-if-not-resolved="false">ActorId</xref> for the actor. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getReminder(String)
  id: getReminder(String)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getReminder(String reminderName)
  nameWithType: ActorBase.getReminder(String reminderName)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getReminder(String reminderName)
  overload: microsoft.servicefabric.actors.runtime._actor_base.getReminder*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 276
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the actor reminder with specified reminder name.</p>\r\n<p></p>"
  syntax:
    content: protected ActorReminder getReminder(String reminderName)
    parameters:
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to get. </p>
    return:
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>An <xref uid="microsoft.servicefabric.actors.runtime._actor_reminder" data-throw-if-not-resolved="false">ActorReminder</xref> that represents an actor reminder. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.getServiceUri()
  id: getServiceUri()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: getServiceUri()
  nameWithType: ActorBase.getServiceUri()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri()
  overload: microsoft.servicefabric.actors.runtime._actor_base.getServiceUri*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 92
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Gets the Uri of the actor service that is hosting this actor.</p>\r\n<p></p>"
  syntax:
    content: public URI getServiceUri()
    return:
      type: "62304784"
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false">java.net.URI</xref> of the actor service that is hosting this actor. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.isDirty()
  id: isDirty()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: isDirty()
  nameWithType: ActorBase.isDirty()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.isDirty()
  overload: microsoft.servicefabric.actors.runtime._actor_base.isDirty*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 413
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Check if actor state is dirty. </p>"
  syntax:
    content: public boolean isDirty()
    return:
      type: 4fc6e284
      description: <p>Boolean value true if actor state is dirty; otherwise false. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.onActivateAsync()
  id: onActivateAsync()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: onActivateAsync()
  nameWithType: ActorBase.onActivateAsync()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync()
  overload: microsoft.servicefabric.actors.runtime._actor_base.onActivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 113
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated and before any method call or reminders are dispatched on it.</p>\r\n<p></p>"
  syntax:
    content: protected CompletableFuture<?> onActivateAsync()
    return:
      type: 16409f84
      description: <p>A CompletableFuture that represents outstanding OnActivateAsync operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.onDeactivateAsync()
  id: onDeactivateAsync()
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: onDeactivateAsync()
  nameWithType: ActorBase.onDeactivateAsync()
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync()
  overload: microsoft.servicefabric.actors.runtime._actor_base.onDeactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 123
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Override this method to release any resources including unregistering the timers. This method is called right before the actor is deactivated.</p>\r\n<p></p>"
  syntax:
    content: protected CompletableFuture<?> onDeactivateAsync()
    return:
      type: 16409f84
      description: <p>A CompletableFuture that represents outstanding OnDeactivateAsync operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync(ActorMethodContext)
  id: onPostActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  overload: microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 165
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>\r\n<p>\r\n  <b>Remarks:</b> This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid=\"microsoft.servicefabric.actors.runtime._remindable\" data-throw-if-not-resolved=\"false\">Remindable</xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>"
  syntax: &o2
    content: protected CompletableFuture<?> onPostActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors.runtime._actor_method_context
      description: <p>An <xref uid="microsoft.servicefabric.actors.runtime._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> describing the method that was invoked by actor runtime prior to this method. </p>
    return:
      type: 16409f84
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> representing post-actor-method operation.</p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync(ActorMethodContext)
  id: onPreActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  overload: microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 144
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>\r\n<p>\r\n  <b>Remarks:</b>This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid=\"microsoft.servicefabric.actors.runtime._remindable\" data-throw-if-not-resolved=\"false\">Remindable</xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>"
  syntax: &o1
    content: protected CompletableFuture<?> onPreActorMethodAsync(ActorMethodContext actorMethodContext)
    parameters:
    - id: actorMethodContext
      type: microsoft.servicefabric.actors.runtime._actor_method_context
      description: <p>An <xref uid="microsoft.servicefabric.actors.runtime._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> describing the method that will be invoked by actor runtime after this method finishes. </p>
    return:
      type: 16409f84
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> representing pre-actor-method operation.</p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.registerReminderAsync(String,byte [],Duration,Duration)
  id: registerReminderAsync(String,byte [],Duration,Duration)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors.runtime._actor_base.registerReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 297
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Registers the specified reminder with actor.</p>\r\n<p></p>"
  syntax:
    content: protected CompletableFuture<?> registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
    parameters:
    - id: reminderName
      type: "26831127"
      description: <p>Name of the reminder to register </p>
    - id: state
      type: ccd9418d
      description: <p>State associated with reminder. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">java.time.Duration</xref> representing the amount of time to delay before firing the reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. Specify zero (0) to fire the reminder immediately. </p>
    - id: period
      type: e02a2de0
      description: <p>The time interval between firing of reminders. Specify negative one (-1) milliseconds to disable periodic firing. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous registration operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  id: registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors.runtime._actor_base.registerTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 182
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Registers a Timer for the actor.</p>\r\n<p></p>"
  syntax:
    content: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
    parameters:
    - id: asyncCallback
      type: 05842176
      description: <p>Callback to invoke when timer fires. </p>
    - id: state
      type: "79317049"
      description: <p>State to pass into timer callback. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>TimeSpan when actor timer is first due. </p>
    - id: period
      type: e02a2de0
      description: <p>TimeSpan for subsequent actor timer invocation. </p>
    return:
      type: microsoft.servicefabric.actors.runtime._actor_timer
      description: <p>Returns ActorTimer object. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  id: registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  overload: microsoft.servicefabric.actors.runtime._actor_base.registerTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 219
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Registers a Timer for the actor.</p>\r\n<p></p>"
  syntax:
    content: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
    parameters:
    - id: asyncCallback
      type: 05842176
      description: <p>Callback to invoke when timer fires. </p>
    - id: asyncCallbackFunctionName
      type: "26831127"
      description: <p>name of AsyncCallBack function. It can be used in <xref uid="microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> and <xref uid="microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref> to initiate any user task on pre- and post- calling of this function. The property <xref uid="microsoft.servicefabric.actors.runtime._actor_method_context.getMethodName()" data-throw-if-not-resolved="false">ActorMethodContext#getMethodName()</xref> will give the method name. </p>
    - id: state
      type: "79317049"
      description: <p>State to pass into timer callback. </p>
    - id: dueTime
      type: e02a2de0
      description: <p>TimeSpan when actor timer is first due. </p>
    - id: period
      type: e02a2de0
      description: <p>TimeSpan for subsequent actor timer invocation. </p>
    return:
      type: microsoft.servicefabric.actors.runtime._actor_timer
      description: <p>Returns ActorTimer object. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.setDirty(boolean)
  id: setDirty(boolean)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: setDirty(boolean isDirty)
  nameWithType: ActorBase.setDirty(boolean isDirty)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDirty(boolean isDirty)
  overload: microsoft.servicefabric.actors.runtime._actor_base.setDirty*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 422
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Sets the actor state as dirty. </p>"
  syntax:
    content: public void setDirty(boolean isDirty)
    parameters:
    - id: isDirty
      type: 4fc6e284
      description: '<p>takes actor state as boolean value: true or false. </p>'
- uid: microsoft.servicefabric.actors.runtime._actor_base.setDummy(boolean)
  id: setDummy(boolean)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: setDummy(boolean isDummy)
  nameWithType: ActorBase.setDummy(boolean isDummy)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDummy(boolean isDummy)
  overload: microsoft.servicefabric.actors.runtime._actor_base.setDummy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 451
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Set the actor state whether its dummy or not. </p>"
  syntax:
    content: protected void setDummy(boolean isDummy)
    parameters:
    - id: isDummy
      type: 4fc6e284
      description: '<p>takes actor state as boolean value : true or false. </p>'
- uid: microsoft.servicefabric.actors.runtime._actor_base.unregisterReminderAsync(ActorReminder)
  id: unregisterReminderAsync(ActorReminder)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: unregisterReminderAsync(ActorReminder reminder)
  nameWithType: ActorBase.unregisterReminderAsync(ActorReminder reminder)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync(ActorReminder reminder)
  overload: microsoft.servicefabric.actors.runtime._actor_base.unregisterReminderAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 314
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Unregisters the specified reminder with actor.</p>\r\n<p></p>"
  syntax:
    content: protected CompletableFuture<?> unregisterReminderAsync(ActorReminder reminder)
    parameters:
    - id: reminder
      type: microsoft.servicefabric.actors.runtime._actor_reminder
      description: <p>The actor reminder to unregister. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous unregister operation. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_base.unregisterTimer(ActorTimer)
  id: unregisterTimer(ActorTimer)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  langs:
  - java
  name: unregisterTimer(ActorTimer timer)
  nameWithType: ActorBase.unregisterTimer(ActorTimer timer)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer(ActorTimer timer)
  overload: microsoft.servicefabric.actors.runtime._actor_base.unregisterTimer*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorBase.java
    startLine: 244
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Unregisters a Timer previously set on this actor.</p>\r\n<p></p>"
  syntax:
    content: protected void unregisterTimer(ActorTimer timer)
    parameters:
    - id: timer
      type: microsoft.servicefabric.actors.runtime._actor_timer
      description: <p>ActorTimer representing timer that needs to be unregistered. </p>
references:
- uid: microsoft.servicefabric.actors.runtime._actor_base.ActorBase*
  name: ActorBase
  nameWithType: ActorBase.ActorBase
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.ActorBase
  package: microsoft.servicefabric.actors.runtime
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: microsoft.servicefabric.actors.runtime._actor_base.onActivateAsync*
  name: onActivateAsync
  nameWithType: ActorBase.onActivateAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.onDeactivateAsync*
  name: onDeactivateAsync
  nameWithType: ActorBase.onDeactivateAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync*
  name: onPreActorMethodAsync
  nameWithType: ActorBase.onPreActorMethodAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync*
  name: onPostActorMethodAsync
  nameWithType: ActorBase.onPostActorMethodAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 05842176
  spec.java:
  - name: Function<Object, CompletableFuture<?>>
    fullName: Function<Object, CompletableFuture<?>>
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: microsoft.servicefabric.actors.runtime._actor_base.registerTimer*
  name: registerTimer
  nameWithType: ActorBase.registerTimer
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer
  package: microsoft.servicefabric.actors.runtime
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: microsoft.servicefabric.actors.runtime._actor_base.unregisterTimer*
  name: unregisterTimer
  nameWithType: ActorBase.unregisterTimer
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.getReminder*
  name: getReminder
  nameWithType: ActorBase.getReminder
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getReminder
  package: microsoft.servicefabric.actors.runtime
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: microsoft.servicefabric.actors.runtime._actor_base.registerReminderAsync*
  name: registerReminderAsync
  nameWithType: ActorBase.registerReminderAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.unregisterReminderAsync*
  name: unregisterReminderAsync
  nameWithType: ActorBase.unregisterReminderAsync
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync
  package: microsoft.servicefabric.actors.runtime
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: microsoft.servicefabric.actors.runtime._actor_base.setDummy*
  name: setDummy
  nameWithType: ActorBase.setDummy
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDummy
  package: microsoft.servicefabric.actors.runtime
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "34698212"
  spec.java:
  - name: <T> T
    fullName: <T> T
- uid: microsoft.servicefabric.actors.runtime._actor_base.getEvent*
  name: getEvent
  nameWithType: ActorBase.getEvent
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getEvent
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.getApplicationName*
  name: getApplicationName
  nameWithType: ActorBase.getApplicationName
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.getId*
  name: getId
  nameWithType: ActorBase.getId
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getId
  package: microsoft.servicefabric.actors.runtime
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: microsoft.servicefabric.actors.runtime._actor_base.getServiceUri*
  name: getServiceUri
  nameWithType: ActorBase.getServiceUri
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.getActorService*
  name: getActorService
  nameWithType: ActorBase.getActorService
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getActorService
  package: microsoft.servicefabric.actors.runtime
- uid: 04917904
  spec.java:
  - name: DiagnosticsManagerActorContext
    fullName: DiagnosticsManagerActorContext
- uid: microsoft.servicefabric.actors.runtime._actor_base.getDiagnosticsContext*
  name: getDiagnosticsContext
  nameWithType: ActorBase.getDiagnosticsContext
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.isDirty*
  name: isDirty
  nameWithType: ActorBase.isDirty
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.isDirty
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._actor_base.setDirty*
  name: setDirty
  nameWithType: ActorBase.setDirty
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDirty
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime._dummy_actor
- uid: microsoft.servicefabric.actors.runtime._fabric_actor
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._fabric_actor.yml
  name: FabricActor
  nameWithType: FabricActor
  fullName: microsoft.servicefabric.actors.runtime.FabricActor
  type: Class
  summary: >-
    <p>Represents a actor that can have multiple reliable 'named' states associated with it. <xref uid="microsoft.servicefabric.actors.runtime._actor_base" data-throw-if-not-resolved="false">ActorBase</xref></p>

    <p>

      <b>Remarks:</b>The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref uid="microsoft.servicefabric.actors.runtime._actor_state_provider" data-throw-if-not-resolved="false">ActorStateProvider</xref>. </p>
  syntax:
    content: public class FabricActor
- uid: microsoft.servicefabric.actors.runtime._actor_timer
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_timer.yml
  name: ActorTimer
  nameWithType: ActorTimer
  fullName: microsoft.servicefabric.actors.runtime.ActorTimer
  type: Interface
  summary: <p>Represents Timer set on an Actor </p>
  syntax:
    content: public interface ActorTimer
- uid: microsoft.servicefabric.actors._actor_id
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor_id.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: <p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid="" data-throw-if-not-resolved="false">java.lang.String</xref>, <xref uid="" data-throw-if-not-resolved="false">java.util.UUID</xref> or long. </p>
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.actors.runtime._fabric_actor_service
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._fabric_actor_service.yml
  name: FabricActorService
  nameWithType: FabricActorService
  fullName: microsoft.servicefabric.actors.runtime.FabricActorService
  type: Class
  summary: >-
    <p>Represents the base class for Microsoft Service Fabric based reliable actors service. </p>

    <p>

      <b>Remarks:</b>Derive from this class to implement your own custom actor service if you want to override any service level behavior for your actors. </p>
  syntax:
    content: public class FabricActorService
- uid: microsoft.servicefabric.actors.runtime._actor_method_context
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_method_context.yml
  name: ActorMethodContext
  nameWithType: ActorMethodContext
  fullName: microsoft.servicefabric.actors.runtime.ActorMethodContext
  type: Class
  summary: <p>An <xref uid="microsoft.servicefabric.actors.runtime._actor_method_context" data-throw-if-not-resolved="false">ActorMethodContext</xref> contains information about the method that is invoked by actor runtime and is passed as an argument to <xref uid="microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPreActorMethodAsync(ActorMethodContext)</xref> and <xref uid="microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false">ActorBase#onPostActorMethodAsync(ActorMethodContext)</xref>. </p>
  syntax:
    content: public class ActorMethodContext
- uid: microsoft.servicefabric.actors.runtime._remindable
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._remindable.yml
  name: Remindable
  nameWithType: Remindable
  fullName: microsoft.servicefabric.actors.runtime.Remindable
  type: Interface
  summary: <p>Interface which actors that use reminders must implement. </p>
  syntax:
    content: public interface Remindable
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPreActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>

    <p>

      <b>Remarks:</b>This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid="microsoft.servicefabric.actors.runtime._remindable" data-throw-if-not-resolved="false">Remindable</xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>
  syntax: *o1
- uid: microsoft.servicefabric.actors.runtime._actor_base.onPostActorMethodAsync(ActorMethodContext)
  parent: microsoft.servicefabric.actors.runtime._actor_base
  href: microsoft.servicefabric.actors.runtime._actor_base.yml
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  type: Method
  summary: >-
    <p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>

    <p>

      <b>Remarks:</b> This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid="microsoft.servicefabric.actors.runtime._remindable" data-throw-if-not-resolved="false">Remindable</xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>
  syntax: *o2
- uid: microsoft.servicefabric.actors.runtime._actor_method_context.getMethodName()
  parent: microsoft.servicefabric.actors.runtime._actor_method_context
  href: microsoft.servicefabric.actors.runtime._actor_method_context.yml
  name: getMethodName()
  nameWithType: ActorMethodContext.getMethodName()
  fullName: microsoft.servicefabric.actors.runtime.ActorMethodContext.getMethodName()
  type: Method
  summary: >-
    <p>Name of the method invoked by actor runtime.</p>

    <p></p>
  syntax:
    content: public String getMethodName()
    return:
      type: "26831127"
      description: <p>A string representing the name of method. </p>
- uid: microsoft.servicefabric.actors.runtime._actor_reminder
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_reminder.yml
  name: ActorReminder
  nameWithType: ActorReminder
  fullName: microsoft.servicefabric.actors.runtime.ActorReminder
  type: Interface
  summary: <p>Encapsulates Reminder set on an Actor </p>
  syntax:
    content: public interface ActorReminder
- uid: microsoft.servicefabric.actors._actor
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors._actor.yml
  name: Actor
  nameWithType: Actor
  fullName: microsoft.servicefabric.actors.Actor
  type: Interface
  summary: <p>Base interface for inheriting reliable actor interfaces. </p>
  syntax:
    content: public interface Actor
- uid: microsoft.servicefabric.actors.runtime._actor_state_provider
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime._actor_state_provider.yml
  name: ActorStateProvider
  nameWithType: ActorStateProvider
  fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider
  type: Interface
  summary: <p>Represents the interface that an actor state provider needs to implement for actor runtime to communicate with it. </p>
  syntax:
    content: public interface ActorStateProvider
