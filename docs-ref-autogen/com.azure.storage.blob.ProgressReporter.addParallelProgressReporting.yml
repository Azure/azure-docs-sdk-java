### YamlMime:JavaMember
uid: "com.azure.storage.blob.ProgressReporter.addParallelProgressReporting*"
fullName: "com.azure.storage.blob.ProgressReporter.addParallelProgressReporting"
name: "addParallelProgressReporting"
nameWithType: "ProgressReporter.addParallelProgressReporting"
members:
- uid: "com.azure.storage.blob.ProgressReporter.addParallelProgressReporting(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.ProgressReceiver,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicLong)"
  fullName: "com.azure.storage.blob.ProgressReporter.addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  name: "addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  nameWithType: "ProgressReporter.addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  summary: "Adds parallel progress reporting functionality to the given `Flux`. Each subscription (and therefore each retry) will rewind the progress reported so as not to over-report. The data reported will be the total amount of data emitted so far, or the \"current position\" of the Flux in parallel."
  parameters:
  - description: "The data whose transfer progress is to be tracked."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.ProgressReceiver\" data-throw-if-not-resolved=\"false\">ProgressReceiver</xref>"
    name: "progressReceiver"
    type: "<xref href=\"com.azure.storage.blob.ProgressReceiver?alt=com.azure.storage.blob.ProgressReceiver&text=ProgressReceiver\" data-throw-if-not-resolved=\"False\" />"
  - description: "This lock will be instantiated by the operation initiating the whole transfer to coordinate each\n ProgressReporterImpl."
    name: "lock"
    type: "<xref href=\"java.util.concurrent.locks.Lock?alt=java.util.concurrent.locks.Lock&text=Lock\" data-throw-if-not-resolved=\"False\" />"
  - description: "We need an AtomicLong to be able to update the value referenced. Because we are already\n synchronizing with the lock, we don't incur any additional performance hit here by the synchronization."
    name: "totalProgress"
    type: "<xref href=\"java.util.concurrent.atomic.AtomicLong?alt=java.util.concurrent.atomic.AtomicLong&text=AtomicLong\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Flux<ByteBuffer> addParallelProgressReporting(Flux<ByteBuffer> data, ProgressReceiver progressReceiver, Lock lock, AtomicLong totalProgress)"
  returns:
    description: "A <code>Flux</code> that emits the same data as the source but calls a callback to report the total amount of\n data emitted so far."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob"
artifact: com.azure:azure-storage-blob:12.8.0
