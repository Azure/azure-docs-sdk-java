### YamlMime:JavaMember
uid: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress*"
fullName: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress"
name: "fromExistingPublicIPAddress"
nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress"
members:
- uid: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(com.microsoft.azure.management.network.PublicIPAddress)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  name: "fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  summary: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  parameters:
  - description: "an existing public IP address"
    name: "publicIPAddress"
    type: "<xref href=\"com.microsoft.azure.management.network.PublicIPAddress?alt=com.microsoft.azure.management.network.PublicIPAddress&text=PublicIPAddress\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(java.lang.String)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  name: "fromExistingPublicIPAddress(String resourceId)"
  nameWithType: "HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  summary: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  parameters:
  - description: "the resource ID of an existing public IP address"
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(String resourceId)"
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.microsoft.azure.management.network.model"
artifact: com.microsoft.azure:azure-mgmt-network:1.38.1
