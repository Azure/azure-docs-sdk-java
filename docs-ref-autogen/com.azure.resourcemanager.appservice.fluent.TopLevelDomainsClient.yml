### YamlMime:JavaType
uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient"
fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient"
name: "TopLevelDomainsClient"
nameWithType: "TopLevelDomainsClient"
summary: "An instance of this class provides access to all the operations defined in Top<wbr>Level<wbr>Domains<wbr>Client."
syntax: "public interface TopLevelDomainsClient"
methods:
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.get(java.lang.String)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.get(String name)"
  name: "get(String name)"
  nameWithType: "TopLevelDomainsClient.get(String name)"
  summary: "Description for Get details of a top-level domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract TopLevelDomainInner get(String name)"
  desc: "Description for Get details of a top-level domain."
  returns:
    description: "a top level domain object."
    type: "<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getAsync(String name)"
  name: "getAsync(String name)"
  nameWithType: "TopLevelDomainsClient.getAsync(String name)"
  summary: "Description for Get details of a top-level domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<TopLevelDomainInner> getAsync(String name)"
  desc: "Description for Get details of a top-level domain."
  returns:
    description: "a top level domain object on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getWithResponse(String name, Context context)"
  name: "getWithResponse(String name, Context context)"
  nameWithType: "TopLevelDomainsClient.getWithResponse(String name, Context context)"
  summary: "Description for Get details of a top-level domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<TopLevelDomainInner> getWithResponse(String name, Context context)"
  desc: "Description for Get details of a top-level domain."
  returns:
    description: "a top level domain object along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.getWithResponseAsync(String name)"
  name: "getWithResponseAsync(String name)"
  nameWithType: "TopLevelDomainsClient.getWithResponseAsync(String name)"
  summary: "Description for Get details of a top-level domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<TopLevelDomainInner>> getWithResponseAsync(String name)"
  desc: "Description for Get details of a top-level domain."
  returns:
    description: "a top level domain object along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.list()"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.list()"
  name: "list()"
  nameWithType: "TopLevelDomainsClient.list()"
  summary: "Description for Get all top-level domains supported for registration."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<TopLevelDomainInner> list()"
  desc: "Description for Get all top-level domains supported for registration."
  returns:
    description: "collection of Top-level domains as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.list(com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.list(Context context)"
  name: "list(Context context)"
  nameWithType: "TopLevelDomainsClient.list(Context context)"
  summary: "Description for Get all top-level domains supported for registration."
  modifiers:
  - "abstract"
  parameters:
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<TopLevelDomainInner> list(Context context)"
  desc: "Description for Get all top-level domains supported for registration."
  returns:
    description: "collection of Top-level domains as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreements(java.lang.String,com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreements(String name, TopLevelDomainAgreementOption agreementOption)"
  name: "listAgreements(String name, TopLevelDomainAgreementOption agreementOption)"
  nameWithType: "TopLevelDomainsClient.listAgreements(String name, TopLevelDomainAgreementOption agreementOption)"
  summary: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Domain agreement options."
    name: "agreementOption"
    type: "<xref href=\"com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption?alt=com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption&text=TopLevelDomainAgreementOption\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<TldLegalAgreementInner> listAgreements(String name, TopLevelDomainAgreementOption agreementOption)"
  desc: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  returns:
    description: "collection of top-level domain legal agreements as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner?alt=com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner&text=TldLegalAgreementInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreements(java.lang.String,com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreements(String name, TopLevelDomainAgreementOption agreementOption, Context context)"
  name: "listAgreements(String name, TopLevelDomainAgreementOption agreementOption, Context context)"
  nameWithType: "TopLevelDomainsClient.listAgreements(String name, TopLevelDomainAgreementOption agreementOption, Context context)"
  summary: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Domain agreement options."
    name: "agreementOption"
    type: "<xref href=\"com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption?alt=com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption&text=TopLevelDomainAgreementOption\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<TldLegalAgreementInner> listAgreements(String name, TopLevelDomainAgreementOption agreementOption, Context context)"
  desc: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  returns:
    description: "collection of top-level domain legal agreements as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner?alt=com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner&text=TldLegalAgreementInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreementsAsync(java.lang.String,com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption)"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAgreementsAsync(String name, TopLevelDomainAgreementOption agreementOption)"
  name: "listAgreementsAsync(String name, TopLevelDomainAgreementOption agreementOption)"
  nameWithType: "TopLevelDomainsClient.listAgreementsAsync(String name, TopLevelDomainAgreementOption agreementOption)"
  summary: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the top-level domain."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Domain agreement options."
    name: "agreementOption"
    type: "<xref href=\"com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption?alt=com.azure.resourcemanager.appservice.models.TopLevelDomainAgreementOption&text=TopLevelDomainAgreementOption\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedFlux<TldLegalAgreementInner> listAgreementsAsync(String name, TopLevelDomainAgreementOption agreementOption)"
  desc: "Description for Gets all legal agreements that user needs to accept before purchasing a domain."
  returns:
    description: "collection of top-level domain legal agreements as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner?alt=com.azure.resourcemanager.appservice.fluent.models.TldLegalAgreementInner&text=TldLegalAgreementInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAsync()"
  fullName: "com.azure.resourcemanager.appservice.fluent.TopLevelDomainsClient.listAsync()"
  name: "listAsync()"
  nameWithType: "TopLevelDomainsClient.listAsync()"
  summary: "Description for Get all top-level domains supported for registration."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<TopLevelDomainInner> listAsync()"
  desc: "Description for Get all top-level domains supported for registration."
  returns:
    description: "collection of Top-level domains as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner?alt=com.azure.resourcemanager.appservice.fluent.models.TopLevelDomainInner&text=TopLevelDomainInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in TopLevelDomainsClient."
metadata: {}
package: "com.azure.resourcemanager.appservice.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-appservice:2.19.0
