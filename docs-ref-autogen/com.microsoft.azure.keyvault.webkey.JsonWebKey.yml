### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.clearMemory()
  name: clearMemory()
  nameWithType: JsonWebKey.clearMemory()
  summary: <p>Clear key materials. </p>
  syntax: public void clearMemory()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.clearMemory()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.d()
  name: d()
  nameWithType: JsonWebKey.d()
  returns:
    description: <p>the RSA private exponent value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA private exponent value. </p>
  syntax: public byte [] d()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.d()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.dp()
  name: dp()
  nameWithType: JsonWebKey.dp()
  returns:
    description: <p>the RSA Private Key Parameter value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA Private Key Parameter value. </p>
  syntax: public byte [] dp()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.dp()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.dq()
  name: dq()
  nameWithType: JsonWebKey.dq()
  returns:
    description: <p>the RSA Private Key Parameter value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA Private Key Parameter value. </p>
  syntax: public byte [] dq()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.dq()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.e()
  name: e()
  nameWithType: JsonWebKey.e()
  returns:
    description: <p>the RSA public exponent value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA public exponent value. </p>
  syntax: public byte [] e()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.e()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.equals(JsonWebKey jwk)
  name: equals(JsonWebKey jwk)
  nameWithType: JsonWebKey.equals(JsonWebKey jwk)
  parameters:
  - description: <p>the other <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> to compare with. </p>
    name: jwk
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if this <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> is the same as the jwk argument; false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Indicates whether some other <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> is "equal to" this one. </p>
  syntax: public boolean equals(JsonWebKey jwk)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.equals(JsonWebKey)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.equals(Object obj)
  name: equals(Object obj)
  nameWithType: JsonWebKey.equals(Object obj)
  parameters:
  - name: obj
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean equals(Object obj)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.equals(Object)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.fromAes(SecretKey secretKey)
  name: fromAes(SecretKey secretKey)
  nameWithType: JsonWebKey.fromAes(SecretKey secretKey)
  parameters:
  - description: <p>AES key </p>
    name: secretKey
    type: <xref href="SecretKey?alt=SecretKey&text=SecretKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JSON web key, converted from AES key. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Converts AES key to JSON web key. </p>
  syntax: public static JsonWebKey fromAes(SecretKey secretKey)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.fromAes(SecretKey)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.fromRSA(KeyPair keyPair)
  name: fromRSA(KeyPair keyPair)
  nameWithType: JsonWebKey.fromRSA(KeyPair keyPair)
  parameters:
  - description: <p>RSA key pair </p>
    name: keyPair
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JSON web key, converted from RSA key pair. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Converts RSA key pair to JSON web key. </p>
  syntax: public static JsonWebKey fromRSA(KeyPair keyPair)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.fromRSA(KeyPair)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.hashCode()
  name: hashCode()
  nameWithType: JsonWebKey.hashCode()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int hashCode()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.hashCode()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.hasPrivateKey()
  name: hasPrivateKey()
  nameWithType: JsonWebKey.hasPrivateKey()
  returns:
    description: <p>true if the <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> has private key; false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies whether the <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> has private key. </p>
  syntax: public boolean hasPrivateKey()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.hasPrivateKey()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.isValid()
  name: isValid()
  nameWithType: JsonWebKey.isValid()
  returns:
    description: <p>true if the <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> is valid; false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies whether the <xref uid="com.microsoft.azure.keyvault.webkey.JsonWebKey" data-throw-if-not-resolved="false" data-raw-source="JsonWebKey"></xref> is valid. </p>
  syntax: public boolean isValid()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.isValid()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.k()
  name: k()
  nameWithType: JsonWebKey.k()
  returns:
    description: <p>the symmetric key value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get Symmetric key value. </p>
  syntax: public byte [] k()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.k()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.keyOps()
  name: keyOps()
  nameWithType: JsonWebKey.keyOps()
  returns:
    description: <p>the key operations. </p>
    type: List&lt;<xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyOperation?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyOperation&text=JsonWebKeyOperation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the key operations.</p>

    <p></p>
  syntax: public List<JsonWebKeyOperation> keyOps()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.keyOps()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.kid()
  name: kid()
  nameWithType: JsonWebKey.kid()
  returns:
    description: <p>the kid value. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Key Identifier.</p>

    <p></p>
  syntax: public String kid()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.kid()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.kty()
  name: kty()
  nameWithType: JsonWebKey.kty()
  returns:
    description: <p>the key type. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyType?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyType&text=JsonWebKeyType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Key type, usually RSA. Possible values include: 'EC', 'RSA', 'RSA-HSM', 'oct'.</p>

    <p></p>
  syntax: public JsonWebKeyType kty()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.kty()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.n()
  name: n()
  nameWithType: JsonWebKey.n()
  returns:
    description: <p>the RSA modulus value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the RSA modulus value.</p>

    <p></p>
  syntax: public byte [] n()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.n()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.p()
  name: p()
  nameWithType: JsonWebKey.p()
  returns:
    description: <p>the RSA secret prime value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA secret prime value. </p>
  syntax: public byte [] p()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.p()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.q()
  name: q()
  nameWithType: JsonWebKey.q()
  returns:
    description: <p>the RSA secret prime, with p &lt;q value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get RSA secret prime, with p &lt;q value. </p>
  syntax: public byte [] q()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.q()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.qi()
  name: qi()
  nameWithType: JsonWebKey.qi()
  returns:
    description: <p>the RSA Private Key Parameter value. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get the RSA Private Key Parameter value. </p>
  syntax: public byte [] qi()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.qi()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.t()
  name: t()
  nameWithType: JsonWebKey.t()
  returns:
    description: <p>HSM Token, used with Bring Your Own Key. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Get HSM Token value, used with Bring Your Own Key. </p>
  syntax: public byte [] t()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.t()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.toAes()
  name: toAes()
  nameWithType: JsonWebKey.toAes()
  returns:
    description: <p>AES key </p>
    type: <xref href="SecretKey?alt=SecretKey&text=SecretKey" data-throw-if-not-resolved="False"/>
  summary: <p>Converts JSON web key to AES key. </p>
  syntax: public SecretKey toAes()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.toAes()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA()
  name: toRSA()
  nameWithType: JsonWebKey.toRSA()
  returns:
    description: <p>RSA key pair </p>
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  summary: <p>Converts JSON web key to RSA key pair. </p>
  syntax: public KeyPair toRSA()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA(boolean includePrivateParameters)
  name: toRSA(boolean includePrivateParameters)
  nameWithType: JsonWebKey.toRSA(boolean includePrivateParameters)
  parameters:
  - description: <p>true if the RSA key pair should include the private key. False otherwise. </p>
    name: includePrivateParameters
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>RSA key pair </p>
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  summary: <p>Converts JSON web key to RSA key pair and include the private key if set to true. </p>
  syntax: public KeyPair toRSA(boolean includePrivateParameters)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA(boolean)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA(boolean includePrivateParameters, Provider provider)
  name: toRSA(boolean includePrivateParameters, Provider provider)
  nameWithType: JsonWebKey.toRSA(boolean includePrivateParameters, Provider provider)
  parameters:
  - description: <p>true if the RSA key pair should include the private key. False otherwise. </p>
    name: includePrivateParameters
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the Java security provider. </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>RSA key pair </p>
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  summary: <p>Converts JSON web key to RSA key pair and include the private key if set to true. </p>
  syntax: public KeyPair toRSA(boolean includePrivateParameters, Provider provider)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.toRSA(boolean,Provider)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.toString()
  name: toString()
  nameWithType: JsonWebKey.toString()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String toString()
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.toString()
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withD(byte[] d)
  name: withD(byte[] d)
  nameWithType: JsonWebKey.withD(byte[] d)
  parameters:
  - description: <p>the RSA private exponent value to set. </p>
    name: d
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set RSA private exponent value.</p>

    <p></p>
  syntax: public JsonWebKey withD(byte[] d)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withD(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withDp(byte[] dp)
  name: withDp(byte[] dp)
  nameWithType: JsonWebKey.withDp(byte[] dp)
  parameters:
  - description: <p>the RSA Private Key Parameter value to set. </p>
    name: dp
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set RSA Private Key Parameter value. </p>
  syntax: public JsonWebKey withDp(byte[] dp)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withDp(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withDq(byte[] dq)
  name: withDq(byte[] dq)
  nameWithType: JsonWebKey.withDq(byte[] dq)
  parameters:
  - description: <p>the RSA Private Key Parameter value to set. </p>
    name: dq
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set RSA Private Key Parameter value . </p>
  syntax: public JsonWebKey withDq(byte[] dq)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withDq(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withE(byte[] e)
  name: withE(byte[] e)
  nameWithType: JsonWebKey.withE(byte[] e)
  parameters:
  - description: <p>RSA public exponent value to set </p>
    name: e
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the RSA public exponent value.</p>

    <p></p>
  syntax: public JsonWebKey withE(byte[] e)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withE(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withK(byte[] k)
  name: withK(byte[] k)
  nameWithType: JsonWebKey.withK(byte[] k)
  parameters:
  - description: <p>the symmetric key value to set. </p>
    name: k
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set the Symmetric key value. </p>
  syntax: public JsonWebKey withK(byte[] k)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withK(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKeyOps(List<JsonWebKeyOperation> keyOps)
  name: withKeyOps(List<JsonWebKeyOperation> keyOps)
  nameWithType: JsonWebKey.withKeyOps(List<JsonWebKeyOperation> keyOps)
  parameters:
  - description: <p>the key operations value to set </p>
    name: keyOps
    type: List&lt;<xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyOperation?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyOperation&text=JsonWebKeyOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the key operations value.</p>

    <p></p>
  syntax: public JsonWebKey withKeyOps(List<JsonWebKeyOperation> keyOps)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKeyOps(List<JsonWebKeyOperation>)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKid(String kid)
  name: withKid(String kid)
  nameWithType: JsonWebKey.withKid(String kid)
  parameters:
  - description: <p>the key identifier </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the key identifier value.</p>

    <p></p>
  syntax: public JsonWebKey withKid(String kid)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKid(String)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKty(JsonWebKeyType kty)
  name: withKty(JsonWebKeyType kty)
  nameWithType: JsonWebKey.withKty(JsonWebKeyType kty)
  parameters:
  - description: <p>the key type </p>
    name: kty
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyType?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyType&text=JsonWebKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the key type value.</p>

    <p></p>
  syntax: public JsonWebKey withKty(JsonWebKeyType kty)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withKty(JsonWebKeyType)
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withN(byte[] n)
  name: withN(byte[] n)
  nameWithType: JsonWebKey.withN(byte[] n)
  parameters:
  - description: <p>the RSA modulus value to set </p>
    name: n
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the RSA modulus value.</p>

    <p></p>
  syntax: public JsonWebKey withN(byte[] n)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withN(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withP(byte[] p)
  name: withP(byte[] p)
  nameWithType: JsonWebKey.withP(byte[] p)
  parameters:
  - description: <p>the RSA secret prime value. </p>
    name: p
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set the RSA secret prime value. </p>
  syntax: public JsonWebKey withP(byte[] p)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withP(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withQ(byte[] q)
  name: withQ(byte[] q)
  nameWithType: JsonWebKey.withQ(byte[] q)
  parameters:
  - description: <p>the the RSA secret prime, with p &lt;q value to be set. </p>
    name: q
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set the RSA secret prime, with p &lt;q value. </p>
  syntax: public JsonWebKey withQ(byte[] q)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withQ(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withQi(byte[] qi)
  name: withQi(byte[] qi)
  nameWithType: JsonWebKey.withQi(byte[] qi)
  parameters:
  - description: <p>the RSA Private Key Parameter value to set. </p>
    name: qi
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set RSA Private Key Parameter value. </p>
  syntax: public JsonWebKey withQi(byte[] qi)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withQi(byte [])
- fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey.withT(byte[] t)
  name: withT(byte[] t)
  nameWithType: JsonWebKey.withT(byte[] t)
  parameters:
  - description: <p>HSM Token value to set, used with Bring Your Own Key </p>
    name: t
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JsonWebKey object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKey?alt=com.microsoft.azure.keyvault.webkey.JsonWebKey&text=JsonWebKey" data-throw-if-not-resolved="False"/>
  summary: <p>Set HSM Token value, used with Bring Your Own Key. </p>
  syntax: public JsonWebKey withT(byte[] t)
  uid: com.microsoft.azure.keyvault.webkey.JsonWebKey.withT(byte [])
nameWithType: JsonWebKey
syntax: public class JsonWebKey
type: class
uid: com.microsoft.azure.keyvault.webkey.JsonWebKey
fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey
name: JsonWebKey
package: com.microsoft.azure.keyvault.webkey
summary: <p>As of <a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18">http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18</a>. </p>
metadata: {}
