### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient"
fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient"
name: "PolicyExemptionsClient"
nameWithType: "PolicyExemptionsClient"
summary: "An instance of this class provides access to all the operations defined in Policy<wbr>Exemptions<wbr>Client."
syntax: "public interface PolicyExemptionsClient extends InnerSupportsListing<PolicyExemptionInner>, InnerSupportsDelete<Void>"
methods:
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdate(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdate(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  name: "createOrUpdate(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  nameWithType: "PolicyExemptionsClient.createOrUpdate(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  summary: "This operation creates or updates a policy exemption with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy exemption."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PolicyExemptionInner createOrUpdate(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  desc: "This operation creates or updates a policy exemption with the given scope and name. Policy exemptions apply to all resources contained within their scope. For example, when you create a policy exemption at resource group scope for a policy assignment at the same or above level, the exemption exempts to all applicable resources in the resource group."
  returns:
    description: "the policy exemption."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  name: "createOrUpdateAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  nameWithType: "PolicyExemptionsClient.createOrUpdateAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  summary: "This operation creates or updates a policy exemption with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy exemption."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<PolicyExemptionInner> createOrUpdateAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  desc: "This operation creates or updates a policy exemption with the given scope and name. Policy exemptions apply to all resources contained within their scope. For example, when you create a policy exemption at resource group scope for a policy assignment at the same or above level, the exemption exempts to all applicable resources in the resource group."
  returns:
    description: "the policy exemption on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateWithResponse(String scope, String policyExemptionName, PolicyExemptionInner parameters, Context context)"
  name: "createOrUpdateWithResponse(String scope, String policyExemptionName, PolicyExemptionInner parameters, Context context)"
  nameWithType: "PolicyExemptionsClient.createOrUpdateWithResponse(String scope, String policyExemptionName, PolicyExemptionInner parameters, Context context)"
  summary: "This operation creates or updates a policy exemption with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy exemption."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyExemptionInner> createOrUpdateWithResponse(String scope, String policyExemptionName, PolicyExemptionInner parameters, Context context)"
  desc: "This operation creates or updates a policy exemption with the given scope and name. Policy exemptions apply to all resources contained within their scope. For example, when you create a policy exemption at resource group scope for a policy assignment at the same or above level, the exemption exempts to all applicable resources in the resource group."
  returns:
    description: "the policy exemption along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateWithResponseAsync(java.lang.String,java.lang.String,com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.createOrUpdateWithResponseAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  name: "createOrUpdateWithResponseAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  nameWithType: "PolicyExemptionsClient.createOrUpdateWithResponseAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  summary: "This operation creates or updates a policy exemption with the given scope and name."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameters for the policy exemption."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Mono<Response<PolicyExemptionInner>> createOrUpdateWithResponseAsync(String scope, String policyExemptionName, PolicyExemptionInner parameters)"
  desc: "This operation creates or updates a policy exemption with the given scope and name. Policy exemptions apply to all resources contained within their scope. For example, when you create a policy exemption at resource group scope for a policy assignment at the same or above level, the exemption exempts to all applicable resources in the resource group."
  returns:
    description: "the policy exemption along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.delete(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.delete(String scope, String policyExemptionName)"
  name: "delete(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.delete(String scope, String policyExemptionName)"
  summary: "This operation deletes a policy exemption, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract void delete(String scope, String policyExemptionName)"
  desc: "This operation deletes a policy exemption, given its name and the scope it was created in. The scope of a policy exemption is the part of its ID preceding '/providers/Microsoft.Authorization/policyExemptions/\\{policyExemptionName\\}'."
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteAsync(String scope, String policyExemptionName)"
  name: "deleteAsync(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.deleteAsync(String scope, String policyExemptionName)"
  summary: "This operation deletes a policy exemption, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Void> deleteAsync(String scope, String policyExemptionName)"
  desc: "This operation deletes a policy exemption, given its name and the scope it was created in. The scope of a policy exemption is the part of its ID preceding '/providers/Microsoft.Authorization/policyExemptions/\\{policyExemptionName\\}'."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteWithResponse(String scope, String policyExemptionName, Context context)"
  name: "deleteWithResponse(String scope, String policyExemptionName, Context context)"
  nameWithType: "PolicyExemptionsClient.deleteWithResponse(String scope, String policyExemptionName, Context context)"
  summary: "This operation deletes a policy exemption, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<Void> deleteWithResponse(String scope, String policyExemptionName, Context context)"
  desc: "This operation deletes a policy exemption, given its name and the scope it was created in. The scope of a policy exemption is the part of its ID preceding '/providers/Microsoft.Authorization/policyExemptions/\\{policyExemptionName\\}'."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteWithResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.deleteWithResponseAsync(String scope, String policyExemptionName)"
  name: "deleteWithResponseAsync(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.deleteWithResponseAsync(String scope, String policyExemptionName)"
  summary: "This operation deletes a policy exemption, given its name and the scope it was created in."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<Void>> deleteWithResponseAsync(String scope, String policyExemptionName)"
  desc: "This operation deletes a policy exemption, given its name and the scope it was created in. The scope of a policy exemption is the part of its ID preceding '/providers/Microsoft.Authorization/policyExemptions/\\{policyExemptionName\\}'."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.get(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.get(String scope, String policyExemptionName)"
  name: "get(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.get(String scope, String policyExemptionName)"
  summary: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PolicyExemptionInner get(String scope, String policyExemptionName)"
  desc: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  returns:
    description: "the policy exemption."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getAsync(String scope, String policyExemptionName)"
  name: "getAsync(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.getAsync(String scope, String policyExemptionName)"
  summary: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<PolicyExemptionInner> getAsync(String scope, String policyExemptionName)"
  desc: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  returns:
    description: "the policy exemption on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getWithResponse(String scope, String policyExemptionName, Context context)"
  name: "getWithResponse(String scope, String policyExemptionName, Context context)"
  nameWithType: "PolicyExemptionsClient.getWithResponse(String scope, String policyExemptionName, Context context)"
  summary: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<PolicyExemptionInner> getWithResponse(String scope, String policyExemptionName, Context context)"
  desc: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  returns:
    description: "the policy exemption along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getWithResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.getWithResponseAsync(String scope, String policyExemptionName)"
  name: "getWithResponseAsync(String scope, String policyExemptionName)"
  nameWithType: "PolicyExemptionsClient.getWithResponseAsync(String scope, String policyExemptionName)"
  summary: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  modifiers:
  - "abstract"
  parameters:
  - description: "The scope of the policy exemption. Valid scopes are: management group (format:\n     '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:\n     '/subscriptions/{subscriptionId}'), resource group (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:\n     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'."
    name: "scope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the policy exemption to delete."
    name: "policyExemptionName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<PolicyExemptionInner>> getWithResponseAsync(String scope, String policyExemptionName)"
  desc: "This operation retrieves a single policy exemption, given its name and the scope it was created at."
  returns:
    description: "the policy exemption along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.list()"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.list()"
  name: "list()"
  nameWithType: "PolicyExemptionsClient.list()"
  summary: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> list()"
  desc: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.list(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.list(String filter, Context context)"
  name: "list(String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.list(String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> list(String filter, Context context)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listAsync()"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listAsync()"
  name: "listAsync()"
  nameWithType: "PolicyExemptionsClient.listAsync()"
  summary: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listAsync()"
  desc: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listAsync(String filter)"
  name: "listAsync(String filter)"
  nameWithType: "PolicyExemptionsClient.listAsync(String filter)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listAsync(String filter)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(String resourceGroupName)"
  name: "listByResourceGroup(String resourceGroupName)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroup(String resourceGroupName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listByResourceGroup(String resourceGroupName)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroup(String resourceGroupName, String filter, Context context)"
  name: "listByResourceGroup(String resourceGroupName, String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroup(String resourceGroupName, String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listByResourceGroup(String resourceGroupName, String filter, Context context)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroupAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroupAsync(String resourceGroupName)"
  name: "listByResourceGroupAsync(String resourceGroupName)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroupAsync(String resourceGroupName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listByResourceGroupAsync(String resourceGroupName)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroupAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listByResourceGroupAsync(String resourceGroupName, String filter)"
  name: "listByResourceGroupAsync(String resourceGroupName, String filter)"
  nameWithType: "PolicyExemptionsClient.listByResourceGroupAsync(String resourceGroupName, String filter)"
  summary: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listByResourceGroupAsync(String resourceGroupName, String filter)"
  desc: "This operation retrieves the list of all policy exemptions associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroup(String managementGroupId)"
  name: "listForManagementGroup(String managementGroupId)"
  nameWithType: "PolicyExemptionsClient.listForManagementGroup(String managementGroupId)"
  summary: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForManagementGroup(String managementGroupId)"
  desc: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy exemptions that are assigned to the management group or the management group's ancestors."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroup(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroup(String managementGroupId, String filter, Context context)"
  name: "listForManagementGroup(String managementGroupId, String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.listForManagementGroup(String managementGroupId, String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForManagementGroup(String managementGroupId, String filter, Context context)"
  desc: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy exemptions that are assigned to the management group or the management group's ancestors."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroupAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroupAsync(String managementGroupId)"
  name: "listForManagementGroupAsync(String managementGroupId)"
  nameWithType: "PolicyExemptionsClient.listForManagementGroupAsync(String managementGroupId)"
  summary: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listForManagementGroupAsync(String managementGroupId)"
  desc: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy exemptions that are assigned to the management group or the management group's ancestors."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroupAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForManagementGroupAsync(String managementGroupId, String filter)"
  name: "listForManagementGroupAsync(String managementGroupId, String filter)"
  nameWithType: "PolicyExemptionsClient.listForManagementGroupAsync(String managementGroupId, String filter)"
  summary: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the management group."
    name: "managementGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listForManagementGroupAsync(String managementGroupId, String filter)"
  desc: "This operation retrieves the list of all policy exemptions applicable to the management group that match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter=atScope() is provided, the returned list includes all policy exemptions that are assigned to the management group or the management group's ancestors."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  nameWithType: "PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  desc: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  name: "listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  nameWithType: "PolicyExemptionsClient.listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<PolicyExemptionInner> listForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter, Context context)"
  desc: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResourceAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  name: "listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  nameWithType: "PolicyExemptionsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName)"
  desc: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResourceAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.PolicyExemptionsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter)"
  name: "listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter)"
  nameWithType: "PolicyExemptionsClient.listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter)"
  summary: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the resource group containing the resource."
    name: "resourceGroupName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The namespace of the resource provider. For example, the namespace of a virtual\n     machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)."
    name: "resourceProviderNamespace"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The parent resource path. Use empty string if there is none."
    name: "parentResourcePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource type name. For example the type name of a web app is 'sites' (from\n     Microsoft.Web/sites)."
    name: "resourceType"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The name of the resource."
    name: "resourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()',\n     'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is\n     performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the\n     scope, including those that apply directly or apply from containing scopes. If $filter=atScope() is provided,\n     the returned list only includes all policy exemptions that apply to the scope, which is everything in the\n     unfiltered list except those applied to sub scopes contained within the given scope. If\n     $filter=atExactScope() is provided, the returned list only includes all policy exemptions that at the given\n     scope. If $filter=excludeExpired() is provided, the returned list only includes all policy exemptions that\n     either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq '{value}' is provided.\n     the returned list only includes all policy exemptions that are associated with the give policyAssignmentId."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<PolicyExemptionInner> listForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String filter)"
  desc: "This operation retrieves the list of all policy exemptions associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '\\{value\\}''. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Web', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'sites', \\{resourceName\\} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as (\\{resourceProviderNamespace\\} == 'Microsoft.Compute', \\{parentResourcePath\\} == 'virtualMachines/MyVirtualMachine', \\{resourceType\\} == 'domainNames', \\{resourceName\\} == 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is to provide both in the \\{resourceType\\} parameter, format: (\\{resourceProviderNamespace\\} == '', \\{parentResourcePath\\} == '', \\{resourceType\\} == 'Microsoft.Web/sites', \\{resourceName\\} == 'MyWebApp')."
  returns:
    description: "list of policy exemptions as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in PolicyExemptionsClient."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete?alt=com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsDelete&text=InnerSupportsDelete\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsListing?alt=com.azure.resourcemanager.resources.fluentcore.collection.InnerSupportsListing&text=InnerSupportsListing\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner?alt=com.azure.resourcemanager.resources.fluent.models.PolicyExemptionInner&text=PolicyExemptionInner\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.19.0
