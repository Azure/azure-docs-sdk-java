### YamlMime:JavaMember
uid: "com.azure.core.util.BinaryData.fromObjectAsync*"
fullName: "com.azure.core.util.BinaryData.fromObjectAsync"
name: "fromObjectAsync"
nameWithType: "BinaryData.fromObjectAsync"
members:
- uid: "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object)"
  fullName: "com.azure.core.util.BinaryData.fromObjectAsync(Object data)"
  name: "fromObjectAsync(Object data)"
  nameWithType: "BinaryData.fromObjectAsync(Object data)"
  summary: "Serialize the given <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> into <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> using json serializer which is available on classpath. The serializer on classpath must implement <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> interface. If the given Object is `null`, an empty <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will be returned.\n\n**Code sample**\n\n```java\nclass Person {\n     {@literal @}JsonProperty\n     private String name;\n \n     {@literal @}JsonSetter\n     public Person setName(String name) {\n         this.name = name;\n         return this;\n     }\n \n     {@literal @}JsonGetter\n     public String getName() {\n         return name;\n     }\n }\n final Person data = new Person().setName(\"John\");\n \n // Provide your custom serializer or use Azure provided serializers.\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson or\n // https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson\n BinaryData.fromObjectAsync(data)\n     .subscribe(binaryData -> sendToService(binaryData));\n```"
  parameters:
  - description: "The object to use as data backing the instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromObjectAsync(Object data)"
  returns:
    description: "<xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the JSON serialized object."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.BinaryData.fromObjectAsync(java.lang.Object,com.azure.core.util.serializer.ObjectSerializer)"
  fullName: "com.azure.core.util.BinaryData.fromObjectAsync(Object data, ObjectSerializer serializer)"
  name: "fromObjectAsync(Object data, ObjectSerializer serializer)"
  nameWithType: "BinaryData.fromObjectAsync(Object data, ObjectSerializer serializer)"
  summary: "Serialize the given <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> into <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> using the provided <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref>. If the Object is `null`, an empty <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> will be returned.\n\nYou can provide your custom implementation of <xref uid=\"com.azure.core.util.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> interface or use one provided in zure SDK by adding them as dependency.\n\n *  [Jackson serializer][]\n *  [Gson serializer][].\n\n\n[Jackson serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-jackson\n[Gson serializer]: https://mvnrepository.com/artifact/com.azure/azure-core-serializer-json-gson"
  parameters:
  - description: "The object to use as data backing the instance of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
    name: "data"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - description: "to use for serializing the object."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.ObjectSerializer?alt=com.azure.core.util.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<BinaryData> fromObjectAsync(Object data, ObjectSerializer serializer)"
  returns:
    description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing the binary data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.12.0
