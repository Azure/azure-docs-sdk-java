### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.secrets.SecretClient
  id: SecretClient
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets
  children:
  - com.azure.security.keyvault.secrets.SecretClient.backupSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.getVaultUrl()
  - com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  - com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()
  - com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup(byte[])
  - com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse(byte[],com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  - com.azure.security.keyvault.secrets.SecretClient.setSecret(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret,com.azure.core.util.Context)
  - com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  - com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)
  langs:
  - java
  name: SecretClient
  nameWithType: SecretClient
  fullName: com.azure.security.keyvault.secrets.SecretClient
  type: Class
  package: com.azure.security.keyvault.secrets
  summary: >-
    The SecretClient provides synchronous methods to manage <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring, and listing the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secrets</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.


    **Construct the sync client**


    ```java

    SecretClient secretClient = new SecretClientBuilder()
         .credential(new DefaultAzureCredentialBuilder().build())
         .vaultUrl("https://myvault.vault.azure.net/")
         .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
         .buildClient();
    ```
  syntax:
    content: public final class SecretClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.secrets.SecretClient.SecretClient(com.azure.security.keyvault.secrets.SecretAsyncClient)
  id: SecretClient(com.azure.security.keyvault.secrets.SecretAsyncClient)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: SecretClient(SecretAsyncClient client)
  nameWithType: SecretClient.SecretClient(SecretAsyncClient client)
  fullName: com.azure.security.keyvault.secrets.SecretClient.SecretClient(SecretAsyncClient client)
  overload: com.azure.security.keyvault.secrets.SecretClient.SecretClient*
  type: Constructor
  package: com.azure.security.keyvault.secrets
  summary: Creates a SecretClient that uses `pipeline` to service requests
  syntax:
    content: " SecretClient(SecretAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.security.keyvault.secrets.SecretAsyncClient
      description: The <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient" data-throw-if-not-resolved="false">SecretAsyncClient</xref> that the client routes its request through.
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecret(java.lang.String)
  id: backupSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: backupSecret(String name)
  nameWithType: SecretClient.backupSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.backupSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.


    **Code sample**


    Backs up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response


    ```java

    byte[] secretBackup = secretClient.backupSecret("secretName");
     System.out.printf("Secret's Backup Byte array's length %s", secretBackup.length);
    ```
  syntax:
    content: public byte[] backupSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: byte[]
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up secret blob.
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  id: backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: backupSecretWithResponse(String name, Context context)
  nameWithType: SecretClient.backupSecretWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.


    **Code sample**


    Backs up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response


    ```java

    byte[] secretBackup = secretClient.backupSecretWithResponse("secretName",
         new Context(key1, value1)).getValue();
     System.out.printf("Secret's Backup Byte array's length %s", secretBackup.length);
    ```
  syntax:
    content: public Response<byte[]> backupSecretWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<byte[]>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up secret blob.
- uid: com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret(java.lang.String)
  id: beginDeleteSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: beginDeleteSecret(String name)
  nameWithType: SecretClient.beginDeleteSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and for permanent deletion, needs to be purged. Otherwise, the secret is permanently deleted. All versions of a secret are deleted. This cannot be applied to individual versions of a secret. This operation requires the `secrets/delete` permission.\n\n**Code sample**\n\nDeletes the secret from a soft-delete enabled key vault. Prints out the recovery id of the deleted secret returned in the response.\n\n```java\nSyncPoller<DeletedSecret, Void> deletedSecretPoller = secretClient.beginDeleteSecret(\"secretName\");\n \n // Deleted Secret is accessible as soon as polling begins.\n PollResponse<DeletedSecret> deletedSecretPollResponse = deletedSecretPoller.poll();\n \n // Deletion date only works for a SoftDelete-enabled Key Vault.\n System.out.println(\"Deleted Date  %s\" + deletedSecretPollResponse.getValue()\n         .getDeletedOn().toString());\n System.out.printf(\"Deleted Secret's Recovery Id %s\", deletedSecretPollResponse.getValue()\n         .getRecoveryId());\n \n // Secret is being deleted on server.\n deletedSecretPoller.waitForCompletion();\n```"
  syntax:
    content: public SyncPoller<DeletedSecret,Void> beginDeleteSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret to be deleted.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve the <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret(java.lang.String)
  id: beginRecoverDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: beginRecoverDeletedSecret(String name)
  nameWithType: SecretClient.beginRecoverDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: "Recovers the deleted secret in the key vault to its latest version. Can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/recover` permission.\n\n**Code sample**\n\nRecovers the deleted secret from the key vault enabled for **soft-delete**. Prints out the details of the recovered secret returned in the response.\n\n```java\nSyncPoller<KeyVaultSecret, Void> recoverSecretPoller =\n     secretClient.beginRecoverDeletedSecret(\"deletedSecretName\");\n \n // Deleted Secret can be accessed as soon as polling is in progress.\n PollResponse<KeyVaultSecret> recoveredSecretPollResponse = recoverSecretPoller.poll();\n System.out.println(\"Recovered Key Name %s\" + recoveredSecretPollResponse.getValue().getName());\n System.out.printf(\"Recovered Key's Id %s\", recoveredSecretPollResponse.getValue().getId());\n \n // Key is being recovered on server.\n recoverSecretPoller.waitForCompletion();\n```"
  syntax:
    content: public SyncPoller<KeyVaultSecret,Void> beginRecoverDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret to be recovered.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll on and retrieve the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">recovered secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(java.lang.String)
  id: getDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getDeletedSecret(String name)
  nameWithType: SecretClient.getDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.


    **Code sample**


    Gets the deleted secret from the key vault **enabled for soft-delete**. Prints out the details of the deleted secret returned in the response.


    ```java

    DeletedSecret deletedSecret = secretClient.getDeletedSecret("secretName");
     System.out.printf("Deleted Secret's Recovery Id %s", deletedSecret.getRecoveryId());
    ```
  syntax:
    content: public DeletedSecret getDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret.
    return:
      type: com.azure.security.keyvault.secrets.models.DeletedSecret
      description: The <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  id: getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getDeletedSecretWithResponse(String name, Context context)
  nameWithType: SecretClient.getDeletedSecretWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.


    **Code sample**


    Gets the deleted secret from the key vault **enabled for soft-delete**. Prints out the details of the deleted secret returned in the response.


    ```java

    DeletedSecret deletedSecret = secretClient.getDeletedSecretWithResponse("secretName",
         new Context(key2, value2)).getValue();
     System.out.printf("Deleted Secret's Recovery Id %s", deletedSecret.getRecoveryId());
    ```
  syntax:
    content: public Response<DeletedSecret> getDeletedSecretWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the deleted secret.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="DeletedSecret" data-throw-if-not-resolved="false">deleted
         secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)
  id: getSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getSecret(String name)
  nameWithType: SecretClient.getSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the latest version of the specified secret from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets the latest version of the secret in the key vault. Prints out the details of the returned secret.


    ```java

    KeyVaultSecret secretWithoutVersion = secretClient.getSecret("secretName", secretVersion);
     System.out.printf("Secret is returned with name %s and value %s%n",
         secretWithoutVersion.getName(), secretWithoutVersion.getValue());
    ```
  syntax:
    content: public KeyVaultSecret getSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: The requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">KeyVaultSecret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)
  id: getSecret(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getSecret(String name, String version)
  nameWithType: SecretClient.getSecret(String name, String version)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(String name, String version)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets a specific version of the secret in the key vault. Prints out the details of the returned secret.


    ```java

    String secretVersion = "6A385B124DEF4096AF1361A85B16C204";
     KeyVaultSecret secretWithVersion = secretClient.getSecret("secretName", secretVersion);
     System.out.printf("Secret is returned with name %s and value %s%n",
         secretWithVersion.getName(), secretWithVersion.getValue());
    ```
  syntax:
    content: public KeyVaultSecret getSecret(String name, String version)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret, cannot be null.
    - id: version
      type: java.lang.String
      description: >-
        The version of the secret to retrieve. If this is an empty string or null, this call is
             equivalent to calling <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)" data-throw-if-not-resolved="false">#getSecret(String)</xref>, with the latest version being retrieved.
    return:
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: The requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  id: getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getSecretWithResponse(String name, String version, Context context)
  nameWithType: SecretClient.getSecretWithResponse(String name, String version, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(String name, String version, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.


    **Code sample**


    Gets a specific version of the secret in the key vault. Prints out the details of the returned secret.


    ```java

    String secretVersion = "6A385B124DEF4096AF1361A85B16C204";
     KeyVaultSecret secretWithVersion = secretClient.getSecretWithResponse("secretName", secretVersion,
         new Context(key2, value2)).getValue();
     System.out.printf("Secret is returned with name %s and value %s%n",
         secretWithVersion.getName(), secretWithVersion.getValue());
    ```
  syntax:
    content: public Response<KeyVaultSecret> getSecretWithResponse(String name, String version, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret, cannot be null
    - id: version
      type: java.lang.String
      description: >-
        The version of the secret to retrieve. If this is an empty string or null, this call is equivalent
             to calling <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)" data-throw-if-not-resolved="false">#getSecret(String)</xref>, with the latest version being retrieved.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">KeyVaultSecret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: SecretClient.getVaultUrl()
  fullName: com.azure.security.keyvault.secrets.SecretClient.getVaultUrl()
  overload: com.azure.security.keyvault.secrets.SecretClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: Gets the vault endpoint url to which service requests are sent to.
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url.
- uid: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  id: listDeletedSecrets()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listDeletedSecrets()
  nameWithType: SecretClient.listDeletedSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  overload: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> of the key vault if it has enabled soft-delete. This operation requires the `secrets/list` permission.


    **Iterate over secrets**


    Lists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.


    ```java

    for (DeletedSecret deletedSecret : secretClient.listDeletedSecrets()) {
         System.out.printf("Deleted secret's recovery Id %s", deletedSecret.getRecoveryId());
     }
    ```


    **Iterate over secrets by page**


    Iterate over Lists the deleted secrets by page in the key vault and for each deleted secret prints out its recovery id.


    ```java

    secretClient.listDeletedSecrets().iterableByPage().forEach(resp -> {
         System.out.printf("Got response headers . Url: %s, Status code: %d %n",
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             System.out.printf("Deleted secret's recovery Id %s", value.getRecoveryId());
         });
     });
    ```
  syntax:
    content: public PagedIterable<DeletedSecret> listDeletedSecrets()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of all of the <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> in the vault.
- uid: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(com.azure.core.util.Context)
  id: listDeletedSecrets(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listDeletedSecrets(Context context)
  nameWithType: SecretClient.listDeletedSecrets(Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> of the key vault if it has enabled soft-delete. This operation requires the `secrets/list` permission.


    **Code sample**


    Lists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.


    ```java

    for (DeletedSecret deletedSecret : secretClient.listDeletedSecrets(new Context(key1, value2))) {
         System.out.printf("Deleted secret's recovery Id %s", deletedSecret.getRecoveryId());
     }
    ```
  syntax:
    content: public PagedIterable<DeletedSecret> listDeletedSecrets(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>
      description: <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of all of the <xref uid="com.azure.security.keyvault.secrets.models.DeletedSecret" data-throw-if-not-resolved="false">deleted secrets</xref> in the vault.
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String)
  id: listPropertiesOfSecretVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listPropertiesOfSecretVersions(String name)
  nameWithType: SecretClient.listPropertiesOfSecretVersions(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists all versions of the specified secret. Each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.


    **Code sample**


    The sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.


    ```java

    for (SecretProperties secret : secretClient.listPropertiesOfSecretVersions("secretName")) {
         KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());
         System.out.printf("Received secret's version with name %s and value %s",
             secretWithValue.getName(), secretWithValue.getValue());
     }
    ```
  syntax:
    content: public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the versions of the specified secret in the vault.
             List is empty if secret with <code>name</code> does not exist in key vault
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)
  id: listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listPropertiesOfSecretVersions(String name, Context context)
  nameWithType: SecretClient.listPropertiesOfSecretVersions(String name, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists all versions of the specified secret. Each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.


    **Code sample**


    The sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.


    ```java

    for (SecretProperties secret : secretClient
         .listPropertiesOfSecretVersions("secretName", new Context(key1, value2))) {
         KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());
         System.out.printf("Received secret's version with name %s and value %s",
             secretWithValue.getName(), secretWithValue.getValue());
     }
    ```


    **Iterate over secret versions by page**


    The sample below iterates over each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> by each page and calls <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">SecretClient#getSecret(String, String)</xref>. This will return the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref> with the corresponding version's value.


    ```java

    secretClient.listPropertiesOfSecretVersions("secretName", new Context(key1, value2))
                 .iterableByPage().forEach(resp -> {
                     System.out.printf("Got response headers . Url: %s, Status code: %d %n",
                         resp.getRequest().getUrl(), resp.getStatusCode());
                     resp.getItems().forEach(value -> {
                         KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());
                         System.out.printf("Received secret's version with name %s and value %s",
                             secretWithValue.getName(), secretWithValue.getValue());
                     });
                 });
    ```
  syntax:
    content: public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the versions of the specified secret in the vault.
             List is empty if secret with <code>name</code> does not exist in key vault
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()
  id: listPropertiesOfSecrets()
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listPropertiesOfSecrets()
  nameWithType: SecretClient.listPropertiesOfSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()
  overload: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists secrets in the key vault. Each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.


    **Iterate through secrets and fetch their latest value**


    The snippet below loops over each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> and calls <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref>. This gets the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref> and the value of its latest version.


    ```java

    for (SecretProperties secret : secretClient.listPropertiesOfSecrets()) {
         KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());
         System.out.printf("Received secret with name %s and value %s",
             secretWithValue.getName(), secretWithValue.getValue());
     }
    ```


    **Iterate over secrets by page**


    The snippet below loops over each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> by page and calls <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref>. This gets the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref> and the value of its latest version.


    ```java

    secretClient.listPropertiesOfSecrets().iterableByPage().forEach(resp -> {
         System.out.printf("Response headers are %s. Url %s  and status code %d %n", resp.getHeaders(),
             resp.getRequest().getUrl(), resp.getStatusCode());
         resp.getItems().forEach(value -> {
             KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());
             System.out.printf("Received secret with name %s and value %s",
                 secretWithValue.getName(), secretWithValue.getValue());
         });
     });
    ```
  syntax:
    content: public PagedIterable<SecretProperties> listPropertiesOfSecrets()
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the secrets in the vault. The
             <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> contains all the information about the secret, except its value.
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(com.azure.core.util.Context)
  id: listPropertiesOfSecrets(com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: listPropertiesOfSecrets(Context context)
  nameWithType: SecretClient.listPropertiesOfSecrets(Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Lists secrets in the key vault. Each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.


    **Iterate over secrets and fetch their latest value**


    The snippet below loops over each <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret</xref> and calls <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref>. This gets the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref> and the value of its latest version.


    ```java

    for (SecretProperties secret : secretClient.listPropertiesOfSecrets(new Context(key1, value2))) {
         KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());
         System.out.printf("Received secret with name %s and value %s",
             secretWithValue.getName(), secretWithValue.getValue());
     }
    ```
  syntax:
    content: public PagedIterable<SecretProperties> listPropertiesOfSecrets(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: >-
        <xref uid="com.azure.core.http.rest.PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the secrets in the vault. <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref>
             contains all the information about the secret, except its value.
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(java.lang.String)
  id: purgeDeletedSecret(java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: purgeDeletedSecret(String name)
  nameWithType: SecretClient.purgeDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Permanently removes a deleted secret, without the possibility of recovery. This operation can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/purge` permission.


    **Code sample**


    Purges the deleted secret from the key vault enabled for **soft-delete**. Prints out the status code from the server response.


    ```java

    secretClient.purgeDeletedSecret("secretName");

    ```
  syntax:
    content: public void purgeDeletedSecret(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  id: purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: purgeDeletedSecretWithResponse(String name, Context context)
  nameWithType: SecretClient.purgeDeletedSecretWithResponse(String name, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(String name, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Permanently removes a deleted secret, without the possibility of recovery. This operation can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/purge` permission.


    **Code sample**


    Purges the deleted secret from the key vault enabled for **soft-delete**. Prints out the status code from the server response.


    ```java

    Response<Void> purgeResponse = secretClient.purgeDeletedSecretWithResponse("secretName",
         new Context(key1, value1));
     System.out.printf("Purge Status Code: %d", purgeResponse.getStatusCode());
    ```
  syntax:
    content: public Response<Void> purgeDeletedSecretWithResponse(String name, Context context)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup(byte[])
  id: restoreSecretBackup(byte[])
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: restoreSecretBackup(byte[] backup)
  nameWithType: SecretClient.restoreSecretBackup(byte[] backup)
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup(byte[] backup)
  overload: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.


    **Code sample**


    Restores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.


    ```java

    // Pass the secret backup byte array of the secret to be restored.
     byte[] secretBackupByteArray = {};
     KeyVaultSecret restoredSecret = secretClient.restoreSecretBackup(secretBackupByteArray);
     System.out
         .printf("Restored Secret with name %s and value %s", restoredSecret.getName(), restoredSecret.getValue());
    ```
  syntax:
    content: public KeyVaultSecret restoreSecretBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the secret.
    return:
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">restored secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse(byte[],com.azure.core.util.Context)
  id: restoreSecretBackupWithResponse(byte[],com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: restoreSecretBackupWithResponse(byte[] backup, Context context)
  nameWithType: SecretClient.restoreSecretBackupWithResponse(byte[] backup, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse(byte[] backup, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.


    **Code sample**


    Restores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.


    ```java

    // Pass the secret backup byte array of the secret to be restored.
     byte[] secretBackupByteArray = {};
     KeyVaultSecret restoredSecret = secretClient.restoreSecretBackupWithResponse(secretBackupByteArray,
         new Context(key2, value2)).getValue();
     System.out
         .printf("Restored Secret with name %s and value %s", restoredSecret.getName(), restoredSecret.getValue());
    ```
  syntax:
    content: public Response<KeyVaultSecret> restoreSecretBackupWithResponse(byte[] backup, Context context)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the secret.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">restored secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  id: setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: setSecret(KeyVaultSecret secret)
  nameWithType: SecretClient.setSecret(KeyVaultSecret secret)
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret(KeyVaultSecret secret)
  overload: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.


    The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getExpiresOn()" data-throw-if-not-resolved="false">expires</xref>, <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()" data-throw-if-not-resolved="false">contentType</xref>, and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref> values in `secret` are optional. If not specified, <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()" data-throw-if-not-resolved="false">enabled</xref> is set to true by key vault.


    **Code sample**


    Creates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.


    ```java

    KeyVaultSecret newSecret = new KeyVaultSecret("secretName", "secretValue")
         .setProperties(new SecretProperties().setExpiresOn(OffsetDateTime.now().plusDays(60)));
     KeyVaultSecret returnedSecret = secretClient.setSecret(newSecret);
     System.out.printf("Secret is created with name %s and value %s%n", returnedSecret.getName(),
         returnedSecret.getValue());
    ```
  syntax:
    content: public KeyVaultSecret setSecret(KeyVaultSecret secret)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: >-
        The Secret object containing information about the secret and its properties. The properties
             <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getName()" data-throw-if-not-resolved="false">secret.name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret.getValue()" data-throw-if-not-resolved="false">secret.value</xref> cannot be
             null.
    return:
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: The <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret(java.lang.String,java.lang.String)
  id: setSecret(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: setSecret(String name, String value)
  nameWithType: SecretClient.setSecret(String name, String value)
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret(String name, String value)
  overload: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.


    **Code sample**


    Creates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.


    ```java

    KeyVaultSecret secret = secretClient.setSecret("secretName", "secretValue");
     System.out.printf("Secret is created with name %s and value %s%n", secret.getName(), secret.getValue());
    ```
  syntax:
    content: public KeyVaultSecret setSecret(String name, String value)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the secret. It is required and cannot be null.
    - id: value
      type: java.lang.String
      description: The value of the secret. It is required and cannot be null.
    return:
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: The <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret,com.azure.core.util.Context)
  id: setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: setSecretWithResponse(KeyVaultSecret secret, Context context)
  nameWithType: SecretClient.setSecretWithResponse(KeyVaultSecret secret, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(KeyVaultSecret secret, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.


    **Code sample**


    Creates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.


    ```java

    KeyVaultSecret newSecret = new KeyVaultSecret("secretName", "secretValue")
              .setProperties(new SecretProperties().setExpiresOn(OffsetDateTime.now().plusDays(60)));
     KeyVaultSecret secret = secretClient.setSecretWithResponse(newSecret, new Context(key1, value1)).getValue();
     System.out.printf("Secret is created with name %s and value %s%n", secret.getName(), secret.getValue());
    ```
  syntax:
    content: public Response<KeyVaultSecret> setSecretWithResponse(KeyVaultSecret secret, Context context)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.KeyVaultSecret
      description: >-
        The Secret object containing information about the secret and its properties. The properties
             secret.name and secret.value must be non null.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  id: updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: updateSecretProperties(SecretProperties secretProperties)
  nameWithType: SecretClient.updateSecretProperties(SecretProperties secretProperties)
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(SecretProperties secretProperties)
  overload: com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.


    The `secret` is required and its fields <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getName()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()" data-throw-if-not-resolved="false">version</xref> cannot be null.


    **Code sample**


    Gets the latest version of the secret, changes its expiry time, and the updates the secret in the key vault.


    ```java

    SecretProperties secretProperties = secretClient.getSecret("secretName").getProperties();
     secretProperties.setExpiresOn(OffsetDateTime.now().plusDays(60));
     SecretProperties updatedSecretProperties = secretClient.updateSecretProperties(secretProperties);
     KeyVaultSecret updatedSecret = secretClient.getSecret(updatedSecretProperties.getName());
     System.out.printf("Updated Secret is returned with name %s, value %s and expires %s%n",
         updatedSecret.getName(), updatedSecret.getValue(), updatedSecret.getProperties().getExpiresOn());
    ```
  syntax:
    content: public SecretProperties updateSecretProperties(SecretProperties secretProperties)
    parameters:
    - id: secretProperties
      type: com.azure.security.keyvault.secrets.models.SecretProperties
      description: The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret properties</xref> object with updated properties.
    return:
      type: com.azure.security.keyvault.secrets.models.SecretProperties
      description: The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">updated secret</xref>.
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)
  id: updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)
  artifact: com.azure:azure-security-keyvault-secrets:4.2.0
  parent: com.azure.security.keyvault.secrets.SecretClient
  langs:
  - java
  name: updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)
  nameWithType: SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)
  overload: com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.secrets
  summary: >-
    Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.


    The `secret` is required and its fields <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getName()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()" data-throw-if-not-resolved="false">version</xref> cannot be null.


    **Code sample**


    Gets the latest version of the secret, changes its expiry time, and the updates the secret in the key vault.


    ```java

    SecretProperties secretProperties = secretClient.getSecret("secretName").getProperties();
     secretProperties.setExpiresOn(OffsetDateTime.now().plusDays(60));
     SecretProperties updatedSecretBase = secretClient.updateSecretPropertiesWithResponse(secretProperties,
         new Context(key2, value2)).getValue();
     KeyVaultSecret updatedSecret = secretClient.getSecret(updatedSecretBase.getName());
     System.out.printf("Updated Secret is returned with name %s, value %s and expires %s%n",
         updatedSecret.getName(), updatedSecret.getValue(), updatedSecret.getProperties().getExpiresOn());
    ```
  syntax:
    content: public Response<SecretProperties> updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)
    parameters:
    - id: secretProperties
      type: com.azure.security.keyvault.secrets.models.SecretProperties
      description: The <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">secret properties</xref> object with updated properties.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.secrets.models.SecretProperties" data-throw-if-not-resolved="false">updated secret</xref>.
references:
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient
  name: SecretAsyncClient
  nameWithType: SecretAsyncClient
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient
- uid: com.azure.security.keyvault.secrets.SecretClient.SecretClient*
  name: SecretClient
  nameWithType: SecretClient.SecretClient
  fullName: com.azure.security.keyvault.secrets.SecretClient.SecretClient
  package: com.azure.security.keyvault.secrets
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.secrets.SecretClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: SecretClient.getVaultUrl
  fullName: com.azure.security.keyvault.secrets.SecretClient.getVaultUrl
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  name: KeyVaultSecret
  nameWithType: KeyVaultSecret
  fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  name: setSecret
  nameWithType: SecretClient.setSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.KeyVaultSecret>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
    name: KeyVaultSecret
    fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse*
  name: setSecretWithResponse
  nameWithType: SecretClient.setSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  name: getSecret
  nameWithType: SecretClient.getSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse*
  name: getSecretWithResponse
  nameWithType: SecretClient.getSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.models.SecretProperties
  name: SecretProperties
  nameWithType: SecretProperties
  fullName: com.azure.security.keyvault.secrets.models.SecretProperties
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretProperties
    name: SecretProperties
    fullName: com.azure.security.keyvault.secrets.models.SecretProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse*
  name: updateSecretPropertiesWithResponse
  nameWithType: SecretClient.updateSecretPropertiesWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties*
  name: updateSecretProperties
  nameWithType: SecretClient.updateSecretProperties
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret*
  name: beginDeleteSecret
  nameWithType: SecretClient.beginDeleteSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.models.DeletedSecret
  name: DeletedSecret
  nameWithType: DeletedSecret
  fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*
  name: getDeletedSecret
  nameWithType: SecretClient.getDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse*
  name: getDeletedSecretWithResponse
  nameWithType: SecretClient.getDeletedSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*
  name: purgeDeletedSecret
  nameWithType: SecretClient.purgeDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse*
  name: purgeDeletedSecretWithResponse
  nameWithType: SecretClient.purgeDeletedSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.util.polling.SyncPoller<com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret
    name: KeyVaultSecret
    fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret*
  name: beginRecoverDeletedSecret
  nameWithType: SecretClient.beginRecoverDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecret*
  name: backupSecret
  nameWithType: SecretClient.backupSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response<byte[]>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse*
  name: backupSecretWithResponse
  nameWithType: SecretClient.backupSecretWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup*
  name: restoreSecretBackup
  nameWithType: SecretClient.restoreSecretBackup
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse*
  name: restoreSecretBackupWithResponse
  nameWithType: SecretClient.restoreSecretBackupWithResponse
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretProperties
    name: SecretProperties
    fullName: com.azure.security.keyvault.secrets.models.SecretProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets*
  name: listPropertiesOfSecrets
  nameWithType: SecretClient.listPropertiesOfSecrets
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>
  spec.java:
  - uid: com.azure.core.http.rest.PagedIterable
    name: PagedIterable
    fullName: com.azure.core.http.rest.PagedIterable
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*
  name: listDeletedSecrets
  nameWithType: SecretClient.listDeletedSecrets
  fullName: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions*
  name: listPropertiesOfSecretVersions
  nameWithType: SecretClient.listPropertiesOfSecretVersions
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions
  package: com.azure.security.keyvault.secrets
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void
  name: DeletedSecret,Void
  nameWithType: DeletedSecret,Void
  fullName: com.azure.security.keyvault.secrets.models.DeletedSecret,java.lang.Void
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void
  name: KeyVaultSecret,Void
  nameWithType: KeyVaultSecret,Void
  fullName: com.azure.security.keyvault.secrets.models.KeyVaultSecret,java.lang.Void
- uid: com.azure.core.http.rest.PagedIterable
  name: PagedIterable
  nameWithType: PagedIterable
  fullName: com.azure.core.http.rest.PagedIterable
