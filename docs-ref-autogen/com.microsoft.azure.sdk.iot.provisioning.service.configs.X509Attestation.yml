### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation"
fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation"
name: "X509Attestation"
nameWithType: "X509Attestation"
summary: "Representation of a single Device Provisioning Service X509 Attestation."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class X509Attestation extends Attestation"
constructors:
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation(com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation(X509Attestation x509Attestation)"
  name: "X509Attestation(X509Attestation x509Attestation)"
  nameWithType: "X509Attestation.X509Attestation(X509Attestation x509Attestation)"
  summary: "Constructor \\[COPY\\]"
  parameters:
  - description: "the original X509Attestation to copy."
    name: "x509Attestation"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public X509Attestation(X509Attestation x509Attestation)"
  desc: "Constructor \\[COPY\\]\n\nCreates a new instance of the X509Attestation copping the content of the provided one."
methods:
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String primary)"
  name: "createFromCAReferences(String primary)"
  nameWithType: "X509Attestation.createFromCAReferences(String primary)"
  summary: "Factory with CAReferences with only primary reference."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary CA reference. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromCAReferences(String primary)"
  desc: "Factory with CAReferences with only primary reference.\n\nCreates a new instance of the X509Attestation using the provided primary CA reference."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String primary, String secondary)"
  name: "createFromCAReferences(String primary, String secondary)"
  nameWithType: "X509Attestation.createFromCAReferences(String primary, String secondary)"
  summary: "Factory with CAReferences with primary and secondary references."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary CA references. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>String</code> with the secondary CA references. It can be <code>null</code> or empty (ignored)."
    name: "secondary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromCAReferences(String primary, String secondary)"
  desc: "Factory with CAReferences with primary and secondary references.\n\nCreates a new instance of the X509Attestation with the primary and secondary CA references."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary)"
  name: "createFromClientCertificates(String primary)"
  nameWithType: "X509Attestation.createFromClientCertificates(String primary)"
  summary: "Factory with Client<wbr>Certificate with only primary certificate."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary certificate. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromClientCertificates(String primary)"
  desc: "Factory with ClientCertificate with only primary certificate.\n\nCreates a new instance of the X509Attestation using the provided primary Certificate."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary, String secondary)"
  name: "createFromClientCertificates(String primary, String secondary)"
  nameWithType: "X509Attestation.createFromClientCertificates(String primary, String secondary)"
  summary: "Factory with Client<wbr>Certificates with primary and secondary certificates."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary certificate. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>String</code> with the secondary certificate. It can be <code>null</code> or empty (ignored)."
    name: "secondary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromClientCertificates(String primary, String secondary)"
  desc: "Factory with ClientCertificates with primary and secondary certificates.\n\nCreates a new instance of the X509Attestation with the primary and secondary certificates."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary)"
  name: "createFromRootCertificates(String primary)"
  nameWithType: "X509Attestation.createFromRootCertificates(String primary)"
  summary: "Factory with Root<wbr>Certificates with only primary certificate."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary certificate. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromRootCertificates(String primary)"
  desc: "Factory with RootCertificates with only primary certificate.\n\nCreates a new instance of the X509Attestation using the provided primary Certificate."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary, String secondary)"
  name: "createFromRootCertificates(String primary, String secondary)"
  nameWithType: "X509Attestation.createFromRootCertificates(String primary, String secondary)"
  summary: "Factory with Root<wbr>Certificates with primary and secondary certificates."
  modifiers:
  - "static"
  parameters:
  - description: "the <code>String</code> with the primary certificate. It cannot be <code>null</code> or empty."
    name: "primary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>String</code> with the secondary certificate. It can be <code>null</code> or empty (ignored)."
    name: "secondary"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static X509Attestation createFromRootCertificates(String primary, String secondary)"
  desc: "Factory with RootCertificates with primary and secondary certificates.\n\nCreates a new instance of the X509Attestation with the primary and secondary certificates."
  returns:
    description: "the new instance of the X509Attestation."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferences()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferences()"
  name: "getCAReferences()"
  nameWithType: "X509Attestation.getCAReferences()"
  summary: "Getter for the ca<wbr>References."
  deprecatedTag: "as of provisioning-service-client version 1.3.3, please use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferencesFinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getCAReferencesFinal()\"></xref>"
  syntax: "@Deprecated\npublic X509CAReferences getCAReferences()"
  desc: "Getter for the caReferences."
  hasDeprecatedTag: true
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CAReferences\"></xref> with the stored caReferences. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences&text=X509CAReferences\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferencesFinal()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferencesFinal()"
  name: "getCAReferencesFinal()"
  nameWithType: "X509Attestation.getCAReferencesFinal()"
  summary: "Getter for the ca<wbr>References."
  modifiers:
  - "final"
  syntax: "public final X509CAReferences getCAReferencesFinal()"
  desc: "Getter for the caReferences."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CAReferences\"></xref> with the stored caReferences. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences&text=X509CAReferences\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates()"
  name: "getClientCertificates()"
  nameWithType: "X509Attestation.getClientCertificates()"
  summary: "Getter for the client<wbr>Certificates."
  deprecatedTag: "as of provisioning-service-client version 1.3.3, please use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificatesFinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getClientCertificatesFinal()\"></xref>"
  syntax: "@Deprecated\npublic X509Certificates getClientCertificates()"
  desc: "Getter for the clientCertificates."
  hasDeprecatedTag: true
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Certificates\"></xref> with the stored clientCertificates. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificatesFinal()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificatesFinal()"
  name: "getClientCertificatesFinal()"
  nameWithType: "X509Attestation.getClientCertificatesFinal()"
  summary: "Getter for the client<wbr>Certificates."
  modifiers:
  - "final"
  syntax: "public final X509Certificates getClientCertificatesFinal()"
  desc: "Getter for the clientCertificates."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Certificates\"></xref> with the stored clientCertificates. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()"
  name: "getPrimaryX509CertificateInfo()"
  nameWithType: "X509Attestation.getPrimaryX509CertificateInfo()"
  summary: "Getter for the primary X509 certificate info."
  syntax: "public X509CertificateInfo getPrimaryX509CertificateInfo()"
  desc: "Getter for the primary X509 certificate info.\n\nThis method is a getter for the information returned from the provisioning service for the provided primary certificate."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CertificateInfo\"></xref> with the returned certificate information. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo&text=X509CertificateInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificates()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificates()"
  name: "getRootCertificates()"
  nameWithType: "X509Attestation.getRootCertificates()"
  summary: "Getter for the root<wbr>Certificates."
  deprecatedTag: "as of provisioning-service-client version 1.3.3, please use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificatesFinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getRootCertificatesFinal()\"></xref>"
  syntax: "@Deprecated\npublic X509Certificates getRootCertificates()"
  desc: "Getter for the rootCertificates."
  hasDeprecatedTag: true
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Certificates\"></xref> with the stored rootCertificates. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificatesFinal()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificatesFinal()"
  name: "getRootCertificatesFinal()"
  nameWithType: "X509Attestation.getRootCertificatesFinal()"
  summary: "Getter for the root<wbr>Certificates."
  modifiers:
  - "final"
  syntax: "public final X509Certificates getRootCertificatesFinal()"
  desc: "Getter for the rootCertificates."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509Certificates\"></xref> with the stored rootCertificates. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()"
  name: "getSecondaryX509CertificateInfo()"
  nameWithType: "X509Attestation.getSecondaryX509CertificateInfo()"
  summary: "Getter for the secondary X509 certificate info."
  syntax: "public X509CertificateInfo getSecondaryX509CertificateInfo()"
  desc: "Getter for the secondary X509 certificate info.\n\nThis method is a getter for the information returned from the provisioning service for the provided secondary certificate."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"X509CertificateInfo\"></xref> with the returned certificate information. it can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo&text=X509CertificateInfo\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Representation of a single Device Provisioning Service X509 Attestation.\n\nThe provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Attestation\"></xref>.\n\nAn X509 attestation can contains one of the 3 types of certificate:\n\n**Client or Alias certificate:**\n\nCalled on this class as clientCertificates, this certificate can authenticate a single device.\n\n**Signing or Root certificate:**\n\nCalled on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices.\n\n**CA Reference:**\n\nCalled on this class as X509CAReferences, this is a CA reference for a rootCertificate that can create multiple Client certificates to authenticate multiple devices.\n\nThe provisioning service allows user to create <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref>. For all operations over <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> with **DICE**, user must provide a **clientCertificates**, and for operations over <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref>, user must provide a **rootCertificates** or a **X509CAReferences**.\n\nFor each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.\n\nThe provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getPrimaryX509CertificateInfo()\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getSecondaryX509CertificateInfo()\"></xref> will return the certificate information for the certificates."
metadata: {}
package: "com.microsoft.azure.sdk.iot.provisioning.service.configs"
artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client:1.7.0
