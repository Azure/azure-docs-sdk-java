### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  id: _in_memory_lease_manager
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease(Lease)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseIfNotExists(String)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseStoreIfNotExists()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLease(Lease)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLeaseStore()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getAllLeases()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseDurationInMilliseconds()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseRenewIntervalInMilliseconds()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.initialize(HostContext)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.InMemoryLeaseManager()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.leaseStoreExists()
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.notifyOnSteal(String,String,Callable<?>)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.releaseLease(Lease)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.renewLease(Lease)
  - com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.updateLease(Lease)
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: InMemoryLeaseManager
  nameWithType: InMemoryLeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager
  type: Class
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 38
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public class InMemoryLeaseManager implements ILeaseManager
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.eventprocessorhost._i_lease_manager
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease(Lease)
  id: acquireLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: acquireLease(Lease lease)
  nameWithType: InMemoryLeaseManager.acquireLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.acquireLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 139
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</p>

    <p>Note that it is legal to acquire a lease that is currently owned by another host, which is called "stealing". Lease-stealing is how partitions are redistributed when additional hosts are started.</p>

    <p>The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time. To avoid situations where two host instances both believe that they own the lease, acquisition can fail non-exceptionally by returning false and should do so when there is any doubt <ndash></ndash> the worst that can happen is that no host instance owns the lease for a short time. This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error and should complete exceptionally.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> acquireLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> info for the desired partition </p>
    return:
      type: 7e53ac82
      description: <p>CompletableFuture { -&gt;} true if the lease was acquired, false if not, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseIfNotExists(String)
  id: createLeaseIfNotExists(String)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: createLeaseIfNotExists(String partitionId)
  nameWithType: InMemoryLeaseManager.createLeaseIfNotExists(String partitionId)
  fullName: CompletableFuture<Lease> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseIfNotExists(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 107
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create in the store the lease for the given partition, if it does not exist. Do nothing if it exists in the store already.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Lease> createLeaseIfNotExists(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>id of partition to create lease info for </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventprocessorhost._leasea08ddfce
      description: <p>CompletableFuture { -&gt;} the existing or newly-created lease info for the partition, completes exceptionally on error </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseStoreIfNotExists()
  id: createLeaseStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: createLeaseStoreIfNotExists()
  nameWithType: InMemoryLeaseManager.createLeaseStoreIfNotExists()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseStoreIfNotExists()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseStoreIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 76
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Create the lease store if it does not exist, do nothing if it does exist.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> createLeaseStoreIfNotExists()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLease(Lease)
  id: deleteLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: deleteLease(Lease lease)
  nameWithType: InMemoryLeaseManager.deleteLease(Lease lease)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 131
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Delete the lease info for a partition from the store. If there is no stored lease for the given partition, that is treated as success.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deleteLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: <p>the currently existing lease info for the partition </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLeaseStore()
  id: deleteLeaseStore()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: deleteLeaseStore()
  nameWithType: InMemoryLeaseManager.deleteLeaseStore()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLeaseStore()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLeaseStore*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 84
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Deletes the lease store.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deleteLeaseStore()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getAllLeases()
  id: getAllLeases()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: getAllLeases()
  nameWithType: InMemoryLeaseManager.getAllLeases()
  fullName: CompletableFuture<List<Lease>> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getAllLeases()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getAllLeases*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 92
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Returns the lease info for all partitions.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<List<Lease>> getAllLeases()
    return:
      type: 0eb76d20com.microsoft.azure.eventprocessorhost._leasee7daa122
      description: <p>CompletableFuture { -&gt;} list of Leases, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseDurationInMilliseconds()
  id: getLeaseDurationInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: getLeaseDurationInMilliseconds()
  nameWithType: InMemoryLeaseManager.getLeaseDurationInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseDurationInMilliseconds()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseDurationInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 62
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>The lease duration is mostly internal to the lease manager implementation but may be needed by other parts of the event processor host.</p>

    <p></p>
  syntax:
    content: public int getLeaseDurationInMilliseconds()
    return:
      type: f75371fa
      description: <p>Duration of a lease before it expires unless renewed, specified in milliseconds. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseRenewIntervalInMilliseconds()
  id: getLeaseRenewIntervalInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: getLeaseRenewIntervalInMilliseconds()
  nameWithType: InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseRenewIntervalInMilliseconds*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 56
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>The lease renew interval is used by PartitionManager to determine how often it should scan leases and renew them. In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it should be less than half of the lease length, to prevent accidental expiration.</p>

    <p></p>
  syntax:
    content: public int getLeaseRenewIntervalInMilliseconds()
    return:
      type: f75371fa
      description: <p>The sleep interval between scans, specified in milliseconds. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.initialize(HostContext)
  id: initialize(HostContext)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: initialize(HostContext hostContext)
  nameWithType: InMemoryLeaseManager.initialize(HostContext hostContext)
  fullName: void com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.initialize(HostContext hostContext)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.initialize*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 50
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public void initialize(HostContext hostContext)
    parameters:
    - id: hostContext
      type: 96d8d450
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.InMemoryLeaseManager()
  id: InMemoryLeaseManager()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: InMemoryLeaseManager()
  nameWithType: InMemoryLeaseManager.InMemoryLeaseManager()
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.InMemoryLeaseManager()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.InMemoryLeaseManager*
  type: Constructor
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 44
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public InMemoryLeaseManager()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.leaseStoreExists()
  id: leaseStoreExists()
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: leaseStoreExists()
  nameWithType: InMemoryLeaseManager.leaseStoreExists()
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.leaseStoreExists()
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.leaseStoreExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 68
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Does the lease store exist?</p>

    <p>The returned CompletableFuture completes with true if the checkpoint store exists or false if it does not. It completes exceptionally on error.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> leaseStoreExists()
    return:
      type: 7e53ac82
      description: <p>CompletableFuture { -&gt;} true if it exists, false if not </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.notifyOnSteal(String,String,Callable<?>)
  id: notifyOnSteal(String,String,Callable<?>)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: notifyOnSteal(String expectedOwner, String partitionId, Callable<?> notifier)
  nameWithType: InMemoryLeaseManager.notifyOnSteal(String expectedOwner, String partitionId, Callable<?> notifier)
  fullName: void com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.notifyOnSteal(String expectedOwner, String partitionId, Callable<?> notifier)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.notifyOnSteal*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 197
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public void notifyOnSteal(String expectedOwner, String partitionId, Callable<?> notifier)
    parameters:
    - id: expectedOwner
      type: "26831127"
    - id: partitionId
      type: "26831127"
    - id: notifier
      type: 5fc09e59
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.releaseLease(Lease)
  id: releaseLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: releaseLease(Lease lease)
  nameWithType: InMemoryLeaseManager.releaseLease(Lease lease)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.releaseLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.releaseLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 241
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Give up a lease currently held by this host.</p>

    <p>If the lease has expired or been taken by another host, releasing it is unnecessary but will succeed since the intent has been fulfilled.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> releaseLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be given up </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.renewLease(Lease)
  id: renewLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: renewLease(Lease lease)
  nameWithType: InMemoryLeaseManager.renewLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.renewLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.renewLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 203
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Renew a lease currently held by this host instance.</p>

    <p>If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false. With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient. If it does not, renewLease should return false.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> renewLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be renewed </p>
    return:
      type: 7e53ac82
      description: <p>true if the lease was renewed, false as described above, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.updateLease(Lease)
  id: updateLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager
  href: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.yml
  langs:
  - java
  name: updateLease(Lease lease)
  nameWithType: InMemoryLeaseManager.updateLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease(Lease lease)
  overload: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.updateLease*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/InMemoryLeaseManager.java
    startLine: 276
  package: com.microsoft.azure.eventprocessorhost
  summary: >-
    <p>Update the store with the information in the provided lease.</p>

    <p>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or released, it cannot be updated. <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> updateLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: <p>New lease info to be stored </p>
    return:
      type: 7e53ac82
      description: <p>true if the update was successful, false if lease was lost and could not be updated, completes exceptionally on error. </p>
  overridden: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
references:
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.InMemoryLeaseManager*
  name: InMemoryLeaseManager
  nameWithType: InMemoryLeaseManager.InMemoryLeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.InMemoryLeaseManager
  package: com.microsoft.azure.eventprocessorhost
- uid: 96d8d450
  spec.java:
  - name: HostContext
    fullName: HostContext
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.initialize*
  name: initialize
  nameWithType: InMemoryLeaseManager.initialize
  fullName: void com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.initialize
  package: com.microsoft.azure.eventprocessorhost
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseRenewIntervalInMilliseconds*
  name: getLeaseRenewIntervalInMilliseconds
  nameWithType: InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds
  fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseRenewIntervalInMilliseconds
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getLeaseDurationInMilliseconds*
  name: getLeaseDurationInMilliseconds
  nameWithType: InMemoryLeaseManager.getLeaseDurationInMilliseconds
  fullName: int com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getLeaseDurationInMilliseconds
  package: com.microsoft.azure.eventprocessorhost
- uid: 7e53ac82
  spec.java:
  - name: CompletableFuture<Boolean>
    fullName: CompletableFuture<Boolean>
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.leaseStoreExists*
  name: leaseStoreExists
  nameWithType: InMemoryLeaseManager.leaseStoreExists
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.leaseStoreExists
  package: com.microsoft.azure.eventprocessorhost
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseStoreIfNotExists*
  name: createLeaseStoreIfNotExists
  nameWithType: InMemoryLeaseManager.createLeaseStoreIfNotExists
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseStoreIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLeaseStore*
  name: deleteLeaseStore
  nameWithType: InMemoryLeaseManager.deleteLeaseStore
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLeaseStore
  package: com.microsoft.azure.eventprocessorhost
- uid: 0eb76d20com.microsoft.azure.eventprocessorhost._leasee7daa122
  spec.java:
  - name: CompletableFuture<List<
    fullName: CompletableFuture<List<
  - uid: com.microsoft.azure.eventprocessorhost._lease
    name: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    href: com.microsoft.azure.eventprocessorhost._lease.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.getAllLeases*
  name: getAllLeases
  nameWithType: InMemoryLeaseManager.getAllLeases
  fullName: CompletableFuture<List<Lease>> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.getAllLeases
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9cdf14d0com.microsoft.azure.eventprocessorhost._leasea08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.eventprocessorhost._lease
    name: Lease
    fullName: com.microsoft.azure.eventprocessorhost.Lease
    href: com.microsoft.azure.eventprocessorhost._lease.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.createLeaseIfNotExists*
  name: createLeaseIfNotExists
  nameWithType: InMemoryLeaseManager.createLeaseIfNotExists
  fullName: CompletableFuture<Lease> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.createLeaseIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.deleteLease*
  name: deleteLease
  nameWithType: InMemoryLeaseManager.deleteLease
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.deleteLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.acquireLease*
  name: acquireLease
  nameWithType: InMemoryLeaseManager.acquireLease
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.acquireLease
  package: com.microsoft.azure.eventprocessorhost
- uid: 5fc09e59
  spec.java:
  - name: Callable<?>
    fullName: Callable<?>
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.notifyOnSteal*
  name: notifyOnSteal
  nameWithType: InMemoryLeaseManager.notifyOnSteal
  fullName: void com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.notifyOnSteal
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.renewLease*
  name: renewLease
  nameWithType: InMemoryLeaseManager.renewLease
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.renewLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.releaseLease*
  name: releaseLease
  nameWithType: InMemoryLeaseManager.releaseLease
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.releaseLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._in_memory_lease_manager.updateLease*
  name: updateLease
  nameWithType: InMemoryLeaseManager.updateLease
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: ILeaseManager
  nameWithType: ILeaseManager
  fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager
  type: Interface
  syntax:
    content: public interface ILeaseManager
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseRenewIntervalInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: getLeaseRenewIntervalInMilliseconds()
  nameWithType: ILeaseManager.getLeaseRenewIntervalInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseRenewIntervalInMilliseconds()
  type: Method
  summary: >-
    <p>The lease renew interval is used by PartitionManager to determine how often it should scan leases and renew them. In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it should be less than half of the lease length, to prevent accidental expiration.</p>

    <p></p>
  syntax:
    content: public int getLeaseRenewIntervalInMilliseconds()
    return:
      type: f75371fa
      description: <p>The sleep interval between scans, specified in milliseconds. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getLeaseDurationInMilliseconds()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: getLeaseDurationInMilliseconds()
  nameWithType: ILeaseManager.getLeaseDurationInMilliseconds()
  fullName: int com.microsoft.azure.eventprocessorhost.ILeaseManager.getLeaseDurationInMilliseconds()
  type: Method
  summary: >-
    <p>The lease duration is mostly internal to the lease manager implementation but may be needed by other parts of the event processor host.</p>

    <p></p>
  syntax:
    content: public int getLeaseDurationInMilliseconds()
    return:
      type: f75371fa
      description: <p>Duration of a lease before it expires unless renewed, specified in milliseconds. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.leaseStoreExists()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: leaseStoreExists()
  nameWithType: ILeaseManager.leaseStoreExists()
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.leaseStoreExists()
  type: Method
  summary: >-
    <p>Does the lease store exist?</p>

    <p>The returned CompletableFuture completes with true if the checkpoint store exists or false if it does not. It completes exceptionally on error.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> leaseStoreExists()
    return:
      type: 7e53ac82
      description: <p>CompletableFuture { -&gt;} true if it exists, false if not </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: createLeaseStoreIfNotExists()
  nameWithType: ILeaseManager.createLeaseStoreIfNotExists()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseStoreIfNotExists()
  type: Method
  summary: >-
    <p>Create the lease store if it does not exist, do nothing if it does exist.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> createLeaseStoreIfNotExists()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLeaseStore()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: deleteLeaseStore()
  nameWithType: ILeaseManager.deleteLeaseStore()
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLeaseStore()
  type: Method
  summary: >-
    <p>Deletes the lease store.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deleteLeaseStore()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._lease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._lease.yml
  name: Lease
  nameWithType: Lease
  fullName: com.microsoft.azure.eventprocessorhost.Lease
  type: Class
  summary: >-
    <p>

      <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> class is public so that advanced users can implement an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. Unless you are implementing <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> you should not have to deal with objects of this class or derived classes directly.</p>

    <p>When implementing an <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref> it may be necessary to derive from this class to carry around more information and override isExpired. The data fields have been left private instead of protected because they have a full set of getters and setters (except partitionId, which is immutable) which provide equivalent access. When implementing AzureBlobLease, for example, there was no need for more access than the getters and setters provide.</p>

    <p>Note that a <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> object just carries information about a partition lease. The APIs to acquire/renew/release a lease are all on <xref uid="com.microsoft.azure.eventprocessorhost._i_lease_manager" data-throw-if-not-resolved="false">ILeaseManager</xref>. </p>
  syntax:
    content: public class Lease
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.getAllLeases()
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: getAllLeases()
  nameWithType: ILeaseManager.getAllLeases()
  fullName: CompletableFuture<List<Lease>> com.microsoft.azure.eventprocessorhost.ILeaseManager.getAllLeases()
  type: Method
  summary: >-
    <p>Returns the lease info for all partitions.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<List<Lease>> getAllLeases()
    return:
      type: 0eb76d20com.microsoft.azure.eventprocessorhost._leasee7daa122
      description: <p>CompletableFuture { -&gt;} list of Leases, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.createLeaseIfNotExists(String)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: createLeaseIfNotExists(String partitionId)
  nameWithType: ILeaseManager.createLeaseIfNotExists(String partitionId)
  fullName: CompletableFuture<Lease> com.microsoft.azure.eventprocessorhost.ILeaseManager.createLeaseIfNotExists(String partitionId)
  type: Method
  summary: >-
    <p>Create in the store the lease for the given partition, if it does not exist. Do nothing if it exists in the store already.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Lease> createLeaseIfNotExists(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: <p>id of partition to create lease info for </p>
    return:
      type: 9cdf14d0com.microsoft.azure.eventprocessorhost._leasea08ddfce
      description: <p>CompletableFuture { -&gt;} the existing or newly-created lease info for the partition, completes exceptionally on error </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.deleteLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: deleteLease(Lease lease)
  nameWithType: ILeaseManager.deleteLease(Lease lease)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.deleteLease(Lease lease)
  type: Method
  summary: >-
    <p>Delete the lease info for a partition from the store. If there is no stored lease for the given partition, that is treated as success.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> deleteLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: <p>the currently existing lease info for the partition </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.acquireLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: acquireLease(Lease lease)
  nameWithType: ILeaseManager.acquireLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.acquireLease(Lease lease)
  type: Method
  summary: >-
    <p>Acquire the lease on the desired partition for this <xref uid="com.microsoft.azure.eventprocessorhost._event_processor_host" data-throw-if-not-resolved="false">EventProcessorHost</xref>.</p>

    <p>Note that it is legal to acquire a lease that is currently owned by another host, which is called "stealing". Lease-stealing is how partitions are redistributed when additional hosts are started.</p>

    <p>The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time. To avoid situations where two host instances both believe that they own the lease, acquisition can fail non-exceptionally by returning false and should do so when there is any doubt <ndash></ndash> the worst that can happen is that no host instance owns the lease for a short time. This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error and should complete exceptionally.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> acquireLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> info for the desired partition </p>
    return:
      type: 7e53ac82
      description: <p>CompletableFuture { -&gt;} true if the lease was acquired, false if not, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._event_processor_host
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost._event_processor_host.yml
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost
  type: Class
  syntax:
    content: public class EventProcessorHost
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.renewLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: renewLease(Lease lease)
  nameWithType: ILeaseManager.renewLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(Lease lease)
  type: Method
  summary: >-
    <p>Renew a lease currently held by this host instance.</p>

    <p>If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false. With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient. If it does not, renewLease should return false.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> renewLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be renewed </p>
    return:
      type: 7e53ac82
      description: <p>true if the lease was renewed, false as described above, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.releaseLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: releaseLease(Lease lease)
  nameWithType: ILeaseManager.releaseLease(Lease lease)
  fullName: CompletableFuture<Void> com.microsoft.azure.eventprocessorhost.ILeaseManager.releaseLease(Lease lease)
  type: Method
  summary: >-
    <p>Give up a lease currently held by this host.</p>

    <p>If the lease has expired or been taken by another host, releasing it is unnecessary but will succeed since the intent has been fulfilled.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Void> releaseLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: >-
        <p>

          <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> to be given up </p>
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost._i_lease_manager.updateLease(Lease)
  parent: com.microsoft.azure.eventprocessorhost._i_lease_manager
  href: com.microsoft.azure.eventprocessorhost._i_lease_manager.yml
  name: updateLease(Lease lease)
  nameWithType: ILeaseManager.updateLease(Lease lease)
  fullName: CompletableFuture<Boolean> com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease(Lease lease)
  type: Method
  summary: >-
    <p>Update the store with the information in the provided lease.</p>

    <p>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or released, it cannot be updated. <xref uid="com.microsoft.azure.eventprocessorhost._lease" data-throw-if-not-resolved="false">Lease</xref> manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<Boolean> updateLease(Lease lease)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost._lease
      description: <p>New lease info to be stored </p>
    return:
      type: 7e53ac82
      description: <p>true if the update was successful, false if lease was lost and could not be updated, completes exceptionally on error. </p>
