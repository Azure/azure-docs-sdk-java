### YamlMime:JavaType
uid: "com.azure.cosmos.CosmosAsyncDatabase"
fullName: "com.azure.cosmos.CosmosAsyncDatabase"
name: "CosmosAsyncDatabase"
nameWithType: "CosmosAsyncDatabase"
summary: "Perform read and delete databases, update database throughput, and perform operations on child resources"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosAsyncDatabase"
methods:
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey(com.azure.cosmos.models.CosmosClientEncryptionKeyProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createClientEncryptionKey(CosmosClientEncryptionKeyProperties keyProperties)"
  name: "createClientEncryptionKey(CosmosClientEncryptionKeyProperties keyProperties)"
  nameWithType: "CosmosAsyncDatabase.createClientEncryptionKey(CosmosClientEncryptionKeyProperties keyProperties)"
  summary: "Creates a client encryption key after subscription the operation will be performed."
  parameters:
  - description: "the cosmos client encryption key properties"
    name: "keyProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosClientEncryptionKeyResponse> createClientEncryptionKey(CosmosClientEncryptionKeyProperties keyProperties)"
  desc: "Creates a client encryption key after subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created client encryption key. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n created cosmos client encryption key or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyResponse?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyResponse&text=CosmosClientEncryptionKeyResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)"
  name: "createContainer(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)"
  summary: "Creates a Cosmos container."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties)"
  desc: "Creates a Cosmos container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos container response with\n the created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  name: "createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  summary: "Creates a Cosmos container."
  parameters:
  - description: "the containerProperties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the cosmos container request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  desc: "Creates a Cosmos container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  name: "createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  summary: "Creates a Cosmos container with custom throughput properties."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the container."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  desc: "Creates a Cosmos container with custom throughput properties.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos container response with\n the created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)"
  name: "createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)"
  summary: "Creates a container."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerRequestOptions?alt=com.azure.cosmos.models.CosmosContainerRequestOptions&text=CosmosContainerRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)"
  desc: "Creates a container."
  returns:
    description: "the mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)"
  name: "createContainer(String id, String partitionKeyPath)"
  nameWithType: "CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)"
  summary: "Creates a Cosmos container."
  parameters:
  - description: "the cosmos container id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key path."
    name: "partitionKeyPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(String id, String partitionKeyPath)"
  desc: "Creates a Cosmos container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  name: "createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  summary: "Creates a Cosmos container."
  parameters:
  - description: "the cosmos container id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key path."
    name: "partitionKeyPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the container."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  desc: "Creates a Cosmos container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  summary: "Creates a Cosmos container if it does not exist on the service."
  parameters:
  - description: "the container properties"
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  desc: "Creates a Cosmos container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created or existing container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  summary: "Creates a Cosmos container if it does not exist on the service."
  parameters:
  - description: "the container properties."
    name: "containerProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the container."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)"
  desc: "Creates a Cosmos container if it does not exist on the service.\n\nThe throughput properties will only be used if the specified container does not exist and therefor a new container will be created. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created or existing container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  name: "createContainerIfNotExists(String id, String partitionKeyPath)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  summary: "Creates a Cosmos container if it does not exist on the service."
  parameters:
  - description: "the cosmos container id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key path."
    name: "partitionKeyPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath)"
  desc: "Creates a Cosmos container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  name: "createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  summary: "Creates a Cosmos container if it does not exist on the service."
  parameters:
  - description: "the cosmos container id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the partition key path."
    name: "partitionKeyPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the throughput properties for the container."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)"
  desc: "Creates a Cosmos container if it does not exist on the service.\n\nThe throughput properties will only be used if the specified container does not exist and therefor a new container will be created. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the cosmos container response with the\n created container or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerResponse?alt=com.azure.cosmos.models.CosmosContainerResponse&text=CosmosContainerResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)"
  name: "createUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)"
  summary: "Creates a user After subscription the operation will be performed."
  parameters:
  - description: "the cosmos user properties"
    name: "userProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosUserResponse> createUser(CosmosUserProperties userProperties)"
  desc: "Creates a user After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n created cosmos user or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserResponse?alt=com.azure.cosmos.models.CosmosUserResponse&text=CosmosUserResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.delete()"
  name: "delete()"
  nameWithType: "CosmosAsyncDatabase.delete()"
  summary: "Deletes a database."
  syntax: "public Mono<CosmosDatabaseResponse> delete()"
  desc: "Deletes a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)"
  name: "delete(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)"
  summary: "Deletes a database."
  parameters:
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions?alt=com.azure.cosmos.models.CosmosDatabaseRequestOptions&text=CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> delete(CosmosDatabaseRequestOptions options)"
  desc: "Deletes a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getClientEncryptionKey(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getClientEncryptionKey(String id)"
  name: "getClientEncryptionKey(String id)"
  nameWithType: "CosmosAsyncDatabase.getClientEncryptionKey(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>Client<wbr>Encryption<wbr>Key object without making a service call"
  parameters:
  - description: "id of the clientEncryptionKey"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncClientEncryptionKey getClientEncryptionKey(String id)"
  desc: "Gets a CosmosAsyncClientEncryptionKey object without making a service call"
  returns:
    description: "Cosmos ClientEncryptionKey"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncClientEncryptionKey?alt=com.azure.cosmos.CosmosAsyncClientEncryptionKey&text=CosmosAsyncClientEncryptionKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getContainer(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getContainer(String id)"
  name: "getContainer(String id)"
  nameWithType: "CosmosAsyncDatabase.getContainer(String id)"
  summary: "Gets a Cosmos<wbr>Async<wbr>Container object without making a service call"
  parameters:
  - description: "id of the container"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncContainer getContainer(String id)"
  desc: "Gets a CosmosAsyncContainer object without making a service call"
  returns:
    description: "Cosmos Container"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncContainer?alt=com.azure.cosmos.CosmosAsyncContainer&text=CosmosAsyncContainer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getId()"
  name: "getId()"
  nameWithType: "CosmosAsyncDatabase.getId()"
  summary: "Get the id of the Cosmos<wbr>Async<wbr>Database."
  syntax: "public String getId()"
  desc: "Get the id of the CosmosAsyncDatabase."
  returns:
    description: "the id of the CosmosAsyncDatabase."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getUser(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getUser(String id)"
  name: "getUser(String id)"
  nameWithType: "CosmosAsyncDatabase.getUser(String id)"
  summary: "Gets user."
  parameters:
  - description: "the id"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosAsyncUser getUser(String id)"
  desc: "Gets user."
  returns:
    description: "the user"
    type: "<xref href=\"com.azure.cosmos.CosmosAsyncUser?alt=com.azure.cosmos.CosmosAsyncUser&text=CosmosAsyncUser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(com.azure.cosmos.models.SqlQuerySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(SqlQuerySpec querySpec)"
  name: "queryClientEncryptionKeys(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncDatabase.queryClientEncryptionKeys(SqlQuerySpec querySpec)"
  summary: "Query for cosmos client encryption keys in a database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> queryClientEncryptionKeys(SqlQuerySpec querySpec)"
  desc: "Query for cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryClientEncryptionKeys(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryClientEncryptionKeys(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos client encryption keys in a database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> queryClientEncryptionKeys(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(String query)"
  name: "queryClientEncryptionKeys(String query)"
  nameWithType: "CosmosAsyncDatabase.queryClientEncryptionKeys(String query)"
  summary: "Query for cosmos client encryption keys in a database."
  parameters:
  - description: "query as string."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> queryClientEncryptionKeys(String query)"
  desc: "Query for cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryClientEncryptionKeys(String query, CosmosQueryRequestOptions options)"
  name: "queryClientEncryptionKeys(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryClientEncryptionKeys(String query, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos client encryption keys in a database."
  parameters:
  - description: "query as string."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> queryClientEncryptionKeys(String query, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)"
  name: "queryContainers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)"
  summary: "Query for cosmos containers in a cosmos database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec)"
  desc: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos containers in a cosmos database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query)"
  name: "queryContainers(String query)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(String query)"
  summary: "Query for cosmos containers in a cosmos database."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query)"
  desc: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query, CosmosQueryRequestOptions options)"
  name: "queryContainers(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(String query, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos containers in a cosmos database."
  parameters:
  - description: "the query."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)"
  name: "queryUsers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)"
  summary: "Query for cosmos users in a database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec)"
  desc: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained users or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  name: "queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos users in a database."
  parameters:
  - description: "the SQL query specification."
    name: "querySpec"
    type: "<xref href=\"com.azure.cosmos.models.SqlQuerySpec?alt=com.azure.cosmos.models.SqlQuerySpec&text=SqlQuerySpec\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained users or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query)"
  name: "queryUsers(String query)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(String query)"
  summary: "Query for cosmos users in a database."
  parameters:
  - description: "query as string."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query)"
  desc: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained users or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query, CosmosQueryRequestOptions options)"
  name: "queryUsers(String query, CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(String query, CosmosQueryRequestOptions options)"
  summary: "Query for cosmos users in a database."
  parameters:
  - description: "query as string."
    name: "query"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options)"
  desc: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n obtained users or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.read()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.read()"
  name: "read()"
  nameWithType: "CosmosAsyncDatabase.read()"
  summary: "Reads a database."
  syntax: "public Mono<CosmosDatabaseResponse> read()"
  desc: "Reads a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single cosmos database respone with the read database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database respone with\n the read database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)"
  name: "read(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)"
  summary: "Reads a database."
  parameters:
  - description: "the request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions?alt=com.azure.cosmos.models.CosmosDatabaseRequestOptions&text=CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosDatabaseResponse> read(CosmosDatabaseRequestOptions options)"
  desc: "Reads a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a cosmos cosmos database respone with the read database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single cosmos database response with\n the read database or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosDatabaseResponse?alt=com.azure.cosmos.models.CosmosDatabaseResponse&text=CosmosDatabaseResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys()"
  name: "readAllClientEncryptionKeys()"
  nameWithType: "CosmosAsyncDatabase.readAllClientEncryptionKeys()"
  summary: "Reads all cosmos client encryption keys in a database."
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> readAllClientEncryptionKeys()"
  desc: "Reads all cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read cosmos client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n read cosmos client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys(com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllClientEncryptionKeys(CosmosQueryRequestOptions options)"
  name: "readAllClientEncryptionKeys(CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.readAllClientEncryptionKeys(CosmosQueryRequestOptions options)"
  summary: "Reads all cosmos client encryption keys in a database."
  parameters:
  - description: "the query request options."
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosClientEncryptionKeyProperties> readAllClientEncryptionKeys(CosmosQueryRequestOptions options)"
  desc: "Reads all cosmos client encryption keys in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read cosmos client encryption keys. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n read cosmos client encryption keys or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosClientEncryptionKeyProperties?alt=com.azure.cosmos.models.CosmosClientEncryptionKeyProperties&text=CosmosClientEncryptionKeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()"
  name: "readAllContainers()"
  nameWithType: "CosmosAsyncDatabase.readAllContainers()"
  summary: "Reads all cosmos containers."
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> readAllContainers()"
  desc: "Reads all cosmos containers.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of read\n containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(com.azure.cosmos.models.CosmosQueryRequestOptions)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(CosmosQueryRequestOptions options)"
  name: "readAllContainers(CosmosQueryRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.readAllContainers(CosmosQueryRequestOptions options)"
  summary: "Reads all cosmos containers."
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosPagedFlux<CosmosContainerProperties> readAllContainers(CosmosQueryRequestOptions options)"
  desc: "Reads all cosmos containers.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read containers. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of read\n containers or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()"
  name: "readAllUsers()"
  nameWithType: "CosmosAsyncDatabase.readAllUsers()"
  summary: "Reads all cosmos users in a database."
  syntax: "public CosmosPagedFlux<CosmosUserProperties> readAllUsers()"
  desc: "Reads all cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will contain one or several feed response of the read cosmos users. In case of failure the <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> will error."
  returns:
    description: "a <xref uid=\"com.azure.cosmos.util.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosPagedFlux\"></xref> containing one or several feed response pages of the\n read cosmos users or an error."
    type: "<xref href=\"com.azure.cosmos.util.CosmosPagedFlux?alt=com.azure.cosmos.util.CosmosPagedFlux&text=CosmosPagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readThroughput()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readThroughput()"
  name: "readThroughput()"
  nameWithType: "CosmosAsyncDatabase.readThroughput()"
  summary: "Gets the throughput of the database."
  syntax: "public Mono<ThroughputResponse> readThroughput()"
  desc: "Gets the throughput of the database."
  returns:
    description: "the mono containing throughput response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput(ThroughputProperties throughputProperties)"
  name: "replaceThroughput(ThroughputProperties throughputProperties)"
  nameWithType: "CosmosAsyncDatabase.replaceThroughput(ThroughputProperties throughputProperties)"
  summary: "Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service."
  parameters:
  - description: "the throughput properties."
    name: "throughputProperties"
    type: "<xref href=\"com.azure.cosmos.models.ThroughputProperties?alt=com.azure.cosmos.models.ThroughputProperties&text=ThroughputProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties)"
  desc: "Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service."
  returns:
    description: "the mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.ThroughputResponse?alt=com.azure.cosmos.models.ThroughputResponse&text=ThroughputResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)"
  name: "upsertUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)"
  summary: "Upsert a user."
  parameters:
  - description: "the cosmos user properties"
    name: "userProperties"
    type: "<xref href=\"com.azure.cosmos.models.CosmosUserProperties?alt=com.azure.cosmos.models.CosmosUserProperties&text=CosmosUserProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CosmosUserResponse> upsertUser(CosmosUserProperties userProperties)"
  desc: "Upsert a user. Upsert will create a new user if it doesn't exist, or replace the existing one if it does. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will error."
  returns:
    description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the single resource response with the\n upserted user or an error."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.cosmos.models.CosmosUserResponse?alt=com.azure.cosmos.models.CosmosUserResponse&text=CosmosUserResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Perform read and delete databases, update database throughput, and perform operations on child resources"
metadata: {}
package: "com.azure.cosmos"
artifact: com.azure:azure-cosmos:4.35.0
