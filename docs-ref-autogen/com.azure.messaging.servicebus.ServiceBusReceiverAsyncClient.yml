### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient"
fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient"
name: "ServiceBusReceiverAsyncClient"
nameWithType: "ServiceBusReceiverAsyncClient"
summary: "An **asynchronous** receiver responsible for receiving <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> from a specific queue or topic subscription."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusReceiverAsyncClient implements AutoCloseable"
methods:
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.abandon(ServiceBusReceivedMessage message)"
  name: "abandon(ServiceBusReceivedMessage message)"
  nameWithType: "ServiceBusReceiverAsyncClient.abandon(ServiceBusReceivedMessage message)"
  summary: "Abandons a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> abandon(ServiceBusReceivedMessage message)"
  desc: "Abandons a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the Service Bus abandon operation completes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.abandon(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.AbandonOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.abandon(ServiceBusReceivedMessage message, AbandonOptions options)"
  name: "abandon(ServiceBusReceivedMessage message, AbandonOptions options)"
  nameWithType: "ServiceBusReceiverAsyncClient.abandon(ServiceBusReceivedMessage message, AbandonOptions options)"
  summary: "Abandons a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> updates the message's properties."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to set while abandoning the message."
    name: "options"
    type: "<xref href=\"com.azure.messaging.servicebus.models.AbandonOptions?alt=com.azure.messaging.servicebus.models.AbandonOptions&text=AbandonOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> abandon(ServiceBusReceivedMessage message, AbandonOptions options)"
  desc: "Abandons a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> updates the message's properties. This will make the message available again for processing. Abandoning a message will increase the delivery count on the message."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the Service Bus operation finishes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.close()"
  name: "close()"
  nameWithType: "ServiceBusReceiverAsyncClient.close()"
  summary: "Disposes of the consumer by closing the underlying links to the service."
  syntax: "public void close()"
  desc: "Disposes of the consumer by closing the underlying links to the service."
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.commitTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.commitTransaction(ServiceBusTransactionContext transactionContext)"
  name: "commitTransaction(ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusReceiverAsyncClient.commitTransaction(ServiceBusTransactionContext transactionContext)"
  summary: "Commits the transaction and all the operations associated with it."
  parameters:
  - description: "The transaction to be commit."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> commitTransaction(ServiceBusTransactionContext transactionContext)"
  desc: "Commits the transaction and all the operations associated with it.\n\n**Creating and using a transaction**\n\n```java\n// This mono creates a transaction and caches the output value, so we can associate operations with the\n // transaction. It does not cache the value if it is an error or completes with no items, effectively retrying\n // the operation.\n Mono<ServiceBusTransactionContext> transactionContext = receiver.createTransaction()\n     .cache(value -> Duration.ofMillis(Long.MAX_VALUE),\n         error -> Duration.ZERO,\n         () -> Duration.ZERO);\n\n transactionContext.flatMap(transaction -> {\n     // Process messages and associate operations with the transaction.\n     Mono<Void> operations = Mono.when(\n         receiver.receiveDeferredMessage(sequenceNumber).flatMap(message ->\n             receiver.complete(message, new CompleteOptions().setTransactionContext(transaction))),\n         receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction)));\n\n     // Finally, either commit or rollback the transaction once all the operations are associated with it.\n     return operations.flatMap(transactionOperations -> receiver.commitTransaction(transaction));\n });\n```"
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.complete(ServiceBusReceivedMessage message)"
  name: "complete(ServiceBusReceivedMessage message)"
  nameWithType: "ServiceBusReceiverAsyncClient.complete(ServiceBusReceivedMessage message)"
  summary: "Completes a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> complete(ServiceBusReceivedMessage message)"
  desc: "Completes a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>. This will delete the message from the service."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes when the message is completed on Service Bus."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.complete(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.CompleteOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.complete(ServiceBusReceivedMessage message, CompleteOptions options)"
  name: "complete(ServiceBusReceivedMessage message, CompleteOptions options)"
  nameWithType: "ServiceBusReceiverAsyncClient.complete(ServiceBusReceivedMessage message, CompleteOptions options)"
  summary: "Completes a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> with the given options."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options used to complete the message."
    name: "options"
    type: "<xref href=\"com.azure.messaging.servicebus.models.CompleteOptions?alt=com.azure.messaging.servicebus.models.CompleteOptions&text=CompleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> complete(ServiceBusReceivedMessage message, CompleteOptions options)"
  desc: "Completes a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> with the given options. This will delete the message from the service."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes when the message is completed on Service Bus."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.createTransaction()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.createTransaction()"
  name: "createTransaction()"
  nameWithType: "ServiceBusReceiverAsyncClient.createTransaction()"
  summary: "Starts a new service side transaction."
  syntax: "public Mono<ServiceBusTransactionContext> createTransaction()"
  desc: "Starts a new service side transaction. The <xref uid=\"com.azure.messaging.servicebus.ServiceBusTransactionContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"transaction context\"></xref> should be passed to all operations that needs to be in this transaction.\n\n**Creating and using a transaction**\n\n```java\n// This mono creates a transaction and caches the output value, so we can associate operations with the\n // transaction. It does not cache the value if it is an error or completes with no items, effectively retrying\n // the operation.\n Mono<ServiceBusTransactionContext> transactionContext = receiver.createTransaction()\n     .cache(value -> Duration.ofMillis(Long.MAX_VALUE),\n         error -> Duration.ZERO,\n         () -> Duration.ZERO);\n\n transactionContext.flatMap(transaction -> {\n     // Process messages and associate operations with the transaction.\n     Mono<Void> operations = Mono.when(\n         receiver.receiveDeferredMessage(sequenceNumber).flatMap(message ->\n             receiver.complete(message, new CompleteOptions().setTransactionContext(transaction))),\n         receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction)));\n\n     // Finally, either commit or rollback the transaction once all the operations are associated with it.\n     return operations.flatMap(transactionOperations -> receiver.commitTransaction(transaction));\n });\n```"
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.deadLetter(ServiceBusReceivedMessage message)"
  name: "deadLetter(ServiceBusReceivedMessage message)"
  nameWithType: "ServiceBusReceiverAsyncClient.deadLetter(ServiceBusReceivedMessage message)"
  summary: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> to the dead-letter sub-queue."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deadLetter(ServiceBusReceivedMessage message)"
  desc: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> to the dead-letter sub-queue."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the dead letter operation finishes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.deadLetter(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeadLetterOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)"
  name: "deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)"
  nameWithType: "ServiceBusReceiverAsyncClient.deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)"
  summary: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> to the dead-letter sub-queue with the given options."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options used to dead-letter the message."
    name: "options"
    type: "<xref href=\"com.azure.messaging.servicebus.models.DeadLetterOptions?alt=com.azure.messaging.servicebus.models.DeadLetterOptions&text=DeadLetterOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deadLetter(ServiceBusReceivedMessage message, DeadLetterOptions options)"
  desc: "Moves a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> to the dead-letter sub-queue with the given options."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the dead letter operation finishes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.defer(ServiceBusReceivedMessage message)"
  name: "defer(ServiceBusReceivedMessage message)"
  nameWithType: "ServiceBusReceiverAsyncClient.defer(ServiceBusReceivedMessage message)"
  summary: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> defer(ServiceBusReceivedMessage message)"
  desc: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>. This will move message into the deferred sub-queue."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the Service Bus defer operation finishes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.defer(com.azure.messaging.servicebus.ServiceBusReceivedMessage,com.azure.messaging.servicebus.models.DeferOptions)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.defer(ServiceBusReceivedMessage message, DeferOptions options)"
  name: "defer(ServiceBusReceivedMessage message, DeferOptions options)"
  nameWithType: "ServiceBusReceiverAsyncClient.defer(ServiceBusReceivedMessage message, DeferOptions options)"
  summary: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> with the options set."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options used to defer the message."
    name: "options"
    type: "<xref href=\"com.azure.messaging.servicebus.models.DeferOptions?alt=com.azure.messaging.servicebus.models.DeferOptions&text=DeferOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> defer(ServiceBusReceivedMessage message, DeferOptions options)"
  desc: "Defers a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref> with the options set. This will move message into the deferred sub-queue."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the defer operation finishes."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getEntityPath()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getEntityPath()"
  name: "getEntityPath()"
  nameWithType: "ServiceBusReceiverAsyncClient.getEntityPath()"
  summary: "Gets the Service Bus resource this client interacts with."
  syntax: "public String getEntityPath()"
  desc: "Gets the Service Bus resource this client interacts with."
  returns:
    description: "The Service Bus resource this client interacts with."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getFullyQualifiedNamespace()"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "ServiceBusReceiverAsyncClient.getFullyQualifiedNamespace()"
  summary: "Gets the fully qualified Service Bus namespace that the connection is associated with."
  syntax: "public String getFullyQualifiedNamespace()"
  desc: "Gets the fully qualified Service Bus namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  returns:
    description: "The fully qualified Service Bus namespace that the connection is associated with."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getSessionId()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getSessionId()"
  name: "getSessionId()"
  nameWithType: "ServiceBusReceiverAsyncClient.getSessionId()"
  summary: "Gets the Session<wbr>Id of the session if this receiver is a session receiver."
  syntax: "public String getSessionId()"
  desc: "Gets the SessionId of the session if this receiver is a session receiver."
  returns:
    description: "The SessionId or null if this is not a session receiver."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getSessionState()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.getSessionState()"
  name: "getSessionState()"
  nameWithType: "ServiceBusReceiverAsyncClient.getSessionState()"
  summary: "Gets the state of the session if this receiver is a session receiver."
  syntax: "public Mono<byte[]> getSessionState()"
  desc: "Gets the state of the session if this receiver is a session receiver."
  returns:
    description: "The session state or an empty Mono if there is no state set for the session."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessage()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessage()"
  name: "peekMessage()"
  nameWithType: "ServiceBusReceiverAsyncClient.peekMessage()"
  summary: "Reads the next active message without changing the state of the receiver or the message source."
  syntax: "public Mono<ServiceBusReceivedMessage> peekMessage()"
  desc: "Reads the next active message without changing the state of the receiver or the message source. The first call to `peek()` fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity."
  returns:
    description: "A peeked <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessage(long)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessage(long sequenceNumber)"
  name: "peekMessage(long sequenceNumber)"
  nameWithType: "ServiceBusReceiverAsyncClient.peekMessage(long sequenceNumber)"
  summary: "Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source."
  parameters:
  - description: "The sequence number from where to read the message."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ServiceBusReceivedMessage> peekMessage(long sequenceNumber)"
  desc: "Starting from the given sequence number, reads next the active message without changing the state of the receiver or the message source."
  returns:
    description: "A peeked <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessages(int)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessages(int maxMessages)"
  name: "peekMessages(int maxMessages)"
  nameWithType: "ServiceBusReceiverAsyncClient.peekMessages(int maxMessages)"
  summary: "Reads the next batch of active messages without changing the state of the receiver or the message source."
  parameters:
  - description: "The number of messages."
    name: "maxMessages"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ServiceBusReceivedMessage> peekMessages(int maxMessages)"
  desc: "Reads the next batch of active messages without changing the state of the receiver or the message source."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> that are peeked."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessages(int,long)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.peekMessages(int maxMessages, long sequenceNumber)"
  name: "peekMessages(int maxMessages, long sequenceNumber)"
  nameWithType: "ServiceBusReceiverAsyncClient.peekMessages(int maxMessages, long sequenceNumber)"
  summary: "Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source."
  parameters:
  - description: "The number of messages."
    name: "maxMessages"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "The sequence number from where to start reading messages."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ServiceBusReceivedMessage> peekMessages(int maxMessages, long sequenceNumber)"
  desc: "Starting from the given sequence number, reads the next batch of active messages without changing the state of the receiver or the message source."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> peeked."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveDeferredMessage(long)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveDeferredMessage(long sequenceNumber)"
  name: "receiveDeferredMessage(long sequenceNumber)"
  nameWithType: "ServiceBusReceiverAsyncClient.receiveDeferredMessage(long sequenceNumber)"
  summary: "Receives a deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"sequence number\"></xref> of the\n     message."
    name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ServiceBusReceivedMessage> receiveDeferredMessage(long sequenceNumber)"
  desc: "Receives a deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>. Deferred messages can only be received by using sequence number."
  returns:
    description: "A deferred message with the matching <code>sequenceNumber</code>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveDeferredMessages(java.lang.Iterable<java.lang.Long>)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveDeferredMessages(Iterable<Long> sequenceNumbers)"
  name: "receiveDeferredMessages(Iterable<Long> sequenceNumbers)"
  nameWithType: "ServiceBusReceiverAsyncClient.receiveDeferredMessages(Iterable<Long> sequenceNumbers)"
  summary: "Receives a batch of deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref>."
  parameters:
  - description: "The sequence numbers of the deferred messages."
    name: "sequenceNumbers"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Flux<ServiceBusReceivedMessage> receiveDeferredMessages(Iterable<Long> sequenceNumbers)"
  desc: "Receives a batch of deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref>. Deferred messages can only be received by using sequence number."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveMessages()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveMessages()"
  name: "receiveMessages()"
  nameWithType: "ServiceBusReceiverAsyncClient.receiveMessages()"
  summary: "Receives an **infinite** stream of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> from the Service Bus entity."
  syntax: "public Flux<ServiceBusReceivedMessage> receiveMessages()"
  desc: "Receives an **infinite** stream of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> from the Service Bus entity. This Flux continuously receives messages from a Service Bus entity until either:\n\n *  The receiver is closed.\n *  The subscription to the Flux is disposed.\n *  A terminal signal from a downstream subscriber is propagated upstream (ie. <xref uid=\"reactor.core.publisher.Flux.take*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#take(long)\"></xref> or <xref uid=\"reactor.core.publisher.Flux.take*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux#take(Duration)\"></xref>).\n *  An <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AmqpException\"></xref> occurs that causes the receive link to stop."
  returns:
    description: "An <b>infinite</b> stream of messages from the Service Bus entity."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(ServiceBusReceivedMessage message)"
  name: "renewMessageLock(ServiceBusReceivedMessage message)"
  nameWithType: "ServiceBusReceiverAsyncClient.renewMessageLock(ServiceBusReceivedMessage message)"
  summary: "Asynchronously renews the lock on the message."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform auto-lock renewal."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<OffsetDateTime> renewMessageLock(ServiceBusReceivedMessage message)"
  desc: "Asynchronously renews the lock on the message. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.azure.messaging.servicebus.models.ServiceBusReceiveMode.PEEK_LOCK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiveMode#PEEK_LOCK\"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the entity creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value."
  returns:
    description: "The new expiration time for the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(com.azure.messaging.servicebus.ServiceBusReceivedMessage,java.time.Duration)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration)"
  name: "renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration)"
  nameWithType: "ServiceBusReceiverAsyncClient.renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration)"
  summary: "Starts the auto lock renewal for a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceivedMessage\"></xref> to perform this operation."
    name: "message"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage?alt=com.azure.messaging.servicebus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum duration to keep renewing the lock token."
    name: "maxLockRenewalDuration"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> renewMessageLock(ServiceBusReceivedMessage message, Duration maxLockRenewalDuration)"
  desc: "Starts the auto lock renewal for a <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"message\"></xref>."
  returns:
    description: "A Mono that completes when the message renewal operation has completed up until\n      <code>maxLockRenewalDuration</code>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewSessionLock()"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewSessionLock()"
  name: "renewSessionLock()"
  nameWithType: "ServiceBusReceiverAsyncClient.renewSessionLock()"
  summary: "Renews the session lock if this receiver is a session receiver."
  syntax: "public Mono<OffsetDateTime> renewSessionLock()"
  desc: "Renews the session lock if this receiver is a session receiver."
  returns:
    description: "The next expiration time for the session lock."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewSessionLock(java.time.Duration)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewSessionLock(Duration maxLockRenewalDuration)"
  name: "renewSessionLock(Duration maxLockRenewalDuration)"
  nameWithType: "ServiceBusReceiverAsyncClient.renewSessionLock(Duration maxLockRenewalDuration)"
  summary: "Starts the auto lock renewal for the session this receiver works for."
  parameters:
  - description: "Maximum duration to keep renewing the session lock."
    name: "maxLockRenewalDuration"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> renewSessionLock(Duration maxLockRenewalDuration)"
  desc: "Starts the auto lock renewal for the session this receiver works for."
  returns:
    description: "A lock renewal operation for the message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.rollbackTransaction(com.azure.messaging.servicebus.ServiceBusTransactionContext)"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  name: "rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  nameWithType: "ServiceBusReceiverAsyncClient.rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  summary: "Rollbacks the transaction given and all operations associated with it."
  parameters:
  - description: "The transaction to rollback."
    name: "transactionContext"
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusTransactionContext?alt=com.azure.messaging.servicebus.ServiceBusTransactionContext&text=ServiceBusTransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> rollbackTransaction(ServiceBusTransactionContext transactionContext)"
  desc: "Rollbacks the transaction given and all operations associated with it.\n\n**Creating and using a transaction**\n\n```java\n// This mono creates a transaction and caches the output value, so we can associate operations with the\n // transaction. It does not cache the value if it is an error or completes with no items, effectively retrying\n // the operation.\n Mono<ServiceBusTransactionContext> transactionContext = receiver.createTransaction()\n     .cache(value -> Duration.ofMillis(Long.MAX_VALUE),\n         error -> Duration.ZERO,\n         () -> Duration.ZERO);\n\n transactionContext.flatMap(transaction -> {\n     // Process messages and associate operations with the transaction.\n     Mono<Void> operations = Mono.when(\n         receiver.receiveDeferredMessage(sequenceNumber).flatMap(message ->\n             receiver.complete(message, new CompleteOptions().setTransactionContext(transaction))),\n         receiver.abandon(receivedMessage, new AbandonOptions().setTransactionContext(transaction)));\n\n     // Finally, either commit or rollback the transaction once all the operations are associated with it.\n     return operations.flatMap(transactionOperations -> receiver.commitTransaction(transaction));\n });\n```"
  returns:
    description: "The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that finishes this operation on service bus resource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.setSessionState(byte[])"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.setSessionState(byte[] sessionState)"
  name: "setSessionState(byte[] sessionState)"
  nameWithType: "ServiceBusReceiverAsyncClient.setSessionState(byte[] sessionState)"
  summary: "Sets the state of the session this receiver works for."
  parameters:
  - description: "State to set on the session."
    name: "sessionState"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Mono<Void> setSessionState(byte[] sessionState)"
  desc: "Sets the state of the session this receiver works for."
  returns:
    description: "A Mono that completes when the session is set"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "An **asynchronous** receiver responsible for receiving <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"messages\"></xref> from a specific queue or topic subscription.\n\n**Create an instance of receiver**\n\n```java\n// The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n // The connectionString/queueName must be set by the application. The 'connectionString' format is shown below.\n // \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\"\n\n ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .receiver()\n     .queueName(queueName)\n     .buildAsyncClient();\n```\n\n**Create an instance of receiver using default credential**\n\n```java\n// The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n     .credential(\"<<fully-qualified-namespace>>\",\n         new DefaultAzureCredentialBuilder().build())\n     .receiver()\n     .queueName(\"<< QUEUE NAME >>\")\n     .buildAsyncClient();\n```\n\n**Receive all messages from Service Bus resource**\n\nThis returns an infinite stream of messages from Service Bus. The stream ends when the subscription is disposed or other terminal scenarios. See <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.receiveMessages()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#receiveMessages()\"></xref> for more information.\n\n```java\nDisposable subscription = receiver.receiveMessages()\n     .subscribe(message -> {\n         System.out.printf(\"Received Seq #: %s%n\", message.getSequenceNumber());\n         System.out.printf(\"Contents of message as string: %s%n\", message.getBody());\n     },\n         error -> System.out.println(\"Error occurred: \" + error),\n         () -> System.out.println(\"Receiving complete.\"));\n\n // When program ends, or you're done receiving all messages.\n subscription.dispose();\n receiver.close();\n```\n\n**Receive messages in <xref uid=\"com.azure.messaging.servicebus.models.ServiceBusReceiveMode.RECEIVE_AND_DELETE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiveMode#RECEIVE_AND_DELETE\"></xref> mode from a Service Bus entity**\n\n```java\n// Keep a reference to `subscription`. When the program is finished receiving messages, call\n // subscription.dispose(). This will stop fetching messages from the Service Bus.\n Disposable subscription = receiver.receiveMessages()\n     .subscribe(message -> {\n         System.out.printf(\"Received Seq #: %s%n\", message.getSequenceNumber());\n         System.out.printf(\"Contents of message as string: %s%n\", message.getBody().toString());\n     }, error -> System.err.print(error));\n```\n\n**Receive messages from a specific session**\n\nTo fetch messages from a specific session, switch to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSessionReceiverClientBuilder\"></xref> and build the session receiver client. Use <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptSession(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSessionReceiverAsyncClient#acceptSession(String)\"></xref> to create a session-bound <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiverAsyncClient\"></xref>.\n\n```java\n// The connectionString/queueName must be set by the application. The 'connectionString' format is shown below.\n // \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\"\n ServiceBusSessionReceiverAsyncClient sessionReceiver = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sessionReceiver()\n     .queueName(queueName)\n     .buildAsyncClient();\n\n // acceptSession(String) completes successfully with a receiver when \"<< my-session-id >>\" session is\n // successfully locked.\n // `Flux.usingWhen` is used so we dispose of the receiver resource after `receiveMessages()` completes.\n // `Mono.usingWhen` can also be used if the resource closure only returns a single item.\n Flux<ServiceBusReceivedMessage> sessionMessages = Flux.usingWhen(\n     sessionReceiver.acceptSession(\"<< my-session-id >>\"),\n     receiver -> receiver.receiveMessages(),\n     receiver -> Mono.fromRunnable(() -> receiver.close()));\n\n // When program ends, or you're done receiving all messages, the `subscription` can be disposed of. This code\n // is non-blocking and kicks off the operation.\n Disposable subscription = sessionMessages.subscribe(\n     message -> System.out.printf(\"Received Sequence #: %s. Contents: %s%n\",\n         message.getSequenceNumber(), message.getBody()),\n     error -> System.err.print(error));\n```\n\n**Receive messages from the first available session**\n\nTo process messages from the first available session, switch to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSessionReceiverClientBuilder\"></xref> and build the session receiver client. Use <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient.acceptNextSession()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"acceptNextSession()\"></xref> to find the first available session to process messages from.\n\n```java\n// The connectionString/queueName must be set by the application. The 'connectionString' format is shown below.\n // \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\"\n ServiceBusSessionReceiverAsyncClient sessionReceiver = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sessionReceiver()\n     .queueName(queueName)\n     .buildAsyncClient();\n\n // acceptNextSession() completes successfully with a receiver when it acquires the next available session.\n // `Flux.usingWhen` is used so we dispose of the receiver resource after `receiveMessages()` completes.\n // `Mono.usingWhen` can also be used if the resource closure only returns a single item.\n Flux<ServiceBusReceivedMessage> sessionMessages = Flux.usingWhen(\n     sessionReceiver.acceptNextSession(),\n     receiver -> receiver.receiveMessages(),\n     receiver -> Mono.fromRunnable(() -> receiver.close()));\n\n // When program ends, or you're done receiving all messages, the `subscription` can be disposed of. This code\n // is non-blocking and kicks off the operation.\n Disposable subscription = sessionMessages.subscribe(\n     message -> System.out.printf(\"Received Sequence #: %s. Contents: %s%n\",\n         message.getSequenceNumber(), message.getBody()),\n     error -> System.err.print(error));\n```\n\n**Rate limiting consumption of messages from a Service Bus entity**\n\nFor message receivers that need to limit the number of messages they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BaseSubscriber#request(long)\"></xref>.\n\n```java\nreceiver.receiveMessages().subscribe(new BaseSubscriber<ServiceBusReceivedMessage>() {\n     private static final int NUMBER_OF_MESSAGES = 5;\n     private final AtomicInteger currentNumberOfMessages = new AtomicInteger();\n\n     @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         // Tell the Publisher we only want 5 message at a time.\n         request(NUMBER_OF_MESSAGES);\n     }\n\n     @Override\n     protected void hookOnNext(ServiceBusReceivedMessage message) {\n         // Process the ServiceBusReceivedMessage\n         // If the number of messages we have currently received is a multiple of 5, that means we have reached\n         // the last message the Subscriber will provide to us. Invoking request(long) here, tells the Publisher\n         // that the subscriber is ready to get more messages from upstream.\n         if (currentNumberOfMessages.incrementAndGet() % 5 == 0) {\n             request(NUMBER_OF_MESSAGES);\n         }\n     }\n });\n```"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.10.1
