### YamlMime:JavaType
uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend"
fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>"
name: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>"
nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>"
summary: "The stage of a definition allowing to specify a frontend from to associate."
syntax: "public static interface HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>"
methods:
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingPublicIPAddress(com.microsoft.azure.management.network.PublicIPAddress)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  name: "fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  summary: "Specifies an existing public IP address to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing public IP address"
    name: "publicIPAddress"
    type: "<xref href=\"com.microsoft.azure.management.network.PublicIPAddress?alt=com.microsoft.azure.management.network.PublicIPAddress&text=PublicIPAddress\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)"
  desc: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingPublicIPAddress(java.lang.String)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  name: "fromExistingPublicIPAddress(String resourceId)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)"
  summary: "Specifies an existing public IP address to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "the resource ID of an existing public IP address"
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingPublicIPAddress(String resourceId)"
  desc: "Specifies an existing public IP address to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(com.microsoft.azure.management.network.Network,java.lang.String)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)"
  name: "fromExistingSubnet(Network network, String subnetName)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing network"
    name: "network"
    type: "<xref href=\"com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network\" data-throw-if-not-resolved=\"False\" />"
  - description: "the name of an existing subnet within the specified network"
    name: "subnetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingSubnet(Network network, String subnetName)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(com.microsoft.azure.management.network.Subnet)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)"
  name: "fromExistingSubnet(Subnet subnet)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing subnet"
    name: "subnet"
    type: "<xref href=\"com.microsoft.azure.management.network.Subnet?alt=com.microsoft.azure.management.network.Subnet&text=Subnet\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingSubnet(Subnet subnet)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)"
  name: "fromExistingSubnet(String networkResourceId, String subnetName)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)"
  summary: "Specifies an existing private subnet to receive network traffic from."
  modifiers:
  - "abstract"
  parameters:
  - description: "the resource ID of an existing network"
    name: "networkResourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the name of an existing subnet within the specified network"
    name: "subnetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromExistingSubnet(String networkResourceId, String subnetName)"
  desc: "Specifies an existing private subnet to receive network traffic from.\n\nIf this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromFrontend(java.lang.String)"
  fullName: "com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)"
  name: "fromFrontend(String frontendName)"
  nameWithType: "HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)"
  summary: "Specifies the frontend to associate."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing frontend name"
    name: "frontendName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ReturnT fromFrontend(String frontendName)"
  desc: "Specifies the frontend to associate."
  returns:
    description: "the next stage of the definition"
    type: "<xref href=\"ReturnT?alt=ReturnT&text=ReturnT\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
typeParameters:
- description: "the next stage of the definition"
  name: "ReturnT"
desc: "The stage of a definition allowing to specify a frontend from to associate."
metadata: {}
package: "com.microsoft.azure.management.network.model"
artifact: com.microsoft.azure:azure-mgmt-network:1.41.4
