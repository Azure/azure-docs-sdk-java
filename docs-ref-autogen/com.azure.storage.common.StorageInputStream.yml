### YamlMime:ManagedReference
items:
- uid: com.azure.storage.common.StorageInputStream
  id: StorageInputStream
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common
  children:
  - com.azure.storage.common.StorageInputStream.StorageInputStream(int,long)
  - com.azure.storage.common.StorageInputStream.StorageInputStream(long,java.lang.Long,int,long)
  - com.azure.storage.common.StorageInputStream.available()
  - com.azure.storage.common.StorageInputStream.bufferSize
  - com.azure.storage.common.StorageInputStream.bufferStartOffset
  - com.azure.storage.common.StorageInputStream.close()
  - com.azure.storage.common.StorageInputStream.dispatchRead(int,long)
  - com.azure.storage.common.StorageInputStream.lastError
  - com.azure.storage.common.StorageInputStream.mark(int)
  - com.azure.storage.common.StorageInputStream.markSupported()
  - com.azure.storage.common.StorageInputStream.read()
  - com.azure.storage.common.StorageInputStream.read(byte[])
  - com.azure.storage.common.StorageInputStream.read(byte[],int,int)
  - com.azure.storage.common.StorageInputStream.reset()
  - com.azure.storage.common.StorageInputStream.skip(long)
  - com.azure.storage.common.StorageInputStream.streamFaulted
  langs:
  - java
  name: StorageInputStream
  nameWithType: StorageInputStream
  fullName: com.azure.storage.common.StorageInputStream
  type: Class
  package: com.azure.storage.common
  summary: Provides an input stream to read a given storage resource.
  syntax:
    content: public abstract class StorageInputStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.common.StorageInputStream.StorageInputStream(int,long)
  id: StorageInputStream(int,long)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: StorageInputStream(int chunkSize, long contentLength)
  nameWithType: StorageInputStream.StorageInputStream(int chunkSize, long contentLength)
  fullName: com.azure.storage.common.StorageInputStream.StorageInputStream(int chunkSize, long contentLength)
  overload: com.azure.storage.common.StorageInputStream.StorageInputStream*
  type: Constructor
  package: com.azure.storage.common
  summary: Initializes a new instance of the StorageInputStream class.
  syntax:
    content: protected StorageInputStream(int chunkSize, long contentLength)
    parameters:
    - id: chunkSize
      type: int
      description: the size of chunk allowed to pass for storage service request.
    - id: contentLength
      type: long
      description: the actual content length for input data.
- uid: com.azure.storage.common.StorageInputStream.StorageInputStream(long,java.lang.Long,int,long)
  id: StorageInputStream(long,java.lang.Long,int,long)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: StorageInputStream(long rangeOffset, Long rangeLength, int chunkSize, long contentLength)
  nameWithType: StorageInputStream.StorageInputStream(long rangeOffset, Long rangeLength, int chunkSize, long contentLength)
  fullName: com.azure.storage.common.StorageInputStream.StorageInputStream(long rangeOffset, Long rangeLength, int chunkSize, long contentLength)
  overload: com.azure.storage.common.StorageInputStream.StorageInputStream*
  type: Constructor
  package: com.azure.storage.common
  summary: Initializes a new instance of the StorageInputStream class.
  syntax:
    content: protected StorageInputStream(long rangeOffset, Long rangeLength, int chunkSize, long contentLength)
    parameters:
    - id: rangeOffset
      type: long
      description: The offset of the data to begin stream.
    - id: rangeLength
      type: java.lang.Long
      description: How much data the stream should return after blobRangeOffset.
    - id: chunkSize
      type: int
      description: Holds the stream read size.
    - id: contentLength
      type: long
      description: The length of the stream to be transferred.
- uid: com.azure.storage.common.StorageInputStream.available()
  id: available()
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: available()
  nameWithType: StorageInputStream.available()
  fullName: com.azure.storage.common.StorageInputStream.available()
  overload: com.azure.storage.common.StorageInputStream.available*
  type: Method
  package: com.azure.storage.common
  summary: Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.
  syntax:
    content: public synchronized int available()
    return:
      type: int
      description: >-
        An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped
         over) from this input stream without blocking, or 0 when it reaches the end of the input stream.
- uid: com.azure.storage.common.StorageInputStream.bufferSize
  id: bufferSize
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: bufferSize
  nameWithType: StorageInputStream.bufferSize
  fullName: com.azure.storage.common.StorageInputStream.bufferSize
  type: Field
  package: com.azure.storage.common
  summary: Holds the length of the current buffer in bytes.
  syntax:
    content: protected int bufferSize
    return:
      type: int
- uid: com.azure.storage.common.StorageInputStream.bufferStartOffset
  id: bufferStartOffset
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: bufferStartOffset
  nameWithType: StorageInputStream.bufferStartOffset
  fullName: com.azure.storage.common.StorageInputStream.bufferStartOffset
  type: Field
  package: com.azure.storage.common
  summary: Holds the absolute byte position of the start of the current buffer.
  syntax:
    content: protected long bufferStartOffset
    return:
      type: long
- uid: com.azure.storage.common.StorageInputStream.close()
  id: close()
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: close()
  nameWithType: StorageInputStream.close()
  fullName: com.azure.storage.common.StorageInputStream.close()
  overload: com.azure.storage.common.StorageInputStream.close*
  type: Method
  package: com.azure.storage.common
  summary: Closes this input stream and releases any system resources associated with the stream.
  syntax:
    content: public synchronized void close()
- uid: com.azure.storage.common.StorageInputStream.dispatchRead(int,long)
  id: dispatchRead(int,long)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: dispatchRead(int readLength, long offset)
  nameWithType: StorageInputStream.dispatchRead(int readLength, long offset)
  fullName: com.azure.storage.common.StorageInputStream.dispatchRead(int readLength, long offset)
  overload: com.azure.storage.common.StorageInputStream.dispatchRead*
  type: Method
  package: com.azure.storage.common
  summary: Dispatches a read operation of N bytes.
  syntax:
    content: protected abstract ByteBuffer dispatchRead(int readLength, long offset)
    parameters:
    - id: readLength
      type: int
      description: An <code>int</code> which represents the number of bytes to read.
    - id: offset
      type: long
      description: The start point of data to be acquired.
    return:
      type: java.nio.ByteBuffer
      description: The bytebuffer which store one chunk size of data.
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.common.StorageInputStream.lastError
  id: lastError
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: lastError
  nameWithType: StorageInputStream.lastError
  fullName: com.azure.storage.common.StorageInputStream.lastError
  type: Field
  package: com.azure.storage.common
  summary: Holds the last exception this stream encountered.
  syntax:
    content: protected IOException lastError
    return:
      type: java.io.IOException
- uid: com.azure.storage.common.StorageInputStream.mark(int)
  id: mark(int)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: mark(int readlimit)
  nameWithType: StorageInputStream.mark(int readlimit)
  fullName: com.azure.storage.common.StorageInputStream.mark(int readlimit)
  overload: com.azure.storage.common.StorageInputStream.mark*
  type: Method
  package: com.azure.storage.common
  summary: Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes.
  syntax:
    content: public synchronized void mark(int readlimit)
    parameters:
    - id: readlimit
      type: int
      description: >-
        An <code>int</code> which represents the maximum limit of bytes that can be read before the mark
         position becomes invalid.
- uid: com.azure.storage.common.StorageInputStream.markSupported()
  id: markSupported()
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: markSupported()
  nameWithType: StorageInputStream.markSupported()
  fullName: com.azure.storage.common.StorageInputStream.markSupported()
  overload: com.azure.storage.common.StorageInputStream.markSupported*
  type: Method
  package: com.azure.storage.common
  summary: Tests if this input stream supports the mark and reset methods. Whether or not mark and reset are supported is an invariant property of a particular input stream instance. The markSupported method of <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> returns false.
  syntax:
    content: public boolean markSupported()
    return:
      type: boolean
      description: >-
        <Code>True</Code> if this stream instance supports the mark and reset methods; <Code>False</Code>
         otherwise.
- uid: com.azure.storage.common.StorageInputStream.read()
  id: read()
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: read()
  nameWithType: StorageInputStream.read()
  fullName: com.azure.storage.common.StorageInputStream.read()
  overload: com.azure.storage.common.StorageInputStream.read*
  type: Method
  package: com.azure.storage.common
  summary: Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.
  syntax:
    content: public int read()
    return:
      type: int
      description: >-
        An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no
         more data because the end of the stream has been reached.
  exceptions:
  - type: java.io.IOException
    description: when no available bytes to read.
- uid: com.azure.storage.common.StorageInputStream.read(byte[])
  id: read(byte[])
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: read(byte[] b)
  nameWithType: StorageInputStream.read(byte[] b)
  fullName: com.azure.storage.common.StorageInputStream.read(byte[] b)
  overload: com.azure.storage.common.StorageInputStream.read*
  type: Method
  package: com.azure.storage.common
  summary: 'Reads some number of bytes from the input stream and stores them into the buffer array `b`. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of `b` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[0]`, the next one into `b[1]`, and so on. The number of bytes read is, at most, equal to the length of `b`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[0]` through `b[k-1]`, leaving elements `b[k]` through `b[b.length-1]` unaffected. The `read(b)` method for class <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> has the same effect as: `read(b, 0, b.length)`'
  syntax:
    content: public int read(byte[] b)
    parameters:
    - id: b
      type: byte[]
      description: A <code>byte</code> array which represents the buffer into which the data is read.
    return:
      type: int
  exceptions:
  - type: java.io.IOException
    description: >-
      If the first byte cannot be read for any reason other than the end of the file, if the input
       stream has been closed, or if some other I/O error occurs.
- uid: com.azure.storage.common.StorageInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: StorageInputStream.read(byte[] b, int off, int len)
  fullName: com.azure.storage.common.StorageInputStream.read(byte[] b, int off, int len)
  overload: com.azure.storage.common.StorageInputStream.read*
  type: Method
  package: com.azure.storage.common
  summary: Reads up to `len` bytes of data from the input stream into an array of bytes. An attempt is made to read as many as `len` bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If `len` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[off]`, the next one into `b[off+1]`, and so on. The number of bytes read is, at most, equal to `len`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[off]` through `b[off+k-1]`, leaving elements `b[off+k]` through `b[off+len-1]` unaffected. In every case, elements `b[0]` through `b[off]` and elements `b[off+len]` through `b[b.length-1]` are unaffected. The `read(b, off, len)` method for class <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> simply calls the method `read()` repeatedly. If the first such call results in an `IOException`, that exception is returned from the call to the `read(b, off, len)` method. If any subsequent call to `read()` results in a `IOException`, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into `b` and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data `len` has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.
  syntax:
    content: public int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: byte[]
      description: A <code>byte</code> array which represents the buffer into which the data is read.
    - id: off
      type: int
      description: >-
        An <code>int</code> which represents the start offset in the <code>byte</code> array at which the data
         is written.
    - id: len
      type: int
      description: An <code>int</code> which represents the maximum number of bytes to read.
    return:
      type: int
      description: >-
        An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no
         more data because the end of the stream has been reached.
  exceptions:
  - type: java.io.IOException
    description: >-
      If the first byte cannot be read for any reason other than end of file, or if the input
       stream has been closed, or if some other I/O error occurs.
- uid: com.azure.storage.common.StorageInputStream.reset()
  id: reset()
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: reset()
  nameWithType: StorageInputStream.reset()
  fullName: com.azure.storage.common.StorageInputStream.reset()
  overload: com.azure.storage.common.StorageInputStream.reset*
  type: Method
  package: com.azure.storage.common
  summary: Repositions this stream to the position at the time the mark method was last called on this input stream. Note repositioning the blob read stream will disable blob MD5 checking.
  syntax:
    content: public synchronized void reset()
- uid: com.azure.storage.common.StorageInputStream.skip(long)
  id: skip(long)
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: skip(long n)
  nameWithType: StorageInputStream.skip(long n)
  fullName: com.azure.storage.common.StorageInputStream.skip(long n)
  overload: com.azure.storage.common.StorageInputStream.skip*
  type: Method
  package: com.azure.storage.common
  summary: Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility. The actual number of bytes skipped is returned. If n is negative, no bytes are skipped. Note repositioning the blob read stream will disable blob MD5 checking.
  syntax:
    content: public synchronized long skip(long n)
    parameters:
    - id: n
      type: long
      description: A <code>long</code> which represents the number of bytes to skip.
    return:
      type: long
- uid: com.azure.storage.common.StorageInputStream.streamFaulted
  id: streamFaulted
  artifact: com.azure:azure-storage-common:12.7.0-beta.1
  parent: com.azure.storage.common.StorageInputStream
  langs:
  - java
  name: streamFaulted
  nameWithType: StorageInputStream.streamFaulted
  fullName: com.azure.storage.common.StorageInputStream.streamFaulted
  type: Field
  package: com.azure.storage.common
  summary: A flag to determine if the stream is faulted, if so the last error will be thrown on next operation.
  syntax:
    content: protected volatile boolean streamFaulted
    return:
      type: boolean
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.common.StorageInputStream.StorageInputStream*
  name: StorageInputStream
  nameWithType: StorageInputStream.StorageInputStream
  fullName: com.azure.storage.common.StorageInputStream.StorageInputStream
  package: com.azure.storage.common
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: com.azure.storage.common.StorageInputStream.available*
  name: available
  nameWithType: StorageInputStream.available
  fullName: com.azure.storage.common.StorageInputStream.available
  package: com.azure.storage.common
- uid: com.azure.storage.common.StorageInputStream.close*
  name: close
  nameWithType: StorageInputStream.close
  fullName: com.azure.storage.common.StorageInputStream.close
  package: com.azure.storage.common
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.nio.ByteBuffer
  spec.java:
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
- uid: com.azure.storage.common.StorageInputStream.dispatchRead*
  name: dispatchRead
  nameWithType: StorageInputStream.dispatchRead
  fullName: com.azure.storage.common.StorageInputStream.dispatchRead
  package: com.azure.storage.common
- uid: com.azure.storage.common.StorageInputStream.mark*
  name: mark
  nameWithType: StorageInputStream.mark
  fullName: com.azure.storage.common.StorageInputStream.mark
  package: com.azure.storage.common
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.common.StorageInputStream.markSupported*
  name: markSupported
  nameWithType: StorageInputStream.markSupported
  fullName: com.azure.storage.common.StorageInputStream.markSupported
  package: com.azure.storage.common
- uid: com.azure.storage.common.StorageInputStream.read*
  name: read
  nameWithType: StorageInputStream.read
  fullName: com.azure.storage.common.StorageInputStream.read
  package: com.azure.storage.common
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.common.StorageInputStream.reset*
  name: reset
  nameWithType: StorageInputStream.reset
  fullName: com.azure.storage.common.StorageInputStream.reset
  package: com.azure.storage.common
- uid: com.azure.storage.common.StorageInputStream.skip*
  name: skip
  nameWithType: StorageInputStream.skip
  fullName: com.azure.storage.common.StorageInputStream.skip
  package: com.azure.storage.common
- uid: java.io.InputStream
  name: InputStream
  nameWithType: InputStream
  fullName: java.io.InputStream
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
