### YamlMime:JavaMember
uid: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage*"
fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>.byPage"
name: "byPage"
nameWithType: "ContinuablePagedFluxCore<C,T,P>.byPage"
members:
- uid: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage()"
  fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>.byPage()"
  name: "byPage()"
  nameWithType: "ContinuablePagedFluxCore<C,T,P>.byPage()"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page."
  overridden: "com.azure.core.util.paging.ContinuablePagedFlux.byPage()"
  syntax: "public Flux<P> byPage()"
  returns:
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(C)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>.byPage(C continuationToken)"
  name: "byPage(C continuationToken)"
  nameWithType: "ContinuablePagedFluxCore<C,T,P>.byPage(C continuationToken)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token."
  overridden: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C)"
  parameters:
  - name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<P> byPage(C continuationToken)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(C,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>.byPage(C continuationToken, int preferredPageSize)"
  name: "byPage(C continuationToken, int preferredPageSize)"
  nameWithType: "ContinuablePagedFluxCore<C,T,P>.byPage(C continuationToken, int preferredPageSize)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> beginning at the page identified by the given continuation token requesting each page to contain the number of elements equal to the preferred page size.\n\nThe service may or may not honor the preferred page size therefore the client *MUST* be prepared to handle pages with different page sizes."
  overridden: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C,int)"
  parameters:
  - name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<P> byPage(C continuationToken, int preferredPageSize)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>.byPage(int preferredPageSize)"
  name: "byPage(int preferredPageSize)"
  nameWithType: "ContinuablePagedFluxCore<C,T,P>.byPage(int preferredPageSize)"
  summary: "Gets a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> starting at the first page requesting each page to contain a number of elements equal to the preferred page size.\n\nThe service may or may not honor the preferred page size therefore the client *MUST* be prepared to handle pages with different page sizes."
  overridden: "com.azure.core.util.paging.ContinuablePagedFlux.byPage(int)"
  parameters:
  - name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<P> byPage(int preferredPageSize)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util.paging"
artifact: com.azure:azure-core:1.12.0
