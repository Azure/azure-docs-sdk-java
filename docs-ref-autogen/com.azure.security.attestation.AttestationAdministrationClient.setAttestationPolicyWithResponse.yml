### YamlMime:JavaMember
uid: "com.azure.security.attestation.AttestationAdministrationClient.setAttestationPolicyWithResponse*"
fullName: "com.azure.security.attestation.AttestationAdministrationClient.setAttestationPolicyWithResponse"
name: "setAttestationPolicyWithResponse"
nameWithType: "AttestationAdministrationClient.setAttestationPolicyWithResponse"
members:
- uid: "com.azure.security.attestation.AttestationAdministrationClient.setAttestationPolicyWithResponse(com.azure.security.attestation.models.AttestationType,com.azure.security.attestation.models.AttestationPolicySetOptions,com.azure.core.util.Context)"
  fullName: "com.azure.security.attestation.AttestationAdministrationClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options, Context context)"
  name: "setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options, Context context)"
  nameWithType: "AttestationAdministrationClient.setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options, Context context)"
  summary: "Sets the attestation policy for the specified attestation type. Setting the attestation requires that the caller provide an <xref uid=\"com.azure.security.attestation.models.AttestationPolicySetOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationPolicySetOptions\"></xref> object which provides the options for setting the policy. There are two major components to a setPolicy request:\n\n *  The policy to set\n *  A signing key used to sign the policy sent to the service (OPTIONAL)\n\nOn Isolated mode attestation instances, the signing key MUST include one of the configured policy signing certificates.\n\n```java\nResponse<PolicyResult> response = client.setAttestationPolicyWithResponse(AttestationType.OPEN_ENCLAVE,\n     new AttestationPolicySetOptions()\n         .setAttestationPolicy(policyToSet)\n         .setAttestationSigner(new AttestationSigningKey(certificate, privateKey)), Context.NONE);\n```"
  parameters:
  - description: "The <xref uid=\"com.azure.security.attestation.models.AttestationType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationType\"></xref> to be updated."
    name: "attestationType"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationType?alt=com.azure.security.attestation.models.AttestationType&text=AttestationType\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.security.attestation.models.AttestationPolicySetOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationPolicySetOptions\"></xref> for the request."
    name: "options"
    type: "<xref href=\"com.azure.security.attestation.models.AttestationPolicySetOptions?alt=com.azure.security.attestation.models.AttestationPolicySetOptions&text=AttestationPolicySetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Context for the operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AttestationResponse<PolicyResult> setAttestationPolicyWithResponse(AttestationType attestationType, AttestationPolicySetOptions options, Context context)"
  returns:
    description: "<xref uid=\"com.azure.security.attestation.models.PolicyResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PolicyResult\"></xref> expressing the result of the attestation operation."
    type: "<xref href=\"com.azure.security.attestation.models.AttestationResponse?alt=com.azure.security.attestation.models.AttestationResponse&text=AttestationResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.attestation.models.PolicyResult?alt=com.azure.security.attestation.models.PolicyResult&text=PolicyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.attestation"
artifact: com.azure:azure-security-attestation:1.1.0
