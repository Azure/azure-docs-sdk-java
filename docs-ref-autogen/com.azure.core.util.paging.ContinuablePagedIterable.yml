### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.paging.ContinuablePagedIterable
  id: ContinuablePagedIterable
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging
  children:
  - com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>)
  - com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>,int)
  - com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()
  - com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)
  - com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)
  - com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)
  - com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()
  - com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)
  - com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)
  - com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)
  langs:
  - java
  name: ContinuablePagedIterable<C,T,P>
  nameWithType: ContinuablePagedIterable<C,T,P>
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>
  type: Class
  package: com.azure.core.util.paging
  summary: This class provides utility to iterate over <xref uid="com.azure.core.util.paging.ContinuablePage" data-throw-if-not-resolved="false">ContinuablePage</xref> using <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> interfaces.
  syntax:
    content: public abstract class ContinuablePagedIterable<C,T,P> extends IterableStream<T>
    typeParameters:
    - id: C
    - id: T
    - id: P
  inheritance:
  - java.lang.Object
  - com.azure.core.util.IterableStream
  inheritedMembers:
  - com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)
  - com.azure.core.util.IterableStream.iterator()
  - com.azure.core.util.IterableStream.stream()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>)
  id: ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)
  nameWithType: ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable*
  type: Constructor
  package: com.azure.core.util.paging
  summary: Creates instance with the given <xref uid="com.azure.core.util.paging.ContinuablePagedFlux" data-throw-if-not-resolved="false">ContinuablePagedFlux</xref>.
  syntax:
    content: public ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)
    parameters:
    - id: pagedFlux
      type: com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>
      description: the paged flux use as iterable
- uid: com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>,int)
  id: ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>,int)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)
  nameWithType: ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable*
  type: Constructor
  package: com.azure.core.util.paging
  summary: Creates instance with the given <xref uid="com.azure.core.util.paging.ContinuablePagedFlux" data-throw-if-not-resolved="false">ContinuablePagedFlux</xref>.
  syntax:
    content: public ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)
    parameters:
    - id: pagedFlux
      type: com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>
      description: the paged flux use as iterable
    - id: batchSize
      type: int
      description: the bounded capacity to prefetch from the <xref uid="com.azure.core.util.paging.ContinuablePagedFlux" data-throw-if-not-resolved="false">ContinuablePagedFlux</xref>
- uid: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()
  id: iterableByPage()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: iterableByPage()
  nameWithType: ContinuablePagedIterable<C,T,P>.iterableByPage()
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage()
  overload: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, one page at a time. It will provide same <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> of T values from starting if called multiple times.
  syntax:
    content: public Iterable<P> iterableByPage()
    return:
      type: java.lang.Iterable<P>
      description: <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)
  id: iterableByPage(C)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: iterableByPage(C continuationToken)
  nameWithType: ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()" data-throw-if-not-resolved="false">#iterableByPage()</xref> instead.
  syntax:
    content: public Iterable<P> iterableByPage(C continuationToken)
    parameters:
    - id: continuationToken
      type: C
      description: The continuation token used to fetch the next page
    return:
      type: java.lang.Iterable<P>
      description: <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)
  id: iterableByPage(C,int)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: iterableByPage(C continuationToken, int preferredPageSize)
  nameWithType: ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token. To start from first page, use <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()" data-throw-if-not-resolved="false">#iterableByPage()</xref> or <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)" data-throw-if-not-resolved="false">#iterableByPage(int)</xref> instead.
  syntax:
    content: public Iterable<P> iterableByPage(C continuationToken, int preferredPageSize)
    parameters:
    - id: continuationToken
      type: C
      description: The continuation token used to fetch the next page
    - id: preferredPageSize
      type: int
      description: >-
        the preferred page size, service may or may not honor the page
                                  size preference hence client MUST be prepared to handle pages
                                  with different page size.
    return:
      type: java.lang.Iterable<P>
      description: <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)
  id: iterableByPage(int)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: iterableByPage(int preferredPageSize)
  nameWithType: ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, one page at a time, with each page containing `preferredPageSize` items. It will provide same <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> of T values from starting if called multiple times.
  syntax:
    content: public Iterable<P> iterableByPage(int preferredPageSize)
    parameters:
    - id: preferredPageSize
      type: int
      description: >-
        the preferred page size, service may or may not honor the page
                                  size preference hence client MUST be prepared to handle pages
                                  with different page size.
    return:
      type: java.lang.Iterable<P>
      description: <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()
  id: streamByPage()
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: streamByPage()
  nameWithType: ContinuablePagedIterable<C,T,P>.streamByPage()
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage()
  overload: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref>, one page at a time. It will provide same <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of T values from starting if called multiple times.
  syntax:
    content: public Stream<P> streamByPage()
    return:
      type: java.util.stream.Stream<P>
      description: <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)
  id: streamByPage(C)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: streamByPage(C continuationToken)
  nameWithType: ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()" data-throw-if-not-resolved="false">#streamByPage()</xref> instead.
  syntax:
    content: public Stream<P> streamByPage(C continuationToken)
    parameters:
    - id: continuationToken
      type: C
      description: The continuation token used to fetch the next page
    return:
      type: java.util.stream.Stream<P>
      description: <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)
  id: streamByPage(C,int)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: streamByPage(C continuationToken, int preferredPageSize)
  nameWithType: ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken, int preferredPageSize)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken, int preferredPageSize)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token. To start from first page, use <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()" data-throw-if-not-resolved="false">#streamByPage()</xref> or <xref uid="com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)" data-throw-if-not-resolved="false">#streamByPage(int)</xref> instead.
  syntax:
    content: public Stream<P> streamByPage(C continuationToken, int preferredPageSize)
    parameters:
    - id: continuationToken
      type: C
      description: The continuation token used to fetch the next page
    - id: preferredPageSize
      type: int
      description: >-
        the preferred page size, service may or may not honor the page
                                  size preference hence client MUST be prepared to handle pages
                                  with different page size.
    return:
      type: java.util.stream.Stream<P>
      description: <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of a pages
- uid: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)
  id: streamByPage(int)
  artifact: com.azure:azure-core:1.7.0
  parent: com.azure.core.util.paging.ContinuablePagedIterable
  langs:
  - java
  name: streamByPage(int preferredPageSize)
  nameWithType: ContinuablePagedIterable<C,T,P>.streamByPage(int preferredPageSize)
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(int preferredPageSize)
  overload: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage*
  type: Method
  package: com.azure.core.util.paging
  summary: Retrieve the <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref>, one page at a time, with each page containing `preferredPageSize` items. It will provide same <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of T values from starting if called multiple times.
  syntax:
    content: public Stream<P> streamByPage(int preferredPageSize)
    parameters:
    - id: preferredPageSize
      type: int
      description: >-
        the preferred page size, service may or may not honor the page
                                  size preference hence client MUST be prepared to handle pages
                                  with different page size.
    return:
      type: java.util.stream.Stream<P>
      description: <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of a pages
references:
- uid: com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>
  spec.java:
  - uid: com.azure.core.util.paging.ContinuablePagedFlux
    name: ContinuablePagedFlux
    fullName: com.azure.core.util.paging.ContinuablePagedFlux
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: P
    name: P
    fullName: P
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable*
  name: ContinuablePagedIterable
  nameWithType: ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable
  package: com.azure.core.util.paging
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.util.stream.Stream<P>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: P
    name: P
    fullName: P
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.paging.ContinuablePagedIterable.streamByPage*
  name: streamByPage
  nameWithType: ContinuablePagedIterable<C,T,P>.streamByPage
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage
  package: com.azure.core.util.paging
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: java.lang.Iterable<P>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: P
    name: P
    fullName: P
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage*
  name: iterableByPage
  nameWithType: ContinuablePagedIterable<C,T,P>.iterableByPage
  fullName: com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage
  package: com.azure.core.util.paging
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: P
  name: P
  nameWithType: P
  fullName: P
- uid: com.azure.core.util.IterableStream<T>
  name: IterableStream<T>
  nameWithType: IterableStream<T>
  fullName: com.azure.core.util.IterableStream<T>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.core.util.IterableStream.iterator()
  name: IterableStream.iterator()
  nameWithType: IterableStream.iterator()
  fullName: com.azure.core.util.IterableStream.iterator()
- uid: com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)
  name: IterableStream.<T>of(Iterable<T>)
  nameWithType: IterableStream.<T>of(Iterable<T>)
  fullName: com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.core.util.IterableStream.stream()
  name: IterableStream.stream()
  nameWithType: IterableStream.stream()
  fullName: com.azure.core.util.IterableStream.stream()
- uid: C,T,P
  name: C,T,P
  nameWithType: C,T,P
  fullName: C,T,P
- uid: com.azure.core.util.paging.ContinuablePagedFlux
  name: ContinuablePagedFlux
  nameWithType: ContinuablePagedFlux
  fullName: com.azure.core.util.paging.ContinuablePagedFlux
- uid: java.util.stream.Stream
  name: Stream
  nameWithType: Stream
  fullName: java.util.stream.Stream
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.core.util.IterableStream
  name: IterableStream
  nameWithType: IterableStream
  fullName: com.azure.core.util.IterableStream
- uid: com.azure.core.util.IterableStream.
  name: IterableStream.
  nameWithType: IterableStream.
  fullName: com.azure.core.util.IterableStream.
- uid: T>of(java.lang.Iterable
  name: T>of(Iterable
  nameWithType: T>of(Iterable
  fullName: T>of(java.lang.Iterable
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
