### YamlMime:JavaType
uid: "com.azure.core.util.paging.ContinuablePagedIterable"
fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>"
name: "ContinuablePagedIterable<C,T,P>"
nameWithType: "ContinuablePagedIterable<C,T,P>"
summary: "This class provides utility to iterate over <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.IterableStream?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)"
- "com.azure.core.util.IterableStream.iterator()"
- "com.azure.core.util.IterableStream.stream()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ContinuablePagedIterable<C,T,P> extends IterableStream<T>"
constructors:
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)"
  name: "ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)"
  summary: "Creates instance with the given <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePagedFlux\"></xref>."
  parameters:
  - description: "the paged flux use as iterable"
    name: "pagedFlux"
    type: "<xref href=\"com.azure.core.util.paging.ContinuablePagedFlux?alt=com.azure.core.util.paging.ContinuablePagedFlux&text=ContinuablePagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux)"
  desc: "Creates instance with the given <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePagedFlux\"></xref>."
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.ContinuablePagedIterable(com.azure.core.util.paging.ContinuablePagedFlux<C,T,P>,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)"
  name: "ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)"
  summary: "Creates instance with the given <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePagedFlux\"></xref>."
  parameters:
  - description: "the paged flux use as iterable"
    name: "pagedFlux"
    type: "<xref href=\"com.azure.core.util.paging.ContinuablePagedFlux?alt=com.azure.core.util.paging.ContinuablePagedFlux&text=ContinuablePagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the bounded capacity to prefetch from the <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePagedFlux\"></xref>"
    name: "batchSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ContinuablePagedIterable(ContinuablePagedFlux<C,T,P> pagedFlux, int batchSize)"
  desc: "Creates instance with the given <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePagedFlux\"></xref>."
methods:
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage()"
  name: "iterableByPage()"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage()"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time."
  syntax: "public Iterable<P> iterableByPage()"
  desc: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time. It will provide same <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of T values from starting if called multiple times."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)"
  name: "iterableByPage(C continuationToken)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, starting from the next page associated with the given continuation token."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(C continuationToken)"
  desc: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage()\"></xref> instead."
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)"
  name: "iterableByPage(C continuationToken, int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(C continuationToken, int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(C continuationToken, int preferredPageSize)"
  desc: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage()\"></xref> or <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#iterableByPage(int)\"></xref> instead."
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)"
  name: "iterableByPage(int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterableByPage(int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items."
  parameters:
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Iterable<P> iterableByPage(int preferredPageSize)"
  desc: "Retrieve the <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>, one page at a time, with each page containing `preferredPageSize` items. It will provide same <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of T values from starting if called multiple times."
  returns:
    description: "<xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> of a pages"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.iterator()"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.iterator()"
  name: "iterator()"
  nameWithType: "ContinuablePagedIterable<C,T,P>.iterator()"
  summary: "Utility function to provide <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref> of value `T`."
  overridden: "com.azure.core.util.IterableStream.iterator()"
  syntax: "public Iterator<T> iterator()"
  desc: "Utility function to provide <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref> of value `T`."
  returns:
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.stream()"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.stream()"
  name: "stream()"
  nameWithType: "ContinuablePagedIterable<C,T,P>.stream()"
  summary: "Utility function to provide <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of value `T`."
  overridden: "com.azure.core.util.IterableStream.stream()"
  syntax: "public Stream<T> stream()"
  desc: "Utility function to provide <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of value `T`."
  returns:
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage()"
  name: "streamByPage()"
  nameWithType: "ContinuablePagedIterable<C,T,P>.streamByPage()"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time."
  syntax: "public Stream<P> streamByPage()"
  desc: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time. It will provide same <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of T values from starting if called multiple times."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken)"
  name: "streamByPage(C continuationToken)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken)"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, starting from the next page associated with the given continuation token."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Stream<P> streamByPage(C continuationToken)"
  desc: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#streamByPage()\"></xref> instead."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken, int preferredPageSize)"
  name: "streamByPage(C continuationToken, int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.streamByPage(C continuationToken, int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token."
  parameters:
  - description: "The continuation token used to fetch the next page"
    name: "continuationToken"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Stream<P> streamByPage(C continuationToken, int preferredPageSize)"
  desc: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, with each page containing `preferredPageSize` items, starting from the next page associated with the given continuation token. To start from first page, use <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#streamByPage()\"></xref> or <xref uid=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#streamByPage(int)\"></xref> instead."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)"
  fullName: "com.azure.core.util.paging.ContinuablePagedIterable<C,T,P>.streamByPage(int preferredPageSize)"
  name: "streamByPage(int preferredPageSize)"
  nameWithType: "ContinuablePagedIterable<C,T,P>.streamByPage(int preferredPageSize)"
  summary: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, with each page containing `preferredPageSize` items."
  parameters:
  - description: "the preferred page size, service may or may not honor the page size preference hence\n client MUST be prepared to handle pages with different page size."
    name: "preferredPageSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Stream<P> streamByPage(int preferredPageSize)"
  desc: "Retrieve the <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref>, one page at a time, with each page containing `preferredPageSize` items. It will provide same <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of T values from starting if called multiple times."
  returns:
    description: "<xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> of a pages"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"P?alt=P&text=P\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "the type of the continuation token"
  name: "C"
- description: "The type of elements in a <xref uid=\"ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref>"
  name: "T"
- description: "The <xref uid=\"ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> holding items of type <code>T</code>."
  name: "P"
desc: "This class provides utility to iterate over <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContinuablePage\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces."
metadata: {}
package: "com.azure.core.util.paging"
artifact: com.azure:azure-core:1.31.0
