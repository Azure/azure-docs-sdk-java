### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.RangeShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  name: RangeShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  nameWithType: RangeShardMapper.RangeShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  parameters:
  - description: <p>Reference to ShardMapManager. </p>
    name: shardMapManager
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager?alt=com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager&text=ShardMapManager" data-throw-if-not-resolved="False"/>
  - description: <p>Containing shard map. </p>
    name: sm
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Range shard mapper, which managers range mappings.</p>

    <p></p>
  syntax: public RangeShardMapper(ShardMapManager shardMapManager, ShardMap sm)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.RangeShardMapper(ShardMapManager,ShardMap)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper?alt=com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper&text=BaseShardMapper" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.add(MappingT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.add(MappingT)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.BaseShardMapper(ShardMapManager,ShardMap)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.DEFAULT_OWNER
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.ensureMappingBelongsToShardMap(MappingT,String,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getLockOwnerForMapping(MappingT,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getMappingsForRange(Range,Shard,LookupOptions,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getShardMap()
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.getShardMapManager()
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.lockOrUnlockMappings(MappingT,UUID,LockOwnerIdOpType,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.lookup(KeyT,LookupOptions,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.lookup(ValueT,LookupOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKey(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKey(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKey(ValueT,String)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKey(ValueT,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKeyAsync(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.openConnectionForKeyAsync(KeyT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,ShardManagementErrorCategory,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKeyAsync(ValueT,String)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.openConnectionForKeyAsync(ValueT,String,ConnectionOptions)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.remove(MappingT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.remove(MappingT,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.setStatus(MappingT,StatusT,Function<StatusT, StatusT>,Function<StatusT, UpdateT>,ActionGeneric3Param<MappingT, UpdateT, UUID, MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.setStatus(MappingT,StatusT,Function<StatusT, StatusT>,Function<StatusT, UpdateT>,ActionGeneric3Param<MappingT, UpdateT, UUID, MappingT>,UUID)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.shardMap
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.shardMapManager
- com.microsoft.azure.elasticdb.shard.mapper.IShardMapper.tryLookup(ValueT,LookupOptions,ReferenceObjectHelper<MappingT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.update(MappingT,UpdateT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,Function<StatusT, Integer>,Function<Integer, StatusT>)
- com.microsoft.azure.elasticdb.shard.mapper.BaseShardMapper.update(MappingT,UpdateT,ActionGeneric3Param<ShardMapManager, ShardMap, StoreMapping, MappingT>,Function<StatusT, Integer>,Function<Integer, StatusT>,UUID)
methods:
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.add(RangeMapping mapping)
  name: add(RangeMapping mapping)
  nameWithType: RangeShardMapper.add(RangeMapping mapping)
  parameters:
  - description: <p>Mapping being added. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The added mapping object. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a range mapping.</p>

    <p></p>
  syntax: public final RangeMapping add(RangeMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.add(RangeMapping)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.getLockOwnerForMapping(RangeMapping mapping)
  name: getLockOwnerForMapping(RangeMapping mapping)
  nameWithType: RangeShardMapper.getLockOwnerForMapping(RangeMapping mapping)
  parameters:
  - description: <p>The mapping </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Lock owner for the mapping. </p>
    type: <xref href="final+UUID?alt=final+UUID&text=final+UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the lock owner of a mapping.</p>

    <p></p>
  syntax: public final UUID getLockOwnerForMapping(RangeMapping mapping)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.getLockOwnerForMapping(RangeMapping)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.getMappingsForRange(Range range, Shard shard, LookupOptions lookupOptions)
  name: getMappingsForRange(Range range, Shard shard, LookupOptions lookupOptions)
  nameWithType: RangeShardMapper.getMappingsForRange(Range range, Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Optional range value, if null, we cover everything. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Optional shard parameter, if null, we cover all shards. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to use cache and/or storage for lookups. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that overlap with given range. </p>
    type: final List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range.</p>

    <p></p>
  syntax: public final List<RangeMapping> getMappingsForRange(Range range, Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.getMappingsForRange(Range,Shard,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.lockOrUnlockMappings(RangeMapping mapping, UUID lockOwnerId, LockOwnerIdOpType lockOwnerIdOpType)
  name: lockOrUnlockMappings(RangeMapping mapping, UUID lockOwnerId, LockOwnerIdOpType lockOwnerIdOpType)
  nameWithType: RangeShardMapper.lockOrUnlockMappings(RangeMapping mapping, UUID lockOwnerId, LockOwnerIdOpType lockOwnerIdOpType)
  parameters:
  - description: <p>Optional mapping </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>The lock owner id </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Operation to perform on this mapping with the given lockOwnerId </p>
    name: lockOwnerIdOpType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LockOwnerIdOpType?alt=com.microsoft.azure.elasticdb.shard.base.LockOwnerIdOpType&text=LockOwnerIdOpType" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Locks or unlocks a given mapping or all mappings.</p>

    <p></p>
  syntax: public final void lockOrUnlockMappings(RangeMapping mapping, UUID lockOwnerId, LockOwnerIdOpType lockOwnerIdOpType)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.lockOrUnlockMappings(RangeMapping,UUID,LockOwnerIdOpType)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.lookup(Object key, LookupOptions lookupOptions)
  name: lookup(Object key, LookupOptions lookupOptions)
  nameWithType: RangeShardMapper.lookup(Object key, LookupOptions lookupOptions)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to use cache and/or storage for lookups. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Mapping that contains the key value. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Looks up the key value and returns the corresponding mapping.</p>

    <p></p>
  syntax: public final RangeMapping lookup(Object key, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.lookup(Object,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.markMappingOffline(RangeMapping mapping, UUID lockOwnerId)
  name: markMappingOffline(RangeMapping mapping, UUID lockOwnerId)
  nameWithType: RangeShardMapper.markMappingOffline(RangeMapping mapping, UUID lockOwnerId)
  parameters:
  - description: <p>Input range mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An offline mapping. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Marks the given mapping offline.</p>

    <p></p>
  syntax: public final RangeMapping markMappingOffline(RangeMapping mapping, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.markMappingOffline(RangeMapping,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.markMappingOnline(RangeMapping mapping, UUID lockOwnerId)
  name: markMappingOnline(RangeMapping mapping, UUID lockOwnerId)
  nameWithType: RangeShardMapper.markMappingOnline(RangeMapping mapping, UUID lockOwnerId)
  parameters:
  - description: <p>Input range mapping. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An online mapping. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Marks the given mapping online.</p>

    <p></p>
  syntax: public final RangeMapping markMappingOnline(RangeMapping mapping, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.markMappingOnline(RangeMapping,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.merge(RangeMapping left, RangeMapping right, UUID leftLockOwnerId, UUID rightLockOwnerId)
  name: merge(RangeMapping left, RangeMapping right, UUID leftLockOwnerId, UUID rightLockOwnerId)
  nameWithType: RangeShardMapper.merge(RangeMapping left, RangeMapping right, UUID leftLockOwnerId, UUID rightLockOwnerId)
  parameters:
  - description: <p>Left mapping. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Right mapping. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of the left mapping </p>
    name: leftLockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of the right mapping </p>
    name: rightLockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Mapping that results from the merge operation. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Merges 2 contiguous mappings into a single mapping. Both left and right mappings should point to the same location and must be contiguous.</p>

    <p></p>
  syntax: public final RangeMapping merge(RangeMapping left, RangeMapping right, UUID leftLockOwnerId, UUID rightLockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.merge(RangeMapping,RangeMapping,UUID,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKey(Object key, String connectionString)
  name: openConnectionForKey(Object key, String connectionString)
  nameWithType: RangeShardMapper.openConnectionForKey(Object key, String connectionString)
  parameters:
  - name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+Connection?alt=final+Connection&text=final+Connection" data-throw-if-not-resolved="False"/>
  syntax: public final Connection openConnectionForKey(Object key, String connectionString)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKey(Object,String)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKey(Object key, String connectionString, ConnectionOptions options)
  name: openConnectionForKey(Object key, String connectionString, ConnectionOptions options)
  nameWithType: RangeShardMapper.openConnectionForKey(Object key, String connectionString, ConnectionOptions options)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation for key. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Options for validation operations to perform on opened connection. </p>
    name: options
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions?alt=com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions&text=ConnectionOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An opened SqlConnection. </p>
    type: <xref href="final+Connection?alt=final+Connection&text=final+Connection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a key value, obtains a SqlConnection to the shard in the mapping that contains the key value.</p>

    <p></p>
  syntax: public final Connection openConnectionForKey(Object key, String connectionString, ConnectionOptions options)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKey(Object,String,ConnectionOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKeyAsync(Object key, String connectionString)
  name: openConnectionForKeyAsync(Object key, String connectionString)
  nameWithType: RangeShardMapper.openConnectionForKeyAsync(Object key, String connectionString)
  parameters:
  - name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+Callable%3CConnection%3E?alt=final+Callable%3CConnection%3E&text=final+Callable%3CConnection%3E" data-throw-if-not-resolved="False"/>
  syntax: public final Callable<Connection> openConnectionForKeyAsync(Object key, String connectionString)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKeyAsync(Object,String)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKeyAsync(Object key, String connectionString, ConnectionOptions options)
  name: openConnectionForKeyAsync(Object key, String connectionString, ConnectionOptions options)
  nameWithType: RangeShardMapper.openConnectionForKeyAsync(Object key, String connectionString, ConnectionOptions options)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Connection string with credential information, the DataSource and Database are obtained from the results of the lookup operation for key. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Options for validation operations to perform on opened connection. </p>
    name: options
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions?alt=com.microsoft.azure.elasticdb.shard.mapper.ConnectionOptions&text=ConnectionOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A Task encapsulating an opened SqlConnection. </p>
    type: <xref href="final+Callable%3CConnection%3E?alt=final+Callable%3CConnection%3E&text=final+Callable%3CConnection%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a key value, asynchronously obtains a SqlConnection to the shard in the mapping that contains the key value.</p>

    <p></p>
  syntax: public final Callable<Connection> openConnectionForKeyAsync(Object key, String connectionString, ConnectionOptions options)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.openConnectionForKeyAsync(Object,String,ConnectionOptions)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.remove(RangeMapping mapping, UUID lockOwnerId)
  name: remove(RangeMapping mapping, UUID lockOwnerId)
  nameWithType: RangeShardMapper.remove(RangeMapping mapping, UUID lockOwnerId)
  parameters:
  - description: <p>Mapping being removed. </p>
    name: mapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes a range mapping.</p>

    <p></p>
  syntax: public final void remove(RangeMapping mapping, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.remove(RangeMapping,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.split(RangeMapping existingMapping, Object splitAt, UUID lockOwnerId)
  name: split(RangeMapping existingMapping, Object splitAt, UUID lockOwnerId)
  nameWithType: RangeShardMapper.split(RangeMapping existingMapping, Object splitAt, UUID lockOwnerId)
  parameters:
  - description: <p>Given existing mapping. </p>
    name: existingMapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Split point. </p>
    name: splitAt
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of 2 new mappings thus created. </p>
    type: final List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Splits the given mapping into 2 at the given key. The new mappings point to the same shard as the existing mapping.</p>

    <p></p>
  syntax: public final List<RangeMapping> split(RangeMapping existingMapping, Object splitAt, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.split(RangeMapping,Object,UUID)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.tryLookup(Object key, LookupOptions lookupOptions, ReferenceObjectHelper<RangeMapping> mapping)
  name: tryLookup(Object key, LookupOptions lookupOptions, ReferenceObjectHelper<RangeMapping> mapping)
  nameWithType: RangeShardMapper.tryLookup(Object key, LookupOptions lookupOptions, ReferenceObjectHelper<RangeMapping> mapping)
  parameters:
  - description: <p>Input key value. </p>
    name: key
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to use cache and/or storage for lookups. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  - description: <p>Mapping that contains the key value. </p>
    name: mapping
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if mapping is found, <code>false</code> otherwise. </p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to looks up the key value and returns the corresponding mapping.</p>

    <p></p>
  syntax: public final boolean tryLookup(Object key, LookupOptions lookupOptions, ReferenceObjectHelper<RangeMapping> mapping)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.tryLookup(Object,LookupOptions,ReferenceObjectHelper<RangeMapping>)
- fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.update(RangeMapping currentMapping, RangeMappingUpdate update, UUID lockOwnerId)
  name: update(RangeMapping currentMapping, RangeMappingUpdate update, UUID lockOwnerId)
  nameWithType: RangeShardMapper.update(RangeMapping currentMapping, RangeMappingUpdate update, UUID lockOwnerId)
  parameters:
  - description: <p>Mapping being updated. </p>
    name: currentMapping
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  - description: <p>Updated properties of the Shard. </p>
    name: update
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMappingUpdate?alt=com.microsoft.azure.elasticdb.shard.base.RangeMappingUpdate&text=RangeMappingUpdate" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id of this mapping </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>New instance of mapping with updated information. </p>
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.RangeMapping?alt=com.microsoft.azure.elasticdb.shard.base.RangeMapping&text=RangeMapping" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Allows for update to a range mapping with the updates provided in the <em>update</em>  parameter.</p>

    <p></p>
  syntax: public final RangeMapping update(RangeMapping currentMapping, RangeMappingUpdate update, UUID lockOwnerId)
  uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper.update(RangeMapping,RangeMappingUpdate,UUID)
nameWithType: RangeShardMapper
syntax: public class RangeShardMapper extends BaseShardMapper implements IShardMapper<RangeMapping, Object>
type: class
uid: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper
fullName: com.microsoft.azure.elasticdb.shard.mapper.RangeShardMapper
name: RangeShardMapper
package: com.microsoft.azure.elasticdb.shard.mapper
summary: >-
  <p>Mapper from a range of keys to their corresponding shards.</p>

  <p></p>
metadata: {}
