### YamlMime:JavaType
uid: "com.microsoft.azure.management.sql.SqlDatabase"
fullName: "com.microsoft.azure.management.sql.SqlDatabase"
name: "SqlDatabase"
nameWithType: "SqlDatabase"
summary: "An immutable client-side representation of an Azure SQL Server Database."
syntax: "public interface SqlDatabase extends ExternalChildResource<SqlDatabase,SqlServer>, HasInner<DatabaseInner>, HasResourceGroup, Refreshable<SqlDatabase>, Updatable<SqlDatabase.Update>"
methods:
- uid: "com.microsoft.azure.management.sql.SqlDatabase.asWarehouse()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.asWarehouse()"
  name: "asWarehouse()"
  nameWithType: "SqlDatabase.asWarehouse()"
  modifiers:
  - "abstract"
  syntax: "public abstract SqlWarehouse asWarehouse()"
  returns:
    description: "SqlWarehouse instance for more operations"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlWarehouse?alt=com.microsoft.azure.management.sql.SqlWarehouse&text=SqlWarehouse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.collation()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.collation()"
  name: "collation()"
  nameWithType: "SqlDatabase.collation()"
  modifiers:
  - "abstract"
  syntax: "public abstract String collation()"
  returns:
    description: "the collation of the Azure SQL Database"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.creationDate()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.creationDate()"
  name: "creationDate()"
  nameWithType: "SqlDatabase.creationDate()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime creationDate()"
  returns:
    description: "the creation date of the Azure SQL Database"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.currentServiceObjectiveId()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.currentServiceObjectiveId()"
  name: "currentServiceObjectiveId()"
  nameWithType: "SqlDatabase.currentServiceObjectiveId()"
  modifiers:
  - "abstract"
  syntax: "public abstract UUID currentServiceObjectiveId()"
  returns:
    description: "the current Service Level Objective Id of the Azure SQL Database, this is the Id of the\n Service Level Objective that is currently active"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.databaseId()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.databaseId()"
  name: "databaseId()"
  nameWithType: "SqlDatabase.databaseId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String databaseId()"
  returns:
    description: "the Id of the Azure SQL Database"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.defaultSecondaryLocation()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.defaultSecondaryLocation()"
  name: "defaultSecondaryLocation()"
  nameWithType: "SqlDatabase.defaultSecondaryLocation()"
  modifiers:
  - "abstract"
  syntax: "public abstract String defaultSecondaryLocation()"
  returns:
    description: "the defaultSecondaryLocation value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.defineThreatDetectionPolicy(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.defineThreatDetectionPolicy(String policyName)"
  name: "defineThreatDetectionPolicy(String policyName)"
  nameWithType: "SqlDatabase.defineThreatDetectionPolicy(String policyName)"
  summary: "Begins a definition for a security alert policy."
  modifiers:
  - "abstract"
  parameters:
  - description: "the name of the security alert policy"
    name: "policyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank defineThreatDetectionPolicy(String policyName)"
  desc: "Begins a definition for a security alert policy."
  returns:
    description: "the first stage of the SqlDatabaseThreatDetectionPolicy definition"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank?alt=com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank&text=Blank\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.delete()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.delete()"
  name: "delete()"
  nameWithType: "SqlDatabase.delete()"
  summary: "Deletes the database from the server."
  modifiers:
  - "abstract"
  syntax: "public abstract void delete()"
  desc: "Deletes the database from the server."
- uid: "com.microsoft.azure.management.sql.SqlDatabase.deleteAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.deleteAsync()"
  name: "deleteAsync()"
  nameWithType: "SqlDatabase.deleteAsync()"
  summary: "Deletes the database asynchronously."
  modifiers:
  - "abstract"
  syntax: "public abstract Completable deleteAsync()"
  desc: "Deletes the database asynchronously."
  returns:
    description: "a representation of the deferred computation of this call"
    type: "<xref href=\"rx.Completable?alt=rx.Completable&text=Completable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.earliestRestoreDate()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.earliestRestoreDate()"
  name: "earliestRestoreDate()"
  nameWithType: "SqlDatabase.earliestRestoreDate()"
  modifiers:
  - "abstract"
  syntax: "public abstract DateTime earliestRestoreDate()"
  returns:
    description: "the recovery period start date of the Azure SQL Database. This\n records the start date and time when recovery is available for this\n Azure SQL Database."
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.edition()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.edition()"
  name: "edition()"
  nameWithType: "SqlDatabase.edition()"
  modifiers:
  - "abstract"
  syntax: "public abstract DatabaseEdition edition()"
  returns:
    description: "the edition of the Azure SQL Database"
    type: "<xref href=\"com.microsoft.azure.management.sql.DatabaseEdition?alt=com.microsoft.azure.management.sql.DatabaseEdition&text=DatabaseEdition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.elasticPoolName()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.elasticPoolName()"
  name: "elasticPoolName()"
  nameWithType: "SqlDatabase.elasticPoolName()"
  modifiers:
  - "abstract"
  syntax: "public abstract String elasticPoolName()"
  returns:
    description: "the elasticPoolName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(com.microsoft.azure.management.resources.fluentcore.model.Creatable<com.microsoft.azure.management.storage.StorageAccount>,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)"
  name: "exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)"
  nameWithType: "SqlDatabase.exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)"
  summary: "Exports the current database to a new storage account and relative path."
  modifiers:
  - "abstract"
  parameters:
  - description: "a storage account to be created as part of this execution flow"
    name: "storageAccountCreatable"
    type: "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the container name within the storage account to use"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the exported database file name"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)"
  desc: "Exports the current database to a new storage account and relative path."
  returns:
    description: "response object"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=WithAuthenticationTypeAndLoginPassword\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(com.microsoft.azure.management.storage.StorageAccount,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(StorageAccount storageAccount, String containerName, String fileName)"
  name: "exportTo(StorageAccount storageAccount, String containerName, String fileName)"
  nameWithType: "SqlDatabase.exportTo(StorageAccount storageAccount, String containerName, String fileName)"
  summary: "Exports the current database to an existing storage account and relative path."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing storage account to be used"
    name: "storageAccount"
    type: "<xref href=\"com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />"
  - description: "the container name within the storage account to use"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the exported database file name"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword exportTo(StorageAccount storageAccount, String containerName, String fileName)"
  desc: "Exports the current database to an existing storage account and relative path."
  returns:
    description: "response object"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=WithAuthenticationTypeAndLoginPassword\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.exportTo(String storageUri)"
  name: "exportTo(String storageUri)"
  nameWithType: "SqlDatabase.exportTo(String storageUri)"
  summary: "Exports the current database to a specified URI path."
  modifiers:
  - "abstract"
  parameters:
  - description: "the storage URI to use"
    name: "storageUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey exportTo(String storageUri)"
  desc: "Exports the current database to a specified URI path."
  returns:
    description: "response object"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey?alt=com.microsoft.azure.management.sql.SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey&text=WithStorageTypeAndKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.getDatabaseAutomaticTuning()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.getDatabaseAutomaticTuning()"
  name: "getDatabaseAutomaticTuning()"
  nameWithType: "SqlDatabase.getDatabaseAutomaticTuning()"
  summary: "Gets a SQL database automatic tuning state and options."
  modifiers:
  - "abstract"
  syntax: "public abstract SqlDatabaseAutomaticTuning getDatabaseAutomaticTuning()"
  desc: "Gets a SQL database automatic tuning state and options."
  returns:
    description: "the SQL database automatic tuning state and options"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseAutomaticTuning?alt=com.microsoft.azure.management.sql.SqlDatabaseAutomaticTuning&text=SqlDatabaseAutomaticTuning\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.getThreatDetectionPolicy()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.getThreatDetectionPolicy()"
  name: "getThreatDetectionPolicy()"
  nameWithType: "SqlDatabase.getThreatDetectionPolicy()"
  summary: "Gets a SQL database threat detection policy."
  modifiers:
  - "abstract"
  syntax: "public abstract SqlDatabaseThreatDetectionPolicy getThreatDetectionPolicy()"
  desc: "Gets a SQL database threat detection policy."
  returns:
    description: "the SQL database threat detection policy for the current database"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy?alt=com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy&text=SqlDatabaseThreatDetectionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryption()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryption()"
  name: "getTransparentDataEncryption()"
  nameWithType: "SqlDatabase.getTransparentDataEncryption()"
  summary: "Gets an Azure SQL Database Transparent Data Encryption for this database."
  modifiers:
  - "abstract"
  syntax: "public abstract TransparentDataEncryption getTransparentDataEncryption()"
  desc: "Gets an Azure SQL Database Transparent Data Encryption for this database."
  returns:
    description: "an Azure SQL Database Transparent Data Encryption for this database"
    type: "<xref href=\"com.microsoft.azure.management.sql.TransparentDataEncryption?alt=com.microsoft.azure.management.sql.TransparentDataEncryption&text=TransparentDataEncryption\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryptionAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryptionAsync()"
  name: "getTransparentDataEncryptionAsync()"
  nameWithType: "SqlDatabase.getTransparentDataEncryptionAsync()"
  summary: "Gets an Azure SQL Database Transparent Data Encryption for this database."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<TransparentDataEncryption> getTransparentDataEncryptionAsync()"
  desc: "Gets an Azure SQL Database Transparent Data Encryption for this database."
  returns:
    description: "a representation of the deferred computation of an Azure SQL Database Transparent Data Encryption for this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.TransparentDataEncryption?alt=com.microsoft.azure.management.sql.TransparentDataEncryption&text=TransparentDataEncryption\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.importBacpac(com.microsoft.azure.management.storage.StorageAccount,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.importBacpac(StorageAccount storageAccount, String containerName, String fileName)"
  name: "importBacpac(StorageAccount storageAccount, String containerName, String fileName)"
  nameWithType: "SqlDatabase.importBacpac(StorageAccount storageAccount, String containerName, String fileName)"
  summary: "Imports into the current database from an existing storage account and relative path; the current database must be empty."
  modifiers:
  - "abstract"
  parameters:
  - description: "an existing storage account to be used"
    name: "storageAccount"
    type: "<xref href=\"com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount\" data-throw-if-not-resolved=\"False\" />"
  - description: "the container name within the storage account to use"
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the exported database file name"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword importBacpac(StorageAccount storageAccount, String containerName, String fileName)"
  desc: "Imports into the current database from an existing storage account and relative path; the current database must be empty."
  returns:
    description: "response object"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=WithAuthenticationTypeAndLoginPassword\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.importBacpac(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.importBacpac(String storageUri)"
  name: "importBacpac(String storageUri)"
  nameWithType: "SqlDatabase.importBacpac(String storageUri)"
  summary: "Imports into the current database from a specified URI path; the current database must be empty."
  modifiers:
  - "abstract"
  parameters:
  - description: "the storage URI to use"
    name: "storageUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey importBacpac(String storageUri)"
  desc: "Imports into the current database from a specified URI path; the current database must be empty."
  returns:
    description: "response object"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey?alt=com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey&text=WithStorageTypeAndKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.isDataWarehouse()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.isDataWarehouse()"
  name: "isDataWarehouse()"
  nameWithType: "SqlDatabase.isDataWarehouse()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isDataWarehouse()"
  returns:
    description: "true if this Database is SqlWarehouse"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitions()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitions()"
  name: "listMetricDefinitions()"
  nameWithType: "SqlDatabase.listMetricDefinitions()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<SqlDatabaseMetricDefinition> listMetricDefinitions()"
  returns:
    description: "the list of metric definitions for this database"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition?alt=com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition&text=SqlDatabaseMetricDefinition\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitionsAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitionsAsync()"
  name: "listMetricDefinitionsAsync()"
  nameWithType: "SqlDatabase.listMetricDefinitionsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<SqlDatabaseMetricDefinition> listMetricDefinitionsAsync()"
  returns:
    description: "a representation of the deferred computation of the metric definitions for this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition?alt=com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition&text=SqlDatabaseMetricDefinition\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listMetrics(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listMetrics(String filter)"
  name: "listMetrics(String filter)"
  nameWithType: "SqlDatabase.listMetrics(String filter)"
  modifiers:
  - "abstract"
  parameters:
  - description: "an OData filter expression that describes a subset of metrics to return."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<SqlDatabaseMetric> listMetrics(String filter)"
  returns:
    description: "the list of metrics for this database"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseMetric&text=SqlDatabaseMetric\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listMetricsAsync(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listMetricsAsync(String filter)"
  name: "listMetricsAsync(String filter)"
  nameWithType: "SqlDatabase.listMetricsAsync(String filter)"
  modifiers:
  - "abstract"
  parameters:
  - description: "an OData filter expression that describes a subset of metrics to return."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<SqlDatabaseMetric> listMetricsAsync(String filter)"
  returns:
    description: "a representation of the deferred computation of the metrics for this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseMetric&text=SqlDatabaseMetric\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinks()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinks()"
  name: "listReplicationLinks()"
  nameWithType: "SqlDatabase.listReplicationLinks()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,ReplicationLink> listReplicationLinks()"
  returns:
    description: "all the replication links associated with this database"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.sql.ReplicationLink?alt=com.microsoft.azure.management.sql.ReplicationLink&text=ReplicationLink\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinksAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinksAsync()"
  name: "listReplicationLinksAsync()"
  nameWithType: "SqlDatabase.listReplicationLinksAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<ReplicationLink> listReplicationLinksAsync()"
  returns:
    description: "a representation of the deferred computation of all the replication links associated with this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.ReplicationLink?alt=com.microsoft.azure.management.sql.ReplicationLink&text=ReplicationLink\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listRestorePoints()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listRestorePoints()"
  name: "listRestorePoints()"
  nameWithType: "SqlDatabase.listRestorePoints()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<RestorePoint> listRestorePoints()"
  returns:
    description: "the list of all restore points on this database"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.RestorePoint?alt=com.microsoft.azure.management.sql.RestorePoint&text=RestorePoint\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listRestorePointsAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listRestorePointsAsync()"
  name: "listRestorePointsAsync()"
  nameWithType: "SqlDatabase.listRestorePointsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<RestorePoint> listRestorePointsAsync()"
  returns:
    description: "the list of all restore points on this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.RestorePoint?alt=com.microsoft.azure.management.sql.RestorePoint&text=RestorePoint\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisors()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisors()"
  name: "listServiceTierAdvisors()"
  nameWithType: "SqlDatabase.listServiceTierAdvisors()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,ServiceTierAdvisor> listServiceTierAdvisors()"
  returns:
    description: "information about service tier advisors for the current database"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.sql.ServiceTierAdvisor?alt=com.microsoft.azure.management.sql.ServiceTierAdvisor&text=ServiceTierAdvisor\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisorsAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisorsAsync()"
  name: "listServiceTierAdvisorsAsync()"
  nameWithType: "SqlDatabase.listServiceTierAdvisorsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<ServiceTierAdvisor> listServiceTierAdvisorsAsync()"
  returns:
    description: "a representation of the deferred computation of the information about service tier advisors for this database"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.ServiceTierAdvisor?alt=com.microsoft.azure.management.sql.ServiceTierAdvisor&text=ServiceTierAdvisor\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listUsageMetrics()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listUsageMetrics()"
  name: "listUsageMetrics()"
  nameWithType: "SqlDatabase.listUsageMetrics()"
  summary: "Lists the SQL database usage metrics."
  modifiers:
  - "abstract"
  syntax: "public abstract List<SqlDatabaseUsageMetric> listUsageMetrics()"
  desc: "Lists the SQL database usage metrics."
  returns:
    description: "the SQL database usage metrics"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseUsageMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseUsageMetric&text=SqlDatabaseUsageMetric\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listUsageMetricsAsync()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listUsageMetricsAsync()"
  name: "listUsageMetricsAsync()"
  nameWithType: "SqlDatabase.listUsageMetricsAsync()"
  summary: "Asynchronously lists the SQL database usage metrics."
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<SqlDatabaseUsageMetric> listUsageMetricsAsync()"
  desc: "Asynchronously lists the SQL database usage metrics."
  returns:
    description: "a representation of the deferred computation of this call returning the SQL database usage metrics"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabaseUsageMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseUsageMetric&text=SqlDatabaseUsageMetric\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.listUsages()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.listUsages()"
  name: "listUsages()"
  nameWithType: "SqlDatabase.listUsages()"
  modifiers:
  - "abstract"
  syntax: "@Deprecated\npublic abstract List<DatabaseMetric> listUsages()"
  returns:
    description: "the list of usages (DatabaseMetrics) of this database"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.DatabaseMetric?alt=com.microsoft.azure.management.sql.DatabaseMetric&text=DatabaseMetric\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.maxSizeBytes()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.maxSizeBytes()"
  name: "maxSizeBytes()"
  nameWithType: "SqlDatabase.maxSizeBytes()"
  modifiers:
  - "abstract"
  syntax: "public abstract long maxSizeBytes()"
  returns:
    description: "the max size of the Azure SQL Database expressed in bytes."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.parentId()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.parentId()"
  name: "parentId()"
  nameWithType: "SqlDatabase.parentId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String parentId()"
  returns:
    description: "the parent SQL server ID"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.region()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.region()"
  name: "region()"
  nameWithType: "SqlDatabase.region()"
  modifiers:
  - "abstract"
  syntax: "public abstract Region region()"
  returns:
    description: "the region the resource is in"
    type: "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.regionName()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.regionName()"
  name: "regionName()"
  nameWithType: "SqlDatabase.regionName()"
  modifiers:
  - "abstract"
  syntax: "public abstract String regionName()"
  returns:
    description: "the name of the region the resource is in"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.rename(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.rename(String newDatabaseName)"
  name: "rename(String newDatabaseName)"
  nameWithType: "SqlDatabase.rename(String newDatabaseName)"
  summary: "Renames the database."
  modifiers:
  - "abstract"
  parameters:
  - description: "the new name for the database"
    name: "newDatabaseName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract SqlDatabase rename(String newDatabaseName)"
  desc: "Renames the database."
  returns:
    description: "the renamed SQL database"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.renameAsync(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.renameAsync(String newDatabaseName)"
  name: "renameAsync(String newDatabaseName)"
  nameWithType: "SqlDatabase.renameAsync(String newDatabaseName)"
  summary: "Renames the database asynchronously."
  modifiers:
  - "abstract"
  parameters:
  - description: "the new name for the database"
    name: "newDatabaseName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<SqlDatabase> renameAsync(String newDatabaseName)"
  desc: "Renames the database asynchronously."
  returns:
    description: "a representation of the deferred computation of this call"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveId()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveId()"
  name: "requestedServiceObjectiveId()"
  nameWithType: "SqlDatabase.requestedServiceObjectiveId()"
  modifiers:
  - "abstract"
  syntax: "public abstract UUID requestedServiceObjectiveId()"
  returns:
    description: "the configured Service Level Objective Id of the Azure SQL\n Database, this is the Service Level Objective that is being applied to\n the Azure SQL Database"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveName()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveName()"
  name: "requestedServiceObjectiveName()"
  nameWithType: "SqlDatabase.requestedServiceObjectiveName()"
  modifiers:
  - "abstract"
  syntax: "public abstract ServiceObjectiveName requestedServiceObjectiveName()"
  returns:
    description: "the name of the configured Service Level Objective of the Azure\n SQL Database, this is the Service Level Objective that is being\n applied to the Azure SQL Database"
    type: "<xref href=\"com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.serviceLevelObjective()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.serviceLevelObjective()"
  name: "serviceLevelObjective()"
  nameWithType: "SqlDatabase.serviceLevelObjective()"
  modifiers:
  - "abstract"
  syntax: "public abstract ServiceObjectiveName serviceLevelObjective()"
  returns:
    description: "the Service Level Objective of the Azure SQL Database."
    type: "<xref href=\"com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.sqlServerName()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.sqlServerName()"
  name: "sqlServerName()"
  nameWithType: "SqlDatabase.sqlServerName()"
  modifiers:
  - "abstract"
  syntax: "public abstract String sqlServerName()"
  returns:
    description: "name of the SQL Server to which this database belongs"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.status()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.status()"
  name: "status()"
  nameWithType: "SqlDatabase.status()"
  modifiers:
  - "abstract"
  syntax: "public abstract String status()"
  returns:
    description: "the status of the Azure SQL Database"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.SqlDatabase.syncGroups()"
  fullName: "com.microsoft.azure.management.sql.SqlDatabase.syncGroups()"
  name: "syncGroups()"
  nameWithType: "SqlDatabase.syncGroups()"
  modifiers:
  - "abstract"
  syntax: "public abstract SqlSyncGroupOperations.SqlSyncGroupActionsDefinition syncGroups()"
  returns:
    description: "the SQL Sync Group entry point for the current database"
    type: "<xref href=\"com.microsoft.azure.management.sql.SqlSyncGroupOperations.SqlSyncGroupActionsDefinition?alt=com.microsoft.azure.management.sql.SqlSyncGroupOperations.SqlSyncGroupActionsDefinition&text=SqlSyncGroupActionsDefinition\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "An immutable client-side representation of an Azure SQL Server Database."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource&text=ExternalChildResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.sql.SqlServer?alt=com.microsoft.azure.management.sql.SqlServer&text=SqlServer\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup&text=HasResourceGroup\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.implementation.DatabaseInner?alt=com.microsoft.azure.management.sql.implementation.DatabaseInner&text=DatabaseInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.sql.SqlDatabase.Update?alt=com.microsoft.azure.management.sql.SqlDatabase.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.sql"
artifact: com.microsoft.azure:azure-mgmt-sql:1.41.4
