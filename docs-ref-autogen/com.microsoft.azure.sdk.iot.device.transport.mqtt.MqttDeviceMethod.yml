### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod"
fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod"
name: "MqttDeviceMethod"
nameWithType: "MqttDeviceMethod"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.connectionLost(java.lang.Throwable)"
- "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)"
- "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.messageArrived(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage)"
- "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.receive()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class MqttDeviceMethod extends Mqtt"
constructors:
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.MqttDeviceMethod(java.lang.String,org.eclipse.paho.client.mqttv3.MqttConnectOptions,java.util.Map<java.lang.Integer,com.microsoft.azure.sdk.iot.device.Message>,java.util.Queue<org.apache.commons.lang3.tuple.Pair<java.lang.String,byte[]>>)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.MqttDeviceMethod(String deviceId, MqttConnectOptions connectOptions, Map<Integer,Message> unacknowledgedSentMessages, Queue<Pair<String,byte[]>> receivedMessages)"
  name: "MqttDeviceMethod(String deviceId, MqttConnectOptions connectOptions, Map<Integer,Message> unacknowledgedSentMessages, Queue<Pair<String,byte[]>> receivedMessages)"
  nameWithType: "MqttDeviceMethod.MqttDeviceMethod(String deviceId, MqttConnectOptions connectOptions, Map<Integer,Message> unacknowledgedSentMessages, Queue<Pair<String,byte[]>> receivedMessages)"
  parameters:
  - name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "connectOptions"
    type: "<xref href=\"org.eclipse.paho.client.mqttv3.MqttConnectOptions?alt=org.eclipse.paho.client.mqttv3.MqttConnectOptions&text=MqttConnectOptions\" data-throw-if-not-resolved=\"False\" />"
  - name: "unacknowledgedSentMessages"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "receivedMessages"
    type: "<xref href=\"java.util.Queue?alt=java.util.Queue&text=Queue\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"org.apache.commons.lang3.tuple.Pair?alt=org.apache.commons.lang3.tuple.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;&gt;"
  syntax: "public MqttDeviceMethod(String deviceId, MqttConnectOptions connectOptions, Map<Integer,Message> unacknowledgedSentMessages, Queue<Pair<String,byte[]>> receivedMessages)"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.receive()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.receive()"
  name: "receive()"
  nameWithType: "MqttDeviceMethod.receive()"
  summary: "Method to receive messages on mqtt broker connection."
  overridden: "com.microsoft.azure.sdk.iot.device.transport.mqtt.Mqtt.receive()"
  syntax: "public IotHubTransportMessage receive()"
  exceptions:
  - type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Method to receive messages on mqtt broker connection."
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.send(com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage)"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.send(IotHubTransportMessage message)"
  name: "send(IotHubTransportMessage message)"
  nameWithType: "MqttDeviceMethod.send(IotHubTransportMessage message)"
  summary: "Sends the provided device method message over the mqtt connection"
  parameters:
  - description: "the message to send"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(IotHubTransportMessage message)"
  exceptions:
  - description: "if any exception is encountered while sending the message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.exceptions.TransportException?alt=com.microsoft.azure.sdk.iot.device.exceptions.TransportException&text=TransportException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if any exception is encountered while sending the message"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends the provided device method message over the mqtt connection"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.start()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.start()"
  name: "start()"
  nameWithType: "MqttDeviceMethod.start()"
  syntax: "public void start()"
- uid: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.stop()"
  fullName: "com.microsoft.azure.sdk.iot.device.transport.mqtt.MqttDeviceMethod.stop()"
  name: "stop()"
  nameWithType: "MqttDeviceMethod.stop()"
  syntax: "public void stop()"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device.transport.mqtt"
artifact: com.microsoft.azure.sdk.iot:iot-device-client:1.30.1
