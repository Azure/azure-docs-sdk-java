### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.models.RolePermissions"
fullName: "com.azure.storage.file.datalake.models.RolePermissions"
name: "RolePermissions"
nameWithType: "RolePermissions"
summary: "Represents the POSIX-style permissions on given resource for an arbitrary role."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class RolePermissions"
constructors:
- uid: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.RolePermissions()"
  name: "RolePermissions()"
  nameWithType: "RolePermissions.RolePermissions()"
  summary: "Initializes an instance of `RolePermissions` with all values set to false."
  syntax: "public RolePermissions()"
  desc: "Initializes an instance of `RolePermissions` with all values set to false."
methods:
- uid: "com.azure.storage.file.datalake.models.RolePermissions.equals(java.lang.Object)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.equals(Object o)"
  name: "equals(Object o)"
  nameWithType: "RolePermissions.equals(Object o)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "o"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object o)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hasExecutePermission()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hasExecutePermission()"
  name: "hasExecutePermission()"
  nameWithType: "RolePermissions.hasExecutePermission()"
  syntax: "public boolean hasExecutePermission()"
  returns:
    description: "the execute permission status"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hasReadPermission()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hasReadPermission()"
  name: "hasReadPermission()"
  nameWithType: "RolePermissions.hasReadPermission()"
  syntax: "public boolean hasReadPermission()"
  returns:
    description: "the read permission status"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hasWritePermission()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hasWritePermission()"
  name: "hasWritePermission()"
  nameWithType: "RolePermissions.hasWritePermission()"
  syntax: "public boolean hasWritePermission()"
  returns:
    description: "the write permission status"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.hashCode()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.hashCode()"
  name: "hashCode()"
  nameWithType: "RolePermissions.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal(int)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseOctal(int octal)"
  name: "parseOctal(int octal)"
  nameWithType: "RolePermissions.parseOctal(int octal)"
  summary: "Convert an octal representation of permissions for a given role into an `RolePermissions` instance."
  modifiers:
  - "static"
  parameters:
  - description: "The octal digit representing the permissions for the given role."
    name: "octal"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static RolePermissions parseOctal(int octal)"
  desc: "Convert an octal representation of permissions for a given role into an `RolePermissions` instance."
  returns:
    description: "An <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> instance with appropriate fields set."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.parseSymbolic(String str, boolean allowStickyBit)"
  name: "parseSymbolic(String str, boolean allowStickyBit)"
  nameWithType: "RolePermissions.parseSymbolic(String str, boolean allowStickyBit)"
  summary: "Convert a symbolic representation of permissions for a given role into an `RolePermissions` instance."
  modifiers:
  - "static"
  parameters:
  - description: "The string representing the permissions for the given role."
    name: "str"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Indicates whether the parsing should tolerate the sticky bit. The sticky bit is only\n valid as the last character of permissions for \"other\" in a <code>String</code> representing full permissions for a\n resource."
    name: "allowStickyBit"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static RolePermissions parseSymbolic(String str, boolean allowStickyBit)"
  desc: "Convert a symbolic representation of permissions for a given role into an `RolePermissions` instance."
  returns:
    description: "An <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> instance with appropriate fields set."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.setExecutePermission(boolean)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.setExecutePermission(boolean hasExecutePermission)"
  name: "setExecutePermission(boolean hasExecutePermission)"
  nameWithType: "RolePermissions.setExecutePermission(boolean hasExecutePermission)"
  summary: "Sets the execute permission status."
  parameters:
  - description: "Permission status to set"
    name: "hasExecutePermission"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RolePermissions setExecutePermission(boolean hasExecutePermission)"
  desc: "Sets the execute permission status."
  returns:
    description: "the updated RolePermissions object"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.setReadPermission(boolean)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.setReadPermission(boolean hasReadPermission)"
  name: "setReadPermission(boolean hasReadPermission)"
  nameWithType: "RolePermissions.setReadPermission(boolean hasReadPermission)"
  summary: "Sets the read permission status."
  parameters:
  - description: "Permission status to set"
    name: "hasReadPermission"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RolePermissions setReadPermission(boolean hasReadPermission)"
  desc: "Sets the read permission status."
  returns:
    description: "the updated RolePermissions object"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.setWritePermission(boolean)"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.setWritePermission(boolean hasWritePermission)"
  name: "setWritePermission(boolean hasWritePermission)"
  nameWithType: "RolePermissions.setWritePermission(boolean hasWritePermission)"
  summary: "Sets the write permission status."
  parameters:
  - description: "Permission status to set"
    name: "hasWritePermission"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RolePermissions setWritePermission(boolean hasWritePermission)"
  desc: "Sets the write permission status."
  returns:
    description: "the updated RolePermissions object"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toOctal()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toOctal()"
  name: "toOctal()"
  nameWithType: "RolePermissions.toOctal()"
  summary: "Converts the `RolePermissions` instance into its octal representation."
  syntax: "public String toOctal()"
  desc: "Converts the `RolePermissions` instance into its octal representation."
  returns:
    description: "The <code>String</code> representation of the permissions."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic()"
  fullName: "com.azure.storage.file.datalake.models.RolePermissions.toSymbolic()"
  name: "toSymbolic()"
  nameWithType: "RolePermissions.toSymbolic()"
  summary: "Converts the `RolePermissions` instance into its symbolic representation."
  syntax: "public String toSymbolic()"
  desc: "Converts the `RolePermissions` instance into its symbolic representation."
  returns:
    description: "The <code>String</code> representation of the permission."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents the POSIX-style permissions on given resource for an arbitrary role. Each role can have any combination of read, write, and execute permissions. Manipulating resource permissions is only supported when ADLS interop and Hierarchical Namespace are enabled."
metadata: {}
package: "com.azure.storage.file.datalake.models"
artifact: com.azure:azure-storage-file-datalake:12.12.0
