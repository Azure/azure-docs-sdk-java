### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource.id()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasParent.parent()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.containerregistry.Webhook.customHeaders()
  name: customHeaders()
  nameWithType: Webhook.customHeaders()
  returns:
    description: <p>the Custom headers that will be added to the webhook notifications </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public Map<String, String> customHeaders()
  uid: com.microsoft.azure.management.containerregistry.Webhook.customHeaders()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.disable()
  name: disable()
  nameWithType: Webhook.disable()
  summary: <p>Changes the status of the webhook to "disabled". </p>
  syntax: public void disable()
  uid: com.microsoft.azure.management.containerregistry.Webhook.disable()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.disableAsync()
  name: disableAsync()
  nameWithType: Webhook.disableAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the status of the webhook to "disabled".</p>

    <p></p>
  syntax: public Completable disableAsync()
  uid: com.microsoft.azure.management.containerregistry.Webhook.disableAsync()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.enable()
  name: enable()
  nameWithType: Webhook.enable()
  summary: <p>Changes the status of the webhook to "enabled". </p>
  syntax: public void enable()
  uid: com.microsoft.azure.management.containerregistry.Webhook.enable()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.enableAsync()
  name: enableAsync()
  nameWithType: Webhook.enableAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the status of the webhook to "enabled".</p>

    <p></p>
  syntax: public Completable enableAsync()
  uid: com.microsoft.azure.management.containerregistry.Webhook.enableAsync()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.isEnabled()
  name: isEnabled()
  nameWithType: Webhook.isEnabled()
  returns:
    description: <p>the status of the webhook </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isEnabled()
  uid: com.microsoft.azure.management.containerregistry.Webhook.isEnabled()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.listEvents()
  name: listEvents()
  nameWithType: Webhook.listEvents()
  returns:
    description: <p>the list of event info object </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo" data-throw-if-not-resolved="False"/>&gt;
  syntax: public PagedList<WebhookEventInfo> listEvents()
  uid: com.microsoft.azure.management.containerregistry.Webhook.listEvents()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.listEventsAsync()
  name: listEventsAsync()
  nameWithType: Webhook.listEventsAsync()
  returns:
    description: <p>a representation of the future computation of this call, returning the list of event info object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<WebhookEventInfo> listEventsAsync()
  uid: com.microsoft.azure.management.containerregistry.Webhook.listEventsAsync()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.parentId()
  name: parentId()
  nameWithType: Webhook.parentId()
  returns:
    description: <p>the webhook parent ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String parentId()
  uid: com.microsoft.azure.management.containerregistry.Webhook.parentId()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.ping()
  name: ping()
  nameWithType: Webhook.ping()
  returns:
    description: <p>the id on an event info resource </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String ping()
  uid: com.microsoft.azure.management.containerregistry.Webhook.ping()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.pingAsync()
  name: pingAsync()
  nameWithType: Webhook.pingAsync()
  returns:
    description: <p>a representation of the future computation of this call, returning the id on an event info resource </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Observable<String> pingAsync()
  uid: com.microsoft.azure.management.containerregistry.Webhook.pingAsync()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.provisioningState()
  name: provisioningState()
  nameWithType: Webhook.provisioningState()
  returns:
    description: <p>the provisioning state of the webhook </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.ProvisioningState?alt=com.microsoft.azure.management.containerregistry.ProvisioningState&text=ProvisioningState" data-throw-if-not-resolved="False"/>
  syntax: public ProvisioningState provisioningState()
  uid: com.microsoft.azure.management.containerregistry.Webhook.provisioningState()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.scope()
  name: scope()
  nameWithType: Webhook.scope()
  returns:
    description: <p>the scope of repositories where the event can be triggered </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

    For example:<ul><li><p>'foo:*' means events for all tags under repository 'foo'</p></li><li><p>'foo:bar' means events for 'foo:bar' only</p></li><li><p>'foo' is equivalent to 'foo:latest'</p></li><li><p>empty means all events </p></li></ul></p>
  syntax: public String scope()
  uid: com.microsoft.azure.management.containerregistry.Webhook.scope()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.serviceUri()
  name: serviceUri()
  nameWithType: Webhook.serviceUri()
  returns:
    description: <p>the service URI for the webhook to post notifications </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String serviceUri()
  uid: com.microsoft.azure.management.containerregistry.Webhook.serviceUri()
- fullName: com.microsoft.azure.management.containerregistry.Webhook.triggers()
  name: triggers()
  nameWithType: Webhook.triggers()
  returns:
    description: <p>the list of actions that trigger the webhook to post notifications </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookAction?alt=com.microsoft.azure.management.containerregistry.WebhookAction&text=WebhookAction" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Collection<WebhookAction> triggers()
  uid: com.microsoft.azure.management.containerregistry.Webhook.triggers()
nameWithType: Webhook
syntax: public interface Webhook extends ExternalChildResource<Webhook, Registry>,Resource,HasInner<WebhookInner>,Refreshable<Webhook>,Updatable<Webhook.Update>
type: interface
uid: com.microsoft.azure.management.containerregistry.Webhook
fullName: com.microsoft.azure.management.containerregistry.Webhook
name: Webhook
package: com.microsoft.azure.management.containerregistry
summary: <p>An object that represents a webhook for a container registry. </p>
metadata: {}
