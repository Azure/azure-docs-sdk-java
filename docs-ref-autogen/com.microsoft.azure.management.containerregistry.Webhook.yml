### YamlMime:JavaType
uid: "com.microsoft.azure.management.containerregistry.Webhook"
fullName: "com.microsoft.azure.management.containerregistry.Webhook"
name: "Webhook"
nameWithType: "Webhook"
summary: "An object that represents a webhook for a container registry."
syntax: "public interface Webhook extends ExternalChildResource<Webhook,Registry>, Resource, HasInner<WebhookInner>, Refreshable<Webhook>, Updatable<Webhook.Update>"
methods:
- uid: "com.microsoft.azure.management.containerregistry.Webhook.customHeaders()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.customHeaders()"
  name: "customHeaders()"
  nameWithType: "Webhook.customHeaders()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> customHeaders()"
  returns:
    description: "the Custom headers that will be added to the webhook notifications"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.disable()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.disable()"
  name: "disable()"
  nameWithType: "Webhook.disable()"
  summary: "Changes the status of the webhook to \"disabled\"."
  modifiers:
  - "abstract"
  syntax: "public abstract void disable()"
  desc: "Changes the status of the webhook to \"disabled\"."
- uid: "com.microsoft.azure.management.containerregistry.Webhook.disableAsync()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.disableAsync()"
  name: "disableAsync()"
  nameWithType: "Webhook.disableAsync()"
  summary: "Changes the status of the webhook to \"disabled\"."
  modifiers:
  - "abstract"
  syntax: "public abstract Completable disableAsync()"
  desc: "Changes the status of the webhook to \"disabled\"."
  returns:
    description: "a representation of the future computation of this call"
    type: "<xref href=\"rx.Completable?alt=rx.Completable&text=Completable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.enable()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.enable()"
  name: "enable()"
  nameWithType: "Webhook.enable()"
  summary: "Changes the status of the webhook to \"enabled\"."
  modifiers:
  - "abstract"
  syntax: "public abstract void enable()"
  desc: "Changes the status of the webhook to \"enabled\"."
- uid: "com.microsoft.azure.management.containerregistry.Webhook.enableAsync()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.enableAsync()"
  name: "enableAsync()"
  nameWithType: "Webhook.enableAsync()"
  summary: "Changes the status of the webhook to \"enabled\"."
  modifiers:
  - "abstract"
  syntax: "public abstract Completable enableAsync()"
  desc: "Changes the status of the webhook to \"enabled\"."
  returns:
    description: "a representation of the future computation of this call"
    type: "<xref href=\"rx.Completable?alt=rx.Completable&text=Completable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.isEnabled()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.isEnabled()"
  name: "isEnabled()"
  nameWithType: "Webhook.isEnabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isEnabled()"
  returns:
    description: "the status of the webhook"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.listEvents()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.listEvents()"
  name: "listEvents()"
  nameWithType: "Webhook.listEvents()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedList<WebhookEventInfo> listEvents()"
  returns:
    description: "the list of event info object"
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.listEventsAsync()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.listEventsAsync()"
  name: "listEventsAsync()"
  nameWithType: "Webhook.listEventsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<WebhookEventInfo> listEventsAsync()"
  returns:
    description: "a representation of the future computation of this call, returning the list of event info object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.parentId()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.parentId()"
  name: "parentId()"
  nameWithType: "Webhook.parentId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String parentId()"
  returns:
    description: "the webhook parent ID"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.ping()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.ping()"
  name: "ping()"
  nameWithType: "Webhook.ping()"
  modifiers:
  - "abstract"
  syntax: "public abstract String ping()"
  returns:
    description: "the id on an event info resource"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.pingAsync()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.pingAsync()"
  name: "pingAsync()"
  nameWithType: "Webhook.pingAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Observable<String> pingAsync()"
  returns:
    description: "a representation of the future computation of this call, returning the id on an event info resource"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.provisioningState()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.provisioningState()"
  name: "provisioningState()"
  nameWithType: "Webhook.provisioningState()"
  modifiers:
  - "abstract"
  syntax: "public abstract ProvisioningState provisioningState()"
  returns:
    description: "the provisioning state of the webhook"
    type: "<xref href=\"com.microsoft.azure.management.containerregistry.ProvisioningState?alt=com.microsoft.azure.management.containerregistry.ProvisioningState&text=ProvisioningState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.scope()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.scope()"
  name: "scope()"
  nameWithType: "Webhook.scope()"
  modifiers:
  - "abstract"
  syntax: "public abstract String scope()"
  returns:
    description: "the scope of repositories where the event can be triggered\n <p>\n For example:\n  - 'foo:*' means events for all tags under repository 'foo'\n  - 'foo:bar' means events for 'foo:bar' only\n  - 'foo' is equivalent to 'foo:latest'\n  - empty means all events"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.serviceUri()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.serviceUri()"
  name: "serviceUri()"
  nameWithType: "Webhook.serviceUri()"
  modifiers:
  - "abstract"
  syntax: "public abstract String serviceUri()"
  returns:
    description: "the service URI for the webhook to post notifications"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.containerregistry.Webhook.triggers()"
  fullName: "com.microsoft.azure.management.containerregistry.Webhook.triggers()"
  name: "triggers()"
  nameWithType: "Webhook.triggers()"
  modifiers:
  - "abstract"
  syntax: "public abstract Collection<WebhookAction> triggers()"
  returns:
    description: "the list of actions that trigger the webhook to post notifications"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.WebhookAction?alt=com.microsoft.azure.management.containerregistry.WebhookAction&text=WebhookAction\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An object that represents a webhook for a container registry."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource&text=ExternalChildResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.Resource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.Resource&text=Resource\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.HasInner?alt=com.microsoft.azure.management.resources.fluentcore.model.HasInner&text=HasInner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.containerregistry.Webhook.Update?alt=com.microsoft.azure.management.containerregistry.Webhook.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.containerregistry"
artifact: com.microsoft.azure:azure-mgmt-containerregistry:1.41.4
