### YamlMime:JavaMember
nameWithType: ListShardMap<KeyT>.getMappings
type: method
members:
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings()
  name: getMappings()
  nameWithType: ListShardMap<KeyT>.getMappings()
  returns:
    description: <p>Read-only collection of all point mappings on the shard map. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the point mappings for the shard map.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings()
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings()
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(LookupOptions lookupOptions)
  name: getMappings(LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(LookupOptions lookupOptions)
  parameters:
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of all point mappings on the shard map. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the point mappings for the shard map.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range)
  name: getMappings(Range range)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, LookupOptions lookupOptions)
  name: getMappings(Range range, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, LookupOptions lookupOptions)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, Shard shard)
  name: getMappings(Range range, Shard shard)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, Shard shard)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range and shard constraints. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range and given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,Shard)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  name: getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Point value, any mapping overlapping with the range will be returned. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Range?alt=com.microsoft.azure.elasticdb.shard.base.Range&text=Range" data-throw-if-not-resolved="False"/>
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given range and shard constraints. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist within given range and given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Range range, Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Range,Shard,LookupOptions)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Shard shard)
  name: getMappings(Shard shard)
  nameWithType: ListShardMap<KeyT>.getMappings(Shard shard)
  parameters:
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given shard constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist for the given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Shard shard)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Shard)
- fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings(Shard shard, LookupOptions lookupOptions)
  name: getMappings(Shard shard, LookupOptions lookupOptions)
  nameWithType: ListShardMap<KeyT>.getMappings(Shard shard, LookupOptions lookupOptions)
  parameters:
  - description: <p>Shard for which the mappings will be returned. </p>
    name: shard
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to search in the cache and/or store. </p>
    name: lookupOptions
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.LookupOptions?alt=com.microsoft.azure.elasticdb.shard.base.LookupOptions&text=LookupOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Read-only collection of mappings that satisfy the given shard constraint. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.PointMapping?alt=com.microsoft.azure.elasticdb.shard.base.PointMapping&text=PointMapping" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the mappings that exist for the given shard.</p>

    <p></p>
  syntax: public List<PointMapping> getMappings(Shard shard, LookupOptions lookupOptions)
  uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings(Shard,LookupOptions)
uid: com.microsoft.azure.elasticdb.shard.map.ListShardMap.getMappings*
fullName: com.microsoft.azure.elasticdb.shard.map.ListShardMap<KeyT>.getMappings()
name: getMappings()
package: com.microsoft.azure.elasticdb.shard.map
metadata: {}
