### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.OutputFile
  id: OutputFile
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile()
  - com.microsoft.azure.batch.protocol.models.OutputFile.destination()
  - com.microsoft.azure.batch.protocol.models.OutputFile.filePattern()
  - com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions()
  - com.microsoft.azure.batch.protocol.models.OutputFile.withDestination(com.microsoft.azure.batch.protocol.models.OutputFileDestination)
  - com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern(java.lang.String)
  - com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions(com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions)
  langs:
  - java
  name: OutputFile
  nameWithType: OutputFile
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: A specification for uploading files from an Azure Batch Compute Node to another location after the Batch service has finished executing the Task process.
  syntax:
    content: public class OutputFile
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile()
  id: OutputFile()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: OutputFile()
  nameWithType: OutputFile.OutputFile()
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile()
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public OutputFile()
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.destination()
  id: destination()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: destination()
  nameWithType: OutputFile.destination()
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.destination()
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.destination*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the destination value.
  syntax:
    content: public OutputFileDestination destination()
    return:
      type: com.microsoft.azure.batch.protocol.models.OutputFileDestination
      description: the destination value
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.filePattern()
  id: filePattern()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: filePattern()
  nameWithType: OutputFile.filePattern()
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.filePattern()
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.filePattern*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Get both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: \\* matches 0 or more characters (for example pattern abc\\* would match abc or abcdef), \\*\\* matches any directory, ? matches any single character, \\[abc\\] matches one character in the brackets, and \\[a-c\\] matches one character in the range. Brackets can include a negation to match any character not specified (for example \\[!abc\\] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example \\*.gif will not match .a.gif, but .\\*.gif will). A simple example: \\*\\*\\\\\\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc\\[\\*\\] would match a file named abc\\*). Note that both \\\\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied."
  syntax:
    content: public String filePattern()
    return:
      type: java.lang.String
      description: the filePattern value
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions()
  id: uploadOptions()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: uploadOptions()
  nameWithType: OutputFile.uploadOptions()
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions()
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the uploadOptions value.
  syntax:
    content: public OutputFileUploadOptions uploadOptions()
    return:
      type: com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions
      description: the uploadOptions value
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withDestination(com.microsoft.azure.batch.protocol.models.OutputFileDestination)
  id: withDestination(com.microsoft.azure.batch.protocol.models.OutputFileDestination)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: withDestination(OutputFileDestination destination)
  nameWithType: OutputFile.withDestination(OutputFileDestination destination)
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withDestination(OutputFileDestination destination)
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.withDestination*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the destination value.
  syntax:
    content: public OutputFile withDestination(OutputFileDestination destination)
    parameters:
    - id: destination
      type: com.microsoft.azure.batch.protocol.models.OutputFileDestination
      description: the destination value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.OutputFile
      description: the OutputFile object itself.
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern(java.lang.String)
  id: withFilePattern(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: withFilePattern(String filePattern)
  nameWithType: OutputFile.withFilePattern(String filePattern)
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern(String filePattern)
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Set both relative and absolute paths are supported. Relative paths are relative to the Task working directory. The following wildcards are supported: \\* matches 0 or more characters (for example pattern abc\\* would match abc or abcdef), \\*\\* matches any directory, ? matches any single character, \\[abc\\] matches one character in the brackets, and \\[a-c\\] matches one character in the range. Brackets can include a negation to match any character not specified (for example \\[!abc\\] matches any character but a, b, or c). If a file name starts with \".\" it is ignored by default but may be matched by specifying it explicitly (for example \\*.gif will not match .a.gif, but .\\*.gif will). A simple example: \\*\\*\\\\\\*.txt matches any file that does not start in '.' and ends with .txt in the Task working directory or any subdirectory. If the filename contains a wildcard character it can be escaped using brackets (for example abc\\[\\*\\] would match a file named abc\\*). Note that both \\\\ and / are treated as directory separators on Windows, but only / is on Linux. Environment variables (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied."
  syntax:
    content: public OutputFile withFilePattern(String filePattern)
    parameters:
    - id: filePattern
      type: java.lang.String
      description: the filePattern value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.OutputFile
      description: the OutputFile object itself.
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions(com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions)
  id: withUploadOptions(com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.OutputFile
  langs:
  - java
  name: withUploadOptions(OutputFileUploadOptions uploadOptions)
  nameWithType: OutputFile.withUploadOptions(OutputFileUploadOptions uploadOptions)
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions(OutputFileUploadOptions uploadOptions)
  overload: com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the uploadOptions value.
  syntax:
    content: public OutputFile withUploadOptions(OutputFileUploadOptions uploadOptions)
    parameters:
    - id: uploadOptions
      type: com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions
      description: the uploadOptions value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.OutputFile
      description: the OutputFile object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile*
  name: OutputFile
  nameWithType: OutputFile.OutputFile
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.OutputFile
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.filePattern*
  name: filePattern
  nameWithType: OutputFile.filePattern
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.filePattern
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern*
  name: withFilePattern
  nameWithType: OutputFile.withFilePattern
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withFilePattern
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.OutputFileDestination
  name: OutputFileDestination
  nameWithType: OutputFileDestination
  fullName: com.microsoft.azure.batch.protocol.models.OutputFileDestination
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.destination*
  name: destination
  nameWithType: OutputFile.destination
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.destination
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withDestination*
  name: withDestination
  nameWithType: OutputFile.withDestination
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withDestination
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions
  name: OutputFileUploadOptions
  nameWithType: OutputFileUploadOptions
  fullName: com.microsoft.azure.batch.protocol.models.OutputFileUploadOptions
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions*
  name: uploadOptions
  nameWithType: OutputFile.uploadOptions
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.uploadOptions
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions*
  name: withUploadOptions
  nameWithType: OutputFile.withUploadOptions
  fullName: com.microsoft.azure.batch.protocol.models.OutputFile.withUploadOptions
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
