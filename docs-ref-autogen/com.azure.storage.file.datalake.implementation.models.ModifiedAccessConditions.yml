### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  id: "ModifiedAccessConditions"
  parent: "com.azure.storage.file.datalake.implementation.models"
  children:
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions()"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch()"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince()"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch()"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince()"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch(java.lang.String)"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch(java.lang.String)"
  - "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  langs:
  - "java"
  name: "ModifiedAccessConditions"
  nameWithType: "ModifiedAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  type: "Class"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Additional parameters for a set of operations."
  syntax:
    content: "public final class ModifiedAccessConditions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions()"
  id: "ModifiedAccessConditions()"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "ModifiedAccessConditions()"
  nameWithType: "ModifiedAccessConditions.ModifiedAccessConditions()"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions()"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions*"
  type: "Constructor"
  package: "com.azure.storage.file.datalake.implementation.models"
  syntax:
    content: "public ModifiedAccessConditions()"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch()"
  id: "getIfMatch()"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "getIfMatch()"
  nameWithType: "ModifiedAccessConditions.getIfMatch()"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch()"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Get the ifMatch property: Specify an ETag value to operate only on blobs with a matching value."
  syntax:
    content: "public String getIfMatch()"
    return:
      type: "java.lang.String"
      description: "the ifMatch value."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince()"
  id: "getIfModifiedSince()"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "getIfModifiedSince()"
  nameWithType: "ModifiedAccessConditions.getIfModifiedSince()"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince()"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Get the ifModifiedSince property: Specify this header value to operate only on a blob if it has been modified since the specified date/time."
  syntax:
    content: "public OffsetDateTime getIfModifiedSince()"
    return:
      type: "java.time.OffsetDateTime"
      description: "the ifModifiedSince value."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch()"
  id: "getIfNoneMatch()"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "getIfNoneMatch()"
  nameWithType: "ModifiedAccessConditions.getIfNoneMatch()"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch()"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Get the ifNoneMatch property: Specify an ETag value to operate only on blobs without a matching value."
  syntax:
    content: "public String getIfNoneMatch()"
    return:
      type: "java.lang.String"
      description: "the ifNoneMatch value."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince()"
  id: "getIfUnmodifiedSince()"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "getIfUnmodifiedSince()"
  nameWithType: "ModifiedAccessConditions.getIfUnmodifiedSince()"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince()"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Get the ifUnmodifiedSince property: Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
  syntax:
    content: "public OffsetDateTime getIfUnmodifiedSince()"
    return:
      type: "java.time.OffsetDateTime"
      description: "the ifUnmodifiedSince value."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch(java.lang.String)"
  id: "setIfMatch(java.lang.String)"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "setIfMatch(String ifMatch)"
  nameWithType: "ModifiedAccessConditions.setIfMatch(String ifMatch)"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch(String ifMatch)"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Set the ifMatch property: Specify an ETag value to operate only on blobs with a matching value."
  syntax:
    content: "public ModifiedAccessConditions setIfMatch(String ifMatch)"
    parameters:
    - id: "ifMatch"
      type: "java.lang.String"
      description: "the ifMatch value to set."
    return:
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "the ModifiedAccessConditions object itself."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince(java.time.OffsetDateTime)"
  id: "setIfModifiedSince(java.time.OffsetDateTime)"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  nameWithType: "ModifiedAccessConditions.setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince(OffsetDateTime ifModifiedSince)"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Set the ifModifiedSince property: Specify this header value to operate only on a blob if it has been modified since the specified date/time."
  syntax:
    content: "public ModifiedAccessConditions setIfModifiedSince(OffsetDateTime ifModifiedSince)"
    parameters:
    - id: "ifModifiedSince"
      type: "java.time.OffsetDateTime"
      description: "the ifModifiedSince value to set."
    return:
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "the ModifiedAccessConditions object itself."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch(java.lang.String)"
  id: "setIfNoneMatch(java.lang.String)"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "setIfNoneMatch(String ifNoneMatch)"
  nameWithType: "ModifiedAccessConditions.setIfNoneMatch(String ifNoneMatch)"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch(String ifNoneMatch)"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Set the ifNoneMatch property: Specify an ETag value to operate only on blobs without a matching value."
  syntax:
    content: "public ModifiedAccessConditions setIfNoneMatch(String ifNoneMatch)"
    parameters:
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "the ifNoneMatch value to set."
    return:
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "the ModifiedAccessConditions object itself."
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince(java.time.OffsetDateTime)"
  id: "setIfUnmodifiedSince(java.time.OffsetDateTime)"
  parent: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
  langs:
  - "java"
  name: "setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  nameWithType: "ModifiedAccessConditions.setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
  overload: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince*"
  type: "Method"
  package: "com.azure.storage.file.datalake.implementation.models"
  summary: "Set the ifUnmodifiedSince property: Specify this header value to operate only on a blob if it has not been modified since the specified date/time."
  syntax:
    content: "public ModifiedAccessConditions setIfUnmodifiedSince(OffsetDateTime ifUnmodifiedSince)"
    parameters:
    - id: "ifUnmodifiedSince"
      type: "java.time.OffsetDateTime"
      description: "the ifUnmodifiedSince value to set."
    return:
      type: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions"
      description: "the ModifiedAccessConditions object itself."
references:
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions*"
  name: "ModifiedAccessConditions"
  nameWithType: "ModifiedAccessConditions.ModifiedAccessConditions"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.ModifiedAccessConditions"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince*"
  name: "getIfModifiedSince"
  nameWithType: "ModifiedAccessConditions.getIfModifiedSince"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfModifiedSince"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince*"
  name: "setIfModifiedSince"
  nameWithType: "ModifiedAccessConditions.setIfModifiedSince"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfModifiedSince"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince*"
  name: "getIfUnmodifiedSince"
  nameWithType: "ModifiedAccessConditions.getIfUnmodifiedSince"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfUnmodifiedSince"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince*"
  name: "setIfUnmodifiedSince"
  nameWithType: "ModifiedAccessConditions.setIfUnmodifiedSince"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfUnmodifiedSince"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch*"
  name: "getIfMatch"
  nameWithType: "ModifiedAccessConditions.getIfMatch"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfMatch"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch*"
  name: "setIfMatch"
  nameWithType: "ModifiedAccessConditions.setIfMatch"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfMatch"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch*"
  name: "getIfNoneMatch"
  nameWithType: "ModifiedAccessConditions.getIfNoneMatch"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.getIfNoneMatch"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch*"
  name: "setIfNoneMatch"
  nameWithType: "ModifiedAccessConditions.setIfNoneMatch"
  fullName: "com.azure.storage.file.datalake.implementation.models.ModifiedAccessConditions.setIfNoneMatch"
  package: "com.azure.storage.file.datalake.implementation.models"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
