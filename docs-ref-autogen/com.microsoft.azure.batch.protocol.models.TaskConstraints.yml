### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints"
fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints"
name: "TaskConstraints"
nameWithType: "TaskConstraints"
summary: "Execution constraints to apply to a Task."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class TaskConstraints"
constructors:
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.TaskConstraints()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.TaskConstraints()"
  name: "TaskConstraints()"
  nameWithType: "TaskConstraints.TaskConstraints()"
  syntax: "public TaskConstraints()"
methods:
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.maxTaskRetryCount()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.maxTaskRetryCount()"
  name: "maxTaskRetryCount()"
  nameWithType: "TaskConstraints.maxTaskRetryCount()"
  summary: "Get note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code."
  syntax: "public Integer maxTaskRetryCount()"
  desc: "Get note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit."
  returns:
    description: "the maxTaskRetryCount value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.maxWallClockTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.maxWallClockTime()"
  name: "maxWallClockTime()"
  nameWithType: "TaskConstraints.maxWallClockTime()"
  summary: "Get if this is not specified, there is no time limit on how long the Task may run."
  syntax: "public Period maxWallClockTime()"
  desc: "Get if this is not specified, there is no time limit on how long the Task may run."
  returns:
    description: "the maxWallClockTime value"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.retentionTime()"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.retentionTime()"
  name: "retentionTime()"
  nameWithType: "TaskConstraints.retentionTime()"
  summary: "Get the default is 7 days, i.<wbr>e."
  syntax: "public Period retentionTime()"
  desc: "Get the default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted."
  returns:
    description: "the retentionTime value"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withMaxTaskRetryCount(java.lang.Integer)"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  name: "withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  nameWithType: "TaskConstraints.withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  summary: "Set note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code."
  parameters:
  - description: "the maxTaskRetryCount value to set"
    name: "maxTaskRetryCount"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TaskConstraints withMaxTaskRetryCount(Integer maxTaskRetryCount)"
  desc: "Set note that this value specifically controls the number of retries for the Task executable due to a nonzero exit code. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task after the first attempt. If the maximum retry count is -1, the Batch service retries the Task without limit."
  returns:
    description: "the TaskConstraints object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withMaxWallClockTime(org.joda.time.Period)"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withMaxWallClockTime(Period maxWallClockTime)"
  name: "withMaxWallClockTime(Period maxWallClockTime)"
  nameWithType: "TaskConstraints.withMaxWallClockTime(Period maxWallClockTime)"
  summary: "Set if this is not specified, there is no time limit on how long the Task may run."
  parameters:
  - description: "the maxWallClockTime value to set"
    name: "maxWallClockTime"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TaskConstraints withMaxWallClockTime(Period maxWallClockTime)"
  desc: "Set if this is not specified, there is no time limit on how long the Task may run."
  returns:
    description: "the TaskConstraints object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withRetentionTime(org.joda.time.Period)"
  fullName: "com.microsoft.azure.batch.protocol.models.TaskConstraints.withRetentionTime(Period retentionTime)"
  name: "withRetentionTime(Period retentionTime)"
  nameWithType: "TaskConstraints.withRetentionTime(Period retentionTime)"
  summary: "Set the default is 7 days, i.<wbr>e."
  parameters:
  - description: "the retentionTime value to set"
    name: "retentionTime"
    type: "<xref href=\"org.joda.time.Period?alt=org.joda.time.Period&text=Period\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TaskConstraints withRetentionTime(Period retentionTime)"
  desc: "Set the default is 7 days, i.e. the Task directory will be retained for 7 days unless the Compute Node is removed or the Job is deleted."
  returns:
    description: "the TaskConstraints object itself."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Execution constraints to apply to a Task."
metadata: {}
package: "com.microsoft.azure.batch.protocol.models"
artifact: com.microsoft.azure:azure-batch:9.0.0
