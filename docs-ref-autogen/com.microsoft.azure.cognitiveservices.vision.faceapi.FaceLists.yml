### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStream()
  name: addFaceFromStream()
  nameWithType: FaceLists.addFaceFromStream()
  returns:
    description: <p>the first stage of the addFaceFromStream call </p>
    type: <xref href="FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId?alt=FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId&text=FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public FaceListsAddFaceFromStreamDefinitionStages.WithFaceListId addFaceFromStream()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStream()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  name: addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  nameWithType: FaceLists.addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addFaceFromStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamOptionalParameter&text=AddFaceFromStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersistedFace object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public PersistedFace addFaceFromStream(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStream(String,byte [],AddFaceFromStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  name: addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  nameWithType: FaceLists.addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addFaceFromStreamOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromStreamOptionalParameter&text=AddFaceFromStreamOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersistedFace object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public Observable<PersistedFace> addFaceFromStreamAsync(String faceListId, byte[] image, AddFaceFromStreamOptionalParameter addFaceFromStreamOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromStreamAsync(String,byte [],AddFaceFromStreamOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrl()
  name: addFaceFromUrl()
  nameWithType: FaceLists.addFaceFromUrl()
  returns:
    description: <p>the first stage of the addFaceFromUrl call </p>
    type: <xref href="FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId?alt=FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId&text=FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public FaceListsAddFaceFromUrlDefinitionStages.WithFaceListId addFaceFromUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrl(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  name: addFaceFromUrl(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  nameWithType: FaceLists.addFaceFromUrl(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addFaceFromUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlOptionalParameter&text=AddFaceFromUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersistedFace object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public PersistedFace addFaceFromUrl(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrl(String,String,AddFaceFromUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  name: addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  nameWithType: FaceLists.addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Publicly reachable URL of an image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addFaceFromUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.AddFaceFromUrlOptionalParameter&text=AddFaceFromUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersistedFace object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersistedFace&text=PersistedFace" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a face to a face list. The input face is specified as an image with a targetFace rectangle. It returns a persistedFaceId representing the added face, and persistedFaceId will not expire.</p>

    <p></p>
  syntax: public Observable<PersistedFace> addFaceFromUrlAsync(String faceListId, String url, AddFaceFromUrlOptionalParameter addFaceFromUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.addFaceFromUrlAsync(String,String,AddFaceFromUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.create()
  name: create()
  nameWithType: FaceLists.create()
  returns:
    description: <p>the first stage of the create call </p>
    type: <xref href="FaceListsCreateDefinitionStages.WithFaceListId?alt=FaceListsCreateDefinitionStages.WithFaceListId&text=FaceListsCreateDefinitionStages.WithFaceListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.</p>

    <p></p>
  syntax: public FaceListsCreateDefinitionStages.WithFaceListId create()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.create()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  name: create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  nameWithType: FaceLists.create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter&text=CreateFaceListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.</p>

    <p></p>
  syntax: public void create(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.create(String,CreateFaceListsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  name: createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  nameWithType: FaceLists.createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreateFaceListsOptionalParameter&text=CreateFaceListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create an empty face list. Up to 64 face lists are allowed to exist in one subscription.</p>

    <p></p>
  syntax: public Observable<Void> createAsync(String faceListId, CreateFaceListsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.createAsync(String,CreateFaceListsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.delete(String faceListId)
  name: delete(String faceListId)
  nameWithType: FaceLists.delete(String faceListId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete an existing face list according to faceListId. Persisted face images in the face list will also be deleted.</p>

    <p></p>
  syntax: public void delete(String faceListId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.delete(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteAsync(String faceListId)
  name: deleteAsync(String faceListId)
  nameWithType: FaceLists.deleteAsync(String faceListId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an existing face list according to faceListId. Persisted face images in the face list will also be deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String faceListId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteFace(String faceListId, UUID persistedFaceId)
  name: deleteFace(String faceListId, UUID persistedFaceId)
  nameWithType: FaceLists.deleteFace(String faceListId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete an existing face from a face list (given by a persisitedFaceId and a faceListId). Persisted image related to the face will also be deleted.</p>

    <p></p>
  syntax: public void deleteFace(String faceListId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteFace(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteFaceAsync(String faceListId, UUID persistedFaceId)
  name: deleteFaceAsync(String faceListId, UUID persistedFaceId)
  nameWithType: FaceLists.deleteFaceAsync(String faceListId, UUID persistedFaceId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id referencing a particular persistedFaceId of an existing face. </p>
    name: persistedFaceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an existing face from a face list (given by a persisitedFaceId and a faceListId). Persisted image related to the face will also be deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteFaceAsync(String faceListId, UUID persistedFaceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.deleteFaceAsync(String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.get(String faceListId)
  name: get(String faceListId)
  nameWithType: FaceLists.get(String faceListId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FaceList object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList&text=FaceList" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve a face list's information.</p>

    <p></p>
  syntax: public FaceList get(String faceListId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.get(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.getAsync(String faceListId)
  name: getAsync(String faceListId)
  nameWithType: FaceLists.getAsync(String faceListId)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FaceList object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList&text=FaceList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve a face list's information.</p>

    <p></p>
  syntax: public Observable<FaceList> getAsync(String faceListId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.getAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.list()
  name: list()
  nameWithType: FaceLists.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;FaceList&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList&text=FaceList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve information about all existing face lists. Only faceListId, name and userData will be returned.</p>

    <p></p>
  syntax: public List<FaceList> list()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.list()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.listAsync()
  name: listAsync()
  nameWithType: FaceLists.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;FaceList&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceList&text=FaceList" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieve information about all existing face lists. Only faceListId, name and userData will be returned.</p>

    <p></p>
  syntax: public Observable<List<FaceList>> listAsync()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.listAsync()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.update()
  name: update()
  nameWithType: FaceLists.update()
  returns:
    description: <p>the first stage of the update call </p>
    type: <xref href="FaceListsUpdateDefinitionStages.WithFaceListId?alt=FaceListsUpdateDefinitionStages.WithFaceListId&text=FaceListsUpdateDefinitionStages.WithFaceListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update information of a face list.</p>

    <p></p>
  syntax: public FaceListsUpdateDefinitionStages.WithFaceListId update()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.update()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  name: update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  nameWithType: FaceLists.update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter&text=UpdateFaceListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Update information of a face list.</p>

    <p></p>
  syntax: public void update(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.update(String,UpdateFaceListsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  name: updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  nameWithType: FaceLists.updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular face list. </p>
    name: faceListId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdateFaceListsOptionalParameter&text=UpdateFaceListsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update information of a face list.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String faceListId, UpdateFaceListsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists.updateAsync(String,UpdateFaceListsOptionalParameter)
nameWithType: FaceLists
syntax: public interface FaceLists
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.FaceLists
name: FaceLists
package: com.microsoft.azure.cognitiveservices.vision.faceapi
summary: <p>An instance of this class provides access to all the operations defined in FaceLists. </p>
metadata: {}
