### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
  id: JobNetworkConfiguration
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration()
  - com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId()
  - com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId(java.lang.String)
  langs:
  - java
  name: JobNetworkConfiguration
  nameWithType: JobNetworkConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: The network configuration for the Job.
  syntax:
    content: public class JobNetworkConfiguration
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration()
  id: JobNetworkConfiguration()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
  langs:
  - java
  name: JobNetworkConfiguration()
  nameWithType: JobNetworkConfiguration.JobNetworkConfiguration()
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration()
  overload: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public JobNetworkConfiguration()
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId()
  id: subnetId()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
  langs:
  - java
  name: subnetId()
  nameWithType: JobNetworkConfiguration.subnetId()
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId()
  overload: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Get the virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/\\{subscription\\}/resourceGroups/\\{group\\}/providers/\\{provider\\}/virtualNetworks/\\{network\\}/subnets/\\{subnet\\}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics\\#virtual-network-vnet-and-firewall-configuration."
  syntax:
    content: public String subnetId()
    return:
      type: java.lang.String
      description: the subnetId value
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId(java.lang.String)
  id: withSubnetId(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
  langs:
  - java
  name: withSubnetId(String subnetId)
  nameWithType: JobNetworkConfiguration.withSubnetId(String subnetId)
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId(String subnetId)
  overload: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Set the virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes which will run Tasks from the Job. This can be up to the number of Compute Nodes in the Pool. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet so that Azure Batch service can schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. This is of the form /subscriptions/\\{subscription\\}/resourceGroups/\\{group\\}/providers/\\{provider\\}/virtualNetworks/\\{network\\}/subnets/\\{subnet\\}. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication from the Azure Batch service. For Pools created with a Virtual Machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. Port 443 is also required to be open for outbound connections for communications to Azure Storage. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics\\#virtual-network-vnet-and-firewall-configuration."
  syntax:
    content: public JobNetworkConfiguration withSubnetId(String subnetId)
    parameters:
    - id: subnetId
      type: java.lang.String
      description: the subnetId value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration
      description: the JobNetworkConfiguration object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration*
  name: JobNetworkConfiguration
  nameWithType: JobNetworkConfiguration.JobNetworkConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.JobNetworkConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId*
  name: subnetId
  nameWithType: JobNetworkConfiguration.subnetId
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.subnetId
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId*
  name: withSubnetId
  nameWithType: JobNetworkConfiguration.withSubnetId
  fullName: com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration.withSubnetId
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
