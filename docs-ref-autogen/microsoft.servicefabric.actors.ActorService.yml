### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.ActorService
  id: ActorService
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors.ActorService.deleteActorAsync(ActorId,CancellationToken)
  - microsoft.servicefabric.actors.ActorService.getActorsAsync(ContinuationToken,CancellationToken)
  href: microsoft.servicefabric.actors.ActorService.yml
  langs:
  - java
  name: ActorService
  nameWithType: ActorService
  fullName: microsoft.servicefabric.actors.ActorService
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorService.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorService.java
    startLine: 10
  package: microsoft.servicefabric.actors
  summary: "<p>Defines the interface containing methods which can be called at Actor Service level. </p>"
  syntax:
    content: public interface ActorService extends Service
- uid: microsoft.servicefabric.actors.ActorService.deleteActorAsync(ActorId,CancellationToken)
  id: deleteActorAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.ActorService
  href: microsoft.servicefabric.actors.ActorService.yml
  langs:
  - java
  name: deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.ActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.ActorService.deleteActorAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorService.java
    startLine: 40
  package: microsoft.servicefabric.actors
  summary: "<p>Deletes an Actor from the Actor service.</p>\r\n<p>\r\nAn active actor, will be deactivated and its state will also be deleted from state provider. An in-active actor's state will be deleted from state provider. If this method is called for a non-existent actor id in the system, it will be a no-op. </p>"
  syntax:
    content: public CompletableFuture<?> deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> of the actor to be deleted. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous operation of call to server. </p>
- uid: microsoft.servicefabric.actors.ActorService.getActorsAsync(ContinuationToken,CancellationToken)
  id: getActorsAsync(ContinuationToken,CancellationToken)
  parent: microsoft.servicefabric.actors.ActorService
  href: microsoft.servicefabric.actors.ActorService.yml
  langs:
  - java
  name: getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: ActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.ActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  overload: microsoft.servicefabric.actors.ActorService.getActorsAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorService.java
    startLine: 23
  package: microsoft.servicefabric.actors
  summary: "<p>Gets the list of Actors by querying the actor service.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<PagedResult<ActorInformation>> getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
    parameters:
    - id: continuationToken
      type: microsoft.servicefabric.actors.ContinuationToken
      description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors.PagedResult78504a52microsoft.servicefabric.actors.ActorInformatione7daa122
      description: <p>A future that represents the asynchronous operation of call to server. </p>
references:
- uid: 9cdf14d0microsoft.servicefabric.actors.PagedResult78504a52microsoft.servicefabric.actors.ActorInformatione7daa122
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: microsoft.servicefabric.actors.PagedResult
    name: PagedResult
    fullName: microsoft.servicefabric.actors.PagedResult
    href: microsoft.servicefabric.actors.PagedResult.yml
  - name: <
    fullName: <
  - uid: microsoft.servicefabric.actors.ActorInformation
    name: ActorInformation
    fullName: microsoft.servicefabric.actors.ActorInformation
    href: microsoft.servicefabric.actors.ActorInformation.yml
  - name: '>>'
    fullName: '>>'
- uid: microsoft.servicefabric.actors.ActorService.getActorsAsync*
  name: getActorsAsync
  nameWithType: ActorService.getActorsAsync
  fullName: microsoft.servicefabric.actors.ActorService.getActorsAsync
  package: microsoft.servicefabric.actors
- uid: 16409f84
  spec.java:
  - name: CompletableFuture<?>
    fullName: CompletableFuture<?>
- uid: microsoft.servicefabric.actors.ActorService.deleteActorAsync*
  name: deleteActorAsync
  nameWithType: ActorService.deleteActorAsync
  fullName: microsoft.servicefabric.actors.ActorService.deleteActorAsync
  package: microsoft.servicefabric.actors
- uid: microsoft.servicefabric.services.remoting.Service
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting.Service.yml
  name: Service
  nameWithType: Service
  fullName: microsoft.servicefabric.services.remoting.Service
  type: Interface
  summary: "<p>This is the marker interface for enabling interface Remoting for services. An <xref uid=\"microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener\"></xref> provides remoting for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be accessed via Proxy on the client side. </p>"
  syntax:
    content: public interface Service
- uid: microsoft.servicefabric.actors.runtime.FabricActorService
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime.FabricActorService.yml
  name: FabricActorService
  nameWithType: FabricActorService
  fullName: microsoft.servicefabric.actors.runtime.FabricActorService
  type: Class
  summary: "<p>Represents the base class for Microsoft Service Fabric based reliable actors service. </p>\r\n<p>\r\n  <b>Remarks:</b>Derive from this class to implement your own custom actor service if you want to override any service level behavior for your actors. </p>"
  syntax:
    content: public class FabricActorService
- uid: microsoft.servicefabric.actors.PagedResult
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.PagedResult.yml
  name: PagedResult<T>
  nameWithType: PagedResult<T>
  fullName: microsoft.servicefabric.actors.PagedResult<T>
  type: Class
  summary: "<p>Represents the result of actor query calls.</p>\r\n<p></p>"
  syntax:
    content: public class PagedResult<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>Type of the items this query result contains. </p>
- uid: microsoft.servicefabric.actors.ActorInformation
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorInformation.yml
  name: ActorInformation
  nameWithType: ActorInformation
  fullName: microsoft.servicefabric.actors.ActorInformation
  type: Class
  summary: "<p>Represents the information about an actor returned by Actor Query method call. </p>"
  syntax:
    content: public class ActorInformation
- uid: microsoft.servicefabric.actors.runtime.FabricActorService.getActorsAsync(ContinuationToken,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime.FabricActorService
  href: microsoft.servicefabric.actors.runtime.FabricActorService.yml
  name: getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: FabricActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.FabricActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  type: Method
  summary: "<p>Gets the list of Actors by querying the actor service.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<PagedResult<ActorInformation>> getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
    parameters:
    - id: continuationToken
      type: microsoft.servicefabric.actors.ContinuationToken
      description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 9cdf14d0microsoft.servicefabric.actors.PagedResult78504a52microsoft.servicefabric.actors.ActorInformatione7daa122
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents the asynchronous operation of call to server. </p>
- uid: microsoft.servicefabric.actors.ContinuationToken
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ContinuationToken.yml
  name: ContinuationToken
  nameWithType: ContinuationToken
  fullName: microsoft.servicefabric.actors.ContinuationToken
  type: Class
  summary: "<p>Represents a continuation token for query operations. </p>\r\n<p>\r\n  <b>Remarks:</b>A method that may return a partial set of results via a <xref uid=\"microsoft.servicefabric.actors.PagedResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResult\"></xref> object also returns a continuation token in the object, which can be used in a subsequent call to return the next set of available results. </p>"
  syntax:
    content: public class ContinuationToken
- uid: system.fabric.CancellationToken
  parent: system.fabric
  href: system.fabric.CancellationToken.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric.CancellationTokenSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource\"></xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric.CancellationTokenSource.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#getToken()\"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric.CancellationTokenSource.cancel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#cancel()\"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax:
    content: public class CancellationToken
- uid: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId,CancellationToken)
  parent: microsoft.servicefabric.actors.runtime.FabricActorService
  href: microsoft.servicefabric.actors.runtime.FabricActorService.yml
  name: deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  fullName: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  type: Method
  summary: "<p>Deletes an Actor from the Actor service.</p>\r\n<p>\r\nAn active actor, will be deactivated and its state will also be deleted from state provider. An in-active actor's state will be deleted from state provider. If this method is called for a non-existent actor id in the system, it will be a no-op. </p>"
  syntax:
    content: public CompletableFuture<?> deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
    parameters:
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> of the actor to be deleted. </p>
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: >-
        <p>

          <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    return:
      type: 16409f84
      description: <p>A task that represents the asynchronous operation of call to server. </p>
- uid: microsoft.servicefabric.actors.ActorId
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorId.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: "<p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.UUID\"></xref> or long. </p>"
  syntax:
    content: public class ActorId
