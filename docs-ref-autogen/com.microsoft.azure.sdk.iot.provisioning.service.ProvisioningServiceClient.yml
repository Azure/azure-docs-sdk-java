### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.ProvisioningServiceClient(String connectionString)
  name: ProvisioningServiceClient(String connectionString)
  nameWithType: ProvisioningServiceClient.ProvisioningServiceClient(String connectionString)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that cares the connection string of the Device Provisioning Service. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the connectionString is<code>null 

          </code> or empty. </p>
  summary: >-
    <p>Create a new instance of the<code>DeviceProvisioningServiceClient 

        </code> that exposes the API to the Device Provisioning Service.</p>

    <p>The Device Provisioning Service Client is created based on a <b>Provisioning Connection String</b>. </p>

    <p>Once you create a Device Provisioning Service on Azure, you can get the connection string on the Azure portal.</p>

    <p></p>
  syntax: public ProvisioningServiceClient(String connectionString)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.ProvisioningServiceClient(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification querySpecification)
  name: createEnrollmentGroupQuery(QuerySpecification querySpecification)
  nameWithType: ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification querySpecification)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameter is not correct. </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create an enrollmentGroup query.</p>

    <p>This method will create a new enrollment group query on Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p></p>
  syntax: public Query createEnrollmentGroupQuery(QuerySpecification querySpecification)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification querySpecification, int pageSize)
  name: createEnrollmentGroupQuery(QuerySpecification querySpecification, int pageSize)
  nameWithType: ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification querySpecification, int pageSize)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>int 

          </code> with the maximum number of items per iteration. It can be 0 for default, but not negative. </p>
    name: pageSize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameters are not correct. </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create an enrollmentGroup query.</p>

    <p>This method will create a new enrollment group query on Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p>For each iteration, the Query will return a List of objects correspondent to the query result. The maximum number of items per iteration can be specified by the pageSize. It is optional, you can provide <b>0</b> for default pageSize or use the API <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification)" data-throw-if-not-resolved="false" data-raw-source="createEnrollmentGroupQuery(QuerySpecification)"></xref>.</p>

    <p></p>
  syntax: public Query createEnrollmentGroupQuery(QuerySpecification querySpecification, int pageSize)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupQuery(QuerySpecification,int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId)
  name: createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId)
  nameWithType: ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> or empty. </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create a registration status query.</p>

    <p>This method will create a new registration status query for a specific enrollment group on the Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p></p>
  syntax: public Query createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId, int pageSize)
  name: createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId, int pageSize)
  nameWithType: ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId, int pageSize)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> or empty. </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>int 

          </code> with the maximum number of items per iteration. It can be 0 for default, but not negative. </p>
    name: pageSize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameters are not correct. </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create a registration status query.</p>

    <p>This method will create a new registration status query for a specific enrollment group on the Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p>For each iteration, the Query will return a List of objects correspondent to the query result. The maximum number of items per iteration can be specified by the pageSize. It is optional, you can provide <b>0</b> for default pageSize or use the API <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification)" data-throw-if-not-resolved="false" data-raw-source="createIndividualEnrollmentQuery(QuerySpecification)"></xref>.</p>

    <p></p>
  syntax: public Query createEnrollmentGroupRegistrationStateQuery(QuerySpecification querySpecification, String enrollmentGroupId, int pageSize)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createEnrollmentGroupRegistrationStateQuery(QuerySpecification,String,int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createFromConnectionString(String connectionString)
  name: createFromConnectionString(String connectionString)
  nameWithType: ProvisioningServiceClient.createFromConnectionString(String connectionString)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that cares the connection string of the Device Provisioning Service. </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the connectionString is<code>null 

          </code> or empty. </p>
  returns:
    description: >-
      <p>The<code>ProvisioningServiceClient 

          </code> with the new instance of this object. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient?alt=com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient&text=ProvisioningServiceClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new instance of the<code>DeviceProvisioningServiceClient 

        </code> that exposes the API to the Device Provisioning Service.</p>

    <p>The Device Provisioning Service Client is created based on a <b>Provisioning Connection String</b>. </p>

    <p>Once you create a Device Provisioning Service on Azure, you can get the connection string on the Azure portal.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000020">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>This static constructor works exactly the same as <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.ProvisioningServiceClient(String)" data-throw-if-not-resolved="false" data-raw-source="ProvisioningServiceClient(String)"></xref> so it has been deprecated. </p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public static ProvisioningServiceClient createFromConnectionString(String connectionString)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createFromConnectionString(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification querySpecification)
  name: createIndividualEnrollmentQuery(QuerySpecification querySpecification)
  nameWithType: ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification querySpecification)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameter is not correct. </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create a individualEnrollment query.</p>

    <p>This method will create a new individualEnrollment query for Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p></p>
  syntax: public Query createIndividualEnrollmentQuery(QuerySpecification querySpecification)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification querySpecification, int pageSize)
  name: createIndividualEnrollmentQuery(QuerySpecification querySpecification, int pageSize)
  nameWithType: ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification querySpecification, int pageSize)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref> with the SQL query. It cannot be<code>null 

          </code> . </p>
    name: querySpecification
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.QuerySpecification&text=QuerySpecification" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>int 

          </code> with the maximum number of items per iteration. It can be 0 for default, but not negative. </p>
    name: pageSize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameters are not correct. </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.Query?alt=com.microsoft.azure.sdk.iot.provisioning.service.Query&text=Query" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory to create a individualEnrollment query.</p>

    <p>This method will create a new individualEnrollment query for Device Provisioning Service and return it as a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> iterator.</p>

    <p>The Device Provisioning Service expects a SQL query in the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, for instance <code>"SELECT * FROM enrollments" 

        </code> .</p>

    <p>For each iteration, the Query will return a List of objects correspondent to the query result. The maximum number of items per iteration can be specified by the pageSize. It is optional, you can provide <b>0</b> for default pageSize or use the API <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification)" data-throw-if-not-resolved="false" data-raw-source="createIndividualEnrollmentQuery(QuerySpecification)"></xref>.</p>

    <p></p>
  syntax: public Query createIndividualEnrollmentQuery(QuerySpecification querySpecification, int pageSize)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification,int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createOrUpdateEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  name: createOrUpdateEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  nameWithType: ProvisioningServiceClient.createOrUpdateEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  parameters:
  - description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref> object that describes the individualEnrollment that will be created of updated. </p>
    name: enrollmentGroup
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup&text=EnrollmentGroup" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning was not able to create or update the enrollment </p>
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref> object with the result of the create or update requested. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup&text=EnrollmentGroup" data-throw-if-not-resolved="False"/>
  summary: "<p>Create or update an enrollment group record.</p>\r\n<p>This API creates a new enrollment group or update a existed one. All enrollment group in the Device Provisioning Service contains a unique identifier called enrollmentGroupId. If this API is called with an enrollmentGroupId that already exists, it will replace the existed enrollmentGroup information by the new one. On the other hand, if the enrollmentGroupId does not exit, it will be created.</p>\r\n<p>To use the Device Provisioning Service API, you must include the follow package on your application. <pre><code>// Include the following imports to use the Device Provisioning Service APIs.\r\n    import com.microsoft.azure.sdk.iot.provisioning.service.*;\r\n    </code></pre></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will create a new enrollmentGroup that will provisioning multiple devices to the ContosoHub.azure-devices.net. <pre><code>// EnrollmentGroup information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String ENROLLMENT_GROUP_ID = \"enrollmentGroupId-1\";\r\n    private static final String IOTHUB_HOST_NAME = \"ContosoHub.azure-devices.net\";\r\n    private static String PUBLIC_CERTIFICATE_STRING =\r\n            \"-----BEGIN CERTIFICATE-----\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\" +\r\n            \"-----END CERTIFICATE-----\\n\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Create a new enrollmentGroup configurations.\r\n        Attestation attestation = X509Attestation.createFromSigningCertificates(PUBLIC_KEY_CERTIFICATE_STRING);\r\n        EnrollmentGroup enrollmentGroup =\r\n            new EnrollmentGroup(\r\n                enrollmentGroupId,\r\n                attestation);\r\n        enrollmentGroup.setIotHubHostName(IOTHUB_HOST_NAME);\r\n        enrollmentGroup.setProvisioningStatus(ProvisioningStatus.ENABLED);\r\n    \r\n        // Create a new enrollmentGroup.\r\n        EnrollmentGroup enrollmentGroupResult =  provisioningServiceClient.createOrUpdateEnrollmentGroup(enrollmentGroup);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public EnrollmentGroup createOrUpdateEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createOrUpdateEnrollmentGroup(EnrollmentGroup)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createOrUpdateIndividualEnrollment(IndividualEnrollment individualEnrollment)
  name: createOrUpdateIndividualEnrollment(IndividualEnrollment individualEnrollment)
  nameWithType: ProvisioningServiceClient.createOrUpdateIndividualEnrollment(IndividualEnrollment individualEnrollment)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> object that describes the individualEnrollment that will be created of updated. It cannot be<code>null 

          </code> . </p>
    name: individualEnrollment
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment&text=IndividualEnrollment" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameter is not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to create or update the individualEnrollment. </p>
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> object with the result of the create or update requested. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment&text=IndividualEnrollment" data-throw-if-not-resolved="False"/>
  summary: "<p>Create or update a individual Device Enrollment record.</p>\r\n<p>This API creates a new individualEnrollment or update a existed one. All enrollments in the Device Provisioning Service contains a unique identifier called registrationId. If this API is called for an individualEnrollment with a registrationId that already exists, it will replace the existed individualEnrollment information by the new one. On the other hand, if the registrationId does not exit, this API will create a new individualEnrollment.</p>\r\n<p>To use the Device Provisioning Service API, you must include the follow package on your application. <pre><code>// Include the following imports to use the Device Provisioning Service APIs.\r\n    import com.microsoft.azure.sdk.iot.provisioning.service.*;\r\n    </code></pre></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will create a new individualEnrollment that will provisioning the ContosoDevice1000 to the ContosoHub.azure-devices.net using TPM attestation. <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String TPM_ENDORSEMENT_KEY = \"tpm-endorsement-key\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    private static final String DEVICE_ID = \"ContosoDevice1000\";\r\n    private static final String IOTHUB_HOST_NAME = \"ContosoHub.azure-devices.net\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Create a new individualEnrollment configurations.\r\n        Attestation attestation = new TpmAttestation(TPM_ENDORSEMENT_KEY);\r\n        IndividualEnrollment individualEnrollment =\r\n           new IndividualEnrollment(\r\n                REGISTRATION_ID,\r\n                attestation);\r\n        individualEnrollment.setDeviceId(DEVICE_ID);\r\n        individualEnrollment.setIotHubHostName(IOTHUB_HOST_NAME);\r\n        individualEnrollment.setProvisioningStatus(ProvisioningStatus.DISABLED);\r\n    \r\n        // Create a new individualEnrollment.\r\n        IndividualEnrollment enrollmentResult =  deviceProvisioningServiceClient.createOrUpdateIndividualEnrollment(individualEnrollment);\r\n    }\r\n    </code></pre></p>\r\n<p>If the registrationId already exists, this method will update existed enrollments. Note that update the individualEnrollment will not change the status of the device that was already registered using the old individualEnrollment.</p>\r\n<p>The follow code will update the provisioningStatus of the previous individualEnrollment from <b>disabled</b> to <b>enabled</b>. <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the content of the previous individualEnrollment.\r\n        IndividualEnrollment individualEnrollment =  deviceProvisioningServiceClient.getIndividualEnrollment(REGISTRATION_ID);\r\n    \r\n        // Change the provisioning status, from disabled to enabled\r\n        individualEnrollment.setProvisioningStatus(ProvisioningStatus.ENABLED);\r\n    \r\n        // Update the individualEnrollment information.\r\n        IndividualEnrollment enrollmentResult =  deviceProvisioningServiceClient.createOrUpdateIndividualEnrollment(individualEnrollment);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public IndividualEnrollment createOrUpdateIndividualEnrollment(IndividualEnrollment individualEnrollment)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createOrUpdateIndividualEnrollment(IndividualEnrollment)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(DeviceRegistrationState deviceRegistrationState)
  name: deleteDeviceRegistrationState(DeviceRegistrationState deviceRegistrationState)
  nameWithType: ProvisioningServiceClient.deleteDeviceRegistrationState(DeviceRegistrationState deviceRegistrationState)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="DeviceRegistrationState"></xref> that identifies the deviceRegistrationState. It cannot be<code>null 

          </code> . </p>
    name: deviceRegistrationState
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.DeviceRegistrationState?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.DeviceRegistrationState&text=DeviceRegistrationState" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the registration status information for the provided DeviceRegistrationState. </p>
  summary: "<p>Delete the Registration Status information.</p>\r\n<p>This method will remove the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceRegistrationState\"></xref> from the Device Provisioning Service using the provided <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceRegistrationState\"></xref> information. The Device Provisioning Service will care about the id and the eTag on the DeviceRegistrationState. If you want to delete the deviceRegistrationState regardless the eTag, you can use the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteDeviceRegistrationState(String)\"></xref> passing only the id.</p>\r\n<p>If the id does not exists or the eTag does not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the deviceRegistrationState \"registrationId-1\". <pre><code>// Registration Status information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the registration status information.\r\n        DeviceRegistrationState registrationStateResult =  deviceProvisioningServiceClient.getDeviceRegistrationState(REGISTRATION_ID);\r\n    \r\n        // Delete the registration status information.\r\n        deviceProvisioningServiceClient.deleteDeviceRegistrationState(registrationStateResult);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteDeviceRegistrationState(DeviceRegistrationState deviceRegistrationState)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(DeviceRegistrationState)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String id)
  name: deleteDeviceRegistrationState(String id)
  nameWithType: ProvisioningServiceClient.deleteDeviceRegistrationState(String id)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the deviceRegistrationState. It cannot be<code>null 

          </code> or empty. </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the deviceRegistrationState information for the provided registrationId. </p>
  summary: "<p>Delete the registration status information.</p>\r\n<p>This method will remove the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceRegistrationState\"></xref> from the Device Provisioning Service using the provided id. It will delete the registration status regardless the eTag. It means that this API correspond to the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteDeviceRegistrationState(String, String)\"></xref> with the<code>eTag=\"*\" \r\n    </code> .</p>\r\n<p>If the id does not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the registration status \"registrationId-1\". <pre><code>// deviceRegistrationState information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the registration status information.\r\n        deviceProvisioningServiceClient.deleteDeviceRegistrationState(REGISTRATION_ID);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteDeviceRegistrationState(String id)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String id, String eTag)
  name: deleteDeviceRegistrationState(String id, String eTag)
  nameWithType: ProvisioningServiceClient.deleteDeviceRegistrationState(String id, String eTag)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the deviceRegistrationState. It cannot be<code>null 

          </code> or empty. </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the deviceRegistrationState eTag. It can be<code>null 

          </code> or empty. The Device Provisioning Service will ignore it in all of these cases. </p>
    name: eTag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the deviceRegistrationState information for the provided registrationId and eTag. </p>
  summary: "<p>Delete the registration status information.</p>\r\n<p>This method will remove the registration status from the Device Provisioning Service using the provided id and eTag. If you want to delete the registration status regardless the eTag, you can use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteDeviceRegistrationState(String)\"></xref> or you can pass the eTag as<code>null \r\n    </code> , empty, or <code>\"*\" \r\n    </code> .</p>\r\n<p>If the id does not exists or the eTag does not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the deviceRegistrationState \"registrationId-1\" regardless the eTag. <pre><code>// Registration Status information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    private Static final String ANY_ETAG = \"*\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the deviceRegistrationState information.\r\n        deviceProvisioningServiceClient.deleteDeviceRegistrationState(REGISTRATION_ID, ANY_ETAG);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteDeviceRegistrationState(String id, String eTag)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteDeviceRegistrationState(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  name: deleteEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  nameWithType: ProvisioningServiceClient.deleteEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> . </p>
    name: enrollmentGroup
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup&text=EnrollmentGroup" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the enrollmentGroup information for the provided enrollmentGroup. </p>
  summary: "<p>Delete the enrollmentGroup information.</p>\r\n<p>This method will remove the enrollmentGroup from the Device Provisioning Service using the provided <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref> information. The Device Provisioning Service will care about the enrollmentGroupId and the eTag on the enrollmentGroup. If you want to delete the enrollment regardless the eTag, you can set the<code>eTag=\"*\" \r\n    </code> into the enrollmentGroup, or use the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteEnrollmentGroup(String)\"></xref> passing only the enrollmentGroupId.</p>\r\n<p>Note that delete the enrollmentGroup will not remove the Devices itself from the IotHub.</p>\r\n<p>If the enrollmentGroupId does not exists or the eTag does not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the enrollmentGroup \"enrollmentGroupId-1\". <pre><code>// EnrollmentGroup information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String ENROLLMENT_GROUP_ID = \"enrollmentGroupId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the enrollmentGroup information.\r\n        EnrollmentGroup enrollmentGroupResult =  deviceProvisioningServiceClient.getEnrollmentGroup(ENROLLMENT_GROUP_ID);\r\n    \r\n        // Delete the enrollmentGroup information.\r\n        deviceProvisioningServiceClient.deleteEnrollmentGroup(enrollmentResult);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteEnrollmentGroup(EnrollmentGroup enrollmentGroup)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(EnrollmentGroup)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String enrollmentGroupId)
  name: deleteEnrollmentGroup(String enrollmentGroupId)
  nameWithType: ProvisioningServiceClient.deleteEnrollmentGroup(String enrollmentGroupId)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> or empty. </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the enrollmentGroup information for the provided enrollmentGroupId. </p>
  summary: "<p>Delete the enrollmentGroup information.</p>\r\n<p>This method will remove the enrollmentGroup from the Device Provisioning Service using the provided enrollmentGroupId. It will delete the enrollmentGroup regardless the eTag. It means that this API correspond to the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteEnrollmentGroup(String, String)\"></xref> with the<code>eTag=\"*\" \r\n    </code> .</p>\r\n<p>Note that delete the enrollmentGroup will not remove the Devices itself from the IotHub.</p>\r\n<p>If the enrollmentGroupId does not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the enrollmentGroup \"enrollmentGroupId-1\". <pre><code>// EnrollmentGroup information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String ENROLLMENT_GROUP_ID = \"enrollmentGroupId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the enrollmentGroup information.\r\n        deviceProvisioningServiceClient.deleteEnrollmentGroup(ENROLLMENT_GROUP_ID);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteEnrollmentGroup(String enrollmentGroupId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String enrollmentGroupId, String eTag)
  name: deleteEnrollmentGroup(String enrollmentGroupId, String eTag)
  nameWithType: ProvisioningServiceClient.deleteEnrollmentGroup(String enrollmentGroupId, String eTag)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> or empty. </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the enrollmentGroup eTag. It can be<code>null 

          </code> or empty. The Device Provisioning Service will ignore it in all of these cases. </p>
    name: eTag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to delete the enrollmentGroup information for the provided enrollmentGroupId and eTag. </p>
  summary: "<p>Delete the enrollmentGroup information.</p>\r\n<p>This method will remove the enrollmentGroup from the Device Provisioning Service using the provided enrollmentGroupId and eTag. If you want to delete the enrollmentGroup regardless the eTag, you can use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteEnrollmentGroup(String)\"></xref> or you can pass the eTag as<code>null \r\n    </code> , empty, or <code>\"*\" \r\n    </code> .</p>\r\n<p>Note that delete the enrollmentGroup will not remove the Device itself from the IotHub.</p>\r\n<p>If the enrollmentGroupId does not exists or eTag does not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the enrollmentGroup \"enrollmentGroupId-1\" regardless the eTag. <pre><code>// enrollmentGroup information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String ENROLLMENT_GROUP_ID = \"enrollmentGroupId-1\";\r\n    private Static final String ANY_ETAG = \"*\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the enrollmentGroup information.\r\n        deviceProvisioningServiceClient.deleteEnrollmentGroup(ENROLLMENT_GROUP_ID, ANY_ETAG);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteEnrollmentGroup(String enrollmentGroupId, String eTag)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteEnrollmentGroup(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(IndividualEnrollment individualEnrollment)
  name: deleteIndividualEnrollment(IndividualEnrollment individualEnrollment)
  nameWithType: ProvisioningServiceClient.deleteIndividualEnrollment(IndividualEnrollment individualEnrollment)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> that identifies the individualEnrollment. It cannot be<code>null 

          </code> . </p>
    name: individualEnrollment
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment&text=IndividualEnrollment" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameter is not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to execute the bulk operation. </p>
  summary: "<p>Delete the individualEnrollment information.</p>\r\n<p>This method will remove the individualEnrollment from the Device Provisioning Service using the provided <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> information. The Device Provisioning Service will care about the registrationId and the eTag on the individualEnrollment. If you want to delete the individualEnrollment regardless the eTag, you can set the<code>eTag=\"*\" \r\n    </code> into the individualEnrollment, or use the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteIndividualEnrollment(String)\"></xref> passing only the registrationId.</p>\r\n<p>Note that delete the individualEnrollment will not remove the Device itself from the IotHub.</p>\r\n<p>If the registrationId does not exists or the eTag not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the individualEnrollment \"registrationId-1\". <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the individualEnrollment information.\r\n        IndividualEnrollment enrollmentResult =  deviceProvisioningServiceClient.getIndividualEnrollment(REGISTRATION_ID);\r\n    \r\n        // Delete the individualEnrollment information.\r\n        deviceProvisioningServiceClient.deleteIndividualEnrollment(enrollmentResult);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteIndividualEnrollment(IndividualEnrollment individualEnrollment)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(IndividualEnrollment)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String registrationId)
  name: deleteIndividualEnrollment(String registrationId)
  nameWithType: ProvisioningServiceClient.deleteIndividualEnrollment(String registrationId)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the individualEnrollment. It cannot be<code>null 

          </code> or empty. </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided registrationId is not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to execute the bulk operation. </p>
  summary: "<p>Delete the individualEnrollment information.</p>\r\n<p>This method will remove the individualEnrollment from the Device Provisioning Service using the provided registrationId. It will delete the enrollment regardless the eTag. It means that this API correspond to the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String,String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteIndividualEnrollment(String, String)\"></xref> with the<code>eTag=\"*\" \r\n    </code> .</p>\r\n<p>Note that delete the enrollment will not remove the Device itself from the IotHub.</p>\r\n<p>If the registrationId does not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the individualEnrollment \"registrationId-1\". <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the individualEnrollment information.\r\n        deviceProvisioningServiceClient.deleteIndividualEnrollment(REGISTRATION_ID);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteIndividualEnrollment(String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String registrationId, String eTag)
  name: deleteIndividualEnrollment(String registrationId, String eTag)
  nameWithType: ProvisioningServiceClient.deleteIndividualEnrollment(String registrationId, String eTag)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the individualEnrollment. It cannot be<code>null 

          </code> or empty. </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the IndividualEnrollment eTag. It can be<code>null 

          </code> or empty. The Device Provisioning Service will ignore it in all of these cases. </p>
    name: eTag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided registrationId is not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to execute the bulk operation. </p>
  summary: "<p>Delete the individualEnrollment information.</p>\r\n<p>This method will remove the individualEnrollment from the Device Provisioning Service using the provided registrationId and eTag. If you want to delete the enrollment regardless the eTag, you can use <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleteIndividualEnrollment(String)\"></xref> or you can pass the eTag as<code>null \r\n    </code> , empty, or <code>\"*\" \r\n    </code> .</p>\r\n<p>Note that delete the enrollment will not remove the Device itself from the IotHub.</p>\r\n<p>If the registrationId does not exists or the eTag does not matches, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will delete the information about the individualEnrollment \"registrationId-1\" regardless the eTag. <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    private Static final String ANY_ETAG = \"*\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Delete the individualEnrollment information.\r\n        deviceProvisioningServiceClient.deleteIndividualEnrollment(REGISTRATION_ID, ANY_ETAG);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public void deleteIndividualEnrollment(String registrationId, String eTag)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.deleteIndividualEnrollment(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getDeviceRegistrationState(String id)
  name: getDeviceRegistrationState(String id)
  nameWithType: ProvisioningServiceClient.getDeviceRegistrationState(String id)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the deviceRegistrationState. It cannot be<code>null 

          </code> or empty. </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to retrieve the deviceRegistrationState information for the provided registrationId. </p>
  returns:
    description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="DeviceRegistrationState"></xref> with the content of the deviceRegistrationState in the Provisioning Device Service. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.DeviceRegistrationState?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.DeviceRegistrationState&text=DeviceRegistrationState" data-throw-if-not-resolved="False"/>
  summary: "<p>Retrieve the registration status information.</p>\r\n<p>This method will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceRegistrationState\"></xref> for the provided id. It will retrieve the correspondent deviceRegistrationState from the Device Provisioning Service, and return it in the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeviceRegistrationState\"></xref> object.</p>\r\n<p>If the id do not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will get and print the information about the deviceRegistrationState \"registrationId-1\". <pre><code>// Registration status information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the deviceRegistrationState information.\r\n        DeviceRegistrationState registrationStateResult =  deviceProvisioningServiceClient.getDeviceRegistrationState(REGISTRATION_ID);\r\n        System.out.println(registrationStateResult.toString());\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public DeviceRegistrationState getDeviceRegistrationState(String id)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getDeviceRegistrationState(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getEnrollmentGroup(String enrollmentGroupId)
  name: getEnrollmentGroup(String enrollmentGroupId)
  nameWithType: ProvisioningServiceClient.getEnrollmentGroup(String enrollmentGroupId)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the enrollmentGroup. It cannot be<code>null 

          </code> or empty. </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Provisioning Device Service was not able to retrieve the enrollmentGroup information for the provided enrollmentGroupId. </p>
  returns:
    description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref> with the content of the enrollmentGroup in the Provisioning Device Service. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup&text=EnrollmentGroup" data-throw-if-not-resolved="False"/>
  summary: "<p>Retrieve the enrollmentGroup information.</p>\r\n<p>This method will return the enrollmentGroup information for the provided enrollmentGroupId. It will retrieve the correspondent enrollmentGroup from the Device Provisioning Service, and return it in the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EnrollmentGroup\"></xref> object.</p>\r\n<p>If the enrollmentGroupId does not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will get and print the information about the enrollmentGroupId \"enrollmentGroupId-1\". <pre><code>// EnrollmentGroup information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String ENROLLMENT_GROUP_ID = \"enrollmentGroupId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the individualEnrollment information.\r\n        EnrollmentGroup enrollmentGroupResult =  deviceProvisioningServiceClient.getEnrollmentGroup(ENROLLMENT_GROUP_ID);\r\n        System.out.println(enrollmentGroupResult.toString());\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public EnrollmentGroup getEnrollmentGroup(String enrollmentGroupId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getEnrollmentGroup(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getEnrollmentGroupAttestationMechanism(String enrollmentGroupId)
  name: getEnrollmentGroupAttestationMechanism(String enrollmentGroupId)
  nameWithType: ProvisioningServiceClient.getEnrollmentGroupAttestationMechanism(String enrollmentGroupId)
  parameters:
  - description: <p>the group id of the enrollment group to look up the attestation mechanism for </p>
    name: enrollmentGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any exception is thrown while getting the attestation mechanism </p>
  returns:
    description: <p>the attestation mechanism of the given enrollment group </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.AttestationMechanism?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.AttestationMechanism&text=AttestationMechanism" data-throw-if-not-resolved="False"/>
  summary: <p>Get the attestation mechanism details for a given enrollment group </p>
  syntax: public AttestationMechanism getEnrollmentGroupAttestationMechanism(String enrollmentGroupId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getEnrollmentGroupAttestationMechanism(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getIndividualEnrollment(String registrationId)
  name: getIndividualEnrollment(String registrationId)
  nameWithType: ProvisioningServiceClient.getIndividualEnrollment(String registrationId)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that identifies the individualEnrollment. It cannot be<code>null 

          </code> or empty. </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameter is not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to execute the bulk operation. </p>
  returns:
    description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> with the content of the individualEnrollment in the Provisioning Device Service. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment&text=IndividualEnrollment" data-throw-if-not-resolved="False"/>
  summary: "<p>Retrieve the individualEnrollment information.</p>\r\n<p>This method will return the enrollment information for the provided registrationId. It will retrieve the correspondent individualEnrollment from the Device Provisioning Service, and return it in the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndividualEnrollment\"></xref> object.</p>\r\n<p>If the registrationId do not exists, this method will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientNotFoundException\"></xref>. for more exceptions that this method can throw, please see <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ProvisioningServiceClientExceptionManager\"></xref></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will get and print the information about the individualEnrollment \"registrationId-1\". <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String REGISTRATION_ID = \"registrationId-1\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Get the individualEnrollment information.\r\n        IndividualEnrollment enrollmentResult =  deviceProvisioningServiceClient.getIndividualEnrollment(REGISTRATION_ID);\r\n        System.out.println(enrollmentResult.toString());\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public IndividualEnrollment getIndividualEnrollment(String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getIndividualEnrollment(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getIndividualEnrollmentAttestationMechanism(String registrationId)
  name: getIndividualEnrollmentAttestationMechanism(String registrationId)
  nameWithType: ProvisioningServiceClient.getIndividualEnrollmentAttestationMechanism(String registrationId)
  parameters:
  - description: <p>the registration id of the individual enrollment to look up the attestation mechanism for </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any exception is thrown while getting the attestation mechanism </p>
  returns:
    description: <p>the attestation mechanism of the given individual enrollment </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.AttestationMechanism?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.AttestationMechanism&text=AttestationMechanism" data-throw-if-not-resolved="False"/>
  summary: <p>Get the attestation mechanism details for a given individual enrollment </p>
  syntax: public AttestationMechanism getIndividualEnrollmentAttestationMechanism(String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.getIndividualEnrollmentAttestationMechanism(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.runBulkEnrollmentOperation(BulkOperationMode bulkOperationMode, Collection<IndividualEnrollment> individualEnrollments)
  name: runBulkEnrollmentOperation(BulkOperationMode bulkOperationMode, Collection<IndividualEnrollment> individualEnrollments)
  nameWithType: ProvisioningServiceClient.runBulkEnrollmentOperation(BulkOperationMode bulkOperationMode, Collection<IndividualEnrollment> individualEnrollments)
  parameters:
  - description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="BulkOperationMode"></xref> that defines the single operation to do over the individualEnrollments. It cannot be<code>null 

          </code> . </p>
    name: bulkOperationMode
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.BulkOperationMode?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.BulkOperationMode&text=BulkOperationMode" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the collection of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> that contains the description of each individualEnrollment. It cannot be<code>null 

          </code> or empty. </p>
    name: individualEnrollments
    type: Collection&lt;<xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment&text=IndividualEnrollment" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided parameters are not correct. </p>
  - type: <xref href="ProvisioningServiceClientTransportException?alt=ProvisioningServiceClientTransportException&text=ProvisioningServiceClientTransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the SDK failed to send the request to the Device Provisioning Service. </p>
  - type: <xref href="ProvisioningServiceClientException?alt=ProvisioningServiceClientException&text=ProvisioningServiceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the Device Provisioning Service was not able to execute the bulk operation. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="BulkEnrollmentOperationResult"></xref> object with the result of operation for each enrollment. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.BulkEnrollmentOperationResult?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.BulkEnrollmentOperationResult&text=BulkEnrollmentOperationResult" data-throw-if-not-resolved="False"/>
  summary: "<p>Create, update or delete a set of individual Device Enrollments.</p>\r\n<p>This API provide the means to do a single operation over multiple individualEnrollments. A valid operation is determined by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BulkOperationMode\"></xref>, and can be 'create', 'update', 'updateIfMatchETag', or 'delete'.</p>\r\n<p>To use the Device Provisioning Service API, you must include the follow package on your application. <pre><code>// Include the following imports to use the Device Provisioning Service APIs.\r\n    import com.microsoft.azure.sdk.iot.provisioning.service.*;\r\n    </code></pre></p>\r\n<p>\r\n  <b>Sample:</b>\r\n</p>\r\n<p>The follow code will create two new enrollment that will provisioning the ContosoDevice1000 and ContosoDevice1001 to the ContosoHub.azure-devices.net using TPM attestation. <pre><code>// IndividualEnrollment information.\r\n    private static final String PROVISIONING_CONNECTION_STRING = \"HostName=ContosoProvisioning.azure-devices-provisioning.net;\" +\r\n                                                                 \"SharedAccessKeyName=contosoprovisioningserviceowner;\" +\r\n                                                                 \"SharedAccessKey=0000000000000000000000000000000000000000000=\";\r\n    private static final String TPM_ENDORSEMENT_KEY = \"tpm-endorsement-key\";\r\n    private static final String IOTHUB_HOST_NAME = \"ContosoHub.azure-devices.net\";\r\n    \r\n    private static final String REGISTRATION_ID_1 = \"registrationId-1\";\r\n    private static final String DEVICE_ID_1 = \"ContosoDevice1000\";\r\n    \r\n    private static final String REGISTRATION_ID_2 = \"registrationId-2\";\r\n    private static final String DEVICE_ID_2 = \"ContosoDevice1001\";\r\n    \r\n    public static void main(String[] args) throws IOException, URISyntaxException, ProvisioningServiceClientException\r\n    {\r\n        // Create a Device Provisioning Service Client.\r\n        DeviceProvisioningServiceClient deviceProvisioningServiceClient =\r\n            new ProvisioningServiceClient(PROVISIONING_CONNECTION_STRING);\r\n    \r\n        // Create two new individualEnrollment configurations.\r\n        Attestation attestation = new TpmAttestation(TPM_ENDORSEMENT_KEY);\r\n        IndividualEnrollment enrollment1 =\r\n           new IndividualEnrollment(\r\n                REGISTRATION_ID_1,\r\n                attestation);\r\n        enrollment1.setDeviceId(DEVICE_ID_1);\r\n        enrollment1.setIotHubHostName(IOTHUB_HOST_NAME);\r\n        enrollment1.setProvisioningStatus(ProvisioningStatus.DISABLED);\r\n    \r\n        IndividualEnrollment enrollment2 =\r\n           new IndividualEnrollment(\r\n                REGISTRATION_ID_2,\r\n                attestation);\r\n        enrollment2.setDeviceId(DEVICE_ID_2);\r\n        enrollment2.setIotHubHostName(IOTHUB_HOST_NAME);\r\n        enrollment2.setProvisioningStatus(ProvisioningStatus.DISABLED);\r\n    \r\n        // Add these 2 individualEnrollments to a list of individualEnrollments.\r\n        List&lt;IndividualEnrollment&gt; individualEnrollments = new LinkedList&lt;&gt;();\r\n        individualEnrollments.add(enrollment1);\r\n        individualEnrollments.add(enrollment2);\r\n    \r\n        // Create these 2 new individualEnrollment using the bulk operation.\r\n        BulkEnrollmentOperationResult bulkEnrollmentOperationResult =  provisioningServiceClient.runBulkEnrollmentOperation(BulkOperationMode.create, individualEnrollments);\r\n    }\r\n    </code></pre></p>\r\n<p></p>"
  syntax: public BulkEnrollmentOperationResult runBulkEnrollmentOperation(BulkOperationMode bulkOperationMode, Collection<IndividualEnrollment> individualEnrollments)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.runBulkEnrollmentOperation(BulkOperationMode,Collection<IndividualEnrollment>)
nameWithType: ProvisioningServiceClient
syntax: public class ProvisioningServiceClient
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient
fullName: com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient
name: ProvisioningServiceClient
package: com.microsoft.azure.sdk.iot.provisioning.service
summary: >-
  <p>Device Provisioning Service Client.</p>

  <p>The IoT Hub Device Provisioning Service is a helper service for IoT Hub that enables automatic device provisioning to a specified IoT hub without requiring human intervention. You can use the Device Provisioning Service to provision millions of devices in a secure and scalable manner.</p>

  <p>This java SDK provides an API to help developers to create and maintain Enrollments on the IoT Hub Device Provisioning Service, it translate the rest API in java Objects and Methods.</p>

  <p>To use the this SDK, you must include the follow package on your application. <pre><code>// Include the following imports to use the Device Provisioning Service APIs.

      import com.microsoft.azure.sdk.iot.provisioning.service.*;

      </code></pre></p>

  <p>The main APIs are exposed by the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient" data-throw-if-not-resolved="false" data-raw-source="ProvisioningServiceClient"></xref>, it contains the public Methods that the application shall call to create and maintain the Enrollments. The Objects in the <b>configs</b> package shall be filled and passed as parameters of the public API, for example, to create a new enrollment, the application shall create the object <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> with the appropriate enrollment configurations, and call the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createOrUpdateIndividualEnrollment(IndividualEnrollment)" data-throw-if-not-resolved="false" data-raw-source="createOrUpdateIndividualEnrollment(IndividualEnrollment)"></xref>.</p>

  <p>The IoT Hub Device Provisioning Service supports SQL queries too. The application can create a new query using one of the queries factories, for instance <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.ProvisioningServiceClient.createIndividualEnrollmentQuery(QuerySpecification)" data-throw-if-not-resolved="false" data-raw-source="createIndividualEnrollmentQuery(QuerySpecification)"></xref>, passing the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="QuerySpecification"></xref>, with the SQL query. This factory returns a <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.Query" data-throw-if-not-resolved="false" data-raw-source="Query"></xref> object, which is an active iterator.</p>

  <p>This java SDK can be represented in the follow diagram, the first layer are the public APIs the your application shall use:</p>

  <p>

    <pre>

      <code>+===============+       +==========================================+                           +============+   +===+

      |    configs    |------&gt;|         ProvisioningServiceClient        |                        +-&gt;|    Query   |   |   |

      +===============+       +==+=================+==================+==+                        |  +======+=====+   | e |

                                /                  |                   \                          |         |         | x |

                               /                   |                    \                         |         |         | c |

      +-----------------------+-----+  +-----------+------------+  +-----+---------------------+  |         |         | e |

      | IndividualEnrollmentManager |  | EnrollmentGroupManager |  | RegistrationStatusManager |  |         |         | p |

      +---------------+------+------+  +-----------+------+-----+  +-------------+-------+-----+  |         |         | t |

                       \      \                    |       \                     |        \       |         |         | i |

                        \      +----------------------------+------------------------------+------+         |         | o |

                         \                         |                             |                          |         | n |

       +--------+      +--+------------------------+-----------------------------+--------------------------+-----+   | s |

       |  auth  |-----&gt;|                                     ContractApiHttp                                      |   |   |

       +--------+      +-------------------------------------------+----------------------------------------------+   +===+

                                                                   |

                                                                   |

                             +-------------------------------------+------------------------------------------+

                             |                 com.microsoft.azure.sdk.iot.deps.transport.http                |

                             +--------------------------------------------------------------------------------+

      </code>

    </pre>

  </p>

  <p></p>
metadata: {}
