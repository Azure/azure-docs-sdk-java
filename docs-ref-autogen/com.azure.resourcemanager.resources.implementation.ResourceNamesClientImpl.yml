### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  id: ResourceNamesClientImpl
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation
  children:
  - com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName()
  - com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync()
  - com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  - com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  - com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  langs:
  - java
  name: ResourceNamesClientImpl
  nameWithType: ResourceNamesClientImpl
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  type: Class
  package: com.azure.resourcemanager.resources.implementation
  summary: An instance of this class provides access to all the operations defined in ResourceNamesClient.
  syntax:
    content: public final class ResourceNamesClientImpl implements ResourceNamesClient
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.ResourceNamesClientImpl(com.azure.resourcemanager.resources.implementation.SubscriptionClientImpl)
  id: ResourceNamesClientImpl(com.azure.resourcemanager.resources.implementation.SubscriptionClientImpl)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: ResourceNamesClientImpl(SubscriptionClientImpl client)
  nameWithType: ResourceNamesClientImpl.ResourceNamesClientImpl(SubscriptionClientImpl client)
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.ResourceNamesClientImpl(SubscriptionClientImpl client)
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.ResourceNamesClientImpl*
  type: Constructor
  package: com.azure.resourcemanager.resources.implementation
  summary: Initializes an instance of ResourceNamesClientImpl.
  syntax:
    content: " ResourceNamesClientImpl(SubscriptionClientImpl client)"
    parameters:
    - id: client
      type: com.azure.resourcemanager.resources.implementation.SubscriptionClientImpl
      description: the instance of the service client containing this operation class.
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName()
  id: checkResourceName()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: checkResourceName()
  nameWithType: ResourceNamesClientImpl.checkResourceName()
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName()
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName*
  type: Method
  package: com.azure.resourcemanager.resources.implementation
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public CheckResourceNameResultInner checkResourceName()
    return:
      type: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync()
  id: checkResourceNameAsync()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: checkResourceNameAsync()
  nameWithType: ResourceNamesClientImpl.checkResourceNameAsync()
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync()
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync*
  type: Method
  package: com.azure.resourcemanager.resources.implementation
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public Mono<CheckResourceNameResultInner> checkResourceNameAsync()
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  id: checkResourceNameAsync(com.azure.resourcemanager.resources.models.ResourceName)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: checkResourceNameAsync(ResourceName resourceNameDefinition)
  nameWithType: ResourceNamesClientImpl.checkResourceNameAsync(ResourceName resourceNameDefinition)
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync(ResourceName resourceNameDefinition)
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync*
  type: Method
  package: com.azure.resourcemanager.resources.implementation
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public Mono<CheckResourceNameResultInner> checkResourceNameAsync(ResourceName resourceNameDefinition)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  id: checkResourceNameWithResponse(com.azure.resourcemanager.resources.models.ResourceName,com.azure.core.util.Context)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  nameWithType: ResourceNamesClientImpl.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse*
  type: Method
  package: com.azure.resourcemanager.resources.implementation
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public Response<CheckResourceNameResultInner> checkResourceNameWithResponse(ResourceName resourceNameDefinition, Context context)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    - id: context
      type: com.azure.core.util.Context
      description: The context to associate with this operation.
    return:
      type: com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  id: checkResourceNameWithResponseAsync(com.azure.resourcemanager.resources.models.ResourceName)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
  parent: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl
  langs:
  - java
  name: checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  nameWithType: ResourceNamesClientImpl.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
  overload: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync*
  type: Method
  package: com.azure.resourcemanager.resources.implementation
  summary: A resource name is valid if it is not a reserved word, does not contains a reserved word and does not start with a reserved word.
  syntax:
    content: public Mono<Response<CheckResourceNameResultInner>> checkResourceNameWithResponseAsync(ResourceName resourceNameDefinition)
    parameters:
    - id: resourceNameDefinition
      type: com.azure.resourcemanager.resources.models.ResourceName
      description: Name and Type of the Resource.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>>
      description: >-
        resource Name valid if not a reserved word, does not contain a reserved word and does not start with a
             reserved word.
references:
- uid: com.azure.resourcemanager.resources.implementation.SubscriptionClientImpl
  name: SubscriptionClientImpl
  nameWithType: SubscriptionClientImpl
  fullName: com.azure.resourcemanager.resources.implementation.SubscriptionClientImpl
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.ResourceNamesClientImpl*
  name: ResourceNamesClientImpl
  nameWithType: ResourceNamesClientImpl.ResourceNamesClientImpl
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.ResourceNamesClientImpl
  package: com.azure.resourcemanager.resources.implementation
- uid: com.azure.resourcemanager.resources.models.ResourceName
  name: ResourceName
  nameWithType: ResourceName
  fullName: com.azure.resourcemanager.resources.models.ResourceName
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync*
  name: checkResourceNameWithResponseAsync
  nameWithType: ResourceNamesClientImpl.checkResourceNameWithResponseAsync
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponseAsync
  package: com.azure.resourcemanager.resources.implementation
- uid: reactor.core.publisher.Mono<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync*
  name: checkResourceNameAsync
  nameWithType: ResourceNamesClientImpl.checkResourceNameAsync
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameAsync
  package: com.azure.resourcemanager.resources.implementation
- uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  name: CheckResourceNameResultInner
  nameWithType: CheckResourceNameResultInner
  fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName*
  name: checkResourceName
  nameWithType: ResourceNamesClientImpl.checkResourceName
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceName
  package: com.azure.resourcemanager.resources.implementation
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
    name: CheckResourceNameResultInner
    fullName: com.azure.resourcemanager.resources.fluent.models.CheckResourceNameResultInner
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse*
  name: checkResourceNameWithResponse
  nameWithType: ResourceNamesClientImpl.checkResourceNameWithResponse
  fullName: com.azure.resourcemanager.resources.implementation.ResourceNamesClientImpl.checkResourceNameWithResponse
  package: com.azure.resourcemanager.resources.implementation
- uid: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
  name: ResourceNamesClient
  nameWithType: ResourceNamesClient
  fullName: com.azure.resourcemanager.resources.fluent.ResourceNamesClient
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
