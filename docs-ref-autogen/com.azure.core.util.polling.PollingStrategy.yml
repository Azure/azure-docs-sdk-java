### YamlMime:JavaType
uid: "com.azure.core.util.polling.PollingStrategy"
fullName: "com.azure.core.util.polling.PollingStrategy<T,U>"
name: "PollingStrategy<T,U>"
nameWithType: "PollingStrategy<T,U>"
summary: "Represents a known strategy for polling a long-running operation in Azure.\n\nThe methods in the polling strategy will be invoked from the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.util.polling.PollerFlux\"></xref>. The order of the invocations is:\n\n1.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response&lt;?&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canPoll(Response)\"></xref> \\- exits if returns false\n2.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.onInitialResponse(com.azure.core.http.rest.Response&lt;?&gt;,com.azure.core.util.polling.PollingContext&lt;T&gt;,com.azure.core.util.serializer.TypeReference&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#onInitialResponse(Response, PollingContext, TypeReference)\"></xref> \\- immediately after <xref uid=\"com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response&lt;?&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canPoll(Response)\"></xref> returns true\n3.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.poll(com.azure.core.util.polling.PollingContext&lt;T&gt;,com.azure.core.util.serializer.TypeReference&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#poll(PollingContext, TypeReference)\"></xref> \\- invoked after each polling interval, if the last polling response indicates an \"In Progress\" status. Returns a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref> with the latest status\n4.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.getResult(com.azure.core.util.polling.PollingContext&lt;T&gt;,com.azure.core.util.serializer.TypeReference&lt;U&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getResult(PollingContext, TypeReference)\"></xref> \\- invoked when the last polling response indicates a \"Successfully Completed\" status. Returns the final result of the given type\n\nIf the user decides to cancel the <xref uid=\"com.azure.core.util.polling.AsyncPollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsyncPollResponse\"></xref> or <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref>, the <xref uid=\"com.azure.core.util.polling.PollingStrategy.cancel(com.azure.core.util.polling.PollingContext&lt;T&gt;,com.azure.core.util.polling.PollResponse&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#cancel(PollingContext, PollResponse)\"></xref> method will be invoked. If the strategy doesn't support cancellation, an error will be returned.\n\nUsers are not expected to provide their own implementation of this interface. Built-in polling strategies in this library and other client libraries are often sufficient for handling polling in most long-running operations in Azure. When there are special scenarios, built-in polling strategies can be inherited and select methods can be overridden to accomplish the polling requirements, without writing an entire polling strategy from scratch."
syntax: "public interface PollingStrategy<T,U>"
methods:
- "com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)"
- "com.azure.core.util.polling.PollingStrategy.cancel(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>)"
- "com.azure.core.util.polling.PollingStrategy.getResult(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<U>)"
- "com.azure.core.util.polling.PollingStrategy.onInitialResponse(com.azure.core.http.rest.Response<?>,com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
- "com.azure.core.util.polling.PollingStrategy.poll(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
type: "interface"
typeParameters:
- name: "T"
- name: "U"
metadata: {}
package: "com.azure.core.util.polling"
artifact: com.azure:azure-core:1.23.0
