### YamlMime:JavaType
uid: "com.azure.core.util.polling.PollingStrategy"
fullName: "com.azure.core.util.polling.PollingStrategy<T,U>"
name: "PollingStrategy<T,U>"
nameWithType: "PollingStrategy<T,U>"
summary: "Represents a known strategy for polling a long-running operation in Azure."
syntax: "public interface PollingStrategy<T,U>"
methods:
- uid: "com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)"
  fullName: "com.azure.core.util.polling.PollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  name: "canPoll(Response<?> initialResponse)"
  nameWithType: "PollingStrategy<T,U>.canPoll(Response<?> initialResponse)"
  summary: "Checks if this strategy is able to handle polling for this long-running operation based on the information in the initial response."
  modifiers:
  - "abstract"
  parameters:
  - description: "the response from the initial method call to activate the long-running operation"
    name: "initialResponse"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public abstract Mono<Boolean> canPoll(Response<?> initialResponse)"
  desc: "Checks if this strategy is able to handle polling for this long-running operation based on the information in the initial response."
  returns:
    description: "true if this polling strategy can handle the initial response, false if not"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.polling.PollingStrategy.cancel(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>)"
  fullName: "com.azure.core.util.polling.PollingStrategy<T,U>.cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  name: "cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  nameWithType: "PollingStrategy<T,U>.cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  summary: "Cancels the long-running operation if service supports cancellation."
  modifiers:
  - "default"
  parameters:
  - description: "the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref> for the current polling operation, or null if the polling has\n                       started in a <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref>"
    name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the response from the initial operation"
    name: "initialResponse"
    type: "<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public default Mono<T> cancel(PollingContext<T> pollingContext, PollResponse<T> initialResponse)"
  desc: "Cancels the long-running operation if service supports cancellation. If service does not support cancellation then the implementer should return Mono.error with an error message indicating absence of cancellation. Implementing this method is optional - by default, cancellation will not be supported unless overridden."
  returns:
    description: "a publisher emitting the cancellation response content"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.polling.PollingStrategy.getResult(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<U>)"
  fullName: "com.azure.core.util.polling.PollingStrategy<T,U>.getResult(PollingContext<T> pollingContext, TypeReference<U> resultType)"
  name: "getResult(PollingContext<T> pollingContext, TypeReference<U> resultType)"
  nameWithType: "PollingStrategy<T,U>.getResult(PollingContext<T> pollingContext, TypeReference<U> resultType)"
  summary: "Parses the response from the final GET call into the result type of the long-running operation."
  modifiers:
  - "abstract"
  parameters:
  - description: "the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref> for the current polling operation"
    name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> of the final result object to deserialize into, or BinaryData if\n                   raw response body should be kept."
    name: "resultType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Mono<U> getResult(PollingContext<T> pollingContext, TypeReference<U> resultType)"
  desc: "Parses the response from the final GET call into the result type of the long-running operation."
  returns:
    description: "a publisher emitting the final result"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"U?alt=U&text=U\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.polling.PollingStrategy.onInitialResponse(com.azure.core.http.rest.Response<?>,com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.polling.PollingStrategy<T,U>.onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  name: "onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  nameWithType: "PollingStrategy<T,U>.onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  summary: "Parses the initial response into a <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref>, and stores information useful for polling in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>."
  modifiers:
  - "abstract"
  parameters:
  - description: "the response from the initial method call to activate the long-running operation"
    name: "response"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref> for the current polling operation"
    name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> of the response type from a polling call, or BinaryData if raw\n                         response body should be kept. This should match the generic parameter <xref uid=\"U\" data-throw-if-not-resolved=\"false\" data-raw-source=\"U\"></xref>."
    name: "pollResponseType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Mono<PollResponse<T>> onInitialResponse(Response<?> response, PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  desc: "Parses the initial response into a <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref>, and stores information useful for polling in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>. If the result is anything other than <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus.IN_PROGRESS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus#IN_PROGRESS\"></xref>, the long-running operation will be terminated and none of the other methods will be invoked."
  returns:
    description: "a publisher emitting the poll response containing the status and the response content"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.core.util.polling.PollingStrategy.poll(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.core.util.polling.PollingStrategy<T,U>.poll(PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  name: "poll(PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  nameWithType: "PollingStrategy<T,U>.poll(PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  summary: "Parses the response from the polling URL into a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref>, and stores information useful for further polling and final response in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>."
  modifiers:
  - "abstract"
  parameters:
  - description: "the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref> for the current polling operation"
    name: "pollingContext"
    type: "<xref href=\"com.azure.core.util.polling.PollingContext?alt=com.azure.core.util.polling.PollingContext&text=PollingContext\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> of the response type from a polling call, or BinaryData if raw\n                         response body should be kept. This should match the generic parameter <xref uid=\"U\" data-throw-if-not-resolved=\"false\" data-raw-source=\"U\"></xref>."
    name: "pollResponseType"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Mono<PollResponse<T>> poll(PollingContext<T> pollingContext, TypeReference<T> pollResponseType)"
  desc: "Parses the response from the polling URL into a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref>, and stores information useful for further polling and final response in the <xref uid=\"com.azure.core.util.polling.PollingContext\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollingContext\"></xref>. The result must have the <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongRunningOperationStatus\"></xref> specified, and the entire polling response content as a <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>."
  returns:
    description: "a publisher emitting the poll response containing the status and the response content"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.polling.PollResponse?alt=com.azure.core.util.polling.PollResponse&text=PollResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
typeParameters:
- description: "the <xref uid=\"TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> of the response type from a polling call, or BinaryData if raw response body\n            should be kept"
  name: "T"
- description: "the <xref uid=\"TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> of the final result object to deserialize into, or BinaryData if raw response\n            body should be kept"
  name: "U"
desc: "Represents a known strategy for polling a long-running operation in Azure.\n\nThe methods in the polling strategy will be invoked from the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.util.polling.PollerFlux\"></xref>. The order of the invocations is:\n\n1.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canPoll(Response)\"></xref> \\- exits if returns false\n2.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.onInitialResponse(com.azure.core.http.rest.Response<?>,com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#onInitialResponse(Response, PollingContext, TypeReference)\"></xref> \\- immediately after <xref uid=\"com.azure.core.util.polling.PollingStrategy.canPoll(com.azure.core.http.rest.Response<?>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canPoll(Response)\"></xref> returns true\n3.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.poll(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#poll(PollingContext, TypeReference)\"></xref> \\- invoked after each polling interval, if the last polling response indicates an \"In Progress\" status. Returns a <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollResponse\"></xref> with the latest status\n4.  <xref uid=\"com.azure.core.util.polling.PollingStrategy.getResult(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.serializer.TypeReference<U>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getResult(PollingContext, TypeReference)\"></xref> \\- invoked when the last polling response indicates a \"Successfully Completed\" status. Returns the final result of the given type\n\nIf the user decides to cancel the <xref uid=\"com.azure.core.util.polling.AsyncPollResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsyncPollResponse\"></xref> or <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref>, the <xref uid=\"com.azure.core.util.polling.PollingStrategy.cancel(com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#cancel(PollingContext, PollResponse)\"></xref> method will be invoked. If the strategy doesn't support cancellation, an error will be returned.\n\nUsers are not expected to provide their own implementation of this interface. Built-in polling strategies in this library and other client libraries are often sufficient for handling polling in most long-running operations in Azure. When there are special scenarios, built-in polling strategies can be inherited and select methods can be overridden to accomplish the polling requirements, without writing an entire polling strategy from scratch."
metadata: {}
package: "com.azure.core.util.polling"
artifact: com.azure:azure-core:1.31.0
