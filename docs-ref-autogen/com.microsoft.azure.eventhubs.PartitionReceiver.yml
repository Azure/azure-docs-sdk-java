### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.PartitionReceiver
  id: PartitionReceiver
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  - com.microsoft.azure.eventhubs.PartitionReceiver.close()
  - com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  - com.microsoft.azure.eventhubs.PartitionReceiver.receive(int)
  - com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(int)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler,boolean)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(java.time.Duration)
  langs:
  - java
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  package: com.microsoft.azure.eventhubs
  summary: >-
    This is a logical representation of receiving from a EventHub partition.


    A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> is tied to a ConsumerGroup + EventHub Partition combination.

     *  If an epoch based <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false">PartitionReceiver</xref> (i.e., PartitionReceiver.getEpoch != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>.
     *  Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers.
  syntax:
    content: public interface PartitionReceiver
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  id: DEFAULT_PREFETCH_COUNT
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: DEFAULT_PREFETCH_COUNT
  nameWithType: PartitionReceiver.DEFAULT_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  type: Field
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public static final int DEFAULT_PREFETCH_COUNT
    return:
      type: int
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  id: MAXIMUM_PREFETCH_COUNT
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: MAXIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  type: Field
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public static final int MAXIMUM_PREFETCH_COUNT
    return:
      type: int
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  id: MINIMUM_PREFETCH_COUNT
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: MINIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MINIMUM_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  type: Field
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public static final int MINIMUM_PREFETCH_COUNT
    return:
      type: int
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  id: NULL_EPOCH
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: NULL_EPOCH
  nameWithType: PartitionReceiver.NULL_EPOCH
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  type: Field
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public static final long NULL_EPOCH
    return:
      type: long
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.close()
  id: close()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: close()
  nameWithType: PartitionReceiver.close()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.close()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.close*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract CompletableFuture<Void> close()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  id: closeSync()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: closeSync()
  nameWithType: PartitionReceiver.closeSync()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract void closeSync()
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  id: getEpoch()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getEpoch()
  nameWithType: PartitionReceiver.getEpoch()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Get the epoch value that this receiver is currently using for partition ownership.


    A value of 0 means this receiver is not an epoch-based receiver.
  syntax:
    content: public abstract long getEpoch()
    return:
      type: long
      description: the epoch value that this receiver is currently using for partition ownership.
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  id: getEventPosition()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getEventPosition()
  nameWithType: PartitionReceiver.getEventPosition()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Get the <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false">EventPosition</xref> that corresponds to an <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> which was returned last by the receiver.


    This value will not be populated, unless the knob <xref uid="com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)" data-throw-if-not-resolved="false">ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)</xref> is set. Note that EventPosition object is initialized using SequenceNumber and other parameters are not set and get will return null.
  syntax:
    content: public abstract EventPosition getEventPosition()
    return:
      type: com.microsoft.azure.eventhubs.EventPosition
      description: the EventPosition object.
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen()
  id: getIsOpen()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getIsOpen()
  nameWithType: PartitionReceiver.getIsOpen()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Determine the current state of the receiver.
  syntax:
    content: public abstract boolean getIsOpen()
    return:
      type: boolean
      description: false if the receiver is closing or has been closed, true if the receiver is open and ready to use.
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  id: getPartitionId()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionReceiver.getPartitionId()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Get EventHubs partition identifier.
  syntax:
    content: public abstract String getPartitionId()
    return:
      type: java.lang.String
      description: The identifier representing the partition from which this receiver is fetching data
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  id: getReceiveTimeout()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getReceiveTimeout()
  nameWithType: PartitionReceiver.getReceiveTimeout()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract Duration getReceiveTimeout()
    return:
      type: java.time.Duration
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  id: getRuntimeInformation()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: PartitionReceiver.getRuntimeInformation()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Gets the temporal <xref uid="com.microsoft.azure.eventhubs.ReceiverRuntimeInformation" data-throw-if-not-resolved="false">ReceiverRuntimeInformation</xref> for this EventHub partition. In general, this information is a representation of, where this <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>'s end of stream is, at the time <xref uid="com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()" data-throw-if-not-resolved="false">ReceiverRuntimeInformation#getRetrievalTime()</xref>.


    This value will not be populated, unless the knob <xref uid="com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)" data-throw-if-not-resolved="false">ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)</xref> is set. This value will be refreshed every time an <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> is consumed from <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false">PartitionReceiver</xref>. For ex: if no events have been consumed, then this value is not populated.
  syntax:
    content: public abstract ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
      description: receiver runtime information
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive(int)
  id: receive(int)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: receive(int maxEventCount)
  nameWithType: PartitionReceiver.receive(int maxEventCount)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive(int maxEventCount)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.receive*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Receive a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s from an EventHub partition


    Sample code (sample uses sync version of the api but concept are identical):


    ```java

    EventHubClient client = EventHubClient.createSync("__connection__");
     PartitionReceiver receiver = client.createPartitionReceiverSync("ConsumerGroup1", "1");
     Iterable receivedEvents = receiver.receiveSync();

     while (true)
     {
         int batchSize = 0;
         if (receivedEvents != null)
         {
             for(EventData receivedEvent: receivedEvents)
             {
                 System.out.println(String.format("Message Payload: %s", new String(receivedEvent.getBytes(), Charset.defaultCharset())));
                 System.out.println(String.format("Offset: %s, SeqNo: %s, EnqueueTime: %s",
                     receivedEvent.getSystemProperties().getOffset(),
                     receivedEvent.getSystemProperties().getSequenceNumber(),
                     receivedEvent.getSystemProperties().getEnqueuedTime()));
                 batchSize++;
             }
         }

         System.out.println(String.format("ReceivedBatch Size: %s", batchSize));
         receivedEvents = receiver.receiveSync();
     }
    ```
  syntax:
    content: public abstract CompletableFuture<Iterable<EventData>> receive(int maxEventCount)
    parameters:
    - id: maxEventCount
      type: int
      description: maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s that this call should return
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>>
      description: A completableFuture that will yield a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> is present.
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(int)
  id: receiveSync(int)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: receiveSync(int maxEventCount)
  nameWithType: PartitionReceiver.receiveSync(int maxEventCount)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(int maxEventCount)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver.receive*" data-throw-if-not-resolved="false">#receive</xref>.
  syntax:
    content: public default Iterable<EventData> receiveSync(int maxEventCount)
    parameters:
    - id: maxEventCount
      type: int
      description: maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s that this call should return
    return:
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: Batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> is present.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if ServiceBus client encountered any unrecoverable/non-transient problems during <xref uid="#receive" data-throw-if-not-resolved="false">#receive</xref>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler)
  id: setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: setReceiveHandler(PartitionReceiveHandler receiveHandler)
  nameWithType: PartitionReceiver.setReceiveHandler(PartitionReceiveHandler receiveHandler)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(PartitionReceiveHandler receiveHandler)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.
  syntax:
    content: public abstract CompletableFuture<Void> setReceiveHandler(PartitionReceiveHandler receiveHandler)
    parameters:
    - id: receiveHandler
      type: com.microsoft.azure.eventhubs.PartitionReceiveHandler
      description: An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref>. Setting this handler to <code>null</code> will stop the receive pump.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: A completableFuture which sets receiveHandler
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler,boolean)
  id: setReceiveHandler(com.microsoft.azure.eventhubs.PartitionReceiveHandler,boolean)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: setReceiveHandler(PartitionReceiveHandler receiveHandler, boolean invokeWhenNoEvents)
  nameWithType: PartitionReceiver.setReceiveHandler(PartitionReceiveHandler receiveHandler, boolean invokeWhenNoEvents)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(PartitionReceiveHandler receiveHandler, boolean invokeWhenNoEvents)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.
  syntax:
    content: public abstract CompletableFuture<Void> setReceiveHandler(PartitionReceiveHandler receiveHandler, boolean invokeWhenNoEvents)
    parameters:
    - id: receiveHandler
      type: com.microsoft.azure.eventhubs.PartitionReceiveHandler
      description: An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false">PartitionReceiveHandler</xref>
    - id: invokeWhenNoEvents
      type: boolean
      description: flag to indicate whether the <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler.onReceive(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)" data-throw-if-not-resolved="false">PartitionReceiveHandler#onReceive(Iterable)</xref> should be invoked when the receive call times out
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: A completableFuture which sets receiveHandler
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(java.time.Duration)
  id: setReceiveTimeout(java.time.Duration)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.1
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  langs:
  - java
  name: setReceiveTimeout(Duration value)
  nameWithType: PartitionReceiver.setReceiveTimeout(Duration value)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration value)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract void setReceiveTimeout(Duration value)
    parameters:
    - id: value
      type: java.time.Duration
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionReceiver.getPartitionId
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId
  package: com.microsoft.azure.eventhubs
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout*
  name: getReceiveTimeout
  nameWithType: PartitionReceiver.getReceiveTimeout
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout*
  name: setReceiveTimeout
  nameWithType: PartitionReceiver.setReceiveTimeout
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen*
  name: getIsOpen
  nameWithType: PartitionReceiver.getIsOpen
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getIsOpen
  package: com.microsoft.azure.eventhubs
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch*
  name: getEpoch
  nameWithType: PartitionReceiver.getEpoch
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  name: ReceiverRuntimeInformation
  nameWithType: ReceiverRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: PartitionReceiver.getRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventPosition
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition*
  name: getEventPosition
  nameWithType: PartitionReceiver.getEventPosition
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubException
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync*
  name: receiveSync
  nameWithType: PartitionReceiver.receiveSync
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive*
  name: receive
  nameWithType: PartitionReceiver.receive
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiveHandler
  name: PartitionReceiveHandler
  nameWithType: PartitionReceiveHandler
  fullName: com.microsoft.azure.eventhubs.PartitionReceiveHandler
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  name: setReceiveHandler
  nameWithType: PartitionReceiver.setReceiveHandler
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.close*
  name: close
  nameWithType: PartitionReceiver.close
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync*
  name: closeSync
  nameWithType: PartitionReceiver.closeSync
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventData
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
