### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.PartitionReceiver
  id: PartitionReceiver
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs.PartitionReceiver.close()
  - com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  - com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  - com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  - com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  - com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  - com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)
  - com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler,final boolean)
  - com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration)
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 24
  package: com.microsoft.azure.eventhubs
  summary: "<p>This is a logical representation of receiving from a EventHub partition. </p>\r\n<p>A <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <ul><li><p>If an epoch based <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref> (i.e., PartitionReceiver.getEpoch != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref>. </p></li><li><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></li></ul></p>\r\n<p></p>"
  syntax: &o1
    content: public interface PartitionReceiver
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.close()
  id: close()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: close()
  nameWithType: PartitionReceiver.close()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.close()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.close*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 140
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public CompletableFuture<Void> close()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  id: closeSync()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: closeSync()
  nameWithType: PartitionReceiver.closeSync()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 142
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public void closeSync()
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  id: DEFAULT_PREFETCH_COUNT
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: DEFAULT_PREFETCH_COUNT
  nameWithType: PartitionReceiver.DEFAULT_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 27
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public int DEFAULT_PREFETCH_COUNT= 500
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  id: getEpoch()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: getEpoch()
  nameWithType: PartitionReceiver.getEpoch()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 50
  package: com.microsoft.azure.eventhubs
  summary: "<p>Get the epoch value that this receiver is currently using for partition ownership. </p>\r\n<p>A value of 0 means this receiver is not an epoch-based receiver.</p>\r\n<p></p>"
  syntax:
    content: public long getEpoch()
    return:
      type: 0364520f
      description: <p>the epoch value that this receiver is currently using for partition ownership. </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  id: getEventPosition()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: getEventPosition()
  nameWithType: PartitionReceiver.getEventPosition()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 71
  package: com.microsoft.azure.eventhubs
  summary: "<p>Get the <xref uid=\"com.microsoft.azure.eventhubs.EventPosition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventPosition\"></xref> that corresponds to an <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> which was returned last by the receiver. </p>\r\n<p>This value will not be populated, unless the knob <xref uid=\"com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)\"></xref> is set. Note that EventPosition object is initialized using SequenceNumber and other parameters are not set and get will return null.</p>\r\n<p></p>"
  syntax:
    content: public EventPosition getEventPosition()
    return:
      type: com.microsoft.azure.eventhubs.EventPosition
      description: <p>the EventPosition object. </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  id: getPartitionId()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionReceiver.getPartitionId()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 37
  package: com.microsoft.azure.eventhubs
  summary: "<p>Get EventHubs partition identifier.</p>\r\n<p></p>"
  syntax:
    content: public String getPartitionId()
    return:
      type: "26831127"
      description: <p>The identifier representing the partition from which this receiver is fetching data </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  id: getReceiveTimeout()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: getReceiveTimeout()
  nameWithType: PartitionReceiver.getReceiveTimeout()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 39
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public Duration getReceiveTimeout()
    return:
      type: e02a2de0
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  id: getRuntimeInformation()
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: getRuntimeInformation()
  nameWithType: PartitionReceiver.getRuntimeInformation()
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 62
  package: com.microsoft.azure.eventhubs
  summary: "<p>Gets the temporal <xref uid=\"com.microsoft.azure.eventhubs.ReceiverRuntimeInformation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiverRuntimeInformation\"></xref> for this EventHub partition. In general, this information is a representation of, where this <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref>'s end of stream is, at the time <xref uid=\"com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiverRuntimeInformation#getRetrievalTime()\"></xref>. </p>\r\n<p>This value will not be populated, unless the knob <xref uid=\"com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)\"></xref> is set. This value will be refreshed every time an <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> is consumed from <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref>. For ex: if no events have been consumed, then this value is not populated.</p>\r\n<p></p>"
  syntax:
    content: public ReceiverRuntimeInformation getRuntimeInformation()
    return:
      type: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
      description: <p>receiver runtime information </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  id: MAXIMUM_PREFETCH_COUNT
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: MAXIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 28
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public int MAXIMUM_PREFETCH_COUNT= 4000
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  id: MINIMUM_PREFETCH_COUNT
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: MINIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MINIMUM_PREFETCH_COUNT
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 26
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public int MINIMUM_PREFETCH_COUNT= 1
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  id: NULL_EPOCH
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: NULL_EPOCH
  nameWithType: PartitionReceiver.NULL_EPOCH
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  type: Field
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 30
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public long NULL_EPOCH= 0
    return:
      type: 0364520f
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)
  id: receive(final int)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.receive*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 117
  package: com.microsoft.azure.eventhubs
  summary: "<p>Receive a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s from an EventHub partition </p>\r\n<p>Sample code (sample uses sync version of the api but concept are identical): <pre>\r\nEventHubClient client = EventHubClient.createSync(\"__connection__\");\r\nPartitionReceiver receiver = client.createPartitionReceiverSync(\"ConsumerGroup1\", \"1\");\r\nIterable{&lt;}EventData{&gt;} receivedEvents = receiver.receiveSync();</pre></p>\r\n<p>\r\n  <pre>while (true)\r\n{\r\n    int batchSize = 0;\r\n    if (receivedEvents != null)\r\n    {\r\n        for(EventData receivedEvent: receivedEvents)\r\n        {\r\n            System.out.println(String.format(\"Message Payload: %s\", new String(receivedEvent.getBytes(), Charset.defaultCharset())));\r\n            System.out.println(String.format(\"Offset: %s, SeqNo: %s, EnqueueTime: %s\",\r\n                receivedEvent.getSystemProperties().getOffset(),\r\n                receivedEvent.getSystemProperties().getSequenceNumber(),\r\n                receivedEvent.getSystemProperties().getEnqueuedTime()));\r\n            batchSize++;\r\n        }\r\n    }</pre>\r\n</p>\r\n<p>\r\n  <pre>    System.out.println(String.format(\"ReceivedBatch Size: %s\", batchSize));\r\n    receivedEvents = receiver.receiveSync();\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o2
    content: public CompletableFuture<Iterable<EventData>> receive(final int maxEventCount)
    parameters:
    - id: maxEventCount
      type: cd225469
      description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s that this call should return </p>
    return:
      type: 5ae8a14ccom.microsoft.azure.eventhubs.EventDatae7daa122
      description: <p>A completableFuture that will yield a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is present. </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int)
  id: receiveSync(final int)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: receiveSync(final int maxEventCount)
  nameWithType: PartitionReceiver.receiveSync(final int maxEventCount)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int maxEventCount)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 80
  package: com.microsoft.azure.eventhubs
  summary: "<p>Synchronous version of <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"receive\"></xref>.</p>\r\n<p></p>"
  syntax:
    content: public default Iterable<EventData> receiveSync(final int maxEventCount)
    parameters:
    - id: maxEventCount
      type: cd225469
      description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s that this call should return </p>
    return:
      type: 6ed053e5com.microsoft.azure.eventhubs.EventDataa08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is present. </p>
  exceptions:
  - type: ca207911
    description: <p>if ServiceBus client encountered any unrecoverable/non-transient problems during <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)" data-throw-if-not-resolved="false" data-raw-source="receive"></xref></p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler)
  id: setReceiveHandler(final PartitionReceiveHandler)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 127
  package: com.microsoft.azure.eventhubs
  summary: "<p>Register a receive handler that will be called when an event is available. A <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiveHandler\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiveHandler\"></xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler)
    parameters:
    - id: receiveHandler
      type: 93de0ef9com.microsoft.azure.eventhubs.PartitionReceiveHandler
      description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref>. Setting this handler to <code>null</code> will stop the receive pump. </p>
    return:
      type: db03ee24
      description: <p>A completableFuture which sets receiveHandler </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler,final boolean)
  id: setReceiveHandler(final PartitionReceiveHandler,final boolean)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 138
  package: com.microsoft.azure.eventhubs
  summary: "<p>Register a receive handler that will be called when an event is available. A <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiveHandler\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiveHandler\"></xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
    parameters:
    - id: receiveHandler
      type: 93de0ef9com.microsoft.azure.eventhubs.PartitionReceiveHandler
      description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref></p>
    - id: invokeWhenNoEvents
      type: 4dda0764
      description: <p>flag to indicate whether the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler#onReceive(Iterable)"></xref> should be invoked when the receive call times out </p>
    return:
      type: db03ee24
      description: <p>A completableFuture which sets receiveHandler </p>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration)
  id: setReceiveTimeout(Duration)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  langs:
  - java
  name: setReceiveTimeout(Duration value)
  nameWithType: PartitionReceiver.setReceiveTimeout(Duration value)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration value)
  overload: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/PartitionReceiver.java
    startLine: 41
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public void setReceiveTimeout(Duration value)
    parameters:
    - id: value
      type: e02a2de0
references:
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionReceiver.getPartitionId
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId
  package: com.microsoft.azure.eventhubs
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout*
  name: getReceiveTimeout
  nameWithType: PartitionReceiver.getReceiveTimeout
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout*
  name: setReceiveTimeout
  nameWithType: PartitionReceiver.setReceiveTimeout
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch*
  name: getEpoch
  nameWithType: PartitionReceiver.getEpoch
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation*
  name: getRuntimeInformation
  nameWithType: PartitionReceiver.getRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition*
  name: getEventPosition
  nameWithType: PartitionReceiver.getEventPosition
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition
  package: com.microsoft.azure.eventhubs
- uid: ca207911
  spec.java:
  - name: EventHubException
    fullName: EventHubException
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 6ed053e5com.microsoft.azure.eventhubs.EventDataa08ddfce
  spec.java:
  - name: default Iterable<
    fullName: default Iterable<
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs.EventData.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync*
  name: receiveSync
  nameWithType: PartitionReceiver.receiveSync
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync
  package: com.microsoft.azure.eventhubs
- uid: 5ae8a14ccom.microsoft.azure.eventhubs.EventDatae7daa122
  spec.java:
  - name: CompletableFuture<Iterable<
    fullName: CompletableFuture<Iterable<
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
    href: com.microsoft.azure.eventhubs.EventData.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive*
  name: receive
  nameWithType: PartitionReceiver.receive
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive
  package: com.microsoft.azure.eventhubs
- uid: 93de0ef9com.microsoft.azure.eventhubs.PartitionReceiveHandler
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.eventhubs.PartitionReceiveHandler
    name: PartitionReceiveHandler
    fullName: com.microsoft.azure.eventhubs.PartitionReceiveHandler
    href: com.microsoft.azure.eventhubs.PartitionReceiveHandler.yml
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler*
  name: setReceiveHandler
  nameWithType: PartitionReceiver.setReceiveHandler
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler
  package: com.microsoft.azure.eventhubs
- uid: 4dda0764
  spec.java:
  - name: final boolean
    fullName: final boolean
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.close*
  name: close
  nameWithType: PartitionReceiver.close
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync*
  name: closeSync
  nameWithType: PartitionReceiver.closeSync
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.yml
  name: ReceiverRuntimeInformation
  nameWithType: ReceiverRuntimeInformation
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  type: Class
  summary: "<p>Represents the temporal end of stream information of an EventHubs Partition. </p>"
  syntax:
    content: public class ReceiverRuntimeInformation
- uid: com.microsoft.azure.eventhubs.PartitionReceiver
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver
  type: Interface
  summary: "<p>This is a logical representation of receiving from a EventHub partition. </p>\r\n<p>A <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <ul><li><p>If an epoch based <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref> (i.e., PartitionReceiver.getEpoch != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref>. </p></li><li><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></li></ul></p>\r\n<p></p>"
  syntax: *o1
- uid: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()
  parent: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation
  href: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.yml
  name: getRetrievalTime()
  nameWithType: ReceiverRuntimeInformation.getRetrievalTime()
  fullName: com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()
  type: Method
  summary: "<p>The value indicating when this information was retrieved from the Event Hubs service</p>\r\n<p></p>"
  syntax:
    content: public Instant getRetrievalTime()
    return:
      type: 328f8254
      description: <p>retrieval time </p>
- uid: com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)
  parent: com.microsoft.azure.eventhubs.ReceiverOptions
  href: com.microsoft.azure.eventhubs.ReceiverOptions.yml
  name: setReceiverRuntimeMetricEnabled(boolean value)
  nameWithType: ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean value)
  fullName: com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean value)
  type: Method
  summary: "<p>Knob to enable/disable runtime metric of the receiver. If this is set to true and is passed to <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String,final String,final EventPosition)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#createReceiver\"></xref>, after the first <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver#receive(int)\"></xref> call, <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver#getRuntimeInformation()\"></xref> and <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver#getEventPosition()\"></xref> will be populated. </p>\r\n<p>This knob facilitates for an optimization where the Consumer of Event Hub has the end of stream details at the disposal, without making any additional <xref uid=\"com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubClient#getPartitionRuntimeInformation(String)\"></xref> call to Event Hubs service. To achieve this, behind the scenes, along with the actual <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>, that the Event Hubs <xref uid=\"com.microsoft.azure.eventhubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionReceiver\"></xref> delivers, it includes extra information about the Event Hubs partitions end of stream details on every event. In summary, enabling this knob will help users to save an extra call to Event Hubs service to fetch Event Hubs partition information and as a result, will add that information as header to each <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> received by the client.</p>\r\n<p></p>"
  syntax:
    content: public void setReceiverRuntimeMetricEnabled(boolean value)
    parameters:
    - id: value
      type: 4fc6e284
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="boolean"></xref> to indicate, whether, the runtime metric of the receiver should be enabled </p>
- uid: com.microsoft.azure.eventhubs.EventData
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: "<p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. </p>\r\n<p>Serializing a received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. Here's the reference used for AMQP 1.0 specification: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>\r\ni.   <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getProperties()\"></xref> - AMQPMessage.ApplicationProperties section\r\nii.  <xref uid=\"com.microsoft.azure.eventhubs.EventData.getBytes()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBytes()\"></xref> - if AMQPMessage.Body has Data section\r\niii. <xref uid=\"com.microsoft.azure.eventhubs.EventData.getObject()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getObject()\"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections\r\n</pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>. </p>"
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs.EventPosition
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventPosition.yml
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.microsoft.azure.eventhubs.EventPosition
  type: Interface
  summary: "<p>Defines a position of an <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> in the event hub partition. The position can be an Offset, Sequence Number, or EnqueuedTime. </p>"
  syntax:
    content: public interface EventPosition
- uid: com.microsoft.azure.eventhubs.EventHubException
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventHubException.yml
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
  type: Class
  summary: "<p>This is the base exception that service bus will produce for all error cases. </p>"
  syntax:
    content: public class EventHubException
- uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)
  parent: com.microsoft.azure.eventhubs.PartitionReceiver
  href: com.microsoft.azure.eventhubs.PartitionReceiver.yml
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  type: Method
  summary: "<p>Receive a batch of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>'s from an EventHub partition </p>\r\n<p>Sample code (sample uses sync version of the api but concept are identical): <pre>\r\nEventHubClient client = EventHubClient.createSync(\"__connection__\");\r\nPartitionReceiver receiver = client.createPartitionReceiverSync(\"ConsumerGroup1\", \"1\");\r\nIterable{&lt;}EventData{&gt;} receivedEvents = receiver.receiveSync();</pre></p>\r\n<p>\r\n  <pre>while (true)\r\n{\r\n    int batchSize = 0;\r\n    if (receivedEvents != null)\r\n    {\r\n        for(EventData receivedEvent: receivedEvents)\r\n        {\r\n            System.out.println(String.format(\"Message Payload: %s\", new String(receivedEvent.getBytes(), Charset.defaultCharset())));\r\n            System.out.println(String.format(\"Offset: %s, SeqNo: %s, EnqueueTime: %s\",\r\n                receivedEvent.getSystemProperties().getOffset(),\r\n                receivedEvent.getSystemProperties().getSequenceNumber(),\r\n                receivedEvent.getSystemProperties().getEnqueuedTime()));\r\n            batchSize++;\r\n        }\r\n    }</pre>\r\n</p>\r\n<p>\r\n  <pre>    System.out.println(String.format(\"ReceivedBatch Size: %s\", batchSize));\r\n    receivedEvents = receiver.receiveSync();\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o2
- uid: com.microsoft.azure.eventhubs.PartitionReceiveHandler
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.PartitionReceiveHandler.yml
  name: PartitionReceiveHandler
  nameWithType: PartitionReceiveHandler
  fullName: com.microsoft.azure.eventhubs.PartitionReceiveHandler
  type: Interface
  summary: "<p>The handler to invoke after receiving <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref>s from Microsoft Azure EventHubs. Use any implementation of this abstract class to specify user action when using PartitionReceiver's setReceiveHandler().</p>\r\n<p></p>"
  syntax:
    content: public interface PartitionReceiveHandler
