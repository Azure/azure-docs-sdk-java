### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient"
fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient"
name: "DataLakeDirectoryClient"
nameWithType: "DataLakeDirectoryClient"
summary: "This class provides a client that contains directory operations for Azure Storage Data Lake."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient?alt=com.azure.storage.file.datalake.DataLakePathClient&text=DataLakePathClient\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.create()?alt=com.azure.storage.file.datalake.DataLakePathClient.create&text=create\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.create(boolean)?alt=com.azure.storage.file.datalake.DataLakePathClient.create&text=create\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.createWithResponse&text=createWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.exists()?alt=com.azure.storage.file.datalake.DataLakePathClient.exists&text=exists\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse&text=existsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)?alt=com.azure.storage.file.datalake.DataLakePathClient.generateSas&text=generateSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.generateSas&text=generateSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)?alt=com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas&text=generateUserDelegationSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas&text=generateUserDelegationSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()?alt=com.azure.storage.file.datalake.DataLakePathClient.getAccessControl&text=getAccessControl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse&text=getAccessControlWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getAccountName()?alt=com.azure.storage.file.datalake.DataLakePathClient.getAccountName&text=getAccountName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()?alt=com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName&text=getFileSystemName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()?alt=com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline&text=getHttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getProperties()?alt=com.azure.storage.file.datalake.DataLakePathClient.getProperties&text=getProperties\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse&text=getPropertiesWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()?alt=com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion&text=getServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathRemoveAccessControlEntry>)?alt=com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursive&text=removeAccessControlRecursive\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathRemoveAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.removeAccessControlRecursiveWithResponse&text=removeAccessControlRecursiveWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)?alt=com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList&text=setAccessControlList\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse&text=setAccessControlListWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)?alt=com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive&text=setAccessControlRecursive\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathSetAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursiveWithResponse&text=setAccessControlRecursiveWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)?alt=com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders&text=setHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse&text=setHttpHeadersWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)?alt=com.azure.storage.file.datalake.DataLakePathClient.setMetadata&text=setMetadata\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse&text=setMetadataWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)?alt=com.azure.storage.file.datalake.DataLakePathClient.setPermissions&text=setPermissions\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse&text=setPermissionsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursive(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)?alt=com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursive&text=updateAccessControlRecursive\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursiveWithResponse(com.azure.storage.file.datalake.options.PathUpdateAccessControlRecursiveOptions,java.time.Duration,com.azure.core.util.Context)?alt=com.azure.storage.file.datalake.DataLakePathClient.updateAccessControlRecursiveWithResponse&text=updateAccessControlRecursiveWithResponse\" data-throw-if-not-resolved=\"False\" />"
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **DataLakeDirectoryClient**</br> extends <xref href=\"com.azure.storage.file.datalake.DataLakePathClient?alt=com.azure.storage.file.datalake.DataLakePathClient&text=DataLakePathClient\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFile(String fileName)"
  name: "createFile(String fileName)"
  nameWithType: "DataLakeDirectoryClient.createFile(String fileName)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeFileClient createFile(String fileName)"
  desc: "Creates a new file within a directory. By default this method will not overwrite an existing file. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeFileClient fileClient = client.createFile(fileName);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> used to interact with the file created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFile(String fileName, boolean overwrite)"
  name: "createFile(String fileName, boolean overwrite)"
  nameWithType: "DataLakeDirectoryClient.createFile(String fileName, boolean overwrite)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Whether or not to overwrite, should a file exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileClient createFile(String fileName, boolean overwrite)"
  desc: "Creates a new file within a directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n DataLakeFileClient fClient = client.createFile(fileName, overwrite);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> used to interact with the file created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Creates a new file within a directory."
  parameters:
  - description: "Name of the file to create."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "POSIX access permissions for the file owner, the file owning group, and others."
    name: "permissions"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Restricts permissions of the file to be created."
    name: "umask"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the file. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeFileClient> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Creates a new file within a directory. If a file with the same name already exists, the file will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n Response<DataLakeFileClient> newFileClient = client.createFileWithResponse(fileName, permissions, umask, httpHeaders,\n     Collections.singletonMap(\"metadata\", \"value\"), requestConditions,\n     timeout, new Context(key1, value1));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> used\n to interact with the file created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory(String subdirectoryName)"
  name: "createSubdirectory(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryClient.createSubdirectory(String subdirectoryName)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeDirectoryClient createSubdirectory(String subdirectoryName)"
  desc: "Creates a new sub-directory within a directory. By default this method will not overwrite an existing sub-directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryClient directoryClient = client.createSubdirectory(directoryName);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> used to interact with the sub-directory created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory(java.lang.String,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory(String subdirectoryName, boolean overwrite)"
  name: "createSubdirectory(String subdirectoryName, boolean overwrite)"
  nameWithType: "DataLakeDirectoryClient.createSubdirectory(String subdirectoryName, boolean overwrite)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Whether or not to overwrite, should the sub-directory exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeDirectoryClient createSubdirectory(String subdirectoryName, boolean overwrite)"
  desc: "Creates a new sub-directory within a directory. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nboolean overwrite = false; /* Default value. */\n DataLakeDirectoryClient dClient = client.createSubdirectory(fileName, overwrite);\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> used to interact with the sub-directory created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Creates a new sub-directory within a directory."
  parameters:
  - description: "Name of the sub-directory to create."
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "POSIX access permissions for the sub-directory owner, the sub-directory owning group, and\n others."
    name: "permissions"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Restricts permissions of the sub-directory to be created."
    name: "umask"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeDirectoryClient> createSubdirectoryWithResponse(String subdirectoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Creates a new sub-directory within a directory. If a sub-directory with the same name already exists, the sub-directory will be overwritten. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n Response<DataLakeDirectoryClient> newDirectoryClient = client.createSubdirectoryWithResponse(directoryName,\n     permissions, umask, httpHeaders, Collections.singletonMap(\"metadata\", \"value\"), requestConditions, timeout,\n     new Context(key1, value1));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref>\n used to interact with the sub-directory created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.delete()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.delete()"
  name: "delete()"
  nameWithType: "DataLakeDirectoryClient.delete()"
  summary: "Deletes a directory."
  syntax: "public void delete()"
  desc: "Deletes a directory.\n\n**Code Samples**\n\n```java\nclient.delete();\n System.out.println(\"Delete request completed\");\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteFile(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteFile(String fileName)"
  name: "deleteFile(String fileName)"
  nameWithType: "DataLakeDirectoryClient.deleteFile(String fileName)"
  summary: "Deletes the specified file in the directory."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteFile(String fileName)"
  desc: "Deletes the specified file in the directory. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteFile(fileName);\n System.out.println(\"Delete request completed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Deletes the specified file in the directory."
  parameters:
  - description: "Name of the file to delete."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteFileWithResponse(String fileName, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Deletes the specified file in the directory. If the file doesn't exist the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n\n client.deleteFileWithResponse(fileName, requestConditions, timeout, new Context(key1, value1));\n System.out.println(\"Delete request completed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectory(String subdirectoryName)"
  name: "deleteSubdirectory(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryClient.deleteSubdirectory(String subdirectoryName)"
  summary: "Deletes the specified sub-directory in the directory."
  parameters:
  - description: "Name of the sub-directory to delete."
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteSubdirectory(String subdirectoryName)"
  desc: "Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.deleteSubdirectory(directoryName);\n System.out.println(\"Delete request completed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectoryWithResponse(java.lang.String,boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectoryWithResponse(String subdirectoryName, boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "deleteSubdirectoryWithResponse(String subdirectoryName, boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.deleteSubdirectoryWithResponse(String subdirectoryName, boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Deletes the specified sub-directory in the directory."
  parameters:
  - description: "Name of the sub-directory to delete."
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Whether or not to delete all paths beneath the sub-directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteSubdirectoryWithResponse(String subdirectoryName, boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Deletes the specified sub-directory in the directory. If the sub-directory doesn't exist or is not empty the operation fails. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n\n client.deleteSubdirectoryWithResponse(directoryName, recursive, requestConditions, timeout,\n     new Context(key1, value1));\n System.out.println(\"Delete request completed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A response containing status code and HTTP headers"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  name: "deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  summary: "Deletes a directory."
  parameters:
  - description: "Whether or not to delete all paths beneath the directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteWithResponse(boolean recursive, DataLakeRequestConditions requestConditions, Duration timeout, Context context)"
  desc: "Deletes a directory.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n boolean recursive = false; // Default value\n\n client.deleteWithResponse(recursive, requestConditions, timeout, new Context(key1, value1));\n System.out.println(\"Delete request completed\");\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/delete"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryName()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryName()"
  name: "getDirectoryName()"
  nameWithType: "DataLakeDirectoryClient.getDirectoryName()"
  summary: "Gets the name of this directory, not including its full path."
  syntax: "public String getDirectoryName()"
  desc: "Gets the name of this directory, not including its full path."
  returns:
    description: "The name of the directory."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryPath()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryPath()"
  name: "getDirectoryPath()"
  nameWithType: "DataLakeDirectoryClient.getDirectoryPath()"
  summary: "Gets the path of this directory, not including the name of the resource itself."
  syntax: "public String getDirectoryPath()"
  desc: "Gets the path of this directory, not including the name of the resource itself."
  returns:
    description: "The path of the directory."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryUrl()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getDirectoryUrl()"
  name: "getDirectoryUrl()"
  nameWithType: "DataLakeDirectoryClient.getDirectoryUrl()"
  summary: "Gets the URL of the directory represented by this client on the Data Lake service."
  syntax: "public String getDirectoryUrl()"
  desc: "Gets the URL of the directory represented by this client on the Data Lake service."
  returns:
    description: "the URL."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getFileClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getFileClient(String fileName)"
  name: "getFileClient(String fileName)"
  nameWithType: "DataLakeDirectoryClient.getFileClient(String fileName)"
  summary: "Initializes a new Data<wbr>Lake<wbr>File<wbr>Client object by concatenating file<wbr>Name to the end of Data<wbr>Lake<wbr>Directory<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the file.\n\n <p><strong>Code Samples</strong></p>\n\n <!-- src_embed com.azure.storage.file.datalake.DataLakeDirectoryClient.getFileClient#String -->\n <pre>\n DataLakeFileClient dataLakeFileClient = client.getFileClient&#40;fileName&#41;;\n </pre>\n <!-- end com.azure.storage.file.datalake.DataLakeDirectoryClient.getFileClient#String -->"
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeFileClient getFileClient(String fileName)"
  desc: "Initializes a new DataLakeFileClient object by concatenating fileName to the end of DataLakeDirectoryClient's URL. The new DataLakeFileClient uses the same request policy pipeline as the DataLakeDirectoryClient."
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> object which references the file with the specified name in this\n directory."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getSubdirectoryClient(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.getSubdirectoryClient(String subdirectoryName)"
  name: "getSubdirectoryClient(String subdirectoryName)"
  nameWithType: "DataLakeDirectoryClient.getSubdirectoryClient(String subdirectoryName)"
  summary: "Initializes a new Data<wbr>Lake<wbr>Directory<wbr>Client object by concatenating directory<wbr>Name to the end of Data<wbr>Lake<wbr>Directory<wbr>Client's URL."
  parameters:
  - description: "A <code>String</code> representing the name of the sub-directory.\n\n <p><strong>Code Samples</strong></p>\n\n <!-- src_embed com.azure.storage.file.datalake.DataLakeDirectoryClient.getSubdirectoryClient#String -->\n <pre>\n DataLakeDirectoryClient dataLakeDirectoryClient = client.getSubdirectoryClient&#40;directoryName&#41;;\n </pre>\n <!-- end com.azure.storage.file.datalake.DataLakeDirectoryClient.getSubdirectoryClient#String -->"
    name: "subdirectoryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeDirectoryClient getSubdirectoryClient(String subdirectoryName)"
  desc: "Initializes a new DataLakeDirectoryClient object by concatenating directoryName to the end of DataLakeDirectoryClient's URL. The new DataLakeDirectoryClient uses the same request policy pipeline as the DataLakeDirectoryClient."
  returns:
    description: "A new <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> object which references the sub-directory with the specified name\n in this directory"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.listPaths()"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.listPaths()"
  name: "listPaths()"
  nameWithType: "DataLakeDirectoryClient.listPaths()"
  summary: "Returns a lazy loaded list of files/directories in this directory."
  syntax: "public PagedIterable<PathItem> listPaths()"
  desc: "Returns a lazy loaded list of files/directories in this directory. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listPaths().forEach(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list#filesystem"
  returns:
    description: "The list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.listPaths(boolean,boolean,java.lang.Integer,java.time.Duration)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults, Duration timeout)"
  name: "listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults, Duration timeout)"
  nameWithType: "DataLakeDirectoryClient.listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults, Duration timeout)"
  summary: "Returns a lazy loaded list of files/directories in this directory."
  parameters:
  - description: "Specifies if the call should recursively include all paths."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "If \"true\", the user identity values returned in the x-ms-owner, x-ms-group,\n and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.\n If \"false\", the values will be returned as Azure Active Directory Object IDs.\n The default value is false. Note that group and application Object IDs are not translated because they do not\n have unique friendly names."
    name: "userPrincipleNameReturned"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the maximum number of blobs to return per page, including all BlobPrefix elements. If\n the request does not specify maxResults or specifies a value greater than 5,000, the server will return up to\n 5,000 items per page. If iterating by page, the page size passed to byPage methods such as\n <xref uid=\"com.azure.core.http.rest.PagedIterable.iterableByPage*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable#iterableByPage(int)\"></xref> will be preferred over this value."
    name: "maxResults"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  syntax: "public PagedIterable<PathItem> listPaths(boolean recursive, boolean userPrincipleNameReturned, Integer maxResults, Duration timeout)"
  desc: "Returns a lazy loaded list of files/directories in this directory. The returned <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> can be consumed while new items are automatically retrieved as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nclient.listPaths(false, false, 10, timeout)\n     .forEach(path -> System.out.printf(\"Name: %s%n\", path.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/filesystem/list#filesystem"
  returns:
    description: "The list of files/directories."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathItem?alt=com.azure.storage.file.datalake.models.PathItem&text=PathItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.rename(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.rename(String destinationFileSystem, String destinationPath)"
  name: "rename(String destinationFileSystem, String destinationPath)"
  nameWithType: "DataLakeDirectoryClient.rename(String destinationFileSystem, String destinationPath)"
  summary: "Moves the directory to another location within the file system."
  parameters:
  - description: "The file system of the destination within the account.\n <code>null</code> for the current file system."
    name: "destinationFileSystem"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Relative path from the file system to rename the directory to, excludes the file system\n name. For example if you want to move a directory with fileSystem = \"myfilesystem\", path = \"mydir/mysubdir\" to\n another path in myfilesystem (ex: newdir) then set the destinationPath = \"newdir\""
    name: "destinationPath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeDirectoryClient rename(String destinationFileSystem, String destinationPath)"
  desc: "Moves the directory to another location within the file system. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeDirectoryClient renamedClient = client.rename(fileSystemName, destinationPath);\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> used to interact with the new directory created."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakeDirectoryClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.datalake.DataLakeDirectoryClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Duration timeout, Context context)"
  name: "renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Duration timeout, Context context)"
  nameWithType: "DataLakeDirectoryClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Duration timeout, Context context)"
  summary: "Moves the directory to another location within the file system."
  parameters:
  - description: "The file system of the destination within the account.\n <code>null</code> for the current file system."
    name: "destinationFileSystem"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Relative path from the file system to rename the directory to, excludes the file system\n name. For example if you want to move a directory with fileSystem = \"myfilesystem\", path = \"mydir/mysubdir\" to\n another path in myfilesystem (ex: newdir) then set the destinationPath = \"newdir\""
    name: "destinationPath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> against the source."
    name: "sourceRequestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> against the destination."
    name: "destinationRequestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "An optional timeout value beyond which a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> will be raised."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DataLakeDirectoryClient> renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions, Duration timeout, Context context)"
  desc: "Moves the directory to another location within the file system. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions sourceRequestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n DataLakeRequestConditions destinationRequestConditions = new DataLakeRequestConditions();\n\n DataLakeDirectoryClient newRenamedClient = client.renameWithResponse(fileSystemName, destinationPath,\n     sourceRequestConditions, destinationRequestConditions, timeout, new Context(key1, value1)).getValue();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/create"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> that contains a\n <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> used to interact with the directory created."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that contains directory operations for Azure Storage Data Lake. Operations provided by this client include creating a directory, deleting a directory, renaming a directory, setting metadata and http headers, setting and retrieving access control, getting properties and creating and deleting files and subdirectories.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathClientBuilder\"></xref> or retrieved via <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemClient.getDirectoryClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getDirectoryClient\"></xref>.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/azure/storage/blobs/data-lake-storage-introduction"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.9.0
