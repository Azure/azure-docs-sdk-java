### YamlMime:JavaType
uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource"
fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource"
name: "SqlContainerResource"
nameWithType: "SqlContainerResource"
summary: "Cosmos DB SQL container resource object."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class SqlContainerResource"
constructors:
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.SqlContainerResource()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.SqlContainerResource()"
  name: "SqlContainerResource()"
  nameWithType: "SqlContainerResource.SqlContainerResource()"
  syntax: "public SqlContainerResource()"
methods:
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.analyticalStorageTtl()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.analyticalStorageTtl()"
  name: "analyticalStorageTtl()"
  nameWithType: "SqlContainerResource.analyticalStorageTtl()"
  summary: "Get the analyticalStorageTtl property: Analytical TTL."
  syntax: "public Long analyticalStorageTtl()"
  returns:
    description: "the analyticalStorageTtl value."
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.conflictResolutionPolicy()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.conflictResolutionPolicy()"
  name: "conflictResolutionPolicy()"
  nameWithType: "SqlContainerResource.conflictResolutionPolicy()"
  summary: "Get the conflictResolutionPolicy property: The conflict resolution policy for the container."
  syntax: "public ConflictResolutionPolicy conflictResolutionPolicy()"
  returns:
    description: "the conflictResolutionPolicy value."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy?alt=com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy&text=ConflictResolutionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.defaultTtl()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.defaultTtl()"
  name: "defaultTtl()"
  nameWithType: "SqlContainerResource.defaultTtl()"
  summary: "Get the defaultTtl property: Default time to live."
  syntax: "public Integer defaultTtl()"
  returns:
    description: "the defaultTtl value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.id()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.id()"
  name: "id()"
  nameWithType: "SqlContainerResource.id()"
  summary: "Get the id property: Name of the Cosmos DB SQL container."
  syntax: "public String id()"
  returns:
    description: "the id value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.indexingPolicy()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.indexingPolicy()"
  name: "indexingPolicy()"
  nameWithType: "SqlContainerResource.indexingPolicy()"
  summary: "Get the indexingPolicy property: The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container."
  syntax: "public IndexingPolicy indexingPolicy()"
  returns:
    description: "the indexingPolicy value."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.IndexingPolicy?alt=com.azure.resourcemanager.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.partitionKey()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.partitionKey()"
  name: "partitionKey()"
  nameWithType: "SqlContainerResource.partitionKey()"
  summary: "Get the partitionKey property: The configuration of the partition key to be used for partitioning data into multiple partitions."
  syntax: "public ContainerPartitionKey partitionKey()"
  returns:
    description: "the partitionKey value."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ContainerPartitionKey?alt=com.azure.resourcemanager.cosmos.models.ContainerPartitionKey&text=ContainerPartitionKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.uniqueKeyPolicy()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.uniqueKeyPolicy()"
  name: "uniqueKeyPolicy()"
  nameWithType: "SqlContainerResource.uniqueKeyPolicy()"
  summary: "Get the uniqueKeyPolicy property: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
  syntax: "public UniqueKeyPolicy uniqueKeyPolicy()"
  returns:
    description: "the uniqueKeyPolicy value."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy?alt=com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy&text=UniqueKeyPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.validate()"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.validate()"
  name: "validate()"
  nameWithType: "SqlContainerResource.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withAnalyticalStorageTtl(java.lang.Long)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  name: "withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  nameWithType: "SqlContainerResource.withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  summary: "Set the analyticalStorageTtl property: Analytical TTL."
  parameters:
  - description: "the analyticalStorageTtl value to set."
    name: "analyticalStorageTtl"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withAnalyticalStorageTtl(Long analyticalStorageTtl)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withConflictResolutionPolicy(com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  name: "withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  nameWithType: "SqlContainerResource.withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  summary: "Set the conflictResolutionPolicy property: The conflict resolution policy for the container."
  parameters:
  - description: "the conflictResolutionPolicy value to set."
    name: "conflictResolutionPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy?alt=com.azure.resourcemanager.cosmos.models.ConflictResolutionPolicy&text=ConflictResolutionPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withConflictResolutionPolicy(ConflictResolutionPolicy conflictResolutionPolicy)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withDefaultTtl(java.lang.Integer)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withDefaultTtl(Integer defaultTtl)"
  name: "withDefaultTtl(Integer defaultTtl)"
  nameWithType: "SqlContainerResource.withDefaultTtl(Integer defaultTtl)"
  summary: "Set the defaultTtl property: Default time to live."
  parameters:
  - description: "the defaultTtl value to set."
    name: "defaultTtl"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withDefaultTtl(Integer defaultTtl)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withId(java.lang.String)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withId(String id)"
  name: "withId(String id)"
  nameWithType: "SqlContainerResource.withId(String id)"
  summary: "Set the id property: Name of the Cosmos DB SQL container."
  parameters:
  - description: "the id value to set."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withId(String id)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withIndexingPolicy(com.azure.resourcemanager.cosmos.models.IndexingPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withIndexingPolicy(IndexingPolicy indexingPolicy)"
  name: "withIndexingPolicy(IndexingPolicy indexingPolicy)"
  nameWithType: "SqlContainerResource.withIndexingPolicy(IndexingPolicy indexingPolicy)"
  summary: "Set the indexingPolicy property: The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container."
  parameters:
  - description: "the indexingPolicy value to set."
    name: "indexingPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.IndexingPolicy?alt=com.azure.resourcemanager.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withIndexingPolicy(IndexingPolicy indexingPolicy)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withPartitionKey(com.azure.resourcemanager.cosmos.models.ContainerPartitionKey)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withPartitionKey(ContainerPartitionKey partitionKey)"
  name: "withPartitionKey(ContainerPartitionKey partitionKey)"
  nameWithType: "SqlContainerResource.withPartitionKey(ContainerPartitionKey partitionKey)"
  summary: "Set the partitionKey property: The configuration of the partition key to be used for partitioning data into multiple partitions."
  parameters:
  - description: "the partitionKey value to set."
    name: "partitionKey"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.ContainerPartitionKey?alt=com.azure.resourcemanager.cosmos.models.ContainerPartitionKey&text=ContainerPartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withPartitionKey(ContainerPartitionKey partitionKey)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withUniqueKeyPolicy(com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy)"
  fullName: "com.azure.resourcemanager.cosmos.models.SqlContainerResource.withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  name: "withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  nameWithType: "SqlContainerResource.withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  summary: "Set the uniqueKeyPolicy property: The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
  parameters:
  - description: "the uniqueKeyPolicy value to set."
    name: "uniqueKeyPolicy"
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy?alt=com.azure.resourcemanager.cosmos.models.UniqueKeyPolicy&text=UniqueKeyPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SqlContainerResource withUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  returns:
    description: "the SqlContainerResource object itself."
    type: "<xref href=\"com.azure.resourcemanager.cosmos.models.SqlContainerResource?alt=com.azure.resourcemanager.cosmos.models.SqlContainerResource&text=SqlContainerResource\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.cosmos.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-cosmos:2.14.0
