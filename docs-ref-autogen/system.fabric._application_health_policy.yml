items:
- uid: system.fabric._application_health_policy
  id: _application_health_policy
  parent: system.fabric
  children:
  - system.fabric._application_health_policy.ApplicationHealthPolicy()
  - system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy()
  - system.fabric._application_health_policy.getMaxPercentUnhealthyDeployedApplications()
  - system.fabric._application_health_policy.getServiceTypeHealthPolicyMap()
  - system.fabric._application_health_policy.isConsiderWarningAsError()
  - system.fabric._application_health_policy.setConsiderWarningAsError(boolean)
  - system.fabric._application_health_policy.setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy)
  - system.fabric._application_health_policy.setMaxPercentUnhealthyDeployedApplications(byte)
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: system.fabric.ApplicationHealthPolicy
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 14
  package: system.fabric
  summary: <p>Defines a health policy used to evaluate the health of an application or one of its children entities. </p>
  syntax: &o2
    content: public class ApplicationHealthPolicy
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - system.fabric._application_health_policy.fromNative(long)
  - system.fabric._application_health_policy.toNative(PinCollection)
  - system.fabric._application_health_policy.ToNative(boolean,byte,long,long)
- uid: system.fabric._application_health_policy.ApplicationHealthPolicy()
  id: ApplicationHealthPolicy()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: ApplicationHealthPolicy()
  nameWithType: ApplicationHealthPolicy.ApplicationHealthPolicy()
  fullName: system.fabric.ApplicationHealthPolicy.ApplicationHealthPolicy()
  overload: system.fabric._application_health_policy.ApplicationHealthPolicy*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 57
  package: system.fabric
  summary: >-
    <p>Initializes a new instance of the <ref refid="" kindref="compound">system.fabric.ApplicationHealthPolicy</ref> class. </p>

    <p>

      <bold>Remarks:</bold> By default, no errors or warnings are tolerated. </p>
  syntax:
    content: public ApplicationHealthPolicy()
- uid: system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy()
  id: getDefaultServiceTypeHealthPolicy()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: getDefaultServiceTypeHealthPolicy()
  nameWithType: ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy()
  fullName: ServiceTypeHealthPolicy system.fabric.ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy()
  overload: system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 160
  package: system.fabric
  summary: >-
    <p>Gets the health policy used by default to evaluate the health of a service type.</p>

    <p></p>
  syntax: &o1
    content: public ServiceTypeHealthPolicy getDefaultServiceTypeHealthPolicy()
    return:
      type: system.fabric._service_type_health_policy
      description: <p>The <xref href="system.fabric._service_type_health_policy" data-throw-if-not-resolved="false"></xref> used to evaluate service type health if no service type policy is defined. </p>
- uid: system.fabric._application_health_policy.getMaxPercentUnhealthyDeployedApplications()
  id: getMaxPercentUnhealthyDeployedApplications()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: getMaxPercentUnhealthyDeployedApplications()
  nameWithType: ApplicationHealthPolicy.getMaxPercentUnhealthyDeployedApplications()
  fullName: byte system.fabric.ApplicationHealthPolicy.getMaxPercentUnhealthyDeployedApplications()
  overload: system.fabric._application_health_policy.getMaxPercentUnhealthyDeployedApplications*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 123
  package: system.fabric
  summary: >-
    <p>Gets the maximum allowed percentage of unhealthy deployed applications.</p>

    <p>

      <bold>Remarks:</bold>The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error. This is calculated by dividing the number of unhealthy deployed applications over the number of nodes that the applications are currently deployed on in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero. </p>
  syntax:
    content: public byte getMaxPercentUnhealthyDeployedApplications()
    return:
      type: d357ea40
      description: <p>The maximum allowed percentage of unhealthy deployed applications. Allowed values are byte values from zero to 100. </p>
- uid: system.fabric._application_health_policy.getServiceTypeHealthPolicyMap()
  id: getServiceTypeHealthPolicyMap()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: getServiceTypeHealthPolicyMap()
  nameWithType: ApplicationHealthPolicy.getServiceTypeHealthPolicyMap()
  fullName: Map<String, ServiceTypeHealthPolicy> system.fabric.ApplicationHealthPolicy.getServiceTypeHealthPolicyMap()
  overload: system.fabric._application_health_policy.getServiceTypeHealthPolicyMap*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 192
  package: system.fabric
  summary: >-
    <p>Gets the map with <xref href="system.fabric._service_type_health_policy" data-throw-if-not-resolved="false"></xref> per service type name.</p>

    <p>

      <bold>Remarks:</bold>The entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service. </p>

    <p>If no policy is specified for a service type name, the <xref href="system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy()" data-throw-if-not-resolved="false"></xref> is used for evaluation. </p>
  syntax:
    content: public Map<String, ServiceTypeHealthPolicy> getServiceTypeHealthPolicyMap()
    return:
      type: 2108f1f4system.fabric._service_type_health_policya08ddfce
      description: <p>The map with service type health policy per service type name. </p>
- uid: system.fabric._application_health_policy.isConsiderWarningAsError()
  id: isConsiderWarningAsError()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: isConsiderWarningAsError()
  nameWithType: ApplicationHealthPolicy.isConsiderWarningAsError()
  fullName: boolean system.fabric.ApplicationHealthPolicy.isConsiderWarningAsError()
  overload: system.fabric._application_health_policy.isConsiderWarningAsError*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 93
  package: system.fabric
  summary: >-
    <p>Gets a boolean that determines whether reports with warning state should be treated with the same severity as errors.</p>

    <p></p>
  syntax:
    content: public boolean isConsiderWarningAsError()
    return:
      type: 4fc6e284
      description: <p>true if reports with warning state should be treated as errors; false when warnings should not be treated as errors. </p>
- uid: system.fabric._application_health_policy.setConsiderWarningAsError(boolean)
  id: setConsiderWarningAsError(boolean)
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: setConsiderWarningAsError(boolean considerWarningAsError)
  nameWithType: ApplicationHealthPolicy.setConsiderWarningAsError(boolean considerWarningAsError)
  fullName: void system.fabric.ApplicationHealthPolicy.setConsiderWarningAsError(boolean considerWarningAsError)
  overload: system.fabric._application_health_policy.setConsiderWarningAsError*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 105
  package: system.fabric
  summary: >-
    <p>Sets a boolean that determines whether reports with warning state should be treated with the same severity as errors.</p>

    <p></p>
  syntax:
    content: public void setConsiderWarningAsError(boolean considerWarningAsError)
    parameters:
    - id: considerWarningAsError
      type: 4fc6e284
      description: <p>true if reports with warning state should be treated as errors; false when warnings should not be treated as errors. </p>
- uid: system.fabric._application_health_policy.setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy)
  id: setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy)
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy)
  nameWithType: ApplicationHealthPolicy.setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy)
  fullName: void system.fabric.ApplicationHealthPolicy.setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy)
  overload: system.fabric._application_health_policy.setDefaultServiceTypeHealthPolicy*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 171
  package: system.fabric
  summary: >-
    <p>Sets the health policy used by default to evaluate the health of a service type.</p>

    <p></p>
  syntax:
    content: public void setDefaultServiceTypeHealthPolicy(ServiceTypeHealthPolicy defaultServiceTypeHealthPolicy)
    parameters:
    - id: defaultServiceTypeHealthPolicy
      type: system.fabric._service_type_health_policy
      description: <p>The <xref href="system.fabric._service_type_health_policy" data-throw-if-not-resolved="false"></xref> used to evaluate service type health if no service type policy is defined. </p>
- uid: system.fabric._application_health_policy.setMaxPercentUnhealthyDeployedApplications(byte)
  id: setMaxPercentUnhealthyDeployedApplications(byte)
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  langs:
  - java
  name: setMaxPercentUnhealthyDeployedApplications(byte maxPercentUnhealthyDeployedApplications)
  nameWithType: ApplicationHealthPolicy.setMaxPercentUnhealthyDeployedApplications(byte maxPercentUnhealthyDeployedApplications)
  fullName: void system.fabric.ApplicationHealthPolicy.setMaxPercentUnhealthyDeployedApplications(byte maxPercentUnhealthyDeployedApplications)
  overload: system.fabric._application_health_policy.setMaxPercentUnhealthyDeployedApplications*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/ApplicationHealthPolicy.java
    startLine: 144
  package: system.fabric
  summary: >-
    <p>Sets the maximum allowed percentage of unhealthy deployed applications.</p>

    <p>

      <bold>Remarks:</bold>The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error. This is calculated by dividing the number of unhealthy deployed applications over the number of nodes that the applications are currently deployed on in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero. </p>

    <p></p>
  syntax:
    content: public void setMaxPercentUnhealthyDeployedApplications(byte maxPercentUnhealthyDeployedApplications)
    parameters:
    - id: maxPercentUnhealthyDeployedApplications
      type: d357ea40
      description: <p>The maximum allowed percentage of unhealthy deployed applications. Allowed values are byte values from zero to 100. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>The specified value was outside the range of integer values from zero to 100. </p>
references:
- uid: system.fabric._application_health_policy.ApplicationHealthPolicy*
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy.ApplicationHealthPolicy
  fullName: system.fabric.ApplicationHealthPolicy.ApplicationHealthPolicy
  package: system.fabric
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: system.fabric._application_health_policy.isConsiderWarningAsError*
  name: isConsiderWarningAsError
  nameWithType: ApplicationHealthPolicy.isConsiderWarningAsError
  fullName: boolean system.fabric.ApplicationHealthPolicy.isConsiderWarningAsError
  package: system.fabric
- uid: system.fabric._application_health_policy.setConsiderWarningAsError*
  name: setConsiderWarningAsError
  nameWithType: ApplicationHealthPolicy.setConsiderWarningAsError
  fullName: void system.fabric.ApplicationHealthPolicy.setConsiderWarningAsError
  package: system.fabric
- uid: d357ea40
  spec.java:
  - name: byte
    fullName: byte
- uid: system.fabric._application_health_policy.getMaxPercentUnhealthyDeployedApplications*
  name: getMaxPercentUnhealthyDeployedApplications
  nameWithType: ApplicationHealthPolicy.getMaxPercentUnhealthyDeployedApplications
  fullName: byte system.fabric.ApplicationHealthPolicy.getMaxPercentUnhealthyDeployedApplications
  package: system.fabric
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: system.fabric._application_health_policy.setMaxPercentUnhealthyDeployedApplications*
  name: setMaxPercentUnhealthyDeployedApplications
  nameWithType: ApplicationHealthPolicy.setMaxPercentUnhealthyDeployedApplications
  fullName: void system.fabric.ApplicationHealthPolicy.setMaxPercentUnhealthyDeployedApplications
  package: system.fabric
- uid: system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy*
  name: getDefaultServiceTypeHealthPolicy
  nameWithType: ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy
  fullName: ServiceTypeHealthPolicy system.fabric.ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy
  package: system.fabric
- uid: system.fabric._application_health_policy.setDefaultServiceTypeHealthPolicy*
  name: setDefaultServiceTypeHealthPolicy
  nameWithType: ApplicationHealthPolicy.setDefaultServiceTypeHealthPolicy
  fullName: void system.fabric.ApplicationHealthPolicy.setDefaultServiceTypeHealthPolicy
  package: system.fabric
- uid: 2108f1f4system.fabric._service_type_health_policya08ddfce
  spec.java:
  - name: 'Map<String, '
    fullName: 'Map<String, '
  - uid: system.fabric._service_type_health_policy
    name: ServiceTypeHealthPolicy
    fullName: system.fabric.ServiceTypeHealthPolicy
    href: system.fabric._service_type_health_policy.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric._application_health_policy.getServiceTypeHealthPolicyMap*
  name: getServiceTypeHealthPolicyMap
  nameWithType: ApplicationHealthPolicy.getServiceTypeHealthPolicyMap
  fullName: Map<String, ServiceTypeHealthPolicy> system.fabric.ApplicationHealthPolicy.getServiceTypeHealthPolicyMap
  package: system.fabric
- uid: system.fabric._application_health_policy.fromNative(long)
- uid: system.fabric._application_health_policy.toNative(PinCollection)
- uid: system.fabric._application_health_policy.ToNative(boolean,byte,long,long)
- uid: system.fabric._service_type_health_policy
  parent: system.fabric
  href: system.fabric._service_type_health_policy.yml
  name: ServiceTypeHealthPolicy
  nameWithType: ServiceTypeHealthPolicy
  fullName: system.fabric.ServiceTypeHealthPolicy
  type: Class
  summary: <p>Represents the health policy used to evaluate the health of services belonging to a service type. </p>
  syntax:
    content: public class ServiceTypeHealthPolicy
- uid: system.fabric._pin_collection
  parent: system.fabric
  href: system.fabric._pin_collection.yml
  name: PinCollection
  nameWithType: PinCollection
  fullName: system.fabric.PinCollection
  type: Class
  syntax:
    content: public class PinCollection
- uid: system.fabric._application_health_policy.getDefaultServiceTypeHealthPolicy()
  parent: system.fabric._application_health_policy
  href: system.fabric._application_health_policy.yml
  name: getDefaultServiceTypeHealthPolicy()
  nameWithType: ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy()
  fullName: ServiceTypeHealthPolicy system.fabric.ApplicationHealthPolicy.getDefaultServiceTypeHealthPolicy()
  type: Method
  summary: >-
    <p>Gets the health policy used by default to evaluate the health of a service type.</p>

    <p></p>
  syntax: *o1
- uid: system.fabric._application_health_policy
  parent: system.fabric
  href: system.fabric._application_health_policy.yml
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: system.fabric.ApplicationHealthPolicy
  type: Class
  summary: <p>Defines a health policy used to evaluate the health of an application or one of its children entities. </p>
  syntax: *o2
