### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.storage.blob.SubStream
  id: SubStream
  parent: com.microsoft.azure.storage.blob
  children:
  - com.microsoft.azure.storage.blob.SubStream.close()
  - com.microsoft.azure.storage.blob.SubStream.getInputStream()
  - com.microsoft.azure.storage.blob.SubStream.getLength()
  - com.microsoft.azure.storage.blob.SubStream.mark(int)
  - com.microsoft.azure.storage.blob.SubStream.markSupported()
  - com.microsoft.azure.storage.blob.SubStream.read()
  - com.microsoft.azure.storage.blob.SubStream.read(byte [])
  - com.microsoft.azure.storage.blob.SubStream.read(byte [],int,int)
  - com.microsoft.azure.storage.blob.SubStream.reset()
  - com.microsoft.azure.storage.blob.SubStream.skip(long)
  - com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream,long,long,Object)
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: SubStream
  nameWithType: SubStream
  fullName: com.microsoft.azure.storage.blob.SubStream
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
      branch: legacy-master
      repo: https://github.com/azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 24
  package: com.microsoft.azure.storage.blob
  syntax:
    content: public class SubStream
  inheritance:
  - java.lang.Object
  - InputStream
- uid: com.microsoft.azure.storage.blob.SubStream.close()
  id: close()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: close()
  nameWithType: SubStream.close()
  fullName: com.microsoft.azure.storage.blob.SubStream.close()
  overload: com.microsoft.azure.storage.blob.SubStream.close*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 328
  package: com.microsoft.azure.storage.blob
  summary: "<p>Closes the substream. </p>"
  syntax:
    content: public void close()
- uid: com.microsoft.azure.storage.blob.SubStream.getInputStream()
  id: getInputStream()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: getInputStream()
  nameWithType: SubStream.getInputStream()
  fullName: com.microsoft.azure.storage.blob.SubStream.getInputStream()
  overload: com.microsoft.azure.storage.blob.SubStream.getInputStream*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 90
  package: com.microsoft.azure.storage.blob
  syntax:
    content: public InputStream getInputStream()
    return:
      type: 76fcb9b7
- uid: com.microsoft.azure.storage.blob.SubStream.getLength()
  id: getLength()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: getLength()
  nameWithType: SubStream.getLength()
  fullName: com.microsoft.azure.storage.blob.SubStream.getLength()
  overload: com.microsoft.azure.storage.blob.SubStream.getLength*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 94
  package: com.microsoft.azure.storage.blob
  syntax:
    content: public long getLength()
    return:
      type: 0364520f
- uid: com.microsoft.azure.storage.blob.SubStream.mark(int)
  id: mark(int)
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: mark(int readlimit)
  nameWithType: SubStream.mark(int readlimit)
  fullName: com.microsoft.azure.storage.blob.SubStream.mark(int readlimit)
  overload: com.microsoft.azure.storage.blob.SubStream.mark*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 294
  package: com.microsoft.azure.storage.blob
  summary: "<p>Marks the current position in the substream. A subsequent call to the  method will reposition the stream to this stored position.</p>\r\n<p></p>"
  syntax:
    content: public synchronized void mark(int readlimit)
    parameters:
    - id: readlimit
      type: f75371fa
      description: <p>the maximum limit of bytes that can be read before the mark position becomes invalid. </p>
    return:
      type: 5c0b90ca
- uid: com.microsoft.azure.storage.blob.SubStream.markSupported()
  id: markSupported()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: markSupported()
  nameWithType: SubStream.markSupported()
  fullName: com.microsoft.azure.storage.blob.SubStream.markSupported()
  overload: com.microsoft.azure.storage.blob.SubStream.markSupported*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 320
  package: com.microsoft.azure.storage.blob
  summary: "<p>The substream wrapper class is only compatible with markable input streams and hence will always return true. This requirement is enforced in the class constructor.</p>\r\n<p></p>"
  syntax:
    content: public boolean markSupported()
    return:
      type: 4fc6e284
      description: >-
        <p>

          <code>true</code>

        </p>
- uid: com.microsoft.azure.storage.blob.SubStream.read()
  id: read()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: read()
  nameWithType: SubStream.read()
  fullName: com.microsoft.azure.storage.blob.SubStream.read()
  overload: com.microsoft.azure.storage.blob.SubStream.read*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 111
  package: com.microsoft.azure.storage.blob
  summary: "<p>Reads the next byte of data from the wrapped stream. The value byte is returned as an  in the range  to . If no byte is available because the end of the substream has been reached, the value  is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.</p>\r\n<p></p>"
  syntax:
    content: public int read()
    return:
      type: f75371fa
      description: <p>the next byte of data, or <code>-1</code> if the end of the substream is reached. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>if an I/O error occurs. </p>
- uid: com.microsoft.azure.storage.blob.SubStream.read(byte [])
  id: read(byte [])
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: read(byte[] b)
  nameWithType: SubStream.read(byte[] b)
  fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b)
  overload: com.microsoft.azure.storage.blob.SubStream.read*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 149
  package: com.microsoft.azure.storage.blob
  summary: "<p>Reads some number of bytes from the wrapped stream and stores them into the buffer array . The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. </p>\r\n<p>If the length of  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at the end of the file, the value  is returned; otherwise, at least one byte is read and stored into . </p>\r\n<p>The first byte read is stored into element , the next one into , and so on. The number of bytes read is, at most, equal to the length of . Let <em>k</em> be the number of bytes actually read; these bytes will be stored in elements  through <em>k</em>, leaving elements <em>k</em> through  unaffected. </p>\r\n<p>The  method for class  has the same effect as: <pre></pre></p>\r\n<p></p>"
  syntax:
    content: public synchronized int read(byte[] b)
    parameters:
    - id: b
      type: ccd9418d
      description: <p>the buffer into which the data is read. </p>
    return:
      type: 3d3ee726
      description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>If the first byte cannot be read for any reason other than the end of the file, if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: 17c54119
    description: <p>if <code>b</code> is <code>null</code>. </p>
- uid: com.microsoft.azure.storage.blob.SubStream.read(byte [],int,int)
  id: read(byte [],int,int)
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: SubStream.read(byte[] b, int off, int len)
  fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b, int off, int len)
  overload: com.microsoft.azure.storage.blob.SubStream.read*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 189
  package: com.microsoft.azure.storage.blob
  summary: "<p>Reads up to  bytes of data from the substream. Buffers data from the wrapped stream in order to minimize skip and read overhead. The wrappedstream will only be invoked if the readBuffer cannot fulfil the the read request. In order to ensure valid results, the wrapped stream must be marked prior to reading from the substream. This allows us to reset to the relative substream position in the wrapped stream. The number of bytes actually read is returned as an integer. All these operations are done synchronously within an intrinsic lock to ensure other concurrent requests by substream instances do not result in race conditions. </p>\r\n<p>The underlying call to the read of the wrapped stream will blocks until input data is available, end of file is detected, or an exception is thrown. </p>\r\n<p>If  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at end of file, the value  is returned; otherwise, at least one byte is read and stored into .</p>\r\n<p></p>"
  syntax:
    content: public synchronized int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: ccd9418d
      description: <p>the buffer into which the data is read. </p>
    - id: off
      type: f75371fa
      description: <p>the start offset in array <code>b</code> at which the data is written. </p>
    - id: len
      type: f75371fa
      description: <p>the maximum number of bytes to read. </p>
    return:
      type: 3d3ee726
      description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
  exceptions:
  - type: cbf33bbe
    description: <p>If the first byte cannot be read for any reason other than end of file, or if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: 17c54119
    description: <p>If <code>b</code> is <code>null</code>. </p>
  - type: 473ec288
    description: <p>If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code></p>
- uid: com.microsoft.azure.storage.blob.SubStream.reset()
  id: reset()
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: reset()
  nameWithType: SubStream.reset()
  fullName: com.microsoft.azure.storage.blob.SubStream.reset()
  overload: com.microsoft.azure.storage.blob.SubStream.reset*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 307
  package: com.microsoft.azure.storage.blob
  summary: "<p>Repositions the substream position to the index where the  method was last called. </p>\r\n<p>The new reset position on substream does not take effect until subsequent reads.</p>\r\n<p></p>"
  syntax:
    content: public synchronized void reset()
    return:
      type: 5c0b90ca
- uid: com.microsoft.azure.storage.blob.SubStream.skip(long)
  id: skip(long)
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: skip(long n)
  nameWithType: SubStream.skip(long n)
  fullName: com.microsoft.azure.storage.blob.SubStream.skip(long n)
  overload: com.microsoft.azure.storage.blob.SubStream.skip*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 275
  package: com.microsoft.azure.storage.blob
  summary: "<p>Advances the current position of the substream by . The  method does not invoke the underlying  method of the wrapped stream class. The actual skipping of bytes will be accounted for during subsequent substream read operations.</p>\r\n<p></p>"
  syntax:
    content: public long skip(long n)
    parameters:
    - id: n
      type: 0364520f
      description: <p>the number of bytes to be effectively skipped. </p>
    return:
      type: 0364520f
      description: <p>the actual number of bytes skipped. </p>
- uid: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream,long,long,Object)
  id: SubStream(InputStream,long,long,Object)
  parent: com.microsoft.azure.storage.blob.SubStream
  href: com.microsoft.azure.storage.blob.SubStream.yml
  langs:
  - java
  name: SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  nameWithType: SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  fullName: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  overload: com.microsoft.azure.storage.blob.SubStream.SubStream*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/blob/SubStream.java
    startLine: 63
  package: com.microsoft.azure.storage.blob
  summary: "<p>Creates a new substream instance that partitions the wrapped stream  from  up to . Each substream instance that wraps the same underlying  must share the same mutual exclusion  to avoid race conditions from concurrent operations.</p>\r\n<p></p>"
  syntax:
    content: public SubStream(InputStream source, long startIndex, long streamLength, Object lock)
    parameters:
    - id: source
      type: 76fcb9b7
      description: <p>The markable InputStream to be wrapped. </p>
    - id: startIndex
      type: 0364520f
      description: <p>A valid index in the wrapped stream where the substream should logically begin. </p>
    - id: streamLength
      type: 0364520f
      description: <p>The length of the substream. </p>
    - id: lock
      type: "79317049"
      description: <p>An intrinsic lock to ensure thread-safe, concurrent operations on substream instances wrapping the same InputStream. </p>
references:
- uid: 76fcb9b7
  spec.java:
  - name: InputStream
    fullName: InputStream
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.storage.blob.SubStream.SubStream*
  name: SubStream
  nameWithType: SubStream.SubStream
  fullName: com.microsoft.azure.storage.blob.SubStream.SubStream
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.SubStream.getInputStream*
  name: getInputStream
  nameWithType: SubStream.getInputStream
  fullName: com.microsoft.azure.storage.blob.SubStream.getInputStream
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.SubStream.getLength*
  name: getLength
  nameWithType: SubStream.getLength
  fullName: com.microsoft.azure.storage.blob.SubStream.getLength
  package: com.microsoft.azure.storage.blob
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.storage.blob.SubStream.read*
  name: read
  nameWithType: SubStream.read
  fullName: com.microsoft.azure.storage.blob.SubStream.read
  package: com.microsoft.azure.storage.blob
- uid: 17c54119
  spec.java:
  - name: NullPointerException
    fullName: NullPointerException
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: 3d3ee726
  spec.java:
  - name: synchronized int
    fullName: synchronized int
- uid: 473ec288
  spec.java:
  - name: IndexOutOfBoundsException
    fullName: IndexOutOfBoundsException
- uid: com.microsoft.azure.storage.blob.SubStream.skip*
  name: skip
  nameWithType: SubStream.skip
  fullName: com.microsoft.azure.storage.blob.SubStream.skip
  package: com.microsoft.azure.storage.blob
- uid: 5c0b90ca
  spec.java:
  - name: synchronized void
    fullName: synchronized void
- uid: com.microsoft.azure.storage.blob.SubStream.mark*
  name: mark
  nameWithType: SubStream.mark
  fullName: com.microsoft.azure.storage.blob.SubStream.mark
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.SubStream.reset*
  name: reset
  nameWithType: SubStream.reset
  fullName: com.microsoft.azure.storage.blob.SubStream.reset
  package: com.microsoft.azure.storage.blob
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.storage.blob.SubStream.markSupported*
  name: markSupported
  nameWithType: SubStream.markSupported
  fullName: com.microsoft.azure.storage.blob.SubStream.markSupported
  package: com.microsoft.azure.storage.blob
- uid: com.microsoft.azure.storage.blob.SubStream.close*
  name: close
  nameWithType: SubStream.close
  fullName: com.microsoft.azure.storage.blob.SubStream.close
  package: com.microsoft.azure.storage.blob
