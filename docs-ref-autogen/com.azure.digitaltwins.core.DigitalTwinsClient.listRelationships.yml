### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsClient.listRelationships*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships"
name: "<T>listRelationships"
nameWithType: "DigitalTwinsClient.<T>listRelationships"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(java.lang.String,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  name: "<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinsClient.<T>listRelationships(String digitalTwinId, Class<T> clazz)"
  summary: "List the relationships that have a given digital twin as the source.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicRelationship> pagedRelationshipsByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     BasicRelationship.class);\n \n for (BasicRelationship rel : pagedRelationshipsByItem) {\n     System.out.println(\"Retrieved relationship with Id: \" + rel.getId());\n }\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> pagedRelationshipsStringByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     String.class);\n \n for (String rel : pagedRelationshipsStringByItem) {\n     System.out.println(\"Retrieved relationship: \" + rel);\n }\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each relationship into. Since a digital twin might have relationships\n              that conform to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<T> <T>listRelationships(String digitalTwinId, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of relationships belonging to the specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(java.lang.String,java.lang.String,java.lang.Class<T>,com.azure.core.util.Context)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  name: "<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  nameWithType: "DigitalTwinsClient.<T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  summary: "List the relationships that have a given digital twin as the source and that have the given relationship name.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nPagedIterable<BasicRelationship> pagedRelationshipByNameByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipName\",\n     BasicRelationship.class,\n     new Context(\"Key\", \"value\"));\n \n for (BasicRelationship rel : pagedRelationshipByNameByItem) {\n     System.out.println(\"Retrieved relationship with Id: \" + rel.getId());\n }\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nPagedIterable<String> pagedRelationshipsStringByNameByItem = digitalTwinsSyncClient.listRelationships(\n     \"myDigitalTwinId\",\n     \"myRelationshipId\",\n     String.class,\n     new Context(\"key\", \"value\"));\n \n for (String rel : pagedRelationshipsStringByNameByItem) {\n     System.out.println(\"Retrieved relationship: \" + rel);\n }\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of a relationship to filter to."
    name: "relationshipName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class to deserialize each relationship into. Since a digital twin might have relationships\n              that conform to different models, it is advisable to convert them to a generic model like <xref uid=\"com.azure.digitaltwins.core.BasicRelationship\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BasicRelationship\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<T> <T>listRelationships(String digitalTwinId, String relationshipName, Class<T> clazz, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of relationships belonging to the specified digital twin."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.1
