### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.models.ParallelTransferOptions
  id: ParallelTransferOptions
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models
  children:
  - com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver)
  - com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver,java.lang.Integer)
  - com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize()
  - com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency()
  - com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize()
  - com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers()
  - com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver()
  langs:
  - java
  name: ParallelTransferOptions
  nameWithType: ParallelTransferOptions
  fullName: com.azure.storage.blob.models.ParallelTransferOptions
  type: Class
  package: com.azure.storage.blob.models
  summary: This class contains configuration used to parallelize data transfer operations. Note that not all values are used by every method which accepts this type. Please refer to the javadoc on specific methods for these cases.
  syntax:
    content: public final class ParallelTransferOptions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver)
  id: ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver)
  nameWithType: ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver)
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver)
  overload: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions*
  type: Constructor
  package: com.azure.storage.blob.models
  summary: Creates a new <xref uid="com.azure.storage.blob.models.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> with default parameters applied.
  syntax:
    content: public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver)
    parameters:
    - id: blockSize
      type: java.lang.Integer
      description: >-
        The block size.
         For upload, The block size is the size of each block that will be staged. This value also determines the number
         of requests that need to be made. If block size is large, upload will make fewer network calls, but each
         individual call will send more data and will therefore take longer. This parameter also determines the size
         that each buffer uses when buffering is required and consequently amount of memory consumed by such methods may
         be up to blockSize * numBuffers.
    - id: maxConcurrency
      type: java.lang.Integer
      description: >-
        For buffered upload only, the number of buffers is the maximum number of buffers this
         method should allocate. Memory will be allocated lazily as needed. Must be at least two. Typically, the larger
         the number of buffers, the more parallel, and thus faster, the upload portion  of this operation will be.
         The amount of memory consumed by methods using this value may be up to blockSize * numBuffers.
    - id: progressReceiver
      type: com.azure.storage.blob.ProgressReceiver
      description: <xref uid="com.azure.storage.blob.ProgressReceiver" data-throw-if-not-resolved="false">ProgressReceiver</xref>
- uid: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver,java.lang.Integer)
  id: ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.blob.ProgressReceiver,java.lang.Integer)
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  nameWithType: ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  overload: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions*
  type: Constructor
  package: com.azure.storage.blob.models
  summary: Creates a new <xref uid="com.azure.storage.blob.models.ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> with default parameters applied.
  syntax:
    content: public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
    parameters:
    - id: blockSize
      type: java.lang.Integer
      description: >-
        The block size.
         For upload, The block size is the size of each block that will be staged. This value also determines the number
         of requests that need to be made. If block size is large, upload will make fewer network calls, but each
         individual call will send more data and will therefore take longer. This parameter also determines the size
         that each buffer uses when buffering is required and consequently amount of memory consumed by such methods may
         be up to blockSize * maxConcurrency.
    - id: maxConcurrency
      type: java.lang.Integer
      description: >-
        The maximum number of parallel requests that will be issued at any given time as a part of
         a single parallel transfer. This value applies per api. For example, if two calls to uploadFromFile are made at
         the same time, and each specifies a maxConcurrency of 5, there may be up to 10 outstanding, concurrent requests,
         up to 5 for each of the upload operations. For buffered uploads only, the maximum number of buffers to be
         allocated as part of the transfer will be <code>maxConcurrency + 1</code>. In those cases, memory will be allocated
         lazily as needed. The amount of memory consumed by methods which buffer may be up to blockSize * maxConcurrency.
         In general, upload methods which do not accept a length parameter must perform some buffering.
    - id: progressReceiver
      type: com.azure.storage.blob.ProgressReceiver
      description: <xref uid="com.azure.storage.blob.ProgressReceiver" data-throw-if-not-resolved="false">ProgressReceiver</xref>
    - id: maxSingleUploadSize
      type: java.lang.Integer
      description: >-
        If the size of the data is less than or equal to this value, it will be uploaded in a
         single put rather than broken up into chunks. If the data is uploaded in a single shot, the block size will be
         ignored. Some constraints to consider are that more requests cost more, but several small or mid-sized requests
         may sometimes perform better. In the case of buffered upload, up to this amount of data may be buffered before
         any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the
         service accepts for uploading in a single requests and is represented by
         <xref uid="com.azure.storage.blob.specialized.BlockBlobAsyncClient.MAX_UPLOAD_BLOB_BYTES" data-throw-if-not-resolved="false">BlockBlobAsyncClient#MAX_UPLOAD_BLOB_BYTES</xref>.
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize()
  id: getBlockSize()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: getBlockSize()
  nameWithType: ParallelTransferOptions.getBlockSize()
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize()
  overload: com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize*
  type: Method
  package: com.azure.storage.blob.models
  summary: Gets the block size (chunk size) to transfer at a time.
  syntax:
    content: public Integer getBlockSize()
    return:
      type: java.lang.Integer
      description: The block size.
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency()
  id: getMaxConcurrency()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: getMaxConcurrency()
  nameWithType: ParallelTransferOptions.getMaxConcurrency()
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency()
  overload: com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency*
  type: Method
  package: com.azure.storage.blob.models
  summary: Gets the maximum number of parallel requests that will be issued at any given time.
  syntax:
    content: public Integer getMaxConcurrency()
    return:
      type: java.lang.Integer
      description: The max concurrency value.
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize()
  id: getMaxSingleUploadSize()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: getMaxSingleUploadSize()
  nameWithType: ParallelTransferOptions.getMaxSingleUploadSize()
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize()
  overload: com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize*
  type: Method
  package: com.azure.storage.blob.models
  summary: Gets the value above which the upload will be broken into blocks and parallelized.
  syntax:
    content: public Integer getMaxSingleUploadSize()
    return:
      type: java.lang.Integer
      description: The threshold value.
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers()
  id: getNumBuffers()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: getNumBuffers()
  nameWithType: ParallelTransferOptions.getNumBuffers()
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers()
  overload: com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers*
  type: Method
  package: com.azure.storage.blob.models
  summary: Gets the number of buffers being used for a transfer operation.
  syntax:
    content: public Integer getNumBuffers()
    return:
      type: java.lang.Integer
      description: The number of buffers.
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver()
  id: getProgressReceiver()
  artifact: com.azure:azure-storage-blob:12.7.0-beta.1
  parent: com.azure.storage.blob.models.ParallelTransferOptions
  langs:
  - java
  name: getProgressReceiver()
  nameWithType: ParallelTransferOptions.getProgressReceiver()
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver()
  overload: com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver*
  type: Method
  package: com.azure.storage.blob.models
  summary: Gets the Progress receiver for parallel reporting
  syntax:
    content: public ProgressReceiver getProgressReceiver()
    return:
      type: com.azure.storage.blob.ProgressReceiver
      description: The progress reporter
references:
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: com.azure.storage.blob.ProgressReceiver
  name: ProgressReceiver
  nameWithType: ProgressReceiver
  fullName: com.azure.storage.blob.ProgressReceiver
- uid: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions*
  name: ParallelTransferOptions
  nameWithType: ParallelTransferOptions.ParallelTransferOptions
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.ParallelTransferOptions
  package: com.azure.storage.blob.models
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize*
  name: getBlockSize
  nameWithType: ParallelTransferOptions.getBlockSize
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getBlockSize
  package: com.azure.storage.blob.models
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers*
  name: getNumBuffers
  nameWithType: ParallelTransferOptions.getNumBuffers
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getNumBuffers
  package: com.azure.storage.blob.models
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver*
  name: getProgressReceiver
  nameWithType: ParallelTransferOptions.getProgressReceiver
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getProgressReceiver
  package: com.azure.storage.blob.models
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize*
  name: getMaxSingleUploadSize
  nameWithType: ParallelTransferOptions.getMaxSingleUploadSize
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getMaxSingleUploadSize
  package: com.azure.storage.blob.models
- uid: com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency*
  name: getMaxConcurrency
  nameWithType: ParallelTransferOptions.getMaxConcurrency
  fullName: com.azure.storage.blob.models.ParallelTransferOptions.getMaxConcurrency
  package: com.azure.storage.blob.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
