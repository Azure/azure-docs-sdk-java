### YamlMime:ManagedReference
items:
- uid: system.fabric.OperationDataStream
  id: OperationDataStream
  parent: system.fabric
  children:
  - system.fabric.OperationDataStream.getNextAsync(CancellationToken)
  href: system.fabric.OperationDataStream.yml
  langs:
  - java
  name: OperationDataStream
  nameWithType: OperationDataStream
  fullName: system.fabric.OperationDataStream
  type: Interface
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/OperationDataStream.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationDataStream.java
    startLine: 14
  package: system.fabric
  summary: "<p>An <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref> encapsulates a stream of <xref uid=\"system.fabric.OperationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationData\"></xref> objects that are exchanged between Primary replica and Secondary replica. Objects that implement <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref> are used during the copy process. Both the copy context <xref uid=\"system.fabric.StateProvider.getCopyContext()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyContext()\"></xref> method that is sent from the Secondary replica to the Primary replica and the copy state <xref uid=\"system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)\"></xref> method implement the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref> interface. </p>"
  syntax:
    content: public interface OperationDataStream
- uid: system.fabric.OperationDataStream.getNextAsync(CancellationToken)
  id: getNextAsync(CancellationToken)
  parent: system.fabric.OperationDataStream
  href: system.fabric.OperationDataStream.yml
  langs:
  - java
  name: getNextAsync(CancellationToken cancellationToken)
  nameWithType: OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  fullName: system.fabric.OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  overload: system.fabric.OperationDataStream.getNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/OperationDataStream.java
    startLine: 26
  package: system.fabric
  summary: "<p>Gets the next <xref uid=\"system.fabric.OperationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationData\"></xref> object from the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref>. </p>"
  syntax:
    content: public CompletableFuture<OperationData> getNextAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: system.fabric.CancellationToken
      description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    return:
      type: 9cdf14d0system.fabric.OperationDataa08ddfce
      description: >-
        <p>

          <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> of type <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
references:
- uid: 9cdf14d0system.fabric.OperationDataa08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.OperationData
    name: OperationData
    fullName: system.fabric.OperationData
    href: system.fabric.OperationData.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric.OperationDataStream.getNextAsync*
  name: getNextAsync
  nameWithType: OperationDataStream.getNextAsync
  fullName: system.fabric.OperationDataStream.getNextAsync
  package: system.fabric
- uid: system.fabric.OperationData
  parent: system.fabric
  href: system.fabric.OperationData.yml
  name: OperationData
  nameWithType: OperationData
  fullName: system.fabric.OperationData
  type: Class
  syntax:
    content: public class OperationData
- uid: system.fabric.CancellationToken
  parent: system.fabric
  href: system.fabric.CancellationToken.yml
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: system.fabric.CancellationToken
  type: Class
  summary: "<p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid=\"system.fabric.CancellationTokenSource\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource\"></xref> object, which manages cancellation tokens retrieved from its <xref uid=\"system.fabric.CancellationTokenSource.getToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#getToken()\"></xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid=\"system.fabric.CancellationTokenSource.cancel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.CancellationTokenSource#cancel()\"></xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>"
  syntax:
    content: public class CancellationToken
- uid: system.fabric.StateProvider.getCopyContext()
  parent: system.fabric.StateProvider
  href: system.fabric.StateProvider.yml
  name: getCopyContext()
  nameWithType: StateProvider.getCopyContext()
  fullName: system.fabric.StateProvider.getCopyContext()
  type: Method
  summary: "<p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid=\"system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)\"></xref> . <xref uid=\"system.fabric.StateProvider.getCopyContext()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyContext()\"></xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref uid=\"system.fabric.OperationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationData\"></xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref uid=\"system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)\"></xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref uid=\"system.fabric.StateProvider.getCopyContext()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyContext()\"></xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>"
  syntax:
    content: public OperationDataStream getCopyContext()
    return:
      type: system.fabric.OperationDataStream
      description: <p>Returns <xref uid="system.fabric.OperationDataStream" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref>. </p>
- uid: system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)
  parent: system.fabric.StateProvider
  href: system.fabric.StateProvider.yml
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  fullName: system.fabric.StateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  type: Method
  summary: "<p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>\r\n<p>\r\n  <b>Remarks:</b>Just as <xref uid=\"system.fabric.StateProvider.getCopyContext()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyContext()\"></xref> enables the Secondary replica to send context to the Primary replica via an <xref uid=\"system.fabric.OperationDataStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref>, <xref uid=\"system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)\"></xref> enables the Primary replica to respond with an <xref uid=\"system.fabric.OperationDataStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref>. The stream contains objects that are delivered to the Secondary replica via the <xref uid=\"system.fabric.StateReplicator.getCopyStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.StateReplicator#getCopyStream()\"></xref> method of the <xref uid=\"system.fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricReplicator\"></xref> class. The objects implement <xref uid=\"system.fabric.Operation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.Operation\"></xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref uid=\"system.fabric.OperationDataStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationDataStream\"></xref> that contains <xref uid=\"system.fabric.OperationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationData\"></xref>. <xref uid=\"system.fabric.OperationData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.OperationData\"></xref> represents the data/state that the Secondary replica </p>"
  syntax:
    content: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
    parameters:
    - id: upToSequenceNumber
      type: system.fabric.SequenceNumber
      description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric.StateReplicator.getCopyStream()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#getCopyStream()"></xref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric.StateReplicator.getReplicationStream()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#getReplicationStream()"></xref> method. </p>
    - id: copyContext
      type: system.fabric.OperationDataStream
      description: <p>An <xref uid="system.fabric.OperationDataStream" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref> that contains the <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    return:
      type: system.fabric.OperationDataStream
      description: <p>Returns <xref uid="system.fabric.OperationDataStream" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref>. </p>
