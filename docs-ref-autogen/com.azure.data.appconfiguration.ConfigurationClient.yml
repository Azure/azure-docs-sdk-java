### YamlMime:JavaType
uid: "com.azure.data.appconfiguration.ConfigurationClient"
fullName: "com.azure.data.appconfiguration.ConfigurationClient"
name: "ConfigurationClient"
nameWithType: "ConfigurationClient"
summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref>, <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> or <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref> in Azure App Configuration Store."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ConfigurationClient**"
methods:
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(ConfigurationSetting setting)"
  name: "addConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.addConfigurationSetting(ConfigurationSetting setting)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting addConfigurationSetting(ConfigurationSetting setting)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n```java\nConfigurationSetting setting = configurationClient.addConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(String key, String label, String value)"
  name: "addConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.addConfigurationSetting(String key, String label, String value)"
  summary: "Adds a configuration value in the service if that key does not exist."
  parameters:
  - description: "The key of the configuration setting to add."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of the configuration setting to create. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The value associated with this configuration setting key."
    name: "value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSetting addConfigurationSetting(String key, String label, String value)"
  desc: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n```java\nConfigurationSetting result = configurationClient\n     .addConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  name: "addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationClient.addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n```java\nResponse<ConfigurationSetting> responseResultSetting = configurationClient\n     .addConfigurationSettingWithResponse(new ConfigurationSetting()\n             .setKey(\"prodDBConnection\")\n             .setLabel(\"westUS\")\n             .setValue(\"db_connection\"),\n         new Context(key1, value1));\n ConfigurationSetting resultSetting = responseResultSetting.getValue();\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", resultSetting.getKey(), resultSetting.getLabel(),\n     resultSetting.getValue());\n```"
  returns:
    description: "A REST response containing the the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code>, if a\n key collision occurs or the key is an invalid value (which will also throw ServiceRequestException described\n below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.archiveSnapshot(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.archiveSnapshot(String snapshotName)"
  name: "archiveSnapshot(String snapshotName)"
  nameWithType: "ConfigurationClient.archiveSnapshot(String snapshotName)"
  summary: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref>."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSnapshot archiveSnapshot(String snapshotName)"
  desc: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref>.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n ConfigurationSnapshot archivedSnapshot = client.archiveSnapshot(snapshotName);\n System.out.printf(\"Archived snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     archivedSnapshot.getName(), archivedSnapshot.getCreatedAt(), archivedSnapshot.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.archiveSnapshotWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.archiveSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  name: "archiveSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  nameWithType: "ConfigurationClient.archiveSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  summary: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref>."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies HTTP options for conditional requests."
    name: "matchConditions"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSnapshot> archiveSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  desc: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref>.\n\nTo turn on using 'if-match' header, set the second parameter 'ifUnchanged' to true. It used to perform an operation only if the targeted resource's ETag matches the value provided. Otherwise, it will throw an exception '412 Precondition Failed'.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n MatchConditions matchConditions = new MatchConditions().setIfMatch(\"{etag}\");\n Context ctx = new Context(key2, value2);\n\n ConfigurationSnapshot archivedSnapshot = client.archiveSnapshotWithResponse(snapshotName, matchConditions, ctx)\n     .getValue();\n System.out.printf(\"Archived snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     archivedSnapshot.getName(), archivedSnapshot.getCreatedAt(), archivedSnapshot.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.beginCreateSnapshot(java.lang.String,com.azure.data.appconfiguration.models.ConfigurationSnapshot,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.beginCreateSnapshot(String snapshotName, ConfigurationSnapshot snapshot, Context context)"
  name: "beginCreateSnapshot(String snapshotName, ConfigurationSnapshot snapshot, Context context)"
  nameWithType: "ConfigurationClient.beginCreateSnapshot(String snapshotName, ConfigurationSnapshot snapshot, Context context)"
  summary: "Create a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by providing a snapshot name and a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
  parameters:
  - description: "The name of the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> to create."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The snapshot to create."
    name: "snapshot"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<PollOperationDetails,ConfigurationSnapshot> beginCreateSnapshot(String snapshotName, ConfigurationSnapshot snapshot, Context context)"
  desc: "Create a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by providing a snapshot name and a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>.\n\n**Code Samples**\n\n```java\nList<ConfigurationSettingsFilter> filters = new ArrayList<>();\n // Key Name also supports RegExp but only support prefix end with \"*\", such as \"k*\" and is case-sensitive.\n filters.add(new ConfigurationSettingsFilter(\"{keyName}\"));\n String snapshotName = \"{snapshotName}\";\n Context ctx = new Context(key2, value2);\n\n SyncPoller<PollOperationDetails, ConfigurationSnapshot> poller =\n     client.beginCreateSnapshot(snapshotName,\n         new ConfigurationSnapshot(filters).setRetentionPeriod(Duration.ofHours(1)), ctx);\n poller.setPollInterval(Duration.ofSeconds(10));\n poller.waitForCompletion();\n ConfigurationSnapshot snapshot = poller.getFinalResult();\n\n System.out.printf(\"Snapshot name=%s is created at %s%n\", snapshot.getName(), snapshot.getCreatedAt());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the creating snapshot operation until it has completed or\n has failed. The completed operation returns a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.polling.PollOperationDetails?alt=com.azure.core.util.polling.PollOperationDetails&text=PollOperationDetails\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  name: "deleteConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting deleteConfigurationSetting(ConfigurationSetting setting)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.deleteConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The deleted ConfigurationSetting or <code>null</code> if it didn't exist. <code>null</code> is also returned if the\n <code>key</code> is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(String key, String label)"
  name: "deleteConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationClient.deleteConfigurationSetting(String key, String label)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching `key` and optional `label` combination."
  parameters:
  - description: "The key of configuration setting to delete."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of configuration setting to delete. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSetting deleteConfigurationSetting(String key, String label)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting result = configurationClient.deleteConfigurationSetting(\"prodDBConnection\", \"westUS\");\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The deleted ConfigurationSetting or <code>null</code> if it didn't exist. <code>null</code> is also returned if the\n <code>key</code> is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  name: "deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as an\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the ETag matches the current ETag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nResponse<ConfigurationSetting> responseSetting = configurationClient.deleteConfigurationSettingWithResponse(\n     new ConfigurationSetting()\n         .setKey(\"prodDBConnection\")\n         .setLabel(\"westUS\"),\n     false,\n     new Context(key2, value2));\n System.out.printf(\n     \"Key: %s, Value: %s\", responseSetting.getValue().getKey(), responseSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is set but does not match the current ETag\n (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(ConfigurationSetting setting)"
  name: "getConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(ConfigurationSetting setting)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting getConfigurationSetting(ConfigurationSetting setting)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.getConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(String key, String label)"
  name: "getConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(String key, String label)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, and the optional `label` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSetting getConfigurationSetting(String key, String label)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting resultNoDateTime = configurationClient.getConfigurationSetting(\"prodDBConnection\", \"westUS\");\n System.out.printf(\"Key: %s, Value: %s\", resultNoDateTime.getKey(), resultNoDateTime.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  name: "getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of the configuration setting to create or update. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  syntax: "public ConfigurationSetting getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting result =\n     configurationClient.getConfigurationSetting(\"prodDBConnection\", \"westUS\", null);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  name: "getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  nameWithType: "ConfigurationClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a>"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as an\n If-None-Match header."
    name: "ifChanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\n// Retrieve the setting with the key-label \"prodDBConnection\"-\"westUS\".\n Response<ConfigurationSetting> responseResultSetting = configurationClient.getConfigurationSettingWithResponse(\n     new ConfigurationSetting()\n         .setKey(\"prodDBConnection\")\n         .setLabel(\"westUS\"),\n     null,\n     false,\n     new Context(key1, value1));\n System.out.printf(\"Key: %s, Value: %s\", responseResultSetting.getValue().getKey(),\n     responseResultSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the\n configuration value does not exist or the key is an invalid value (which will also throw ServiceRequestException\n described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getEndpoint()"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "ConfigurationClient.getEndpoint()"
  summary: "Gets the service endpoint for the Azure App Configuration instance."
  syntax: "public String getEndpoint()"
  desc: "Gets the service endpoint for the Azure App Configuration instance."
  returns:
    description: "the service endpoint for the Azure App Configuration instance."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSnapshot(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSnapshot(String snapshotName)"
  name: "getSnapshot(String snapshotName)"
  nameWithType: "ConfigurationClient.getSnapshot(String snapshotName)"
  summary: "Get a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by given the snapshot name."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSnapshot getSnapshot(String snapshotName)"
  desc: "Get a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by given the snapshot name.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n ConfigurationSnapshot getSnapshot = client.getSnapshot(snapshotName);\n System.out.printf(\"Snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     getSnapshot.getName(), getSnapshot.getCreatedAt(), getSnapshot.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSnapshotWithResponse(java.lang.String,java.util.List<com.azure.data.appconfiguration.models.SnapshotFields>,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSnapshotWithResponse(String snapshotName, List<SnapshotFields> fields, Context context)"
  name: "getSnapshotWithResponse(String snapshotName, List<SnapshotFields> fields, Context context)"
  nameWithType: "ConfigurationClient.getSnapshotWithResponse(String snapshotName, List<SnapshotFields> fields, Context context)"
  summary: "Get a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by given the snapshot name."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Used to select what fields are present in the returned resource(s)."
    name: "fields"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.data.appconfiguration.models.SnapshotFields?alt=com.azure.data.appconfiguration.models.SnapshotFields&text=SnapshotFields\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSnapshot> getSnapshotWithResponse(String snapshotName, List<SnapshotFields> fields, Context context)"
  desc: "Get a <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> by given the snapshot name.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n Context ctx = new Context(key2, value2);\n ConfigurationSnapshot getSnapshot = client.getSnapshotWithResponse(\n     snapshotName,\n     Arrays.asList(SnapshotFields.NAME, SnapshotFields.CREATED_AT, SnapshotFields.STATUS, SnapshotFields.FILTERS),\n     ctx)\n     .getValue();\n // Only properties `name`, `createAt`, `status` and `filters` have value, and expect null or\n // empty value other than the `fields` specified in the request.\n System.out.printf(\"Snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     getSnapshot.getName(), getSnapshot.getCreatedAt(), getSnapshot.getStatus());\n List<ConfigurationSettingsFilter> filters = getSnapshot.getFilters();\n for (ConfigurationSettingsFilter filter : filters) {\n     System.out.printf(\"Snapshot filter key=%s, label=%s.%n\", filter.getKey(), filter.getLabel());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  name: "listConfigurationSettings(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  summary: "Fetches the configuration settings that match the `selector`."
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)"
  desc: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listConfigurationSettings(settingSelector).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the List contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  name: "listConfigurationSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  summary: "Fetches the configuration settings that match the `selector`."
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector, Context context)"
  desc: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n Context ctx = new Context(key2, value2);\n configurationClient.listConfigurationSettings(settingSelector, ctx).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> contains all the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettingsForSnapshot(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettingsForSnapshot(String snapshotName)"
  name: "listConfigurationSettingsForSnapshot(String snapshotName)"
  nameWithType: "ConfigurationClient.listConfigurationSettingsForSnapshot(String snapshotName)"
  summary: "Fetches the configuration settings in a snapshot that matches the `snapshotName`."
  parameters:
  - description: "Optional. A filter used get <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>s for a snapshot. The value should\n be the name of the snapshot."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettingsForSnapshot(String snapshotName)"
  desc: "Fetches the configuration settings in a snapshot that matches the `snapshotName`. If `snapshotName` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n configurationClient.listConfigurationSettingsForSnapshot(snapshotName).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the List contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettingsForSnapshot(java.lang.String,java.util.List<com.azure.data.appconfiguration.models.SettingFields>,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettingsForSnapshot(String snapshotName, List<SettingFields> fields, Context context)"
  name: "listConfigurationSettingsForSnapshot(String snapshotName, List<SettingFields> fields, Context context)"
  nameWithType: "ConfigurationClient.listConfigurationSettingsForSnapshot(String snapshotName, List<SettingFields> fields, Context context)"
  summary: "Fetches the configuration settings in a snapshot that matches the `snapshotName`."
  parameters:
  - description: "Optional. A filter used get <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>s for a snapshot. The value should\n be the name of the snapshot."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Optional. The fields to select for the query response. If none are set, the service will return the\n ConfigurationSettings with a default set of properties."
    name: "fields"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.data.appconfiguration.models.SettingFields?alt=com.azure.data.appconfiguration.models.SettingFields&text=SettingFields\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettingsForSnapshot(String snapshotName, List<SettingFields> fields, Context context)"
  desc: "Fetches the configuration settings in a snapshot that matches the `snapshotName`. If `snapshotName` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n List<SettingFields> fields = Arrays.asList(SettingFields.KEY);\n Context ctx = new Context(key2, value2);\n configurationClient.listConfigurationSettingsForSnapshot(snapshotName, fields, ctx)\n     .forEach(setting -> System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> contains all the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(SettingSelector selector)"
  name: "listRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listRevisions(SettingSelector selector)"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s)."
  parameters:
  - description: "Optional. Used to filter configuration setting revisions from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listRevisions(SettingSelector selector)"
  desc: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lastModified\"></xref> date. Revisions expire after a period of time, see [Pricing][] for more information. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listRevisions(settingSelector).streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %d %n\", value);\n     });\n });\n```\n\n\n[Pricing]: https://azure.microsoft.com/pricing/details/app-configuration/"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> revisions."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(SettingSelector selector, Context context)"
  name: "listRevisions(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listRevisions(SettingSelector selector, Context context)"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s)."
  parameters:
  - description: "Optional. Used to filter configuration setting revisions from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listRevisions(SettingSelector selector, Context context)"
  desc: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lastModified\"></xref> date. Revisions expire after a period of time, see [Pricing][] for more information. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n Context ctx = new Context(key2, value2);\n configurationClient.listRevisions(settingSelector, ctx).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```\n\n\n[Pricing]: https://azure.microsoft.com/pricing/details/app-configuration/"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> revisions."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSnapshots(com.azure.data.appconfiguration.models.SnapshotSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSnapshots(SnapshotSelector selector)"
  name: "listSnapshots(SnapshotSelector selector)"
  nameWithType: "ConfigurationClient.listSnapshots(SnapshotSelector selector)"
  summary: "List snapshots by given <xref uid=\"com.azure.data.appconfiguration.models.SnapshotSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SnapshotSelector\"></xref>."
  parameters:
  - description: "Optional. Used to filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SnapshotSelector?alt=com.azure.data.appconfiguration.models.SnapshotSelector&text=SnapshotSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSnapshot> listSnapshots(SnapshotSelector selector)"
  desc: "List snapshots by given <xref uid=\"com.azure.data.appconfiguration.models.SnapshotSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SnapshotSelector\"></xref>.\n\n**Code Samples**\n\n```java\nString snapshotNameFilter = \"{snapshotNamePrefix}*\";\n client.listSnapshots(new SnapshotSelector().setNameFilter(snapshotNameFilter))\n     .forEach(snapshotResult -> {\n         System.out.printf(\"Listed Snapshot name = %s is created at %s, snapshot status is %s.%n\",\n             snapshotResult.getName(), snapshotResult.getCreatedAt(), snapshotResult.getStatus());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSnapshots(com.azure.data.appconfiguration.models.SnapshotSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSnapshots(SnapshotSelector selector, Context context)"
  name: "listSnapshots(SnapshotSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listSnapshots(SnapshotSelector selector, Context context)"
  summary: "List snapshots by given <xref uid=\"com.azure.data.appconfiguration.models.SnapshotSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SnapshotSelector\"></xref>."
  parameters:
  - description: "Optional. Used to filter <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref> from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SnapshotSelector?alt=com.azure.data.appconfiguration.models.SnapshotSelector&text=SnapshotSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSnapshot> listSnapshots(SnapshotSelector selector, Context context)"
  desc: "List snapshots by given <xref uid=\"com.azure.data.appconfiguration.models.SnapshotSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SnapshotSelector\"></xref>.\n\n**Code Samples**\n\n```java\nString snapshotNameFilter = \"{snapshotNamePrefix}*\";\n Context ctx = new Context(key2, value2);\n\n client.listSnapshots(new SnapshotSelector().setNameFilter(snapshotNameFilter), ctx)\n     .forEach(snapshotResult -> {\n         System.out.printf(\"Listed Snapshot name = %s is created at %s, snapshot status is %s.%n\",\n             snapshotResult.getName(), snapshotResult.getCreatedAt(), snapshotResult.getStatus());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.recoverSnapshot(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.recoverSnapshot(String snapshotName)"
  name: "recoverSnapshot(String snapshotName)"
  nameWithType: "ConfigurationClient.recoverSnapshot(String snapshotName)"
  summary: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref>."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSnapshot recoverSnapshot(String snapshotName)"
  desc: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref>.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n ConfigurationSnapshot recoveredSnapshot = client.recoverSnapshot(snapshotName);\n System.out.printf(\"Recovered snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     recoveredSnapshot.getName(), recoveredSnapshot.getCreatedAt(), recoveredSnapshot.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.recoverSnapshotWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.recoverSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  name: "recoverSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  nameWithType: "ConfigurationClient.recoverSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  summary: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref>."
  parameters:
  - description: "the snapshot name."
    name: "snapshotName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies HTTP options for conditional requests."
    name: "matchConditions"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSnapshot> recoverSnapshotWithResponse(String snapshotName, MatchConditions matchConditions, Context context)"
  desc: "Update a snapshot status from <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.ARCHIVED\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#ARCHIVED\"></xref> to <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshotStatus.READY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshotStatus#READY\"></xref>.\n\nTo turn on using 'if-match' header, set the second parameter 'ifUnchanged' to true. It used to perform an operation only if the targeted resource's ETag matches the value provided. Otherwise, it will throw an exception '412 Precondition Failed'.\n\n**Code Samples**\n\n```java\nString snapshotName = \"{snapshotName}\";\n MatchConditions matchConditions = new MatchConditions().setIfMatch(\"{etag}\");\n Context ctx = new Context(key2, value2);\n\n ConfigurationSnapshot recoveredSnapshot = client.recoverSnapshotWithResponse(snapshotName, matchConditions, ctx)\n     .getValue();\n System.out.printf(\"Recovered snapshot name=%s is created at %s, snapshot status is %s.%n\",\n     recoveredSnapshot.getName(), recoveredSnapshot.getCreatedAt(), recoveredSnapshot.getStatus());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSnapshot\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSnapshot?alt=com.azure.data.appconfiguration.models.ConfigurationSnapshot&text=ConfigurationSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(ConfigurationSetting setting)"
  name: "setConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.setConfigurationSetting(ConfigurationSetting setting)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setConfigurationSetting(ConfigurationSetting setting)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nConfigurationSetting setting = configurationClient.setConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n setting = configurationClient.setConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"updated_db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code> if the key is an invalid\n value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(String key, String label, String value)"
  name: "setConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.setConfigurationSetting(String key, String label, String value)"
  summary: "Creates or updates a configuration value in the service with the given key and."
  parameters:
  - description: "The key of the configuration setting to create or update."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of the configuration setting to create or update. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The value of this configuration setting."
    name: "value"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ConfigurationSetting setConfigurationSetting(String key, String label, String value)"
  desc: "Creates or updates a configuration value in the service with the given key and. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nConfigurationSetting result = configurationClient\n     .setConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n result = configurationClient.setConfigurationSetting(\"prodDBConnection\", \"westUS\", \"updated_db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code> if the key is an invalid\n value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  name: "setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "A boolean indicates if <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as an\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified, the configuration value is updated if the current setting's ETag matches. If the ETag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\n// Add a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db_connection\"\n Response<ConfigurationSetting> responseSetting = configurationClient.setConfigurationSettingWithResponse(\n     new ConfigurationSetting()\n         .setKey(\"prodDBConnection\")\n         .setLabel(\"westUS\")\n         .setValue(\"db_connection\"),\n     false,\n     new Context(key2, value2));\n ConfigurationSetting initSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", initSetting.getKey(), initSetting.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n responseSetting = configurationClient.setConfigurationSettingWithResponse(new ConfigurationSetting()\n         .setKey(\"prodDBConnection\")\n         .setLabel(\"westUS\")\n         .setValue(\"updated_db_connection\"),\n     false,\n     new Context(key2, value2));\n ConfigurationSetting updatedSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", updatedSetting.getKey(), updatedSetting.getValue());\n```"
  returns:
    description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code>,\n if the configuration value does not exist or the key is an invalid value (which will also throw\n ServiceRequestException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  name: "setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"),\n     true);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"),\n     false);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(java.lang.String,java.lang.String,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(String key, String label, boolean isReadOnly)"
  name: "setReadOnly(String key, String label, boolean isReadOnly)"
  nameWithType: "ConfigurationClient.setReadOnly(String key, String label, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`."
  parameters:
  - description: "The key of configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The label of configuration setting to set to read-only or not read-only based on the\n <code>isReadOnly</code> value, or optionally. If <code>null</code> no label will be used."
    name: "label"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setReadOnly(String key, String label, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting result = configurationClient.setReadOnly(\"prodDBConnection\", \"westUS\", true);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting result = configurationClient.setReadOnly(\"prodDBConnection\", \"westUS\", false);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  nameWithType: "ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting resultSetting = configurationClient.setReadOnlyWithResponse(new ConfigurationSetting()\n         .setKey(\"prodDBConnection\")\n         .setLabel(\"westUS\"),\n         true,\n         Context.NONE)\n     .getValue();\n System.out.printf(\"Key: %s, Value: %s\", resultSetting.getKey(), resultSetting.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nResponse<ConfigurationSetting> responseSetting = configurationClient\n     .setConfigurationSettingWithResponse(\n         new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false,\n         new Context(key2, value2));\n System.out.printf(\"Key: %s, Value: %s\", responseSetting.getValue().getKey(),\n     responseSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response containing the read-only or not read-only ConfigurationSetting if <code>isReadOnly</code>\n is true or null, or false respectively. Or return <code>null</code> if the setting didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value.\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.updateSyncToken(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.updateSyncToken(String token)"
  name: "updateSyncToken(String token)"
  nameWithType: "ConfigurationClient.updateSyncToken(String token)"
  summary: "Adds an external synchronization token to ensure service requests receive up-to-date values."
  parameters:
  - description: "an external synchronization token to ensure service requests receive up-to-date values."
    name: "token"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void updateSyncToken(String token)"
  desc: "Adds an external synchronization token to ensure service requests receive up-to-date values."
type: "class"
desc: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref>, <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> or <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, set read-only status ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"filter\"></xref>.\n\nAdditionally, this class allows to add an external synchronization token to ensure service requests receive up-to-date values. Use the <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.updateSyncToken(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updateSyncToken\"></xref> method.\n\n## Getting Started ##\n\nIn order to interact with the App Configuration service you'll need to create an instance of the <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient\"></xref> class. To make this possible you'll need the connection string of the configuration store. Alternatively, you can use AAD authentication via [ Azure Identity][Azure Identity] to connect to the service.\n\n1.  Connection string, see <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.connectionString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"connectionString\"></xref>.\n2.  Azure Active Directory, see <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder.credential(com.azure.core.credential.TokenCredential)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref>.\n\n**Instantiating a synchronous Configuration Client**\n\n```java\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n     .connectionString(connectionString)\n     .buildClient();\n```\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client.\n\nApp Configuration support multiple operations, such as create, update, retrieve, and delete a configuration setting. See methods in client level class below to explore all capabilities that library provides.\n\nFor more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\"></xref>.\n\n\n--------------------\n\n## Add Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#addConfigurationSetting(ConfigurationSetting)\"></xref> method can be used to add a configuration setting in the Azure App Configuration.\n\nThe sample below shows how to add a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\" using <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient\"></xref>.\n\n```java\nConfigurationSetting setting = configurationClient.addConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## Update Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#setConfigurationSetting(ConfigurationSetting)\"></xref> method can be used to update a configuration setting in the Azure App Configuration.\n\nThe sample below shows how to update setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nConfigurationSetting setting = configurationClient.setConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n setting = configurationClient.setConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\")\n     .setValue(\"updated_db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## Get Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#getConfigurationSetting(ConfigurationSetting)\"></xref> method can be used to get a configuration setting in the Azure App Configuration.\n\nThe sample below shows how to retrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.getConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## Delete Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#deleteConfigurationSetting(ConfigurationSetting)\"></xref> method can be used to delete a configuration setting in the Azure App Configuration.\n\nThe sample below shows how to delete the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.deleteConfigurationSetting(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## Set the Configuration Setting to read-only ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#setReadOnly(ConfigurationSetting, boolean)\"></xref> method can be used to conditionally set a configuration setting to read-only in the Azure App Configuration.\n\nThe sample below shows how to conditionally set the setting to read-only with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"),\n     true);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## Clear read-only of the Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#setReadOnly(ConfigurationSetting, boolean)\"></xref> method can be used to conditionally clear read-only of the setting in the Azure App Configuration.\n\nThe sample below shows how to conditionally clear read-only of the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(new ConfigurationSetting()\n     .setKey(\"prodDBConnection\")\n     .setLabel(\"westUS\"),\n     false);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## List Configuration Settings ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#listConfigurationSettings(SettingSelector)\"></xref> method can be used to list configuration settings in the Azure App Configuration.\n\nThe sample below shows how to list all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listConfigurationSettings(settingSelector).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n--------------------\n\n## List revisions of a Configuration Setting ##\n\nThe <xref uid=\"com.azure.data.appconfiguration.ConfigurationClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationClient#listRevisions(SettingSelector)\"></xref> method can be used to list all revisions of a configuration setting in the Azure App Configuration.\n\nThe sample below shows how to list all revision of a setting that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listRevisions(settingSelector).streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %d %n\", value);\n     });\n });\n```\n\n**Note:** For asynchronous sample, refer to <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\"></xref>.\n\n\n[Azure Identity]: https://learn.microsoft.com/java/api/overview/azure/identity-readme?view=azure-java-stable"
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.5.0
