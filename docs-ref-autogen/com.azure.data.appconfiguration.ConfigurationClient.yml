### YamlMime:JavaType
uid: "com.azure.data.appconfiguration.ConfigurationClient"
fullName: "com.azure.data.appconfiguration.ConfigurationClient"
name: "ConfigurationClient"
nameWithType: "ConfigurationClient"
summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> in Azure App Configuration Store."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ConfigurationClient"
methods:
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(ConfigurationSetting setting)"
  name: "addConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.addConfigurationSetting(ConfigurationSetting setting)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting addConfigurationSetting(ConfigurationSetting setting)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n```java\nConfigurationSetting setting = configurationClient.addConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting(String key, String label, String value)"
  name: "addConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.addConfigurationSetting(String key, String label, String value)"
  summary: "Adds a configuration value in the service if that key does not exist."
  parameters:
  - description: "The key of the configuration setting to add."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to create. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value associated with this configuration setting key."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting addConfigurationSetting(String key, String label, String value)"
  desc: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n```java\nConfigurationSetting result = configurationClient\n     .addConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  name: "addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationClient.addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  summary: "Adds a configuration value in the service if that key and label does not exist."
  parameters:
  - description: "The setting to add based on its key and optional label combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> addConfigurationSettingWithResponse(ConfigurationSetting setting, Context context)"
  desc: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n```java\nResponse<ConfigurationSetting> responseResultSetting = configurationClient\n     .addConfigurationSettingWithResponse(\n         new ConfigurationSetting()\n             .setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"),\n         new Context(key1, value1));\n final ConfigurationSetting resultSetting = responseResultSetting.getValue();\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", resultSetting.getKey(), resultSetting.getLabel(),\n     resultSetting.getValue());\n```"
  returns:
    description: "A REST response containing the the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created, or <code>null</code>, if a\n key collision occurs or the key is an invalid value (which will also throw ServiceRequestException described\n below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  name: "deleteConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.deleteConfigurationSetting(ConfigurationSetting setting)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting deleteConfigurationSetting(ConfigurationSetting setting)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.deleteConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The deleted ConfigurationSetting or <code>null</code> if it didn't exist. <code>null</code> is also returned if the\n <code>key</code> is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSetting(String key, String label)"
  name: "deleteConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationClient.deleteConfigurationSetting(String key, String label)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching `key` and optional `label` combination."
  parameters:
  - description: "The key of configuration setting to delete."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of configuration setting to delete. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting deleteConfigurationSetting(String key, String label)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting result = configurationClient.deleteConfigurationSetting(\"prodDBConnection\", null);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The deleted ConfigurationSetting or <code>null</code> if it didn't exist. <code>null</code> is also returned if the\n <code>key</code> is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  name: "deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination."
  parameters:
  - description: "The setting to delete based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> deleteConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  desc: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref> and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the ETag matches the current ETag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n```java\nResponse<ConfigurationSetting> responseSetting = configurationClient.deleteConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"),\n     false, new Context(key2, value2));\n System.out.printf(\n     \"Key: %s, Value: %s\", responseSetting.getValue().getKey(), responseSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is set but does not match the current ETag\n (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(ConfigurationSetting setting)"
  name: "getConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(ConfigurationSetting setting)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting getConfigurationSetting(ConfigurationSetting setting)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting setting = configurationClient.getConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\"));\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(String key, String label)"
  name: "getConfigurationSetting(String key, String label)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(String key, String label)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, and the optional `label` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to retrieve. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting getConfigurationSetting(String key, String label)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting resultNoDateTime =\n     configurationClient.getConfigurationSetting(\"prodDBConnection\", null);\n System.out.printf(\"Key: %s, Value: %s\", resultNoDateTime.getKey(), resultNoDateTime.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  name: "getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  nameWithType: "ConfigurationClient.getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  summary: "Attempts to get a Configuration<wbr>Setting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination."
  parameters:
  - description: "The key of the setting to retrieve."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to create or update. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting getConfigurationSetting(String key, String label, OffsetDateTime acceptDateTime)"
  desc: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `acceptDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\nConfigurationSetting result =\n     configurationClient.getConfigurationSetting(\"prodDBConnection\", null, null);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  name: "getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  nameWithType: "ConfigurationClient.getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  summary: "Attempts to get the Configuration<wbr>Setting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination."
  parameters:
  - description: "The setting to retrieve."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Datetime to access a past state of the configuration setting. If <code>null</code>\n then the current state of the configuration setting will be returned."
    name: "acceptDateTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n If-None-Match header."
    name: "ifChanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> getConfigurationSettingWithResponse(ConfigurationSetting setting, OffsetDateTime acceptDateTime, boolean ifChanged, Context context)"
  desc: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"label\"></xref>, optional `acceptDateTime` and optional ETag combination. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n```java\n// Retrieve the setting with the key-label \"prodDBConnection\"-\"westUS\".\n Response<ConfigurationSetting> responseResultSetting = configurationClient.getConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"),\n     null, false, new Context(key1, value1));\n System.out.printf(\"Key: %s, Value: %s\", responseResultSetting.getValue().getKey(),\n     responseResultSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> stored in the service, or <code>null</code>, if the\n configuration value does not exist or the key is an invalid value (which will also throw ServiceRequestException\n described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  name: "listConfigurationSettings(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector)"
  summary: "Fetches the configuration settings that match the `selector`."
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)"
  desc: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n configurationClient.listConfigurationSettings(settingSelector).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the List contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  name: "listConfigurationSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)"
  summary: "Fetches the configuration settings that match the `selector`."
  parameters:
  - description: "Optional. Selector to filter configuration setting results from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector, Context context)"
  desc: "Fetches the configuration settings that match the `selector`. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"configuration settings\"></xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n Context ctx = new Context(key2, value2);\n configurationClient.listConfigurationSettings(settingSelector, ctx).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were\n provided, the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> contains all of the current settings in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(SettingSelector selector)"
  name: "listRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listRevisions(SettingSelector selector)"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s)."
  parameters:
  - description: "Optional. Used to filter configuration setting revisions from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listRevisions(SettingSelector selector)"
  desc: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lastModified\"></xref> date. Revisions expire after a period of time, see [Pricing][] for more information. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n client.listRevisions(settingSelector).streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %d %n\", value);\n     });\n });\n```\n\n\n[Pricing]: https://azure.microsoft.com/pricing/details/app-configuration/"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> revisions."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listRevisions(SettingSelector selector, Context context)"
  name: "listRevisions(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listRevisions(SettingSelector selector, Context context)"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s)."
  parameters:
  - description: "Optional. Used to filter configuration setting revisions from the service."
    name: "selector"
    type: "<xref href=\"com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<ConfigurationSetting> listRevisions(SettingSelector selector, Context context)"
  desc: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"lastModified\"></xref> date. Revisions expire after a period of time, see [Pricing][] for more information. If `selector` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `selector`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n```java\nSettingSelector settingSelector = new SettingSelector().setKeyFilter(\"prodDBConnection\");\n Context ctx = new Context(key2, value2);\n configurationClient.listRevisions(settingSelector, ctx).forEach(setting -> {\n     System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n });\n```\n\n\n[Pricing]: https://azure.microsoft.com/pricing/details/app-configuration/"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> revisions."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(ConfigurationSetting setting)"
  name: "setConfigurationSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationClient.setConfigurationSetting(ConfigurationSetting setting)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setConfigurationSetting(ConfigurationSetting setting)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nConfigurationSetting setting = configurationClient.setConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n setting = configurationClient.setConfigurationSetting(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"updated_db_connection\"));\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", setting.getKey(), setting.getLabel(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code> if the key is an invalid\n value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting(String key, String label, String value)"
  name: "setConfigurationSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.setConfigurationSetting(String key, String label, String value)"
  summary: "Creates or updates a configuration value in the service with the given key and."
  parameters:
  - description: "The key of the configuration setting to create or update."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of the configuration setting to create or update. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value of this configuration setting."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setConfigurationSetting(String key, String label, String value)"
  desc: "Creates or updates a configuration value in the service with the given key and. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\nConfigurationSetting result = configurationClient\n     .setConfigurationSetting(\"prodDBConnection\", \"westUS\", \"db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n result = configurationClient.setConfigurationSetting(\n     \"prodDBConnection\", \"westUS\", \"updated_db_connection\");\n System.out.printf(\"Key: %s, Label: %s, Value: %s\", result.getKey(), result.getLabel(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code> if the key is an invalid\n value (which will also throw ServiceRequestException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  name: "setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  summary: "Creates or updates a configuration value in the service."
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "A boolean indicates if <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  desc: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified, the configuration value is updated if the current setting's ETag matches. If the ETag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\n// Add a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db_connection\"\n Response<ConfigurationSetting> responseSetting = configurationClient.setConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"),\n     false,\n     new Context(key2, value2));\n final ConfigurationSetting initSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", initSetting.getKey(), initSetting.getValue());\n\n // Update the value of the setting to \"updated_db_connection\".\n responseSetting = configurationClient.setConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"updated_db_connection\"),\n     false,\n     new Context(key2, value2));\n final ConfigurationSetting updatedSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", updatedSetting.getKey(), updatedSetting.getValue());\n```"
  returns:
    description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code>,\n if the configuration value does not exist or the key is an invalid value (which will also throw\n ServiceRequestException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  name: "setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  nameWithType: "ConfigurationClient.setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setReadOnly(ConfigurationSetting setting, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), true);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting setting = configurationClient.setReadOnly(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false);\n System.out.printf(\"Key: %s, Value: %s\", setting.getKey(), setting.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(java.lang.String,java.lang.String,boolean)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(String key, String label, boolean isReadOnly)"
  name: "setReadOnly(String key, String label, boolean isReadOnly)"
  nameWithType: "ConfigurationClient.setReadOnly(String key, String label, boolean isReadOnly)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`."
  parameters:
  - description: "The key of configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The label of configuration setting to set to read-only or not read-only based on the\n <code>isReadOnly</code> value, or optionally. If <code>null</code> no label will be used."
    name: "label"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ConfigurationSetting setReadOnly(String key, String label, boolean isReadOnly)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that matches the `key`, the optional `label`.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting result = configurationClient.setReadOnly(\"prodDBConnection\", \"westUS\", true);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting result = configurationClient.setReadOnly(\"prodDBConnection\", \"westUS\", false);\n System.out.printf(\"Key: %s, Value: %s\", result.getKey(), result.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that is read-only, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  nameWithType: "ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  summary: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>."
  parameters:
  - description: "The configuration setting to set to read-only or not read-only based on the <code>isReadOnly</code>."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag used to set the read-only status of the configuration. <code>true</code> will put the\n configuration into a read-only state, <code>false</code> will clear the state."
    name: "isReadOnly"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> setReadOnlyWithResponse(ConfigurationSetting setting, boolean isReadOnly, Context context)"
  desc: "Sets the read-only status for the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref>. For more configuration setting types, see <xref uid=\"com.azure.data.appconfiguration.models.FeatureFlagConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeatureFlagConfigurationSetting\"></xref> and <xref uid=\"com.azure.data.appconfiguration.models.SecretReferenceConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretReferenceConfigurationSetting\"></xref>.\n\n**Code Samples**\n\nSet the setting to read-only with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nConfigurationSetting resultSetting = configurationClient.setReadOnlyWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), true, Context.NONE)\n     .getValue();\n System.out.printf(\"Key: %s, Value: %s\", resultSetting.getKey(), resultSetting.getValue());\n```\n\nClear read-only of the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n```java\nResponse<ConfigurationSetting> responseSetting = configurationClient\n     .setConfigurationSettingWithResponse(\n         new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\"), false,\n         new Context(key2, value2));\n System.out.printf(\"Key: %s, Value: %s\", responseSetting.getValue().getKey(),\n     responseSetting.getValue().getValue());\n```"
  returns:
    description: "A REST response containing the read-only or not read-only ConfigurationSetting if <code>isReadOnly</code>\n is true or null, or false respectively. Or return <code>null</code> if the setting didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> is an invalid value.\n (which will also throw HttpResponseException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.updateSyncToken(java.lang.String)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.updateSyncToken(String token)"
  name: "updateSyncToken(String token)"
  nameWithType: "ConfigurationClient.updateSyncToken(String token)"
  summary: "Adds an external synchronization token to ensure service requests receive up-to-date values."
  parameters:
  - description: "an external synchronization token to ensure service requests receive up-to-date values."
    name: "token"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void updateSyncToken(String token)"
  desc: "Adds an external synchronization token to ensure service requests receive up-to-date values."
type: "class"
desc: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSettings\"></xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, set read-only status ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\" data-raw-source=\"filter\"></xref>.\n\n**Instantiating a synchronous Configuration Client**\n\n```java\nConfigurationClient configurationClient = new ConfigurationClientBuilder()\n     .connectionString(connectionString)\n     .buildClient();\n```\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.3.6
