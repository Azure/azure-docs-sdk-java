### YamlMime:JavaType
uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
name: "BlobBatchAsyncClient"
nameWithType: "BlobBatchAsyncClient"
summary: "This class provides a client that contains all operations that apply to Azure Storage Blob batching."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class BlobBatchAsyncClient"
methods:
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  name: "deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  nameWithType: "BlobBatchAsyncClient.deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  summary: "Delete multiple blobs in a single request to the service."
  parameters:
  - description: "Urls of the blobs to delete. Blob names must be encoded to UTF-8."
    name: "blobUrls"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The deletion option for all blobs."
    name: "deleteOptions"
    type: "<xref href=\"com.azure.storage.blob.models.DeleteSnapshotsOptionType?alt=com.azure.storage.blob.models.DeleteSnapshotsOptionType&text=DeleteSnapshotsOptionType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Response<Void>> deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  desc: "Delete multiple blobs in a single request to the service.\n\n**Code samples**\n\n```java\nList<String> blobUrls = new ArrayList<>();\n blobUrls.add(blobClient1.getBlobUrl());\n blobUrls.add(blobClient2.getBlobUrl());\n blobUrls.add(blobClient3.getBlobUrl());\n\n batchAsyncClient.deleteBlobs(blobUrls, DeleteSnapshotsOptionType.INCLUDE).subscribe(response ->\n         System.out.printf(\"Deleting blob with URL %s completed with status code %d%n\",\n             response.getRequest().getUrl(), response.getStatusCode()),\n     error -> System.err.printf(\"Deleting blob failed with exception: %s%n\", error.getMessage()));\n```"
  returns:
    description: "The status of each delete operation."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch()"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch()"
  name: "getBlobBatch()"
  nameWithType: "BlobBatchAsyncClient.getBlobBatch()"
  summary: "Gets a <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBatch\"></xref> used to configure a batching operation to send to Azure Storage blobs."
  syntax: "public BlobBatch getBlobBatch()"
  desc: "Gets a <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBatch\"></xref> used to configure a batching operation to send to Azure Storage blobs."
  returns:
    description: "a new <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBatch\"></xref> instance."
    type: "<xref href=\"com.azure.storage.blob.batch.BlobBatch?alt=com.azure.storage.blob.batch.BlobBatch&text=BlobBatch\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  name: "setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  nameWithType: "BlobBatchAsyncClient.setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  summary: "Set access tier on multiple blobs in a single request to the service."
  parameters:
  - description: "Urls of the blobs to set their access tier. Blob names must be encoded to UTF-8."
    name: "blobUrls"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> to set on each blob."
    name: "accessTier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Response<Void>> setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  desc: "Set access tier on multiple blobs in a single request to the service.\n\n**Code samples**\n\n```java\nList<String> blobUrls = new ArrayList<>();\n blobUrls.add(blobClient1.getBlobUrl());\n blobUrls.add(blobClient2.getBlobUrl());\n blobUrls.add(blobClient3.getBlobUrl());\n\n batchAsyncClient.setBlobsAccessTier(blobUrls, AccessTier.HOT).subscribe(response ->\n         System.out.printf(\"Setting blob access tier with URL %s completed with status code %d%n\",\n             response.getRequest().getUrl(), response.getStatusCode()),\n     error -> System.err.printf(\"Setting blob access tier failed with exception: %s%n\", error.getMessage()));\n```"
  returns:
    description: "The status of each set tier operation."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(com.azure.storage.blob.batch.BlobBatch)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(BlobBatch batch)"
  name: "submitBatch(BlobBatch batch)"
  nameWithType: "BlobBatchAsyncClient.submitBatch(BlobBatch batch)"
  summary: "Submits a batch operation."
  parameters:
  - description: "Batch to submit."
    name: "batch"
    type: "<xref href=\"com.azure.storage.blob.batch.BlobBatch?alt=com.azure.storage.blob.batch.BlobBatch&text=BlobBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> submitBatch(BlobBatch batch)"
  desc: "Submits a batch operation.\n\nIf any request in a batch fails this will throw a <xref uid=\"com.azure.storage.blob.models.BlobStorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobStorageException\"></xref>.\n\n**Code samples**\n\n```java\nBlobBatch batch = batchAsyncClient.getBlobBatch();\n\n Response<Void> deleteResponse1 = batch.deleteBlob(\"container\", \"blob1\");\n Response<Void> deleteResponse2 = batch.deleteBlob(\"container\", \"blob2\", DeleteSnapshotsOptionType.INCLUDE,\n     new BlobRequestConditions().setLeaseId(\"leaseId\"));\n\n batchAsyncClient.submitBatch(batch).subscribe(response -> {\n     System.out.println(\"Batch submission completed successfully.\");\n     System.out.printf(\"Delete operation 1 completed with status code: %d%n\", deleteResponse1.getStatusCode());\n     System.out.printf(\"Delete operation 2 completed with status code: %d%n\", deleteResponse2.getStatusCode());\n }, error -> System.err.printf(\"Batch submission failed. Error message: %s%n\", error.getMessage()));\n```"
  returns:
    description: "An empty response indicating that the batch operation has completed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  name: "submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  nameWithType: "BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  summary: "Submits a batch operation."
  parameters:
  - description: "Batch to submit."
    name: "batch"
    type: "<xref href=\"com.azure.storage.blob.batch.BlobBatch?alt=com.azure.storage.blob.batch.BlobBatch&text=BlobBatch\" data-throw-if-not-resolved=\"False\" />"
  - description: "Flag to indicate if an exception should be thrown if any request in the batch fails."
    name: "throwOnAnyFailure"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  desc: "Submits a batch operation.\n\nIf `throwOnAnyFailure` is `true` a <xref uid=\"com.azure.storage.blob.models.BlobStorageException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobStorageException\"></xref> will be thrown if any request fails.\n\n**Code samples**\n\n```java\nBlobBatch batch = batchAsyncClient.getBlobBatch();\n\n Response<Void> deleteResponse1 = batch.deleteBlob(\"container\", \"blob1\");\n Response<Void> deleteResponse2 = batch.deleteBlob(\"container\", \"blob2\", DeleteSnapshotsOptionType.INCLUDE,\n     new BlobRequestConditions().setLeaseId(\"leaseId\"));\n\n batchAsyncClient.submitBatchWithResponse(batch, true).subscribe(response -> {\n     System.out.printf(\"Batch submission completed with status code: %d%n\", response.getStatusCode());\n     System.out.printf(\"Delete operation 1 completed with status code: %d%n\", deleteResponse1.getStatusCode());\n     System.out.printf(\"Delete operation 2 completed with status code: %d%n\", deleteResponse2.getStatusCode());\n }, error -> System.err.printf(\"Batch submission failed. Error message: %s%n\", error.getMessage()));\n```"
  returns:
    description: "A response only containing header and status code information, used to indicate that the batch operation\n has completed."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all operations that apply to Azure Storage Blob batching.\n\nThis client offers the ability to delete and set access tier on multiple blobs at once and to submit a <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBatch\"></xref>."
metadata: {}
package: "com.azure.storage.blob.batch"
artifact: com.azure:azure-storage-blob-batch:12.15.0
