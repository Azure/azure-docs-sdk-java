### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  id: "BlobBatchAsyncClient"
  parent: "com.azure.storage.blob.batch"
  children:
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.storage.blob.BlobServiceVersion)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch()"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(com.azure.storage.blob.batch.BlobBatch)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean)"
  - "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "BlobBatchAsyncClient"
  nameWithType: "BlobBatchAsyncClient"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  type: "Class"
  package: "com.azure.storage.blob.batch"
  summary: "This class provides a client that contains all operations that apply to Azure Storage Blob batching.\n\nThis client offers the ability to delete and set access tier on multiple blobs at once and to submit a <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\">BlobBatch</xref>."
  syntax:
    content: "public final class BlobBatchAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.storage.blob.BlobServiceVersion)"
  id: "BlobBatchAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,com.azure.storage.blob.BlobServiceVersion)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "BlobBatchAsyncClient(String accountUrl, HttpPipeline pipeline, BlobServiceVersion version)"
  nameWithType: "BlobBatchAsyncClient.BlobBatchAsyncClient(String accountUrl, HttpPipeline pipeline, BlobServiceVersion version)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient(String accountUrl, HttpPipeline pipeline, BlobServiceVersion version)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.blob.batch"
  syntax:
    content: " BlobBatchAsyncClient(String accountUrl, HttpPipeline pipeline, BlobServiceVersion version)"
    parameters:
    - id: "accountUrl"
      type: "java.lang.String"
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
    - id: "version"
      type: "com.azure.storage.blob.BlobServiceVersion"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType)"
  id: "deleteBlobs(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  nameWithType: "BlobBatchAsyncClient.deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  summary: "Delete multiple blobs in a single request to the service.\n\n**Code samples**\n\n\\{@codesnippet com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs\\#List-DeleteSnapshotsOptionType\\}"
  syntax:
    content: "public PagedFlux<Response<Void>> deleteBlobs(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions)"
    parameters:
    - id: "blobUrls"
      type: "java.util.List<java.lang.String>"
      description: "Urls of the blobs to delete. Blob names must be encoded to UTF-8."
    - id: "deleteOptions"
      type: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
      description: "The deletion option for all blobs."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "The status of each delete operation."
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.Duration,com.azure.core.util.Context)"
  id: "deleteBlobsWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.DeleteSnapshotsOptionType,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "deleteBlobsWithTimeout(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions, Duration timeout, Context context)"
  nameWithType: "BlobBatchAsyncClient.deleteBlobsWithTimeout(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions, Duration timeout, Context context)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions, Duration timeout, Context context)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  syntax:
    content: " PagedFlux<Response<Void>> deleteBlobsWithTimeout(List<String> blobUrls, DeleteSnapshotsOptionType deleteOptions, Duration timeout, Context context)"
    parameters:
    - id: "blobUrls"
      type: "java.util.List<java.lang.String>"
    - id: "deleteOptions"
      type: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch()"
  id: "getBlobBatch()"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "getBlobBatch()"
  nameWithType: "BlobBatchAsyncClient.getBlobBatch()"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch()"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  summary: "Gets a <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\">BlobBatch</xref> used to configure a batching operation to send to Azure Storage blobs."
  syntax:
    content: "public BlobBatch getBlobBatch()"
    return:
      type: "com.azure.storage.blob.batch.BlobBatch"
      description: "a new <xref uid=\"com.azure.storage.blob.batch.BlobBatch\" data-throw-if-not-resolved=\"false\">BlobBatch</xref> instance."
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier)"
  id: "setBlobsAccessTier(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  nameWithType: "BlobBatchAsyncClient.setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  summary: "Set access tier on multiple blobs in a single request to the service.\n\n**Code samples**\n\n\\{@codesnippet com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier\\#List-AccessTier\\}"
  syntax:
    content: "public PagedFlux<Response<Void>> setBlobsAccessTier(List<String> blobUrls, AccessTier accessTier)"
    parameters:
    - id: "blobUrls"
      type: "java.util.List<java.lang.String>"
      description: "Urls of the blobs to set their access tier. Blob names must be encoded to UTF-8."
    - id: "accessTier"
      type: "com.azure.storage.blob.models.AccessTier"
      description: "<xref uid=\"\" data-throw-if-not-resolved=\"false\">AccessTier</xref> to set on each blob."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "The status of each set tier operation."
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.Duration,com.azure.core.util.Context)"
  id: "setBlobsAccessTierWithTimeout(java.util.List<java.lang.String>,com.azure.storage.blob.models.AccessTier,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "setBlobsAccessTierWithTimeout(List<String> blobUrls, AccessTier accessTier, Duration timeout, Context context)"
  nameWithType: "BlobBatchAsyncClient.setBlobsAccessTierWithTimeout(List<String> blobUrls, AccessTier accessTier, Duration timeout, Context context)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout(List<String> blobUrls, AccessTier accessTier, Duration timeout, Context context)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  syntax:
    content: " PagedFlux<Response<Void>> setBlobsAccessTierWithTimeout(List<String> blobUrls, AccessTier accessTier, Duration timeout, Context context)"
    parameters:
    - id: "blobUrls"
      type: "java.util.List<java.lang.String>"
    - id: "accessTier"
      type: "com.azure.storage.blob.models.AccessTier"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(com.azure.storage.blob.batch.BlobBatch)"
  id: "submitBatch(com.azure.storage.blob.batch.BlobBatch)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "submitBatch(BlobBatch batch)"
  nameWithType: "BlobBatchAsyncClient.submitBatch(BlobBatch batch)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch(BlobBatch batch)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  summary: "Submits a batch operation.\n\nIf any request in a batch fails this will throw a <xref uid=\"com.azure.storage.blob.models.BlobStorageException\" data-throw-if-not-resolved=\"false\">BlobStorageException</xref>.\n\n**Code samples**\n\n\\{@codesnippet com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch\\#BlobBatch\\}"
  syntax:
    content: "public Mono<Void> submitBatch(BlobBatch batch)"
    parameters:
    - id: "batch"
      type: "com.azure.storage.blob.batch.BlobBatch"
      description: "Batch to submit."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response indicating that the batch operation has completed."
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean)"
  id: "submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  nameWithType: "BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  summary: "Submits a batch operation.\n\nIf `throwOnAnyFailure` is `true` a <xref uid=\"com.azure.storage.blob.models.BlobStorageException\" data-throw-if-not-resolved=\"false\">BlobStorageException</xref> will be thrown if any request fails.\n\n**Code samples**\n\n\\{@codesnippet com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch\\#BlobBatch-boolean\\}"
  syntax:
    content: "public Mono<Response<Void>> submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure)"
    parameters:
    - id: "batch"
      type: "com.azure.storage.blob.batch.BlobBatch"
      description: "Batch to submit."
    - id: "throwOnAnyFailure"
      type: "boolean"
      description: "Flag to indicate if an exception should be thrown if any request in the batch fails."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response only containing header and status code information, used to indicate that the batch operation\n has completed."
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean,com.azure.core.util.Context)"
  id: "submitBatchWithResponse(com.azure.storage.blob.batch.BlobBatch,boolean,com.azure.core.util.Context)"
  parent: "com.azure.storage.blob.batch.BlobBatchAsyncClient"
  langs:
  - "java"
  name: "submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure, Context context)"
  nameWithType: "BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure, Context context)"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure, Context context)"
  overload: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse*"
  type: "Method"
  package: "com.azure.storage.blob.batch"
  syntax:
    content: " Mono<Response<Void>> submitBatchWithResponse(BlobBatch batch, boolean throwOnAnyFailure, Context context)"
    parameters:
    - id: "batch"
      type: "com.azure.storage.blob.batch.BlobBatch"
    - id: "throwOnAnyFailure"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.storage.blob.BlobServiceVersion"
  spec.java:
  - uid: "com.azure.storage.blob.BlobServiceVersion"
    name: "BlobServiceVersion"
    fullName: "com.azure.storage.blob.BlobServiceVersion"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient*"
  name: "BlobBatchAsyncClient"
  nameWithType: "BlobBatchAsyncClient.BlobBatchAsyncClient"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.BlobBatchAsyncClient"
  package: "com.azure.storage.blob.batch"
- uid: "com.azure.storage.blob.batch.BlobBatch"
  name: "BlobBatch"
  nameWithType: "BlobBatch"
  fullName: "com.azure.storage.blob.batch.BlobBatch"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch*"
  name: "getBlobBatch"
  nameWithType: "BlobBatchAsyncClient.getBlobBatch"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.getBlobBatch"
  package: "com.azure.storage.blob.batch"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch*"
  name: "submitBatch"
  nameWithType: "BlobBatchAsyncClient.submitBatch"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatch"
  package: "com.azure.storage.blob.batch"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse*"
  name: "submitBatchWithResponse"
  nameWithType: "BlobBatchAsyncClient.submitBatchWithResponse"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.submitBatchWithResponse"
  package: "com.azure.storage.blob.batch"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
  spec.java:
  - uid: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
    name: "DeleteSnapshotsOptionType"
    fullName: "com.azure.storage.blob.models.DeleteSnapshotsOptionType"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs*"
  name: "deleteBlobs"
  nameWithType: "BlobBatchAsyncClient.deleteBlobs"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobs"
  package: "com.azure.storage.blob.batch"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout*"
  name: "deleteBlobsWithTimeout"
  nameWithType: "BlobBatchAsyncClient.deleteBlobsWithTimeout"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.deleteBlobsWithTimeout"
  package: "com.azure.storage.blob.batch"
- uid: "com.azure.storage.blob.models.AccessTier"
  spec.java:
  - uid: "com.azure.storage.blob.models.AccessTier"
    name: "AccessTier"
    fullName: "com.azure.storage.blob.models.AccessTier"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier*"
  name: "setBlobsAccessTier"
  nameWithType: "BlobBatchAsyncClient.setBlobsAccessTier"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTier"
  package: "com.azure.storage.blob.batch"
- uid: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout*"
  name: "setBlobsAccessTierWithTimeout"
  nameWithType: "BlobBatchAsyncClient.setBlobsAccessTierWithTimeout"
  fullName: "com.azure.storage.blob.batch.BlobBatchAsyncClient.setBlobsAccessTierWithTimeout"
  package: "com.azure.storage.blob.batch"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
