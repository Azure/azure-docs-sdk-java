### YamlMime:JavaMember
nameWithType: CloudFile.openWriteExisting
type: method
members:
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteExisting()
  name: openWriteExisting()
  nameWithType: CloudFile.openWriteExisting()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false">FileOutputStream</xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file. The file must already exist and any existing data may be overwritten.</p>

    <p></p>
  syntax: public FileOutputStream openWriteExisting()
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteExisting()
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false">AccessCondition</xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false">FileRequestOptions</xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false">CloudFileClient</xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false">OperationContext</xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false">FileOutputStream</xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file, using specified request options and operation context. The file must already exist and any existing data may be overwritten.</p>

    <p></p>
  syntax: public FileOutputStream openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteExisting(AccessCondition,FileRequestOptions,OperationContext)
uid: com.microsoft.azure.storage.file.CloudFile.openWriteExisting*
fullName: com.microsoft.azure.storage.file.CloudFile.openWriteExisting()
name: openWriteExisting()
package: com.microsoft.azure.storage.file
metadata: {}
