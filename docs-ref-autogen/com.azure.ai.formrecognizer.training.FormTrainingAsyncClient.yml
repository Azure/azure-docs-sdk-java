### YamlMime:JavaType
uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient"
fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient"
name: "FormTrainingAsyncClient"
nameWithType: "FormTrainingAsyncClient"
summary: "This class provides an asynchronous client that contains model management operations that apply to Azure Form Recognizer."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class FormTrainingAsyncClient"
methods:
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCopyModel(java.lang.String,com.azure.ai.formrecognizer.training.models.CopyAuthorization)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCopyModel(String modelId, CopyAuthorization target)"
  name: "beginCopyModel(String modelId, CopyAuthorization target)"
  nameWithType: "FormTrainingAsyncClient.beginCopyModel(String modelId, CopyAuthorization target)"
  summary: "Copy a custom model stored in this resource (the source) to the user specified target Form Recognizer resource."
  parameters:
  - description: "Model identifier of the model to copy to the target Form Recognizer resource"
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the copy authorization to the target Form Recognizer resource. The copy authorization can be\n generated from the target resource's call to <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormTrainingAsyncClient#getCopyAuthorization(String, String)\"></xref>"
    name: "target"
    type: "<xref href=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization?alt=com.azure.ai.formrecognizer.training.models.CopyAuthorization&text=CopyAuthorization\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModelInfo> beginCopyModel(String modelId, CopyAuthorization target)"
  desc: "Copy a custom model stored in this resource (the source) to the user specified target Form Recognizer resource.\n\nThis should be called with the source Form Recognizer resource (with the model that is intended to be copied). The target parameter should be supplied from the target resource's output from <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormTrainingAsyncClient#getCopyAuthorization(String, String)\"></xref> method.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString resourceId = \"target-resource-Id\";\n String resourceRegion = \"target-resource-region\";\n String copyModelId = \"copy-model-Id\";\n formTrainingAsyncClient.getCopyAuthorization(resourceId, resourceRegion)\n     .flatMapMany(copyAuthorization -> formTrainingAsyncClient.beginCopyModel(copyModelId, copyAuthorization))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModelInfo ->\n         System.out.printf(\"Copied model has model Id: %s, model status: %s, training started on: %s,\"\n             + \" training completed on: %s.%n\",\n         customFormModelInfo.getModelId(),\n         customFormModelInfo.getStatus(),\n         customFormModelInfo.getTrainingStartedOn(),\n         customFormModelInfo.getTrainingCompletedOn()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the copy model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the copied model <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomFormModelInfo\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo?alt=com.azure.ai.formrecognizer.training.models.CustomFormModelInfo&text=CustomFormModelInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCopyModel(java.lang.String,com.azure.ai.formrecognizer.training.models.CopyAuthorization,java.time.Duration)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCopyModel(String modelId, CopyAuthorization target, Duration pollInterval)"
  name: "beginCopyModel(String modelId, CopyAuthorization target, Duration pollInterval)"
  nameWithType: "FormTrainingAsyncClient.beginCopyModel(String modelId, CopyAuthorization target, Duration pollInterval)"
  summary: "Copy a custom model stored in this resource (the source) to the user specified target Form Recognizer resource."
  parameters:
  - description: "Model identifier of the model to copy to the target Form Recognizer resource"
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the copy authorization to the target Form Recognizer resource. The copy authorization can be\n generated from the target resource's call to <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormTrainingAsyncClient#getCopyAuthorization(String, String)\"></xref>"
    name: "target"
    type: "<xref href=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization?alt=com.azure.ai.formrecognizer.training.models.CopyAuthorization&text=CopyAuthorization\" data-throw-if-not-resolved=\"False\" />"
  - description: "Duration between each poll for the operation status. If none is specified, a default of\n 5 seconds is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModelInfo> beginCopyModel(String modelId, CopyAuthorization target, Duration pollInterval)"
  desc: "Copy a custom model stored in this resource (the source) to the user specified target Form Recognizer resource.\n\nThis should be called with the source Form Recognizer resource (with the model that is intended to be copied). The target parameter should be supplied from the target resource's output from <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormTrainingAsyncClient#getCopyAuthorization(String, String)\"></xref> method.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString resourceId = \"target-resource-Id\";\n String resourceRegion = \"target-resource-region\";\n String copyModelId = \"copy-model-Id\";\n formTrainingAsyncClient.getCopyAuthorization(resourceId, resourceRegion)\n     .flatMapMany(copyAuthorization -> formTrainingAsyncClient.beginCopyModel(copyModelId, copyAuthorization,\n         Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n         .subscribe(customFormModelInfo ->\n             System.out.printf(\"Copied model has model Id: %s, model status: %s, training started on: %s,\"\n                 + \"training completed on: %s.%n\",\n             customFormModelInfo.getModelId(),\n             customFormModelInfo.getStatus(),\n             customFormModelInfo.getTrainingStartedOn(),\n             customFormModelInfo.getTrainingCompletedOn()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the copy model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the copied model <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomFormModelInfo\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo?alt=com.azure.ai.formrecognizer.training.models.CustomFormModelInfo&text=CustomFormModelInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds)"
  name: "beginCreateComposedModel(List<String> modelIds)"
  nameWithType: "FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of models Ids to form the composed model."
    name: "modelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginCreateComposedModel(List<String> modelIds)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate Ids. This operation is currently only supported for custom models trained using labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString labeledModelId1 = \"5f21ab8d-71a6-42d8-9856-ef5985c486a8\";\n String labeledModelId2 = \"d7b0904c-841f-46f9-a9f4-3f2273eef7c9\";\n formTrainingAsyncClient.beginCreateComposedModel(Arrays.asList(labeledModelId1, labeledModelId2))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         System.out.printf(\"Is this a composed model: %s%n\",\n             customFormModel.getCustomModelProperties().isComposed());\n         customFormModel.getSubmodels()\n             .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n                 .forEach((key, customFormModelField) ->\n                     System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n                         key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the created <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>,com.azure.ai.formrecognizer.models.CreateComposedModelOptions)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  name: "beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  nameWithType: "FormTrainingAsyncClient.beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of models Ids to form the composed model."
    name: "modelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The configurable <xref uid=\"com.azure.ai.formrecognizer.models.CreateComposedModelOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass when\n creating a composed model."
    name: "createComposedModelOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.CreateComposedModelOptions?alt=com.azure.ai.formrecognizer.models.CreateComposedModelOptions&text=CreateComposedModelOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginCreateComposedModel(List<String> modelIds, CreateComposedModelOptions createComposedModelOptions)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate Ids. This operation is currently only supported for custom models trained using labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString labeledModelId1 = \"5f21ab8d-71a6-42d8-9856-ef5985c486a8\";\n String labeledModelId2 = \"d7b0904c-841f-46f9-a9f4-3f2273eef7c9\";\n formTrainingAsyncClient.beginCreateComposedModel(Arrays.asList(labeledModelId1, labeledModelId2),\n     new CreateComposedModelOptions()\n         .setModelName(\"my composed model name\"))\n     .setPollInterval(Duration.ofSeconds(5))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         System.out.printf(\"Model display name: %s%n\", customFormModel.getModelName());\n         System.out.printf(\"Is this a composed model: %s%n\",\n             customFormModel.getCustomModelProperties().isComposed());\n\n         customFormModel.getSubmodels()\n             .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n                 .forEach((key, customFormModelField) ->\n                     System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n                         key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the copied model <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomFormModel\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining(java.lang.String,boolean)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining(String trainingFilesUrl, boolean useTrainingLabels)"
  name: "beginTraining(String trainingFilesUrl, boolean useTrainingLabels)"
  nameWithType: "FormTrainingAsyncClient.beginTraining(String trainingFilesUrl, boolean useTrainingLabels)"
  summary: "Create and train a custom model."
  parameters:
  - description: "source URL parameter that is an externally accessible Azure\n storage blob container Uri (preferably a Shared Access Signature Uri)."
    name: "trainingFilesUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "boolean to specify the use of labeled files for training the model."
    name: "useTrainingLabels"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginTraining(String trainingFilesUrl, boolean useTrainingLabels)"
  desc: "Create and train a custom model. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for information on building your own training data set.\n\n**Code sample**\n\n```java\nString trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n boolean useTrainingLabels = true;\n formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         customFormModel.getSubmodels()\n             .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n                 .forEach((key, customFormModelField) ->\n                     System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n                         key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```\n\n\n[here]: https://docs.microsoft.com/azure/cognitive-services/form-recognizer/build-training-data-set#upload-your-training-data"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the training model operation until it has completed, has failed, or has\n been cancelled. The completed operation returns the trained <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"custom form model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining(java.lang.String,boolean,com.azure.ai.formrecognizer.training.models.TrainingOptions)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining(String trainingFilesUrl, boolean useTrainingLabels, TrainingOptions trainingOptions)"
  name: "beginTraining(String trainingFilesUrl, boolean useTrainingLabels, TrainingOptions trainingOptions)"
  nameWithType: "FormTrainingAsyncClient.beginTraining(String trainingFilesUrl, boolean useTrainingLabels, TrainingOptions trainingOptions)"
  summary: "Create and train a custom model."
  parameters:
  - description: "an externally accessible Azure storage blob container Uri (preferably a\n Shared Access Signature Uri)."
    name: "trainingFilesUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "boolean to specify the use of labeled files for training the model."
    name: "useTrainingLabels"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.training.models.TrainingOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when training a model."
    name: "trainingOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.training.models.TrainingOptions?alt=com.azure.ai.formrecognizer.training.models.TrainingOptions&text=TrainingOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,CustomFormModel> beginTraining(String trainingFilesUrl, boolean useTrainingLabels, TrainingOptions trainingOptions)"
  desc: "Create and train a custom model.\n\nModels are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'.Other type of content is ignored.\n\nSee [here][] for information on building your own training data set.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n TrainingFileFilter trainingFileFilter = new TrainingFileFilter().setSubfoldersIncluded(true).setPrefix(\"Invoice\");\n\n formTrainingAsyncClient.beginTraining(trainingFilesUrl, true,\n     new TrainingOptions()\n         .setTrainingFileFilter(trainingFileFilter)\n         .setPollInterval(Duration.ofSeconds(5)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(customFormModel -> {\n         System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n         System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n         customFormModel.getSubmodels().forEach(customFormSubmodel ->\n             customFormSubmodel.getFields().forEach((key, customFormModelField) ->\n                 System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %f%n\",\n                     key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n     });\n```\n\n\n[here]: https://docs.microsoft.com/azure/cognitive-services/form-recognizer/build-training-data-set#upload-your-training-data"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the training model operation until it has completed, has failed, or has\n been cancelled. The completed operation returns the trained <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"custom form model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.deleteModel(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.deleteModel(String modelId)"
  name: "deleteModel(String modelId)"
  nameWithType: "FormTrainingAsyncClient.deleteModel(String modelId)"
  summary: "Deletes the specified custom model."
  parameters:
  - description: "The UUID string format model identifier."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteModel(String modelId)"
  desc: "Deletes the specified custom model.\n\n**Code sample**\n\n```java\nString modelId = \"{model_id}\";\n formTrainingAsyncClient.deleteModel(modelId)\n     .subscribe(ignored -> System.out.printf(\"Model Id: %s is deleted%n\", modelId));\n```"
  returns:
    description: "An empty Mono."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.deleteModelWithResponse(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.deleteModelWithResponse(String modelId)"
  name: "deleteModelWithResponse(String modelId)"
  nameWithType: "FormTrainingAsyncClient.deleteModelWithResponse(String modelId)"
  summary: "Deletes the specified custom model."
  parameters:
  - description: "The UUID string format model identifier."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteModelWithResponse(String modelId)"
  desc: "Deletes the specified custom model.\n\n**Code sample**\n\n```java\nString modelId = \"{model_id}\";\n formTrainingAsyncClient.deleteModelWithResponse(modelId)\n     .subscribe(response -> {\n         System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n         System.out.printf(\"Model Id: %s is deleted.%n\", modelId);\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the status code and HTTP headers."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getAccountProperties()"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getAccountProperties()"
  name: "getAccountProperties()"
  nameWithType: "FormTrainingAsyncClient.getAccountProperties()"
  summary: "Get account information of the form recognizer account."
  syntax: "public Mono<AccountProperties> getAccountProperties()"
  desc: "Get account information of the form recognizer account.\n\n**Code sample**\n\n```java\nformTrainingAsyncClient.getAccountProperties()\n     .subscribe(accountProperties -> {\n         System.out.printf(\"Max number of models that can be trained for this account: %d%n\",\n             accountProperties.getCustomModelLimit());\n         System.out.printf(\"Current count of trained custom models: %d%n\",\n             accountProperties.getCustomModelCount());\n     });\n```"
  returns:
    description: "The requested account information details."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.AccountProperties?alt=com.azure.ai.formrecognizer.training.models.AccountProperties&text=AccountProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getAccountPropertiesWithResponse()"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getAccountPropertiesWithResponse()"
  name: "getAccountPropertiesWithResponse()"
  nameWithType: "FormTrainingAsyncClient.getAccountPropertiesWithResponse()"
  summary: "Get account information of the form recognizer account with an Http response."
  syntax: "public Mono<Response<AccountProperties>> getAccountPropertiesWithResponse()"
  desc: "Get account information of the form recognizer account with an Http response.\n\n**Code sample**\n\n```java\nformTrainingAsyncClient.getAccountPropertiesWithResponse()\n     .subscribe(response -> {\n         System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n         AccountProperties accountProperties = response.getValue();\n         System.out.printf(\"Max number of models that can be trained for this account: %d%n\",\n             accountProperties.getCustomModelLimit());\n         System.out.printf(\"Current count of trained custom models: %d%n\",\n             accountProperties.getCustomModelCount());\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the requested account information details."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.AccountProperties?alt=com.azure.ai.formrecognizer.training.models.AccountProperties&text=AccountProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization(String resourceId, String resourceRegion)"
  name: "getCopyAuthorization(String resourceId, String resourceRegion)"
  nameWithType: "FormTrainingAsyncClient.getCopyAuthorization(String resourceId, String resourceRegion)"
  summary: "Generate authorization for copying a custom model into the target Form Recognizer resource."
  parameters:
  - description: "Azure Resource Id of the target Form Recognizer resource where the model will be copied to."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Location of the target Form Recognizer resource. A valid Azure region name supported\n by Cognitive Services.\n\n <p><strong>Code sample</strong></p>\n <!-- src_embed com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization#string-string -->\n <pre>\n String resourceId = &quot;target-resource-Id&quot;;\n String resourceRegion = &quot;target-resource-region&quot;;\n formTrainingAsyncClient.getCopyAuthorization&#40;resourceId, resourceRegion&#41;\n     .subscribe&#40;copyAuthorization -&gt;\n         System.out.printf&#40;&quot;Copy Authorization for model id: %s, access token: %s, expiration time: %s, &quot;\n                 + &quot;target resource Id; %s, target resource region: %s%n&quot;,\n             copyAuthorization.getModelId&#40;&#41;,\n             copyAuthorization.getAccessToken&#40;&#41;,\n             copyAuthorization.getExpiresOn&#40;&#41;,\n             copyAuthorization.getResourceId&#40;&#41;,\n             copyAuthorization.getResourceRegion&#40;&#41;\n         &#41;&#41;;\n </pre>\n <!-- end com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorization#string-string -->"
    name: "resourceRegion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CopyAuthorization> getCopyAuthorization(String resourceId, String resourceRegion)"
  desc: "Generate authorization for copying a custom model into the target Form Recognizer resource."
  returns:
    description: "The <xref uid=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CopyAuthorization\"></xref> that could be used to authorize copying model between resources."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization?alt=com.azure.ai.formrecognizer.training.models.CopyAuthorization&text=CopyAuthorization\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorizationWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorizationWithResponse(String resourceId, String resourceRegion)"
  name: "getCopyAuthorizationWithResponse(String resourceId, String resourceRegion)"
  nameWithType: "FormTrainingAsyncClient.getCopyAuthorizationWithResponse(String resourceId, String resourceRegion)"
  summary: "Generate authorization for copying a custom model into the target Form Recognizer resource."
  parameters:
  - description: "Azure Resource Id of the target Form Recognizer resource where the model will be copied to."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Location of the target Form Recognizer resource. A valid Azure region name supported by\n Cognitive Services.\n\n <p><strong>Code sample</strong></p>\n <!-- src_embed com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorizationWithResponse#string-string -->\n <pre>\n String resourceId = &quot;target-resource-Id&quot;;\n String resourceRegion = &quot;target-resource-region&quot;;\n formTrainingAsyncClient.getCopyAuthorizationWithResponse&#40;resourceId, resourceRegion&#41;\n     .subscribe&#40;copyAuthorization -&gt;\n         System.out.printf&#40;&quot;Copy Authorization response status: %s, for model id: %s, access token: %s, &quot;\n                 + &quot;expiration time: %s, target resource Id; %s, target resource region: %s%n&quot;,\n         copyAuthorization.getStatusCode&#40;&#41;,\n         copyAuthorization.getValue&#40;&#41;.getModelId&#40;&#41;,\n         copyAuthorization.getValue&#40;&#41;.getAccessToken&#40;&#41;,\n         copyAuthorization.getValue&#40;&#41;.getExpiresOn&#40;&#41;,\n         copyAuthorization.getValue&#40;&#41;.getResourceId&#40;&#41;,\n         copyAuthorization.getValue&#40;&#41;.getResourceRegion&#40;&#41;\n     &#41;&#41;;\n </pre>\n <!-- end com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCopyAuthorizationWithResponse#string-string -->"
    name: "resourceRegion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CopyAuthorization>> getCopyAuthorizationWithResponse(String resourceId, String resourceRegion)"
  desc: "Generate authorization for copying a custom model into the target Form Recognizer resource. This should be called by the target resource (where the model will be copied to) and the output can be passed as the target parameter into <xref uid=\"com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginCopyModel(java.lang.String,com.azure.ai.formrecognizer.training.models.CopyAuthorization)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormTrainingAsyncClient#beginCopyModel(String, CopyAuthorization)\"></xref>."
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the <xref uid=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CopyAuthorization\"></xref> that could be used to authorize copying\n model between resources."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.CopyAuthorization?alt=com.azure.ai.formrecognizer.training.models.CopyAuthorization&text=CopyAuthorization\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCustomModel(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCustomModel(String modelId)"
  name: "getCustomModel(String modelId)"
  nameWithType: "FormTrainingAsyncClient.getCustomModel(String modelId)"
  summary: "Get detailed information for a specified custom model id."
  parameters:
  - description: "The UUID string format model identifier."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CustomFormModel> getCustomModel(String modelId)"
  desc: "Get detailed information for a specified custom model id.\n\n**Code sample**\n\n```java\nString modelId = \"{model_id}\";\n formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n     System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n     System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n     customFormModel.getSubmodels()\n         .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n             .forEach((key, customFormModelField) ->\n                 System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %f%n\",\n                     key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n\n });\n```"
  returns:
    description: "The detailed information for the specified model."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCustomModelWithResponse(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getCustomModelWithResponse(String modelId)"
  name: "getCustomModelWithResponse(String modelId)"
  nameWithType: "FormTrainingAsyncClient.getCustomModelWithResponse(String modelId)"
  summary: "Get detailed information for a specified custom model id with Http response."
  parameters:
  - description: "The UUID string format model identifier."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CustomFormModel>> getCustomModelWithResponse(String modelId)"
  desc: "Get detailed information for a specified custom model id with Http response.\n\n**Code sample**\n\n```java\nString modelId = \"{model_id}\";\n formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n     System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n     CustomFormModel customFormModel = response.getValue();\n     System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n     System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n     customFormModel.getSubmodels()\n         .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n             .forEach((key, customFormModelField) ->\n                 System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %f%n\",\n                     key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the requested <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"model\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModel?alt=com.azure.ai.formrecognizer.training.models.CustomFormModel&text=CustomFormModel\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getFormRecognizerAsyncClient()"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.getFormRecognizerAsyncClient()"
  name: "getFormRecognizerAsyncClient()"
  nameWithType: "FormTrainingAsyncClient.getFormRecognizerAsyncClient()"
  summary: "Creates a new <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormRecognizerAsyncClient\"></xref> object."
  syntax: "public FormRecognizerAsyncClient getFormRecognizerAsyncClient()"
  desc: "Creates a new <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormRecognizerAsyncClient\"></xref> object. The new `FormTrainingAsyncClient` uses the same request policy pipeline as the `FormTrainingAsyncClient`."
  returns:
    description: "A new <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormRecognizerAsyncClient\"></xref> object."
    type: "<xref href=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient?alt=com.azure.ai.formrecognizer.FormRecognizerAsyncClient&text=FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.listCustomModels()"
  fullName: "com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.listCustomModels()"
  name: "listCustomModels()"
  nameWithType: "FormTrainingAsyncClient.listCustomModels()"
  summary: "List information for each model on the form recognizer account."
  syntax: "public PagedFlux<CustomFormModelInfo> listCustomModels()"
  desc: "List information for each model on the form recognizer account.\n\n**Code sample**\n\n```java\nformTrainingAsyncClient.listCustomModels()\n     .subscribe(customModel ->\n         System.out.printf(\"Model Id: %s, Model status: %s, Created on: %s, Last updated on: %s.%n\",\n             customModel.getModelId(),\n             customModel.getStatus(),\n             customModel.getTrainingStartedOn(),\n             customModel.getTrainingCompletedOn()));\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> of <xref uid=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomFormModelInfo\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.training.models.CustomFormModelInfo?alt=com.azure.ai.formrecognizer.training.models.CustomFormModelInfo&text=CustomFormModelInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides an asynchronous client that contains model management operations that apply to Azure Form Recognizer. Operations allowed by the client are, to creating, training of custom models, delete models, list models and get subscription account information.\n\n**Instantiating an asynchronous Form Training Client**\n\n```java\nFormTrainingAsyncClient formTrainingAsyncClient = new FormTrainingClientBuilder().buildAsyncClient();\n```"
metadata: {}
package: "com.azure.ai.formrecognizer.training"
artifact: com.azure:azure-ai-formrecognizer:3.1.14
