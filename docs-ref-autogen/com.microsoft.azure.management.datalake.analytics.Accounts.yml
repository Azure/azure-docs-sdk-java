### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreate(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: beginCreate(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.beginCreate(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount beginCreate(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreate(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateAsync(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> beginCreateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateAsync(String,String,DataLakeAnalyticsAccount,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> beginCreateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginCreateWithServiceResponseAsync(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginDelete(String resourceGroupName, String accountName)
  name: beginDelete(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginDelete(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginDelete(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteAsync(String resourceGroupName, String accountName)
  name: beginDeleteAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginDeleteAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Accounts.beginDeleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginDeleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdate(String resourceGroupName, String accountName)
  name: beginUpdate(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginUpdate(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount beginUpdate(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdate(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdate(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: beginUpdate(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdate(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount beginUpdate(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdate(String,String,DataLakeAnalyticsAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String resourceGroupName, String accountName)
  name: beginUpdateAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> beginUpdateAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String,String,DataLakeAnalyticsAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> beginUpdateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String,String,DataLakeAnalyticsAccountUpdateParameters,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.beginUpdateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> beginUpdateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateAsync(String,String,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.beginUpdateWithServiceResponseAsync(String,String,DataLakeAnalyticsAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.create(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: create(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.create(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount create(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.create(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> createAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.createAsync(String,String,DataLakeAnalyticsAccount,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.createWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  nameWithType: Accounts.createWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account.the account will be associated with. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to create. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the create Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates the specified Data Lake Analytics account. This supplies the user with computation services for Data Lake Analytics workloads.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> createWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccount parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.createWithServiceResponseAsync(String,String,DataLakeAnalyticsAccount)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.delete(String resourceGroupName, String accountName)
  name: delete(String resourceGroupName, String accountName)
  nameWithType: Accounts.delete(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.delete(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.deleteAsync(String resourceGroupName, String accountName)
  name: deleteAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.deleteAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.deleteAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Accounts.deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to delete </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the delete process for the Data Lake Analytics account object specified by the account name.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.get(String resourceGroupName, String accountName)
  name: get(String resourceGroupName, String accountName)
  nameWithType: Accounts.get(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to retrieve. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets details of the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount get(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.get(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.getAsync(String resourceGroupName, String accountName)
  name: getAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.getAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to retrieve. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets details of the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> getAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.getAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.getAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.getAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to retrieve. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets details of the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> getAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.getAsync(String,String,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.getWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.getWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to retrieve. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets details of the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> getWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.getWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.list()
  name: list()
  nameWithType: Accounts.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> list()
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.list()
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> list(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.list(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync()
  name: listAsync()
  nameWithType: Accounts.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listAsync()
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync()
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listAsync(final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listAsync(final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listAsync(final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listAsync(final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroup(final String resourceGroupName)
  name: listByResourceGroup(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroup(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> listByResourceGroup(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroup(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroup(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String resourceGroupName)
  name: listByResourceGroupAsync(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listByResourceGroupAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String,final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNext(final String nextPageLink)
  name: listByResourceGroupNext(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> listByResourceGroupNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextAsync(final String nextPageLink)
  name: listByResourceGroupNextAsync(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listByResourceGroupNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextAsync(final String,final ServiceFuture<List<DataLakeAnalyticsAccountBasic>>,final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  name: listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  name: listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  nameWithType: Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within a specific resource group. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listByResourceGroupWithServiceResponseAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Accounts.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<DataLakeAnalyticsAccountBasic> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Accounts.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<DataLakeAnalyticsAccountBasic>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  nameWithType: Accounts.listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<DataLakeAnalyticsAccountBasic>> listNextAsync(final String nextPageLink, final ServiceFuture<List<DataLakeAnalyticsAccountBasic>> serviceFuture, final ListOperationCallback<DataLakeAnalyticsAccountBasic> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listNextAsync(final String,final ServiceFuture<List<DataLakeAnalyticsAccountBasic>>,final ListOperationCallback<DataLakeAnalyticsAccountBasic>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Accounts.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Accounts.listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;DataLakeAnalyticsAccountBasic&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountBasic&text=DataLakeAnalyticsAccountBasic" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<DataLakeAnalyticsAccountBasic>>> listWithServiceResponseAsync(final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.listWithServiceResponseAsync(final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.update(String resourceGroupName, String accountName)
  name: update(String resourceGroupName, String accountName)
  nameWithType: Accounts.update(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount update(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.update(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.update(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: update(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.update(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DataLakeAnalyticsAccount object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public DataLakeAnalyticsAccount update(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.update(String,String,DataLakeAnalyticsAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String resourceGroupName, String accountName)
  name: updateAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> updateAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<DataLakeAnalyticsAccount> updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String,String,DataLakeAnalyticsAccountUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> updateAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String,String,DataLakeAnalyticsAccountUpdateParameters,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  nameWithType: Accounts.updateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public ServiceFuture<DataLakeAnalyticsAccount> updateAsync(String resourceGroupName, String accountName, final ServiceCallback<DataLakeAnalyticsAccount> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateAsync(String,String,final ServiceCallback<DataLakeAnalyticsAccount>)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName)
  nameWithType: Accounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> updateWithServiceResponseAsync(String resourceGroupName, String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Accounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  nameWithType: Accounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to update. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the update Data Lake Analytics account operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccountUpdateParameters&text=DataLakeAnalyticsAccountUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DataLakeAnalyticsAccount object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsAccount&text=DataLakeAnalyticsAccount" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the Data Lake Analytics account object specified by the accountName with the contents of the account object.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<DataLakeAnalyticsAccount>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, DataLakeAnalyticsAccountUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Accounts.updateWithServiceResponseAsync(String,String,DataLakeAnalyticsAccountUpdateParameters)
nameWithType: Accounts
syntax: public interface Accounts
type: interface
uid: com.microsoft.azure.management.datalake.analytics.Accounts
fullName: com.microsoft.azure.management.datalake.analytics.Accounts
name: Accounts
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in Accounts. </p>
metadata: {}
