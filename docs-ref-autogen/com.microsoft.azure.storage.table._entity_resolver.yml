items:
- uid: com.microsoft.azure.storage.table._entity_resolver
  id: _entity_resolver
  parent: com.microsoft.azure.storage.table
  children:
  - com.microsoft.azure.storage.table._entity_resolver.resolve(String,String,Date,HashMap<String, EntityProperty>,String)
  href: com.microsoft.azure.storage.table._entity_resolver.yml
  langs:
  - java
  name: EntityResolver<T>
  nameWithType: EntityResolver<T>
  fullName: com.microsoft.azure.storage.table.EntityResolver<T>
  type: Interface
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/EntityResolver.java
      branch: master
      repo: https://github.com/Azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/EntityResolver.java
    startLine: 36
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>An interface to perform client side projection on a retrieved entity. An <xref href="com.microsoft.azure.storage.table._entity_resolver" data-throw-if-not-resolved="false"></xref> instance must implement a  method projecting the entity data represented by the parameters passed in as a new instance of the type specified by the type parameter. </p>

    <p>This interface is useful for converting directly from table entity data to a client object type without requiring a separate table entity class type that deserializes every property individually. For example, a client can perform a client side projection of a <emphasis>Customer</emphasis> entity by simply returning the  for the <emphasis>CustomerName</emphasis> property of each entity. The result of this projection will be a collection of s containing each customer name.</p>

    <p></p>
  syntax: &o1
    content: public interface EntityResolver<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>The type of the object that the resolver produces. </p>
- uid: com.microsoft.azure.storage.table._entity_resolver.resolve(String,String,Date,HashMap<String, EntityProperty>,String)
  id: resolve(String,String,Date,HashMap<String, EntityProperty>,String)
  parent: com.microsoft.azure.storage.table._entity_resolver
  href: com.microsoft.azure.storage.table._entity_resolver.yml
  langs:
  - java
  name: resolve(String partitionKey, String rowKey, Date timeStamp, HashMap<String, EntityProperty> properties, String etag)
  nameWithType: EntityResolver<T>.resolve(String partitionKey, String rowKey, Date timeStamp, HashMap<String, EntityProperty> properties, String etag)
  fullName: T com.microsoft.azure.storage.table.EntityResolver<T>.resolve(String partitionKey, String rowKey, Date timeStamp, HashMap<String, EntityProperty> properties, String etag)
  overload: com.microsoft.azure.storage.table._entity_resolver.resolve*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/table/EntityResolver.java
    startLine: 58
  package: com.microsoft.azure.storage.table
  summary: >-
    <p>Returns a reference to a new object instance of type  containing a projection of the specified table entity data.</p>

    <p></p>
  syntax:
    content: public T resolve(String partitionKey, String rowKey, Date timeStamp, HashMap<String, EntityProperty> properties, String etag)
    parameters:
    - id: partitionKey
      type: "26831127"
      description: <p>A <code>String</code> containing the PartitionKey value for the entity. </p>
    - id: rowKey
      type: "26831127"
      description: <p>A <code>String</code> containing the RowKey value for the entity. </p>
    - id: timeStamp
      type: "12977444"
      description: <p>A <code>java.util.Date</code> containing the Timestamp value for the entity. </p>
    - id: properties
      type: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
      description: <p>The <code>java.util.HashMap</code> of <code>String</code> property names to <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> data type and value pairs representing the table entity data. </p>
    - id: etag
      type: "26831127"
      description: <p>A <code>String</code> containing the Etag for the entity. </p>
    return:
      type: 8ce1ecb9
      description: <p>A reference to an object instance of type <code>T</code> constructed as a projection of the table entity parameters. </p>
  exceptions:
  - type: com.microsoft.azure.storage._storage_exception
    description: <p>if an error occurs during the operation. </p>
references:
- uid: 8ce1ecb9
  spec.java:
  - name: T
    fullName: T
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "12977444"
  spec.java:
  - name: Date
    fullName: Date
- uid: 292b5718com.microsoft.azure.storage.table._entity_propertya08ddfce
  spec.java:
  - name: 'HashMap<String, '
    fullName: 'HashMap<String, '
  - uid: com.microsoft.azure.storage.table._entity_property
    name: EntityProperty
    fullName: com.microsoft.azure.storage.table.EntityProperty
    href: com.microsoft.azure.storage.table._entity_property.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.storage.table._entity_resolver.resolve*
  name: resolve
  nameWithType: EntityResolver<T>.resolve
  fullName: T com.microsoft.azure.storage.table.EntityResolver<T>.resolve
  package: com.microsoft.azure.storage.table
- uid: com.microsoft.azure.storage.table._entity_property
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table._entity_property.yml
  name: EntityProperty
  nameWithType: EntityProperty
  fullName: com.microsoft.azure.storage.table.EntityProperty
  type: Class
  summary: >-
    <p>A class which represents a single typed property value in a table entity. An <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> stores the data type as an <xref href="com.microsoft.azure.storage.table._edm_type" data-throw-if-not-resolved="false"></xref>. The value, which may be  for object types, but not for primitive types, is serialized and stored as a . </p>

    <p>

      <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> provides overloaded constructors and overloads of the  method for supported value types. Each overloaded constructor or  method sets the <xref href="com.microsoft.azure.storage.table._edm_type" data-throw-if-not-resolved="false"></xref> and serializes the value appropriately based on the parameter type. </p>

    <p>Use one of the <emphasis>Type</emphasis> methods to deserialize an <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> as the appropriate Java type. The method will throw a <ref refid="" kindref="compound">ParseException</ref> or <ref refid="" kindref="compound">IllegalArgumentException</ref> if the <xref href="com.microsoft.azure.storage.table._entity_property" data-throw-if-not-resolved="false"></xref> cannot be deserialized as the Java type. </p>
  syntax:
    content: public class EntityProperty
- uid: com.microsoft.azure.storage._storage_exception
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage._storage_exception.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: <p>Represents an exception for the Microsoft Azure storage service. </p>
  syntax:
    content: public class StorageException
- uid: com.microsoft.azure.storage.table._entity_resolver
  parent: com.microsoft.azure.storage.table
  href: com.microsoft.azure.storage.table._entity_resolver.yml
  name: EntityResolver<T>
  nameWithType: EntityResolver<T>
  fullName: com.microsoft.azure.storage.table.EntityResolver<T>
  type: Interface
  summary: >-
    <p>An interface to perform client side projection on a retrieved entity. An <xref href="com.microsoft.azure.storage.table._entity_resolver" data-throw-if-not-resolved="false"></xref> instance must implement a  method projecting the entity data represented by the parameters passed in as a new instance of the type specified by the type parameter. </p>

    <p>This interface is useful for converting directly from table entity data to a client object type without requiring a separate table entity class type that deserializes every property individually. For example, a client can perform a client side projection of a <emphasis>Customer</emphasis> entity by simply returning the  for the <emphasis>CustomerName</emphasis> property of each entity. The result of this projection will be a collection of s containing each customer name.</p>

    <p></p>
  syntax: *o1
