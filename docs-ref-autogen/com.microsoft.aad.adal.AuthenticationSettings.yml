### YamlMime:JavaEnum
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="java.lang.Enum&lt;AuthenticationSettings&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.aad.adal._authentication_settings_1a0baa345cd82945efa4a8cdd725e618a3
methods:
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getActivityPackageName()
  name: getActivityPackageName()
  nameWithType: AuthenticationSettings.getActivityPackageName()
  returns:
    description: <p>Package name for activity </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>get package name to setup intent for AuthenticationActivity.</p>

    <p></p>
  syntax: public String getActivityPackageName()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getActivityPackageName()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getBrokerPackageName()
  name: getBrokerPackageName()
  nameWithType: AuthenticationSettings.getBrokerPackageName()
  returns:
    description: <p>packagename </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets packagename for broker app that installed authenticator.</p>

    <p></p>
  syntax: public String getBrokerPackageName()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getBrokerPackageName()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getBrokerSignature()
  name: getBrokerSignature()
  nameWithType: AuthenticationSettings.getBrokerSignature()
  returns:
    description: <p>signature </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets broker signature for broker app that installed authenticator.</p>

    <p></p>
  syntax: public String getBrokerSignature()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getBrokerSignature()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getConnectTimeOut()
  name: getConnectTimeOut()
  nameWithType: AuthenticationSettings.getConnectTimeOut()
  returns:
    description: <p>connect timeout </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the connect timeout.</p>

    <p></p>
  syntax: public int getConnectTimeOut()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getConnectTimeOut()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getDeviceCertificateProxy()
  name: getDeviceCertificateProxy()
  nameWithType: AuthenticationSettings.getDeviceCertificateProxy()
  returns:
    description: <p>Class </p>
    type: <xref href="Class%3C%3F%3E?alt=Class<?>&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>get class for work place join related API. This is only used from Authenticator side.</p>

    <p></p>
  syntax: public Class<?> getDeviceCertificateProxy()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getDeviceCertificateProxy()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getDisableWebViewHardwareAcceleration()
  name: getDisableWebViewHardwareAcceleration()
  nameWithType: AuthenticationSettings.getDisableWebViewHardwareAcceleration()
  returns:
    description: <p>true if WebView is hardwareAccelerated otherwise false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Method to check whether WebView used in <xref uid="com.microsoft.aad.adal.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref> and <xref uid="" data-throw-if-not-resolved="false">AuthenticationDialog</xref> would be hardware accelerated or not.</p>

    <p></p>
  syntax: public boolean getDisableWebViewHardwareAcceleration()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getDisableWebViewHardwareAcceleration()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getExpirationBuffer()
  name: getExpirationBuffer()
  nameWithType: AuthenticationSettings.getExpirationBuffer()
  returns:
    description: <p>the amount of buffer that is provided to the expiration time. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets expiration buffer.</p>

    <p></p>
  syntax: public int getExpirationBuffer()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getExpirationBuffer()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getReadTimeOut()
  name: getReadTimeOut()
  nameWithType: AuthenticationSettings.getReadTimeOut()
  returns:
    description: <p>read timeout </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the read timeout.</p>

    <p></p>
  syntax: public int getReadTimeOut()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getReadTimeOut()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getSecretKeyData()
  name: getSecretKeyData()
  nameWithType: AuthenticationSettings.getSecretKeyData()
  returns:
    description: <p>byte[] secret data </p>
    type: <xref href="byte+%5B%5D?alt=byte []&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get bytes to derive secretKey to use in encrypt/decrypt.</p>

    <p></p>
  syntax: public byte [] getSecretKeyData()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getSecretKeyData()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getSharedPrefPackageName()
  name: getSharedPrefPackageName()
  nameWithType: AuthenticationSettings.getSharedPrefPackageName()
  returns:
    description: <p>package name provided for shared preferences </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets package name provided for shared preferences.</p>

    <p></p>
  syntax: public String getSharedPrefPackageName()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getSharedPrefPackageName()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getSkipBroker()
  name: getSkipBroker()
  nameWithType: AuthenticationSettings.getSkipBroker()
  returns:
    description: <p>true if broker is not used, false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000004">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>As of release 1.1.14, replaced by <xref uid="com.microsoft.aad.adal.AuthenticationSettings.getUseBroker()" data-throw-if-not-resolved="false">getUseBroker()</xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public boolean getSkipBroker()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getSkipBroker()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.getUseBroker()
  name: getUseBroker()
  nameWithType: AuthenticationSettings.getUseBroker()
  returns:
    description: <p>true if broker is used. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get broker usage.</p>

    <p></p>
  syntax: public boolean getUseBroker()
  uid: com.microsoft.aad.adal.AuthenticationSettings.getUseBroker()
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setActivityPackageName(String activityPackageName)
  name: setActivityPackageName(String activityPackageName)
  nameWithType: AuthenticationSettings.setActivityPackageName(String activityPackageName)
  parameters:
  - description: <p>activity to use from different package </p>
    name: activityPackageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>set package name to setup intent for AuthenticationActivity.</p>

    <p></p>
  syntax: public void setActivityPackageName(String activityPackageName)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setActivityPackageName(String)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setBrokerPackageName(String packageName)
  name: setBrokerPackageName(String packageName)
  nameWithType: AuthenticationSettings.setBrokerPackageName(String packageName)
  parameters:
  - description: <p>package name related to broker </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets package name for broker app that installed authenticator.</p>

    <p></p>
  syntax: public void setBrokerPackageName(String packageName)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setBrokerPackageName(String)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setBrokerSignature(String brokerSignature)
  name: setBrokerSignature(String brokerSignature)
  nameWithType: AuthenticationSettings.setBrokerSignature(String brokerSignature)
  parameters:
  - description: <p>Signature for broker </p>
    name: brokerSignature
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets broker app info for ADAL to use.</p>

    <p></p>
  syntax: public void setBrokerSignature(String brokerSignature)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setBrokerSignature(String)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setConnectTimeOut(int timeOutMillis)
  name: setConnectTimeOut(int timeOutMillis)
  nameWithType: AuthenticationSettings.setConnectTimeOut(int timeOutMillis)
  parameters:
  - description: <p>the non-negative connect timeout in milliseconds. </p>
    name: timeOutMillis
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum time in milliseconds to wait while connecting. Connecting to a server will fail with a SocketTimeoutException if the timeout elapses before a connection is established. Default value is 30000 milliseconds.</p>

    <p></p>
  syntax: public void setConnectTimeOut(int timeOutMillis)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setConnectTimeOut(int)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setDeviceCertificateProxyClass(Class clazz)
  name: setDeviceCertificateProxyClass(Class clazz)
  nameWithType: AuthenticationSettings.setDeviceCertificateProxyClass(Class clazz)
  parameters:
  - description: <p>class for workplace join </p>
    name: clazz
    type: <xref href="Class?alt=Class&text=Class" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>set class for work place join related API. This is only used from Authenticator side.</p>

    <p></p>
  syntax: public void setDeviceCertificateProxyClass(Class clazz)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setDeviceCertificateProxyClass(Class)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setDisableWebViewHardwareAcceleration(boolean enable)
  name: setDisableWebViewHardwareAcceleration(boolean enable)
  nameWithType: AuthenticationSettings.setDisableWebViewHardwareAcceleration(boolean enable)
  parameters:
  - description: <p>if true, WebView would be hardwareAccelerated else it would be disable. </p>
    name: enable
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Method to enable/disable WebView hardware acceleration used in <xref uid="com.microsoft.aad.adal.AuthenticationActivity" data-throw-if-not-resolved="false">AuthenticationActivity</xref> and <xref uid="" data-throw-if-not-resolved="false">AuthenticationDialog</xref>. By default hardware acceleration is enable in WebView.</p>

    <p></p>
  syntax: public void setDisableWebViewHardwareAcceleration(boolean enable)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setDisableWebViewHardwareAcceleration(boolean)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setExpirationBuffer(int expirationBuffer)
  name: setExpirationBuffer(int expirationBuffer)
  nameWithType: AuthenticationSettings.setExpirationBuffer(int expirationBuffer)
  parameters:
  - description: <p>the time buffer provided to expiration time. </p>
    name: expirationBuffer
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>When checking access token expiration, it will check if the time to expiration is less than this value(in seconds). Example: Set to 300 to give 5min buffer. Token with Expiry time of 12:04 will say expired when actual time is 12:00 with 5min buffer.</p>

    <p></p>
  syntax: public void setExpirationBuffer(int expirationBuffer)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setExpirationBuffer(int)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setReadTimeOut(int timeOutMillis)
  name: setReadTimeOut(int timeOutMillis)
  nameWithType: AuthenticationSettings.setReadTimeOut(int timeOutMillis)
  parameters:
  - description: <p>the read timeout in milliseconds. Non-negative </p>
    name: timeOutMillis
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum time to wait for an input stream read to complete before giving up. Reading will fail with a SocketTimeoutException if the timeout elapses before data becomes available. The default value is 30000.</p>

    <p></p>
  syntax: public void setReadTimeOut(int timeOutMillis)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setReadTimeOut(int)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setSecretKey(byte[] rawKey)
  name: setSecretKey(byte[] rawKey)
  nameWithType: AuthenticationSettings.setSecretKey(byte[] rawKey)
  parameters:
  - description: <p>App related key to use in encrypt/decrypt </p>
    name: rawKey
    type: <xref href="byte+%5B%5D?alt=byte []&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>set raw bytes to derive secretKey to use in encrypt/decrypt. KeySpec algorithm is AES.</p>

    <p></p>
  syntax: public void setSecretKey(byte[] rawKey)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setSecretKey(byte [])
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setSharedPrefPackageName(String packageNameForSharedFile)
  name: setSharedPrefPackageName(String packageNameForSharedFile)
  nameWithType: AuthenticationSettings.setSharedPrefPackageName(String packageNameForSharedFile)
  parameters:
  - description: <p>Package name of other app </p>
    name: packageNameForSharedFile
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets package name to use <xref uid="com.microsoft.aad.adal.DefaultTokenCacheStore" data-throw-if-not-resolved="false">DefaultTokenCacheStore</xref> with sharedUserId apps.</p>

    <p></p>
  syntax: public void setSharedPrefPackageName(String packageNameForSharedFile)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setSharedPrefPackageName(String)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setSkipBroker(boolean skip)
  name: setSkipBroker(boolean skip)
  nameWithType: AuthenticationSettings.setSkipBroker(boolean skip)
  parameters:
  - description: <p>true if broker has to be skipped, false otherwise </p>
    name: skip
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xrefsect id="deprecated_1_deprecated000005">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>As of release 1.1.14, replaced by <xref uid="com.microsoft.aad.adal.AuthenticationSettings.setUseBroker(boolean)" data-throw-if-not-resolved="false">setUseBroker(boolean)</xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public void setSkipBroker(boolean skip)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setSkipBroker(boolean)
- fullName: com.microsoft.aad.adal.AuthenticationSettings.setUseBroker(boolean useBroker)
  name: setUseBroker(boolean useBroker)
  nameWithType: AuthenticationSettings.setUseBroker(boolean useBroker)
  parameters:
  - description: <p>True to use broker </p>
    name: useBroker
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set flag to use or skip broker. By default, the flag value is false and ADAL will not talk to broker.</p>

    <p></p>
  syntax: public void setUseBroker(boolean useBroker)
  uid: com.microsoft.aad.adal.AuthenticationSettings.setUseBroker(boolean)
nameWithType: AuthenticationSettings
syntax: public enum AuthenticationSettings
uid: com.microsoft.aad.adal.AuthenticationSettings
name: AuthenticationSettings
package: com.microsoft.aad.adal
summary: <p>Settings to be used in AuthenticationContext. </p>
metadata: {}
