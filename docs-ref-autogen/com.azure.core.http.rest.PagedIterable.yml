### YamlMime:JavaType
uid: "com.azure.core.http.rest.PagedIterable"
fullName: "com.azure.core.http.rest.PagedIterable<T>"
name: "PagedIterable<T>"
nameWithType: "PagedIterable<T>"
summary: "This class provides utility to iterate over <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.IterableStream?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.http.rest.PagedIterableBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterator()"
- "com.azure.core.util.paging.ContinuablePagedIterable.stream()"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PagedIterable<T> extends PagedIterableBase<T,PagedResponse<T>>"
constructors:
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(com.azure.core.http.rest.PagedFlux<T>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  name: "PagedIterable(PagedFlux<T> pagedFlux)"
  nameWithType: "PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  summary: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
  parameters:
  - description: "to use as iterable"
    name: "pagedFlux"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable(PagedFlux<T> pagedFlux)"
  desc: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
methods:
- uid: "com.azure.core.http.rest.PagedIterable.<S>mapPage(java.util.function.Function<T,S>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  name: "<S>mapPage(Function<T,S> mapper)"
  nameWithType: "PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  summary: "Maps this Paged<wbr>Iterable instance of T to a Paged<wbr>Iterable instance of type S as per the provided mapper function."
  parameters:
  - description: "The mapper function to convert from type T to type S."
    name: "mapper"
    type: "<xref href=\"java.util.function.Function?alt=java.util.function.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<S> <S>mapPage(Function<T,S> mapper)"
  desc: "Maps this PagedIterable instance of T to a PagedIterable instance of type S as per the provided mapper function."
  returns:
    description: "A PagedIterable of type S."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "The type of value contained in this <xref uid=\"IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref>."
  name: "T"
desc: "This class provides utility to iterate over <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces.\n\n**Code sample using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> by page**\n\n```java\n// process the streamByPage\n pagedIterableResponse.streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page**\n\n```java\n// process the iterableByPage\n pagedIterableResponse.iterableByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page and while loop**\n\n```java\n// iterate over each page\n for (PagedResponse<Integer> resp : pagedIterableResponse.iterableByPage()) {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n }\n```"
metadata: {}
package: "com.azure.core.http.rest"
artifact: com.azure:azure-core:1.31.0
