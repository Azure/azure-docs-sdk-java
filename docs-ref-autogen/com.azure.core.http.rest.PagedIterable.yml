### YamlMime:JavaType
uid: "com.azure.core.http.rest.PagedIterable"
fullName: "com.azure.core.http.rest.PagedIterable<T>"
name: "PagedIterable<T>"
nameWithType: "PagedIterable<T>"
summary: "This class provides utility to iterate over <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.IterableStream?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.http.rest.PagedIterableBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.azure.core.util.IterableStream?alt=com.azure.core.util.IterableStream&text=IterableStream\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)?alt=com.azure.core.util.IterableStream.<T>of&text=<T>of\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable?alt=com.azure.core.util.paging.ContinuablePagedIterable&text=ContinuablePagedIterable\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()?alt=com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage&text=iterableByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)?alt=com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage&text=iterableByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)?alt=com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage&text=iterableByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)?alt=com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage&text=iterableByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.iterator()?alt=com.azure.core.util.paging.ContinuablePagedIterable.iterator&text=iterator\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.stream()?alt=com.azure.core.util.paging.ContinuablePagedIterable.stream&text=stream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()?alt=com.azure.core.util.paging.ContinuablePagedIterable.streamByPage&text=streamByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)?alt=com.azure.core.util.paging.ContinuablePagedIterable.streamByPage&text=streamByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)?alt=com.azure.core.util.paging.ContinuablePagedIterable.streamByPage&text=streamByPage\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)?alt=com.azure.core.util.paging.ContinuablePagedIterable.streamByPage&text=streamByPage\" data-throw-if-not-resolved=\"False\" />"
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **PagedIterable<T>**</br> extends <xref href=\"com.azure.core.http.rest.PagedIterableBase?alt=com.azure.core.http.rest.PagedIterableBase&text=PagedIterableBase\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
constructors:
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(com.azure.core.http.rest.PagedFlux<T>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  name: "PagedIterable(PagedFlux<T> pagedFlux)"
  nameWithType: "PagedIterable<T>.PagedIterable(PagedFlux<T> pagedFlux)"
  summary: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
  parameters:
  - description: "to use as iterable"
    name: "pagedFlux"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable(PagedFlux<T> pagedFlux)"
  desc: "Creates instance given <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(java.util.function.Function<java.lang.Integer,com.azure.core.http.rest.PagedResponse<T>>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever)"
  name: "PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever)"
  nameWithType: "PagedIterable<T>.PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that consists of only a single page with a given element count."
  parameters:
  - description: "Function that retrieves the first page."
    name: "firstPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>,<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that consists of only a single page with a given element count.\n\n**Code sample**\n\n```java\n// A function that fetches the single page of data from a source/service.\n Function<Integer, Mono<PagedResponse<Integer>>> singlePageRetriever = pageSize ->\n     getFirstPageWithSize(pageSize);\n\n PagedFlux<Integer> singlePageFluxWithPageSize = new PagedFlux<Integer>(singlePageRetriever);\n```"
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(java.util.function.Function<java.lang.Integer,com.azure.core.http.rest.PagedResponse<T>>,java.util.function.BiFunction<java.lang.String,java.lang.Integer,com.azure.core.http.rest.PagedResponse<T>>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever, BiFunction<String,Integer,PagedResponse<T>> nextPageRetriever)"
  name: "PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever, BiFunction<String,Integer,PagedResponse<T>> nextPageRetriever)"
  nameWithType: "PagedIterable<T>.PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever, BiFunction<String,Integer,PagedResponse<T>> nextPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that is capable of retrieving multiple pages with of a given page size."
  parameters:
  - description: "Function that retrieves the first page."
    name: "firstPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>,<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "BiFunction that retrieves the next page given a continuation token and page size."
    name: "nextPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/BiFunction.html\">BiFunction</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>,<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public PagedIterable(Function<Integer,PagedResponse<T>> firstPageRetriever, BiFunction<String,Integer,PagedResponse<T>> nextPageRetriever)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that is capable of retrieving multiple pages with of a given page size.\n\n**Code sample**\n\n```java\n// A function that fetches the first page of data from a source/service.\n Function<Integer, PagedResponse<Integer>> firstPageRetriever = pageSize -> getPage(pageSize);\n\n // A function that fetches subsequent pages of data from a source/service given a continuation token.\n BiFunction<String, Integer, PagedResponse<Integer>> nextPageRetriever = (continuationToken, pageSize) ->\n     getPage(continuationToken, pageSize);\n\n PagedIterable<Integer> pagedIterableWithPageSize = new PagedIterable<>(firstPageRetriever, nextPageRetriever);\n```"
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(java.util.function.Supplier<com.azure.core.http.rest.PagedResponse<T>>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever)"
  name: "PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever)"
  nameWithType: "PagedIterable<T>.PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that consists of only a single page."
  parameters:
  - description: "Supplier that retrieves the first page."
    name: "firstPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html\">Supplier</a>&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> that consists of only a single page. This constructor takes a `Supplier` that return the single page of `T`.\n\n**Code sample**\n\n```java\n// A supplier that fetches the first page of data from source/service\n Supplier<PagedResponse<Integer>> firstPageRetrieverFunction = () -> getFirstPage();\n\n PagedIterable<Integer> pagedIterableInstance = new PagedIterable<>(firstPageRetrieverFunction,\n     nextPageRetriever);\n```"
- uid: "com.azure.core.http.rest.PagedIterable.PagedIterable(java.util.function.Supplier<com.azure.core.http.rest.PagedResponse<T>>,java.util.function.Function<java.lang.String,com.azure.core.http.rest.PagedResponse<T>>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever, Function<String,PagedResponse<T>> nextPageRetriever)"
  name: "PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever, Function<String,PagedResponse<T>> nextPageRetriever)"
  nameWithType: "PagedIterable<T>.PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever, Function<String,PagedResponse<T>> nextPageRetriever)"
  summary: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
  parameters:
  - description: "Supplier that retrieves the first page"
    name: "firstPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html\">Supplier</a>&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "Function that retrieves the next page given a continuation token"
    name: "nextPageRetriever"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public PagedIterable(Supplier<PagedResponse<T>> firstPageRetriever, Function<String,PagedResponse<T>> nextPageRetriever)"
  desc: "Creates an instance of <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>. The constructor takes a `Supplier` and `Function`. The `Supplier` returns the first page of `T`, the `Function` retrieves subsequent pages of `T`.\n\n**Code sample**\n\n```java\n// A supplier that fetches the first page of data from source/service\n Supplier<PagedResponse<Integer>> firstPageRetriever = () -> getFirstPage();\n\n // A function that fetches subsequent pages of data from source/service given a continuation token\n Function<String, PagedResponse<Integer>> nextPageRetriever =\n     continuationToken -> getNextPage(continuationToken);\n\n PagedIterable<Integer> pagedIterable = new PagedIterable<>(firstPageRetriever,\n     nextPageRetriever);\n```"
methods:
- uid: "com.azure.core.http.rest.PagedIterable.<S>mapPage(java.util.function.Function<T,S>)"
  fullName: "com.azure.core.http.rest.PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  name: "<S>mapPage(Function<T,S> mapper)"
  nameWithType: "PagedIterable<T>.<S>mapPage(Function<T,S> mapper)"
  summary: "Maps this Paged<wbr>Iterable instance of T to a Paged<wbr>Iterable instance of type S as per the provided mapper function."
  parameters:
  - description: "The mapper function to convert from type T to type S."
    name: "mapper"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PagedIterable<S> <S>mapPage(Function<T,S> mapper)"
  desc: "Maps this PagedIterable instance of T to a PagedIterable instance of type S as per the provided mapper function."
  returns:
    description: "A PagedIterable of type S."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
typeParameters:
- description: "The type of value contained in this <xref uid=\"IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref>."
  name: "T"
desc: "This class provides utility to iterate over <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces.\n\n**Code sample using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> by page**\n\n```java\n// process the streamByPage\n pagedIterableResponse.streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page**\n\n```java\n// process the iterableByPage\n pagedIterableResponse.iterableByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page and while loop**\n\n```java\n// iterate over each page\n for (PagedResponse<Integer> resp : pagedIterableResponse.iterableByPage()) {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getElements().forEach(value -> System.out.printf(\"Response value is %d %n\", value));\n }\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page and continuation token**\n\n```java\nString continuationToken = getContinuationToken();\n pagedIterable\n     .iterableByPage(continuationToken)\n     .forEach(page -> System.out.printf(\"Processing page containing item values: %s%n\",\n         page.getElements().stream().map(String::valueOf).collect(Collectors.joining(\", \"))));\n```"
metadata: {}
package: "com.azure.core.http.rest"
artifact: com.azure:azure-core:1.34.0
