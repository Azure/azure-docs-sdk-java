### YamlMime:JavaType
uid: "com.azure.identity.ChainedTokenCredential"
fullName: "com.azure.identity.ChainedTokenCredential"
name: "ChainedTokenCredential"
nameWithType: "ChainedTokenCredential"
summary: "The Chained<wbr>Token<wbr>Credential is a convenience credential that allows users to chain together a set of Token<wbr>Credential together."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **ChainedTokenCredential**</br> implements <xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.azure.identity.ChainedTokenCredential.getToken(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.identity.ChainedTokenCredential.getToken(TokenRequestContext request)"
  name: "getToken(TokenRequestContext request)"
  nameWithType: "ChainedTokenCredential.getToken(TokenRequestContext request)"
  summary: "Sequentially calls <xref uid=\"com.azure.core.credential.TokenCredential.getToken*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential#getToken(TokenRequestContext)\"></xref> on all the specified credentials, returning the first successfully obtained <xref uid=\"com.azure.core.credential.AccessToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessToken\"></xref>."
  parameters:
  - description: "the details of the token request"
    name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AccessToken> getToken(TokenRequestContext request)"
  desc: "Sequentially calls <xref uid=\"com.azure.core.credential.TokenCredential.getToken*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential#getToken(TokenRequestContext)\"></xref> on all the specified credentials, returning the first successfully obtained <xref uid=\"com.azure.core.credential.AccessToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessToken\"></xref>. This method is called automatically by Azure SDK client libraries. You may call this method directly, but you must also handle token caching and token refreshing."
  returns:
    description: "a Publisher that emits a single access token"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.identity.ChainedTokenCredential.getTokenSync(com.azure.core.credential.TokenRequestContext)"
  fullName: "com.azure.identity.ChainedTokenCredential.getTokenSync(TokenRequestContext request)"
  name: "getTokenSync(TokenRequestContext request)"
  nameWithType: "ChainedTokenCredential.getTokenSync(TokenRequestContext request)"
  parameters:
  - name: "request"
    type: "<xref href=\"com.azure.core.credential.TokenRequestContext?alt=com.azure.core.credential.TokenRequestContext&text=TokenRequestContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AccessToken getTokenSync(TokenRequestContext request)"
  returns:
    type: "<xref href=\"com.azure.core.credential.AccessToken?alt=com.azure.core.credential.AccessToken&text=AccessToken\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The ChainedTokenCredential is a convenience credential that allows users to chain together a set of TokenCredential together. The credential executes each credential in the chain sequentially and returns the token from the first credential in the chain that successfully authenticates.\n\n**Sample: Construct a ChainedTokenCredential.**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.identity.ChainedTokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ChainedTokenCredential\"></xref>, using the <xref uid=\"com.azure.identity.ChainedTokenCredentialBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ChainedTokenCredentialBuilder\"></xref> to configure it. The sample below tries silent username+password login tried first, then interactive browser login as needed (e.g. when 2FA is turned on in the directory). Once this credential is created, it may be passed into the builder of many of the Azure SDK for Java client builders as the 'credential' parameter.\n\n```java\nTokenCredential usernamePasswordCredential = new UsernamePasswordCredentialBuilder()\n     .clientId(clientId)\n     .username(fakeUsernamePlaceholder)\n     .password(fakePasswordPlaceholder)\n     .build();\n TokenCredential interactiveBrowserCredential = new InteractiveBrowserCredentialBuilder()\n     .clientId(clientId)\n     .port(8765)\n     .build();\n TokenCredential credential = new ChainedTokenCredentialBuilder()\n     .addLast(usernamePasswordCredential)\n     .addLast(interactiveBrowserCredential)\n     .build();\n```"
implements:
- "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.identity"
artifact: com.azure:azure-identity:1.11.1
