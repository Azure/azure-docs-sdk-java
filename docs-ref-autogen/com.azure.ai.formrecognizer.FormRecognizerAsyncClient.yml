### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  id: FormRecognizerAsyncClient
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  langs:
  - java
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt data from documents, extracting layout information and analyzing custom forms for predefined data.


    **Instantiating an asynchronous Form Recognizer Client**


    ```java

    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildAsyncClient();
    ```
  syntax:
    content: public final class FormRecognizerAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  id: FormRecognizerAsyncClient(com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl,com.azure.ai.formrecognizer.FormRecognizerServiceVersion)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerAsyncClient" data-throw-if-not-resolved="false">FormRecognizerAsyncClient</xref> that sends requests to the Form Recognizer service's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline(com.azure.core.http.HttpPipeline)" data-throw-if-not-resolved="false">FormRecognizerClientBuilder#pipeline(HttpPipeline)</xref> http pipeline\}.
  syntax:
    content: " FormRecognizerAsyncClient(FormRecognizerClientImpl service, FormRecognizerServiceVersion serviceVersion)"
    parameters:
    - id: service
      type: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
      description: The versions of Azure Form Recognizer supported by this client library.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
         been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  id: beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.


    **Code sample**


    ```java

    File form = new File("{local/file_path/fileName.jpg}");
     // Utility method to convert input stream to Byte buffer
     Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));
     // if training polling operation completed, retrieve the final result.
     formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length(),
         new RecognizeContentOptions()
             .setContentType(FormContentType.APPLICATION_PDF)
             .setPollInterval(Duration.ofSeconds(5)))
         .flatMap(AsyncPollResponse::getFinalResult)
         .flatMap(Flux::fromIterable)
         .subscribe(formPage -> {
             System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             formPage.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->
                 System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
    parameters:
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeContentOptions
      type: com.azure.ai.formrecognizer.models.RecognizeContentOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when recognizing content/layout on a form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
         been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data from documents using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{formUrl}";
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl)
         // if training polling operation completed, retrieve the final result.
         .flatMap(AsyncPollResponse::getFinalResult)
         .flatMap(Flux::fromIterable)
         .subscribe(formPage -> {
             System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             formPage.getTables().forEach(formTable ->
                 formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize content operation until it has completed, has failed, or
         has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  id: beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes layout data from documents using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{formUrl}";
     // if training polling operation completed, retrieve the final result.
     formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl,
         new RecognizeContentOptions().setPollInterval(Duration.ofSeconds(5)))
         .flatMap(AsyncPollResponse::getFinalResult)
         .flatMap(Flux::fromIterable)
         .subscribe(formPage -> {
             System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             formPage.getTables().forEach(formTable ->
                 formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeContentOptions
      type: com.azure.ai.formrecognizer.models.RecognizeContentOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when recognizing content/layout on a form.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognized content/layout operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms(modelId, buffer, form.length())\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  id: beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n \n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms(modelId, buffer, form.length(),\n     new RecognizeCustomFormsOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldName, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldName);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: form
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeCustomFormsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
      description: >-
        The additional configurable
         <xref uid="com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when recognizing custom forms.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n \n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{formUrl}\";\n String modelId = \"{model_id}\";\n boolean includeFieldElements = true;\n \n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl,\n     new RecognizeCustomFormsOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(10)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeCustomFormsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
      description: >-
        The additional configurable
         <xref uid="com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when recognizing custom forms.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `receipt` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{file_source_url}\");\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n             .subscribe(recognizedReceipts -> {\n                 for (int i = 0; i < recognizedReceipts.size(); i++) {\n                     RecognizedForm recognizedForm = recognizedReceipts.get(i);\n                     Map<String, FormField> recognizedFields = recognizedForm.getFields();\n                     System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n                     FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n                     if (merchantNameField != null) {\n                         if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                             String merchantName = merchantNameField.getValue().asString();\n                             System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                                 merchantName, merchantNameField.getConfidence());\n                         }\n                     }\n \n                     FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                     if (merchantPhoneNumberField != null) {\n                         if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                             String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                             System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                                 merchantAddress, merchantPhoneNumberField.getConfidence());\n                         }\n                     }\n \n                     FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n                     if (transactionDateField != null) {\n                         if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                             LocalDate transactionDate = transactionDateField.getValue().asDate();\n                             System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                                 transactionDate, transactionDateField.getConfidence());\n                         }\n                     }\n \n                     FormField receiptItemsField = recognizedFields.get(\"Items\");\n                     if (receiptItemsField != null) {\n                         System.out.printf(\"Receipt Items: %n\");\n                         if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                             List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                             receiptItems.stream()\n                                 .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                                 .map(formField -> formField.getValue().asMap())\n                                 .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                                     if (\"Quantity\".equals(key)) {\n                                         if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                             Float quantity = formField.getValue().asFloat();\n                                             System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                                 quantity, formField.getConfidence());\n                                         }\n                                     }\n                                 }));\n                         }\n                     }\n                 }\n             });\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)
    parameters:
    - id: receipt
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  id: beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{local/file_path/fileName.jpg}\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length(),\n     new RecognizeReceiptsOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedReceipts -> {\n         for (int i = 0; i < recognizedReceipts.size(); i++) {\n             RecognizedForm recognizedForm = recognizedReceipts.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                     String merchantName = merchantNameField.getValue().asString();\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                     String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                     LocalDate transactionDate = transactionDateField.getValue().asDate();\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                     List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                     receiptItems.stream()\n                         .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                         .map(formField -> formField.getValue().asMap())\n                         .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                     Float quantity = formField.getValue().asFloat();\n                                     System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)
    parameters:
    - id: receipt
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The data of the document to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeReceiptsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a receipt.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receiptUrl}\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedReceipts -> {\n         for (int i = 0; i < recognizedReceipts.size(); i++) {\n             RecognizedForm recognizedForm = recognizedReceipts.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                     String merchantName = merchantNameField.getValue().asString();\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                     String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                     LocalDate transactionDate = transactionDateField.getValue().asDate();\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                     List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                     receiptItems.stream()\n                         .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                         .map(formField -> formField.getValue().asMap())\n                         .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                     Float quantity = formField.getValue().asFloat();\n                                     System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The URL of the receipt to analyze.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receiptUrl}\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n     new RecognizeReceiptsOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedReceipts -> {\n         for (int i = 0; i < recognizedReceipts.size(); i++) {\n             RecognizedForm recognizedReceipt = recognizedReceipts.get(i);\n             Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                     String merchantName = merchantNameField.getValue().asString();\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                     String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                     LocalDate transactionDate = transactionDateField.getValue().asDate();\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                     List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                     receiptItems.stream()\n                         .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                         .map(formField -> formField.getValue().asMap())\n                         .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                     Float quantity = formField.getValue().asFloat();\n                                     System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n         }\n     });\n```"
  syntax:
    content: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The source URL to the input receipt.
    - id: recognizeReceiptsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a receipt.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
references:
- uid: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
  name: FormRecognizerClientImpl
  nameWithType: FormRecognizerClientImpl
  fullName: com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl
- uid: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
  name: FormRecognizerServiceVersion
  nameWithType: FormRecognizerServiceVersion
  fullName: com.azure.ai.formrecognizer.FormRecognizerServiceVersion
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient*
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient.FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.FormRecognizerAsyncClient
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
    name: FormRecognizerOperationResult
    fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
  name: RecognizeCustomFormsOptions
  nameWithType: RecognizeCustomFormsOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.PollerFlux<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
    name: FormRecognizerOperationResult
    fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeContentOptions
  name: RecognizeContentOptions
  nameWithType: RecognizeContentOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeContentOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
  name: RecognizeReceiptsOptions
  nameWithType: RecognizeReceiptsOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerAsyncClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List
  name: FormRecognizerOperationResult,List
  nameWithType: FormRecognizerOperationResult,List
  fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
