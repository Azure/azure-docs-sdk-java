### YamlMime:JavaType
uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient"
fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient"
name: "FormRecognizerAsyncClient"
nameWithType: "FormRecognizerAsyncClient"
summary: "This class provides an asynchronous client to connect to the Form Recognizer Azure Cognitive Service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **FormRecognizerAsyncClient**"
methods:
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length)"
  name: "beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length)"
  summary: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model."
  parameters:
  - description: "The data of the document to recognize business card information from."
    name: "businessCard"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length)"
  desc: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card. Note that the `businessCard` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile businessCard = new File(\"{local/file_path/fileName.jpg}\");\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(businessCard.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeBusinessCards(buffer, businessCard.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedBusinessCards -> {\n         for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n             RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n             FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n             if (contactNamesFormField != null) {\n                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                     contactNamesList.stream()\n                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                         .map(contactName -> {\n                             System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                             return contactName.getValue().asMap();\n                         })\n                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                             if (\"FirstName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String firstName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                         firstName, contactName.getConfidence());\n                                 }\n                             }\n                             if (\"LastName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String lastName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                         lastName, contactName.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n             FormField jobTitles = recognizedFields.get(\"JobTitles\");\n             if (jobTitles != null) {\n                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                     jobTitlesItems.forEach(jobTitlesItem -> {\n                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                             String jobTitle = jobTitlesItem.getValue().asString();\n                             System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                                 jobTitle, jobTitlesItem.getConfidence());\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  name: "beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  summary: "Recognizes business card data from documents using optical character recognition (OCR) and a prebuilt business card trained model."
  parameters:
  - description: "The data of the document to recognize business card information from."
    name: "businessCard"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a business card."
    name: "recognizeBusinessCardsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions&text=RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCards(Flux<ByteBuffer> businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  desc: "Recognizes business card data from documents using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card. Note that the `businessCard` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile businessCard = new File(\"{local/file_path/fileName.jpg}\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(businessCard.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeBusinessCards(buffer, businessCard.length(),\n     new RecognizeBusinessCardsOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedBusinessCards -> {\n         for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n             RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n             FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n             if (contactNamesFormField != null) {\n                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                     contactNamesList.stream()\n                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                         .map(contactName -> {\n                             System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                             return contactName.getValue().asMap();\n                         })\n                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                             if (\"FirstName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String firstName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                         firstName, contactName.getConfidence());\n                                 }\n                             }\n                             if (\"LastName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String lastName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                         lastName, contactName.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n             FormField jobTitles = recognizedFields.get(\"JobTitles\");\n             if (jobTitles != null) {\n                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                     jobTitlesItems.forEach(jobTitlesItem -> {\n                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                             String jobTitle = jobTitlesItem.getValue().asString();\n                             System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                                 jobTitle, jobTitlesItem.getConfidence());\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  summary: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model."
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  desc: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  summary: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model."
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a business card."
    name: "recognizeBusinessCardsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions&text=RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  desc: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString businessCardUrl = \"{business_card_url}\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl,\n     new RecognizeBusinessCardsOptions()\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedBusinessCards -> {\n         for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n             RecognizedForm recognizedBusinessCard = recognizedBusinessCards.get(i);\n             Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n             System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n             FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n             if (contactNamesFormField != null) {\n                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                     contactNamesList.stream()\n                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                         .map(contactName -> {\n                             System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                             return contactName.getValue().asMap();\n                         })\n                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                             if (\"FirstName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String firstName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                         firstName, contactName.getConfidence());\n                                 }\n                             }\n                             if (\"LastName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String lastName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                         lastName, contactName.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n             FormField jobTitles = recognizedFields.get(\"JobTitles\");\n             if (jobTitles != null) {\n                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                     jobTitlesItems.forEach(jobTitlesItem -> {\n                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                             String jobTitle = jobTitlesItem.getValue().asString();\n                             System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                                 jobTitle, jobTitlesItem.getConfidence());\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  name: "beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  summary: "Recognizes content/layout data using optical character recognition (OCR)."
  parameters:
  - description: "The data of the form to recognize content information from."
    name: "form"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length)"
  desc: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polls the recognize content operation until it has completed, has failed, or has\n been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  name: "beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  summary: "Recognizes content/layout data using optical character recognition (OCR)."
  parameters:
  - description: "The data of the form to recognize content information from."
    name: "form"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when recognizing content/layout on a form."
    name: "recognizeContentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeContentOptions&text=RecognizeContentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)"
  desc: "Recognizes content/layout data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\nContent recognition supports auto language identification and multilanguage documents, so only provide a language code if you would like to force the documented to be processed as that specific language in the <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent(buffer, form.length(),\n     new RecognizeContentOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->\n             System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> polls the recognize content operation until it has completed, has failed, or has\n been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)"
  name: "beginRecognizeContentFromUrl(String formUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl)"
  summary: "Recognizes content/layout data from documents using optical character recognition (OCR)."
  parameters:
  - description: "The URL of the form to analyze."
    name: "formUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl)"
  desc: "Recognizes content/layout data from documents using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{formUrl}\";\n formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize content operation until it has completed, has failed, or\n has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)"
  name: "beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)"
  summary: "Recognizes layout data from documents using optical character recognition (OCR) and a custom trained model."
  parameters:
  - description: "The source URL to the input form."
    name: "formUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when recognizing content/layout on a form."
    name: "recognizeContentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeContentOptions&text=RecognizeContentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions)"
  desc: "Recognizes layout data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nContent recognition supports auto language identification and multilanguage documents, so only provide a language code if you would like to force the documented to be processed as that specific language in the <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>.\n\n**Code sample**\n\n```java\nString formUrl = \"{formUrl}\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContentFromUrl(formUrl,\n     new RecognizeContentOptions().setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(formPage -> {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognized content/layout operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.FormPage\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormPage\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)"
  name: "beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)"
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels."
  parameters:
  - description: "The UUID string format custom trained model Id to be used."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The data of the form to recognize form information from."
    name: "form"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)"
  desc: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms(modelId, buffer, form.length())\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize custom form operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  name: "beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels."
  parameters:
  - description: "The UUID string format custom trained model Id to be used."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The data of the form to recognize form information from."
    name: "form"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable\n <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when recognizing custom forms."
    name: "recognizeCustomFormsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions&text=RecognizeCustomFormsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  desc: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(form.toPath())));\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms(modelId, buffer, form.length(),\n     new RecognizeCustomFormsOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldName, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldName);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize custom form operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)"
  name: "beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)"
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels."
  parameters:
  - description: "The UUID string format custom trained model Id to be used."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The URL of the form to analyze."
    name: "formUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)"
  desc: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize custom form operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  name: "beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model."
  parameters:
  - description: "The UUID string format custom trained model Id to be used."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The source URL to the input form."
    name: "formUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable\n <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when recognizing custom forms."
    name: "recognizeCustomFormsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions&text=RecognizeCustomFormsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions)"
  desc: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{formUrl}\";\n String modelId = \"{model_id}\";\n boolean includeFieldElements = true;\n\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl,\n     new RecognizeCustomFormsOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(10)))\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize custom form operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  name: "beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses."
  parameters:
  - description: "The data of the document to recognize identity document information from."
    name: "identityDocument"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length)"
  desc: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `identityDocument` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile license = new File(\"local/file_path/license.jpg\");\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(license.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocuments(buffer, license.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize identity document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  name: "beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses."
  parameters:
  - description: "The data of the document to recognize identity document information from."
    name: "identityDocument"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable\n <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when analyzing an identity document."
    name: "recognizeIdentityDocumentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions&text=RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocuments(Flux<ByteBuffer> identityDocument, long length, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  desc: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `identityDocument` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile licenseDocument = new File(\"local/file_path/license.jpg\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(licenseDocument.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocuments(buffer,\n     licenseDocument.length(),\n     new RecognizeIdentityDocumentOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize identity document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl)"
  name: "beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses."
  parameters:
  - description: "The source URL to the input identity document."
    name: "identityDocumentUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl)"
  desc: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString idDocumentUrl = \"idDocumentUrl\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(idDocumentUrl)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize identity document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  name: "beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  summary: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses."
  parameters:
  - description: "The source URL to the input identity document."
    name: "identityDocumentUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable\n <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when analyzing an identity document."
    name: "recognizeIdentityDocumentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeIdentityDocumentOptions&text=RecognizeIdentityDocumentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdentityDocumentsFromUrl(String identityDocumentUrl, RecognizeIdentityDocumentOptions recognizeIdentityDocumentOptions)"
  desc: "Analyze identity documents using optical character recognition (OCR) and a prebuilt model trained on identity documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an identity document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString licenseDocumentUrl = \"licenseDocumentUrl\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeIdentityDocumentsFromUrl(licenseDocumentUrl,\n     new RecognizeIdentityDocumentOptions()\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedIDDocumentResult -> {\n         for (int i = 0; i < recognizedIDDocumentResult.size(); i++) {\n             RecognizedForm recognizedForm = recognizedIDDocumentResult.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized license info for page %d -----------%n\", i);\n\n             FormField firstNameField = recognizedFields.get(\"FirstName\");\n             if (firstNameField != null) {\n                 if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                     String firstName = firstNameField.getValue().asString();\n                     System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                         firstName, firstNameField.getConfidence());\n                 }\n             }\n\n             FormField lastNameField = recognizedFields.get(\"LastName\");\n             if (lastNameField != null) {\n                 if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                     String lastName = lastNameField.getValue().asString();\n                     System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                         lastName, lastNameField.getConfidence());\n                 }\n             }\n\n             FormField countryRegionFormField = recognizedFields.get(\"CountryRegion\");\n             if (countryRegionFormField != null) {\n                 if (FieldValueType.STRING == countryRegionFormField.getValue().getValueType()) {\n                     String countryRegion = countryRegionFormField.getValue().asCountryRegion();\n                     System.out.printf(\"Country or region: %s, confidence: %.2f%n\",\n                         countryRegion, countryRegionFormField.getConfidence());\n                 }\n             }\n\n             FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n             if (dateOfExpirationField != null) {\n                 if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                     LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                     System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                         expirationDate, dateOfExpirationField.getConfidence());\n                 }\n             }\n\n             FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n             if (documentNumberField != null) {\n                 if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                     String documentNumber = documentNumberField.getValue().asString();\n                     System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                         documentNumber, documentNumberField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the analyze identity document operation until it has completed, has\n failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  name: "beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  summary: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model."
  parameters:
  - description: "The data of the document to recognize invoice information from."
    name: "invoice"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  desc: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a invoice. Note that the `invoice` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile invoice = new File(\"local/file_path/invoice.jpg\");\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(invoice.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoices(buffer, invoice.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/invoicefields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  name: "beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  summary: "Recognizes invoice data from documents using optical character recognition (OCR) and a prebuilt invoice trained model."
  parameters:
  - description: "The data of the document to recognize invoice information from."
    name: "invoice"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a invoice."
    name: "recognizeInvoicesOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions?alt=com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions&text=RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  desc: "Recognizes invoice data from documents using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a invoice. Note that the `invoice` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile invoice = new File(\"local/file_path/invoice.jpg\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(invoice.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoices(buffer,\n     invoice.length(),\n     new RecognizeInvoicesOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/invoicefields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(String invoiceUrl)"
  name: "beginRecognizeInvoicesFromUrl(String invoiceUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(String invoiceUrl)"
  summary: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model."
  parameters:
  - description: "The URL of the invoice to analyze."
    name: "invoiceUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoicesFromUrl(String invoiceUrl)"
  desc: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a invoice.\n\n**Code sample**\n\n```java\nString invoiceUrl = \"invoice_url\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(invoiceUrl)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/invoicefields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  name: "beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  summary: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model."
  parameters:
  - description: "The source URL to the input invoice."
    name: "invoiceUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a invoice."
    name: "recognizeInvoicesOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions?alt=com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions&text=RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  desc: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString invoiceUrl = \"invoice_url\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoicesFromUrl(invoiceUrl,\n     new RecognizeInvoicesOptions()\n         .setFieldElementsIncluded(includeFieldElements))\n     .setPollInterval(Duration.ofSeconds(5))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)"
  name: "beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)"
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model."
  parameters:
  - description: "The data of the document to recognize receipt information from."
    name: "receipt"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length)"
  desc: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `receipt` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize receipt operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  name: "beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model."
  parameters:
  - description: "The data of the document to recognize receipt information from."
    name: "receipt"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html\">Flux</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a receipt."
    name: "recognizeReceiptsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions&text=RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(Flux<ByteBuffer> receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  desc: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt. Note that the `receipt` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize receipt operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)"
  name: "beginRecognizeReceiptsFromUrl(String receiptUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl)"
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model."
  parameters:
  - description: "The URL of the receipt to analyze."
    name: "receiptUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)"
  desc: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize receipt operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  name: "beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  summary: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model."
  parameters:
  - description: "The source URL to the input receipt."
    name: "receiptUrl"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a receipt."
    name: "recognizeReceiptsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions&text=RecognizeReceiptsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions)"
  desc: "Recognizes receipt data using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl)\n     // if training polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .flatMap(Flux::fromIterable)\n     .subscribe(recognizedForm -> recognizedForm.getFields()\n         .forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize receipt operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides an asynchronous client to connect to the Form Recognizer Azure Cognitive Service.\n\nThis client provides asynchronous methods to perform:\n\n1.  Custom Form Analysis: Extraction and analysis of data from forms and documents specific to distinct business data and use cases. Use the custom trained model by passing its modelId into the <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginRecognizeCustomForms\"></xref> method.\n2.  Prebuilt Model Analysis: Analyze receipts, business cards, invoices and other documents with [supported prebuilt models][] Use the <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginRecognizeReceipts\"></xref> method to recognize receipt information.\n3.  Layout Analysis: Extraction and analysis of text, selection marks, tables, and bounding box coordinates, from forms and documents. Use <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"beginRecognizeContent\"></xref> method tpo perform layout analysis.\n4.  Polling and Callbacks: It includes mechanisms for polling the service to check the status of an analysis operation or registering callbacks to receive notifications when the analysis is complete.\n\n**Note:** This client only supports <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion.V2_1\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerServiceVersion#V2_1\"></xref> and lower. Recommended to use a newer service version, <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.DocumentAnalysisClient\"></xref> and <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient\"></xref>.\n\n**Refer to the [Migration guide][] to use API versions 2022-08-31 and up.**\n\nService clients are the point of interaction for developers to use Azure Form Recognizer. <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerClient\"></xref> is the synchronous service client and <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref> is the asynchronous service client. The examples shown in this document use a credential object named DefaultAzureCredential for authentication, which is appropriate for most scenarios, including local development and production environments. Additionally, we recommend using [managed identity][] for authentication in production environments. You can find more information on different ways of authenticating and their corresponding credential types in the [Azure Identity documentation\"][Azure Identity documentation].\n\n**Sample: Construct a FormRecognizerClient with DefaultAzureCredential**\n\nThe following code sample demonstrates the creation of a <xref uid=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.FormRecognizerAsyncClient\"></xref>, using the \\`DefaultAzureCredentialBuilder\\` to configure it.\n\n```java\nFormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n     .endpoint(\"{endpoint}\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\nFurther, see the code sample below to use <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref> for client creation.\n\n```java\nFormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n     .credential(new AzureKeyCredential(\"{key}\"))\n     .endpoint(\"{endpoint}\")\n     .buildAsyncClient();\n```\n\n\n[supported prebuilt models]: https://aka.ms/form-recognizer-service-2.1.0\n[Migration guide]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/formrecognizer/azure-ai-formrecognizer/migration-guide.md\n[managed identity]: https://learn.microsoft.com/azure/active-directory/managed-identities-azure-resources/\n[Azure Identity documentation]: https://learn.microsoft.com/java/api/overview/azure/identity-readme"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:4.1.4
