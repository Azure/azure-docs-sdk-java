### YamlMime:JavaMember
nameWithType: ProxyBase.continueWith
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object> future)
  name: continueWith(CompletableFuture<Object> future)
  nameWithType: ProxyBase.continueWith(CompletableFuture<Object> future)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call. </p>
    name: future
    type: <xref href="CompletableFuture%3CObject%3E?alt=CompletableFuture<Object>&text=CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> that represents the asynchronous operation for remote method call. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture<?>&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Called by the generated proxy class to continue after getting the response body that does not have value. </p>
  syntax: protected CompletableFuture<?> continueWith(CompletableFuture<Object> future)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object>)
uid: microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith*
fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object> future)
name: continueWith(CompletableFuture<Object> future)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
