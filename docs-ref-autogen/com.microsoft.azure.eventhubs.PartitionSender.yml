### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.PartitionSender
  id: PartitionSender
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs
  children:
  - com.microsoft.azure.eventhubs.PartitionSender.close()
  - com.microsoft.azure.eventhubs.PartitionSender.closeSync()
  - com.microsoft.azure.eventhubs.PartitionSender.createBatch()
  - com.microsoft.azure.eventhubs.PartitionSender.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  - com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
  - com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)
  - com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)
  - com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  - com.microsoft.azure.eventhubs.PartitionSender.sendSync(com.microsoft.azure.eventhubs.EventData)
  - com.microsoft.azure.eventhubs.PartitionSender.sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  - com.microsoft.azure.eventhubs.PartitionSender.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  langs:
  - java
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: com.microsoft.azure.eventhubs.PartitionSender
  type: Interface
  package: com.microsoft.azure.eventhubs
  summary: This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send*" data-throw-if-not-resolved="false">EventHubClient#send</xref> method.
  syntax:
    content: public interface PartitionSender
- uid: com.microsoft.azure.eventhubs.PartitionSender.close()
  id: close()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: close()
  nameWithType: PartitionSender.close()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.close()
  overload: com.microsoft.azure.eventhubs.PartitionSender.close*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract CompletableFuture<Void> close()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.eventhubs.PartitionSender.closeSync()
  id: closeSync()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: closeSync()
  nameWithType: PartitionSender.closeSync()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.closeSync()
  overload: com.microsoft.azure.eventhubs.PartitionSender.closeSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  syntax:
    content: public abstract void closeSync()
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch()
  id: createBatch()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: createBatch()
  nameWithType: PartitionSender.createBatch()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch()
  overload: com.microsoft.azure.eventhubs.PartitionSender.createBatch*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref>.
  syntax:
    content: public default EventDataBatch createBatch()
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service
- uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  id: createBatch(com.microsoft.azure.eventhubs.BatchOptions)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: createBatch(BatchOptions options)
  nameWithType: PartitionSender.createBatch(BatchOptions options)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions options)
  overload: com.microsoft.azure.eventhubs.PartitionSender.createBatch*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref>.
  syntax:
    content: public abstract EventDataBatch createBatch(BatchOptions options)
    parameters:
    - id: options
      type: com.microsoft.azure.eventhubs.BatchOptions
      description: see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false">BatchOptions</xref> for more usage details
    return:
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>, after negotiating maximum message size with EventHubs service
- uid: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
  id: getPartitionId()
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: getPartitionId()
  nameWithType: PartitionSender.getPartitionId()
  fullName: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
  overload: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: The partition id that will receive events from this sender.
  syntax:
    content: public abstract String getPartitionId()
    return:
      type: java.lang.String
      description: the partition id the PartitionSender is connected to.
- uid: com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)
  id: send(com.microsoft.azure.eventhubs.EventData)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  overload: com.microsoft.azure.eventhubs.PartitionSender.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency.


    There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):


    ```java

    i.   EventHubClient#send(EventData), EventHubClient#send(Iterable), EventHubClient#send(EventDataBatch)
     ii.  EventHubClient#send(EventData, String) or EventHubClient#send(Iterable, String)
     iii. PartitionSender#send(EventData), PartitionSender#send(Iterable), or PartitionSender#send(EventDataBatch)
    ```


    Use this type of Send, if:


    ```java

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.
     ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.
    ```
  syntax:
    content: public abstract CompletableFuture<Void> send(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)
  id: send(com.microsoft.azure.eventhubs.EventDataBatch)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.PartitionSender.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.
     ii.  Send multiple EventData's in a Transaction. To achieve ACID properties, the Gateway Service will forward all EventData's in the batch to a single EventHubs' partition.
    ```
  syntax:
    content: public abstract CompletableFuture<Void> send(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: EventDataBatch to send to EventHub
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operation is done..
- uid: com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  id: send(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: send(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.send(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.PartitionSender.send*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: >-
    Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created.


    There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>.


    Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases:


    ```java

    i.   Efficient send - sending a batch of EventData maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.
     ii.  Send multiple EventData's in a Transaction. To achieve ACID properties, the Gateway Service will forward all EventData's in the batch to a single EventHubs' partition.
    ```


    Sample code (sample uses sync version of the api but concept are identical):


    ```java

    Gson gson = new GsonBuilder().create();
     EventHubClient client = EventHubClient.createSync("__connection__");
     PartitionSender senderToPartitionOne = client.createPartitionSenderSync("1");

     while (true)
     {
         LinkedList events = new LinkedList();
         for (int count = 1; count < 11; count++)
         {
             PayloadEvent payload = new PayloadEvent(count);
             byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());
             EventData sendEvent = EventData.create(payloadBytes);
             sendEvent.getProperties().put("from", "javaClient");
             events.add(sendEvent);
         }

         senderToPartitionOne.sendSync(events);
         System.out.println(String.format("Sent Batch... Size: %s", events.size()));
     }
    ```
  syntax:
    content: public abstract CompletableFuture<Void> send(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: batch of events to send to EventHub
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: a CompletableFuture that can be completed when the send operations is done..
- uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(com.microsoft.azure.eventhubs.EventData)
  id: sendSync(com.microsoft.azure.eventhubs.EventData)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: sendSync(EventData data)
  nameWithType: PartitionSender.sendSync(EventData data)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(EventData data)
  overload: com.microsoft.azure.eventhubs.PartitionSender.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventData)" data-throw-if-not-resolved="false">#send(EventData)</xref> Api.
  syntax:
    content: public default void sendSync(EventData data)
    parameters:
    - id: data
      type: com.microsoft.azure.eventhubs.EventData
      description: the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent.
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if the total size of the <xref uid="EventData" data-throw-if-not-resolved="false">EventData</xref> exceeds a pre-defined limit set by the service. Default is 256k bytes.
- uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  id: sendSync(com.microsoft.azure.eventhubs.EventDataBatch)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: sendSync(EventDataBatch eventDatas)
  nameWithType: PartitionSender.sendSync(EventDataBatch eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(EventDataBatch eventDatas)
  overload: com.microsoft.azure.eventhubs.PartitionSender.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(com.microsoft.azure.eventhubs.EventDataBatch)" data-throw-if-not-resolved="false">#send(EventDataBatch)</xref>
  syntax:
    content: public default void sendSync(EventDataBatch eventDatas)
    parameters:
    - id: eventDatas
      type: com.microsoft.azure.eventhubs.EventDataBatch
      description: EventDataBatch to send to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
- uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  id: sendSync(java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>)
  artifact: com.microsoft.azure:azure-eventhubs:3.2.2
  parent: com.microsoft.azure.eventhubs.PartitionSender
  langs:
  - java
  name: sendSync(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.sendSync(Iterable<EventData> eventDatas)
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(Iterable<EventData> eventDatas)
  overload: com.microsoft.azure.eventhubs.PartitionSender.sendSync*
  type: Method
  package: com.microsoft.azure.eventhubs
  summary: Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(java.lang.Iterable&lt;com.microsoft.azure.eventhubs.EventData&gt;)" data-throw-if-not-resolved="false">#send(Iterable)</xref> .
  syntax:
    content: public default void sendSync(Iterable<EventData> eventDatas)
    parameters:
    - id: eventDatas
      type: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
      description: batch of events to send to EventHub
  exceptions:
  - type: com.microsoft.azure.eventhubs.EventHubException
    description: if Service Bus service encountered problems during the operation.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId*
  name: getPartitionId
  nameWithType: PartitionSender.getPartitionId
  fullName: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.BatchOptions
  name: BatchOptions
  nameWithType: BatchOptions
  fullName: com.microsoft.azure.eventhubs.BatchOptions
- uid: com.microsoft.azure.eventhubs.EventDataBatch
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.microsoft.azure.eventhubs.EventDataBatch
- uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch*
  name: createBatch
  nameWithType: PartitionSender.createBatch
  fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.EventHubException
  name: EventHubException
  nameWithType: EventHubException
  fullName: com.microsoft.azure.eventhubs.EventHubException
- uid: com.microsoft.azure.eventhubs.EventData
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
- uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync*
  name: sendSync
  nameWithType: PartitionSender.sendSync
  fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync
  package: com.microsoft.azure.eventhubs
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionSender.send*
  name: send
  nameWithType: PartitionSender.send
  fullName: com.microsoft.azure.eventhubs.PartitionSender.send
  package: com.microsoft.azure.eventhubs
- uid: java.lang.Iterable<com.microsoft.azure.eventhubs.EventData>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.eventhubs.EventData
    name: EventData
    fullName: com.microsoft.azure.eventhubs.EventData
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventhubs.PartitionSender.close*
  name: close
  nameWithType: PartitionSender.close
  fullName: com.microsoft.azure.eventhubs.PartitionSender.close
  package: com.microsoft.azure.eventhubs
- uid: com.microsoft.azure.eventhubs.PartitionSender.closeSync*
  name: closeSync
  nameWithType: PartitionSender.closeSync
  fullName: com.microsoft.azure.eventhubs.PartitionSender.closeSync
  package: com.microsoft.azure.eventhubs
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
