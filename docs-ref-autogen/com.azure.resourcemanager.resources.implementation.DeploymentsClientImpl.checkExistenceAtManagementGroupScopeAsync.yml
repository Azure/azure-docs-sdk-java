### YamlMime:JavaMember
uid: "com.azure.resourcemanager.resources.implementation.DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync*"
fullName: "com.azure.resourcemanager.resources.implementation.DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync"
name: "checkExistenceAtManagementGroupScopeAsync"
nameWithType: "DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync"
members:
- uid: "com.azure.resourcemanager.resources.implementation.DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.implementation.DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync(String groupId, String deploymentName)"
  name: "checkExistenceAtManagementGroupScopeAsync(String groupId, String deploymentName)"
  nameWithType: "DeploymentsClientImpl.checkExistenceAtManagementGroupScopeAsync(String groupId, String deploymentName)"
  summary: "Checks whether the deployment exists."
  parameters:
  - description: "The management group ID."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the deployment."
    name: "deploymentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> checkExistenceAtManagementGroupScopeAsync(String groupId, String deploymentName)"
  returns:
    description: "whether resource exists."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.resources.implementation"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.1.0
