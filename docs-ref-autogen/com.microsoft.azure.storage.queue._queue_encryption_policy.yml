### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy
  id: _queue_encryption_policy
  parent: com.microsoft.azure.storage.queue
  children:
  - com.microsoft.azure.storage.queue._queue_encryption_policy.getKey()
  - com.microsoft.azure.storage.queue._queue_encryption_policy.getKeyResolver()
  - com.microsoft.azure.storage.queue._queue_encryption_policy.keyResolver
  - com.microsoft.azure.storage.queue._queue_encryption_policy.keyWrapper
  - com.microsoft.azure.storage.queue._queue_encryption_policy.QueueEncryptionPolicy(IKey,IKeyResolver)
  - com.microsoft.azure.storage.queue._queue_encryption_policy.setKey(IKey)
  - com.microsoft.azure.storage.queue._queue_encryption_policy.setKeyResolver(IKeyResolver)
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: QueueEncryptionPolicy
  nameWithType: QueueEncryptionPolicy
  fullName: com.microsoft.azure.storage.queue.QueueEncryptionPolicy
  type: Class
  source:
    remote: &o0
      path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
      branch: master
      repo: https://github.com/Azure/azure-storage-java
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 42
  package: com.microsoft.azure.storage.queue
  summary: <p>Represents a queue encryption policy that is used to perform envelope encryption/decryption of Azure queue messages. </p>
  syntax: &o1
    content: public class QueueEncryptionPolicy
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.getKey()
  id: getKey()
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: getKey()
  nameWithType: QueueEncryptionPolicy.getKey()
  fullName: IKey com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey()
  overload: com.microsoft.azure.storage.queue._queue_encryption_policy.getKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 78
  package: com.microsoft.azure.storage.queue
  summary: >-
    <p>Gets the <xref uid="" data-throw-if-not-resolved="false">IKey</xref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax:
    content: public IKey getKey()
    return:
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">IKey</xref> object. </p>
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.getKeyResolver()
  id: getKeyResolver()
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: getKeyResolver()
  nameWithType: QueueEncryptionPolicy.getKeyResolver()
  fullName: IKeyResolver com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver()
  overload: com.microsoft.azure.storage.queue._queue_encryption_policy.getKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 87
  package: com.microsoft.azure.storage.queue
  summary: >-
    <p>Gets the key resolver used to select the correct key for decrypting existing queue messages.</p>

    <p></p>
  syntax:
    content: public IKeyResolver getKeyResolver()
    return:
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false">SymmetricKey</xref> given a keyId. </p>
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.keyResolver
  id: keyResolver
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: keyResolver
  nameWithType: QueueEncryptionPolicy.keyResolver
  fullName: IKeyResolver com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyResolver
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 52
  package: com.microsoft.azure.storage.queue
  summary: <p>The <xref uid="" data-throw-if-not-resolved="false">IKeyResolver</xref> used to select the correct key for decrypting existing queue messages. </p>
  syntax:
    content: public IKeyResolver keyResolver
    return:
      type: com.microsoft.azure.keyvault.core._i_key_resolver
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.keyWrapper
  id: keyWrapper
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: keyWrapper
  nameWithType: QueueEncryptionPolicy.keyWrapper
  fullName: IKey com.microsoft.azure.storage.queue.QueueEncryptionPolicy.keyWrapper
  type: Field
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 47
  package: com.microsoft.azure.storage.queue
  summary: <p>An object of type <xref uid="" data-throw-if-not-resolved="false">IKey</xref> that is used to wrap/unwrap the content key during encryption. </p>
  syntax:
    content: public IKey keyWrapper
    return:
      type: com.microsoft.azure.keyvault.core._i_key
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.QueueEncryptionPolicy(IKey,IKeyResolver)
  id: QueueEncryptionPolicy(IKey,IKeyResolver)
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  nameWithType: QueueEncryptionPolicy.QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  fullName: com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.queue._queue_encryption_policy.QueueEncryptionPolicy*
  type: Constructor
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 68
  package: com.microsoft.azure.storage.queue
  summary: >-
    <p>Initializes a new instance of the <xref uid="com.microsoft.azure.storage.queue._queue_encryption_policy" data-throw-if-not-resolved="false">QueueEncryptionPolicy</xref> class with the specified key and resolver. </p>

    <p>If the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it.</p>

    <p></p>
  syntax:
    content: public QueueEncryptionPolicy(IKey key, IKeyResolver keyResolver)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An object of type <xref uid="" data-throw-if-not-resolved="false">IKey</xref> that is used to wrap/unwrap the content encryption key. </p>
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>The key resolver used to select the correct key for decrypting existing queue messages. </p>
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.setKey(IKey)
  id: setKey(IKey)
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: setKey(IKey key)
  nameWithType: QueueEncryptionPolicy.setKey(IKey key)
  fullName: void com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey(IKey key)
  overload: com.microsoft.azure.storage.queue._queue_encryption_policy.setKey*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 97
  package: com.microsoft.azure.storage.queue
  summary: >-
    <p>Sets the <xref uid="" data-throw-if-not-resolved="false">IKey</xref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax:
    content: public void setKey(IKey key)
    parameters:
    - id: key
      type: com.microsoft.azure.keyvault.core._i_key
      description: <p>An <xref uid="" data-throw-if-not-resolved="false">IKey</xref> object. </p>
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.setKeyResolver(IKeyResolver)
  id: setKeyResolver(IKeyResolver)
  parent: com.microsoft.azure.storage.queue._queue_encryption_policy
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  langs:
  - java
  name: setKeyResolver(IKeyResolver keyResolver)
  nameWithType: QueueEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  fullName: void com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  overload: com.microsoft.azure.storage.queue._queue_encryption_policy.setKeyResolver*
  type: Method
  source:
    remote: *o0
    path: microsoft-azure-storage/src/com/microsoft/azure/storage/queue/QueueEncryptionPolicy.java
    startLine: 107
  package: com.microsoft.azure.storage.queue
  summary: >-
    <p>Sets the key resolver used to select the correct key for decrypting existing queue messages.</p>

    <p></p>
  syntax:
    content: public void setKeyResolver(IKeyResolver keyResolver)
    parameters:
    - id: keyResolver
      type: com.microsoft.azure.keyvault.core._i_key_resolver
      description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false">IKey</xref> given a keyId. </p>
references:
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.QueueEncryptionPolicy*
  name: QueueEncryptionPolicy
  nameWithType: QueueEncryptionPolicy.QueueEncryptionPolicy
  fullName: com.microsoft.azure.storage.queue.QueueEncryptionPolicy.QueueEncryptionPolicy
  package: com.microsoft.azure.storage.queue
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.getKey*
  name: getKey
  nameWithType: QueueEncryptionPolicy.getKey
  fullName: IKey com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKey
  package: com.microsoft.azure.storage.queue
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.getKeyResolver*
  name: getKeyResolver
  nameWithType: QueueEncryptionPolicy.getKeyResolver
  fullName: IKeyResolver com.microsoft.azure.storage.queue.QueueEncryptionPolicy.getKeyResolver
  package: com.microsoft.azure.storage.queue
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.setKey*
  name: setKey
  nameWithType: QueueEncryptionPolicy.setKey
  fullName: void com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKey
  package: com.microsoft.azure.storage.queue
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy.setKeyResolver*
  name: setKeyResolver
  nameWithType: QueueEncryptionPolicy.setKeyResolver
  fullName: void com.microsoft.azure.storage.queue.QueueEncryptionPolicy.setKeyResolver
  package: com.microsoft.azure.storage.queue
- uid: com.microsoft.azure.keyvault.core._i_key
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core._i_key.yml
  name: IKey
  nameWithType: IKey
  fullName: com.microsoft.azure.keyvault.core.IKey
  type: Interface
  summary: <p>Interface for representing cryptographic keys with the Microsoft Azure Key Vault libraries. </p>
  syntax:
    content: public interface IKey
- uid: com.microsoft.azure.keyvault.core._i_key_resolver
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core._i_key_resolver.yml
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: com.microsoft.azure.keyvault.core.IKeyResolver
  type: Interface
  summary: <p>Interface for representing key resolving operations with the Microsoft Azure Key Vault libraries. </p>
  syntax:
    content: public interface IKeyResolver
- uid: com.microsoft.azure.storage.queue._queue_encryption_policy
  parent: com.microsoft.azure.storage.queue
  href: com.microsoft.azure.storage.queue._queue_encryption_policy.yml
  name: QueueEncryptionPolicy
  nameWithType: QueueEncryptionPolicy
  fullName: com.microsoft.azure.storage.queue.QueueEncryptionPolicy
  type: Class
  summary: <p>Represents a queue encryption policy that is used to perform envelope encryption/decryption of Azure queue messages. </p>
  syntax: *o1
- uid: com.microsoft.azure.storage._storage_exception
  parent: com.microsoft.azure.storage
  href: com.microsoft.azure.storage._storage_exception.yml
  name: StorageException
  nameWithType: StorageException
  fullName: com.microsoft.azure.storage.StorageException
  type: Class
  summary: <p>Represents an exception for the Microsoft Azure storage service. </p>
  syntax:
    content: public class StorageException
