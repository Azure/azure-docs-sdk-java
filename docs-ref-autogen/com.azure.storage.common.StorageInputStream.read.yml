### YamlMime:JavaMember
uid: "com.azure.storage.common.StorageInputStream.read*"
fullName: "com.azure.storage.common.StorageInputStream.read"
name: "read"
nameWithType: "StorageInputStream.read"
members:
- uid: "com.azure.storage.common.StorageInputStream.read()"
  fullName: "com.azure.storage.common.StorageInputStream.read()"
  name: "read()"
  nameWithType: "StorageInputStream.read()"
  summary: "Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown."
  overridden: "java.io.InputStream.read()"
  syntax: "public int read()"
  exceptions:
  - description: "when no available bytes to read."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n more data because the end of the stream has been reached."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.common.StorageInputStream.read(byte[])"
  fullName: "com.azure.storage.common.StorageInputStream.read(byte[] b)"
  name: "read(byte[] b)"
  nameWithType: "StorageInputStream.read(byte[] b)"
  summary: "Reads some number of bytes from the input stream and stores them into the buffer array `b`. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of `b` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[0]`, the next one into `b[1]`, and so on. The number of bytes read is, at most, equal to the length of `b`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[0]` through `b[k-1]`, leaving elements `b[k]` through `b[b.length-1]` unaffected. The `read(b)` method for class <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> has the same effect as: `read(b, 0, b.length)`"
  overridden: "java.io.InputStream.read(byte[])"
  parameters:
  - description: "A <code>byte</code> array which represents the buffer into which the data is read."
    name: "b"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public int read(byte[] b)"
  exceptions:
  - description: "If the first byte cannot be read for any reason other than the end of the file, if the input\n stream has been closed, or if some other I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.common.StorageInputStream.read(byte[],int,int)"
  fullName: "com.azure.storage.common.StorageInputStream.read(byte[] b, int off, int len)"
  name: "read(byte[] b, int off, int len)"
  nameWithType: "StorageInputStream.read(byte[] b, int off, int len)"
  summary: "Reads up to `len` bytes of data from the input stream into an array of bytes. An attempt is made to read as many as `len` bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If `len` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[off]`, the next one into `b[off+1]`, and so on. The number of bytes read is, at most, equal to `len`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[off]` through `b[off+k-1]`, leaving elements `b[off+k]` through `b[off+len-1]` unaffected. In every case, elements `b[0]` through `b[off]` and elements `b[off+len]` through `b[b.length-1]` are unaffected. The `read(b, off, len)` method for class <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> simply calls the method `read()` repeatedly. If the first such call results in an `IOException`, that exception is returned from the call to the `read(b, off, len)` method. If any subsequent call to `read()` results in a `IOException`, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into `b` and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data `len` has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method."
  overridden: "java.io.InputStream.read(byte[],int,int)"
  parameters:
  - description: "A <code>byte</code> array which represents the buffer into which the data is read."
    name: "b"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "An <code>int</code> which represents the start offset in the <code>byte</code> array at which the data\n is written."
    name: "off"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An <code>int</code> which represents the maximum number of bytes to read."
    name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int read(byte[] b, int off, int len)"
  exceptions:
  - description: "If the first byte cannot be read for any reason other than end of file, or if the input\n stream has been closed, or if some other I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n more data because the end of the stream has been reached."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.common"
artifact: com.azure:azure-storage-common:12.10.0
