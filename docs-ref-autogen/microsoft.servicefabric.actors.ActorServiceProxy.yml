### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.ActorServiceProxy
  id: ActorServiceProxy
  parent: microsoft.servicefabric.actors
  children:
  - microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,ActorId)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,ActorId,String)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,long)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,long,String)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(URI,ActorId)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(URI,ActorId,String)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(URI,long)
  - microsoft.servicefabric.actors.ActorServiceProxy.create(URI,long,String)
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: ActorServiceProxy
  nameWithType: ActorServiceProxy
  fullName: microsoft.servicefabric.actors.ActorServiceProxy
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 12
  package: microsoft.servicefabric.actors
  summary: "<p>Proxy used by clients to interact with the actor service running in Service Fabric cluster and perform actor service level operations. </p>"
  syntax:
    content: public class ActorServiceProxy
  inheritance:
  - java.lang.Object
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,ActorId)
  id: create(Class<T>,URI,ActorId)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 30
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting.Service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,ActorId,String)
  id: create(Class<T>,URI,ActorId,String)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 55
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting.Service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,long)
  id: create(Class<T>,URI,long)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 79
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting.Service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T>,URI,long,String)
  id: create(Class<T>,URI,long,String)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 103
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static static<T extends Service> T create(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceInterfaceType
      type: ffb09d2d
      description: <p>The service interface type implemented by the actor service. </p>
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: 1e2c6103microsoft.servicefabric.services.remoting.Service21353812
      description: >-
        <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and<code>&lt;T&gt; 

            </code> . </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(URI,ActorId)
  id: create(URI,ActorId)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(URI serviceUri, ActorId actorId)
  nameWithType: ActorServiceProxy.create(URI serviceUri, ActorId actorId)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, ActorId actorId)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 125
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static ActorService create(URI serviceUri, ActorId actorId)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    return:
      type: microsoft.servicefabric.actors.ActorService
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> interfaces. </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(URI,ActorId,String)
  id: create(URI,ActorId,String)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: ActorServiceProxy.create(URI serviceUri, ActorId actorId, String listenerName)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, ActorId actorId, String listenerName)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 147
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static ActorService create(URI serviceUri, ActorId actorId, String listenerName)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: actorId
      type: microsoft.servicefabric.actors.ActorId
      description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: microsoft.servicefabric.actors.ActorService
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> interfaces. </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(URI,long)
  id: create(URI,long)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(URI serviceUri, long partitionKey)
  nameWithType: ActorServiceProxy.create(URI serviceUri, long partitionKey)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, long partitionKey)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 164
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static ActorService create(URI serviceUri, long partitionKey)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    return:
      type: microsoft.servicefabric.actors.ActorService
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> interfaces. </p>
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create(URI,long,String)
  id: create(URI,long,String)
  parent: microsoft.servicefabric.actors.ActorServiceProxy
  href: microsoft.servicefabric.actors.ActorServiceProxy.yml
  langs:
  - java
  name: create(URI serviceUri, long partitionKey, String listenerName)
  nameWithType: ActorServiceProxy.create(URI serviceUri, long partitionKey, String listenerName)
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create(URI serviceUri, long partitionKey, String listenerName)
  overload: microsoft.servicefabric.actors.ActorServiceProxy.create*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/ActorServiceProxy.java
    startLine: 185
  package: microsoft.servicefabric.actors
  summary: "<p>Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.</p>\r\n<p></p>"
  syntax:
    content: public static ActorService create(URI serviceUri, long partitionKey, String listenerName)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the actor service to connect to. </p>
    - id: partitionKey
      type: 0364520f
      description: <p>The key of the actor service partition to connect to. </p>
    - id: listenerName
      type: "26831127"
      description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    return:
      type: microsoft.servicefabric.actors.ActorService
      description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxy" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxy"></xref> and <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> interfaces. </p>
references:
- uid: ffb09d2d
  spec.java:
  - name: Class<T>
    fullName: Class<T>
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 1e2c6103microsoft.servicefabric.services.remoting.Service21353812
  spec.java:
  - name: 'static<T extends '
    fullName: 'static<T extends '
  - uid: microsoft.servicefabric.services.remoting.Service
    name: Service
    fullName: microsoft.servicefabric.services.remoting.Service
    href: microsoft.servicefabric.services.remoting.Service.yml
  - name: '> T'
    fullName: '> T'
- uid: microsoft.servicefabric.actors.ActorServiceProxy.create*
  name: create
  nameWithType: ActorServiceProxy.create
  fullName: microsoft.servicefabric.actors.ActorServiceProxy.create
  package: microsoft.servicefabric.actors
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: microsoft.servicefabric.services.remoting.Service
  parent: microsoft.servicefabric.services.remoting
  href: microsoft.servicefabric.services.remoting.Service.yml
  name: Service
  nameWithType: Service
  fullName: microsoft.servicefabric.services.remoting.Service
  type: Interface
  summary: "<p>This is the marker interface for enabling interface Remoting for services. An <xref uid=\"microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.services.remoting.runtime.ServiceRemotingListener\"></xref> provides remoting for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be accessed via Proxy on the client side. </p>"
  syntax:
    content: public interface Service
- uid: microsoft.servicefabric.actors.ActorId
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorId.yml
  name: ActorId
  nameWithType: ActorId
  fullName: microsoft.servicefabric.actors.ActorId
  type: Class
  summary: "<p>ActorId represents identity of an actor within an actor service. The actors can be identified by <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.UUID\"></xref> or long. </p>"
  syntax:
    content: public class ActorId
- uid: microsoft.servicefabric.services.remoting.client.ServiceProxy
  parent: microsoft.servicefabric.services.remoting.client
  href: microsoft.servicefabric.services.remoting.client.ServiceProxy.yml
  name: ServiceProxy
  nameWithType: ServiceProxy
  fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy
  type: Interface
  summary: "<p>This is the base Client side interface for Remoting. The framework provides the Remoting infrastructure for all the service contracts inheriting from IService through ServiceRemotingListener and ServiceProxy. </p>"
  syntax:
    content: public interface ServiceProxy
- uid: microsoft.servicefabric.actors.ActorService
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorService.yml
  name: ActorService
  nameWithType: ActorService
  fullName: microsoft.servicefabric.actors.ActorService
  type: Interface
  summary: "<p>Defines the interface containing methods which can be called at Actor Service level. </p>"
  syntax:
    content: public interface ActorService extends Service
