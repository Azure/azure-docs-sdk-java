items:
- uid: system.fabric.health._application_health
  id: _application_health
  parent: system.fabric.health
  children:
  - system.fabric.health._application_health.getApplicationName()
  - system.fabric.health._application_health.getDeployedApplicationHealthState()
  - system.fabric.health._application_health.getServiceHealthState()
  href: system.fabric.health._application_health.yml
  langs:
  - java
  name: ApplicationHealth
  nameWithType: ApplicationHealth
  fullName: system.fabric.health.ApplicationHealth
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
    startLine: 10
  package: system.fabric.health
  summary: <p>Describes the health of an application as returned by <xref href="system.fabric._health_client.getApplicationHealthAsync(URI)" data-throw-if-not-resolved="false"></xref></p>
  syntax:
    content: public class ApplicationHealth extends EntityHealth
  inheritance:
  - java.lang.Object
  - system.fabric.health._entity_health
  inheritedMembers:
  - system.fabric.health._application_health.ApplicationHealth(String,int,ServiceHealthState [],DeployedApplicationHealthState [],HealthEvent [],HealthEvaluation [])
  - system.fabric.health._entity_health.EntityHealth(int,List<HealthEvent>,List<HealthEvaluation>)
  - system.fabric.health._entity_health.getAggregatedHealthState()
  - system.fabric.health._entity_health.getHealthEvents()
  - system.fabric.health._entity_health.getUnhealthyEvaluations()
- uid: system.fabric.health._application_health.getApplicationName()
  id: getApplicationName()
  parent: system.fabric.health._application_health
  href: system.fabric.health._application_health.yml
  langs:
  - java
  name: getApplicationName()
  nameWithType: ApplicationHealth.getApplicationName()
  fullName: URI system.fabric.health.ApplicationHealth.getApplicationName()
  overload: system.fabric.health._application_health.getApplicationName*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
    startLine: 44
  package: system.fabric.health
  summary: >-
    <p>Gets the application name, which uniquely identifies the application.</p>

    <p></p>
  syntax:
    content: public URI getApplicationName()
    return:
      type: "62304784"
      description: <p>Application Name URI </p>
- uid: system.fabric.health._application_health.getDeployedApplicationHealthState()
  id: getDeployedApplicationHealthState()
  parent: system.fabric.health._application_health
  href: system.fabric.health._application_health.yml
  langs:
  - java
  name: getDeployedApplicationHealthState()
  nameWithType: ApplicationHealth.getDeployedApplicationHealthState()
  fullName: List<DeployedApplicationHealthState> system.fabric.health.ApplicationHealth.getDeployedApplicationHealthState()
  overload: system.fabric.health._application_health.getDeployedApplicationHealthState*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
    startLine: 79
  package: system.fabric.health
  summary: >-
    <p>Gets the deployed application health states for the current application as found in the health store. </p>

    <p>deployed applications for the current application as found in the health store. Only deployed applications that respect the <xref href="system.fabric._application_health_query_description.getDeployedApplicationHealthStatesFilter()" data-throw-if-not-resolved="false"></xref> (if specified) are returned. If the input filter is not specified, all deployed applications are returned. </p>

    <p>All deployed applications are evaluated to determine the application aggregated health. </p>

    <p></p>
  syntax:
    content: public List<DeployedApplicationHealthState> getDeployedApplicationHealthState()
    return:
      type: 5618da2dsystem.fabric.health._deployed_application_health_statea08ddfce
      description: <p>list of health state of deployed applications. </p>
- uid: system.fabric.health._application_health.getServiceHealthState()
  id: getServiceHealthState()
  parent: system.fabric.health._application_health
  href: system.fabric.health._application_health.yml
  langs:
  - java
  name: getServiceHealthState()
  nameWithType: ApplicationHealth.getServiceHealthState()
  fullName: List<ServiceHealthState> system.fabric.health.ApplicationHealth.getServiceHealthState()
  overload: system.fabric.health._application_health.getServiceHealthState*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/system.fabric/src/system/fabric/health/ApplicationHealth.java
    startLine: 59
  package: system.fabric.health
  summary: >-
    <p>Gets the service health states for the current application as found in the health store. </p>

    <p>Only services that respect the <xref href="system.fabric._application_health_query_description.getServiceHealthStatesFilter()" data-throw-if-not-resolved="false"></xref> (if specified) are returned. If the input filter is not specified, all services are returned. All services are evaluated to determine the application aggregated health. </p>

    <p></p>
  syntax:
    content: public List<ServiceHealthState> getServiceHealthState()
    return:
      type: 5618da2dsystem.fabric.health._service_health_statea08ddfce
      description: <p>list of Services Health State </p>
references:
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: system.fabric.health._application_health.getApplicationName*
  name: getApplicationName
  nameWithType: ApplicationHealth.getApplicationName
  fullName: URI system.fabric.health.ApplicationHealth.getApplicationName
  package: system.fabric.health
- uid: 5618da2dsystem.fabric.health._service_health_statea08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: system.fabric.health._service_health_state
    name: ServiceHealthState
    fullName: system.fabric.health.ServiceHealthState
    href: system.fabric.health._service_health_state.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric.health._application_health.getServiceHealthState*
  name: getServiceHealthState
  nameWithType: ApplicationHealth.getServiceHealthState
  fullName: List<ServiceHealthState> system.fabric.health.ApplicationHealth.getServiceHealthState
  package: system.fabric.health
- uid: 5618da2dsystem.fabric.health._deployed_application_health_statea08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: system.fabric.health._deployed_application_health_state
    name: DeployedApplicationHealthState
    fullName: system.fabric.health.DeployedApplicationHealthState
    href: system.fabric.health._deployed_application_health_state.yml
  - name: '>'
    fullName: '>'
- uid: system.fabric.health._application_health.getDeployedApplicationHealthState*
  name: getDeployedApplicationHealthState
  nameWithType: ApplicationHealth.getDeployedApplicationHealthState
  fullName: List<DeployedApplicationHealthState> system.fabric.health.ApplicationHealth.getDeployedApplicationHealthState
  package: system.fabric.health
- uid: system.fabric.health._application_health.ApplicationHealth(String,int,ServiceHealthState [],DeployedApplicationHealthState [],HealthEvent [],HealthEvaluation [])
- uid: system.fabric.health._entity_health.EntityHealth(int,List<HealthEvent>,List<HealthEvaluation>)
  parent: system.fabric.health._entity_health
  href: system.fabric.health._entity_health.yml
  name: EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)
  nameWithType: EntityHealth.EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)
  fullName: system.fabric.health.EntityHealth.EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)
  type: Constructor
  syntax:
    content: protected EntityHealth(int aggregatedHealthState, List<HealthEvent> healthEvents, List<HealthEvaluation> unhealthyEvaluations)
    parameters:
    - id: aggregatedHealthState
      type: f75371fa
    - id: healthEvents
      type: 5618da2dsystem.fabric.health._health_eventa08ddfce
    - id: unhealthyEvaluations
      type: 5618da2dsystem.fabric.health._health_evaluationa08ddfce
- uid: system.fabric.health._entity_health.getAggregatedHealthState()
  parent: system.fabric.health._entity_health
  href: system.fabric.health._entity_health.yml
  name: getAggregatedHealthState()
  nameWithType: EntityHealth.getAggregatedHealthState()
  fullName: HealthState system.fabric.health.EntityHealth.getAggregatedHealthState()
  type: Method
  summary: >-
    <p>Gets the entity aggregated health state.</p>

    <p></p>
  syntax:
    content: public HealthState getAggregatedHealthState()
    return:
      type: system.fabric.health._health_state
      description: >-
        <p>

          <xref href="system.fabric.health._health_state" data-throw-if-not-resolved="false"></xref> representing the aggregated health state computed by Health Manager based on reported events on entity and its children (if any) and desired health policy. </p>
- uid: system.fabric.health._entity_health.getHealthEvents()
  parent: system.fabric.health._entity_health
  href: system.fabric.health._entity_health.yml
  name: getHealthEvents()
  nameWithType: EntityHealth.getHealthEvents()
  fullName: List<HealthEvent> system.fabric.health.EntityHealth.getHealthEvents()
  type: Method
  summary: >-
    <p>Gets the health events reported on the entity.</p>

    <p>

      <bold>Remarks:</bold>The health events are created based on health reports sent to health store. They contain additional metadata added by health store. </p>
  syntax:
    content: public List<HealthEvent> getHealthEvents()
    return:
      type: 5618da2dsystem.fabric.health._health_eventa08ddfce
      description: <p>The health events reported on the entity. </p>
- uid: system.fabric.health._entity_health.getUnhealthyEvaluations()
  parent: system.fabric.health._entity_health
  href: system.fabric.health._entity_health.yml
  name: getUnhealthyEvaluations()
  nameWithType: EntityHealth.getUnhealthyEvaluations()
  fullName: List<HealthEvaluation> system.fabric.health.EntityHealth.getUnhealthyEvaluations()
  type: Method
  summary: >-
    <p>Gets the unhealthy evaluations that show why the current aggregated health state was returned by Health Manager.</p>

    <p></p>
  syntax:
    content: public List<HealthEvaluation> getUnhealthyEvaluations()
    return:
      type: 5618da2dsystem.fabric.health._health_evaluationa08ddfce
      description: <p>The unhealthy evaluations that describe why the current aggregated health state was returned by Health Manager. </p>
- uid: system.fabric.health._entity_health
  parent: system.fabric.health
  href: system.fabric.health._entity_health.yml
  name: EntityHealth
  nameWithType: EntityHealth
  fullName: system.fabric.health.EntityHealth
  type: Class
  summary: <p>Represents the base class for all entity health related classes. </p>
  syntax:
    content: public class EntityHealth
- uid: system.fabric.health._service_health_state
  parent: system.fabric.health
  href: system.fabric.health._service_health_state.yml
  name: ServiceHealthState
  nameWithType: ServiceHealthState
  fullName: system.fabric.health.ServiceHealthState
  type: Class
  summary: <p>Represents the health state of a service, which contains the service identifier and its aggregated health state. </p>
  syntax:
    content: public class ServiceHealthState
- uid: system.fabric.health._deployed_application_health_state
  parent: system.fabric.health
  href: system.fabric.health._deployed_application_health_state.yml
  name: DeployedApplicationHealthState
  nameWithType: DeployedApplicationHealthState
  fullName: system.fabric.health.DeployedApplicationHealthState
  type: Class
  summary: <p>Represents the health state of a deployed application, which contains the entity identifier and the aggregated health state. </p>
  syntax:
    content: public class DeployedApplicationHealthState
- uid: system.fabric.health._health_event
  parent: system.fabric.health
  href: system.fabric.health._health_event.yml
  name: HealthEvent
  nameWithType: HealthEvent
  fullName: system.fabric.health.HealthEvent
  type: Class
  summary: <p>A <xref href="system.fabric.health._health_event" data-throw-if-not-resolved="false"></xref> object is a structure which contains the health information that is used while reporting health on an entity via ReportHealth API </p>
  syntax:
    content: public class HealthEvent
- uid: system.fabric.health._health_evaluation
  parent: system.fabric.health
  href: system.fabric.health._health_evaluation.yml
  name: HealthEvaluation
  nameWithType: HealthEvaluation
  fullName: system.fabric.health.HealthEvaluation
  type: Class
  summary: <p>Represents a health evaluation which describes the data and the algorithm used by health store to evaluate the health of an entity. </p>
  syntax:
    content: public class HealthEvaluation
- uid: system.fabric._application_health_query_description.getServiceHealthStatesFilter()
  parent: system.fabric._application_health_query_description
  href: system.fabric._application_health_query_description.yml
  name: getServiceHealthStatesFilter()
  nameWithType: ApplicationHealthQueryDescription.getServiceHealthStatesFilter()
  fullName: ServiceHealthStatesFilter system.fabric.ApplicationHealthQueryDescription.getServiceHealthStatesFilter()
  type: Method
  summary: >-
    <p>Gets the filter for <xref href="system.fabric.health._service_health_state" data-throw-if-not-resolved="false"></xref> children. Only children that match the filter will be returned. All children will be used to evaluate the application aggregated health state.</p>

    <p>

      <bold>Remarks:</bold> Only children that match the filter will be returned. All children will be used to evaluate the application aggregated health state. If the filter is not specified, all service children of the application are returned. </p>
  syntax:
    content: public ServiceHealthStatesFilter getServiceHealthStatesFilter()
    return:
      type: system.fabric._service_health_states_filter
      description: <p>The filter for <xref href="system.fabric.health._service_health_state" data-throw-if-not-resolved="false"></xref> children. </p>
- uid: system.fabric._application_health_query_description.getDeployedApplicationHealthStatesFilter()
  parent: system.fabric._application_health_query_description
  href: system.fabric._application_health_query_description.yml
  name: getDeployedApplicationHealthStatesFilter()
  nameWithType: ApplicationHealthQueryDescription.getDeployedApplicationHealthStatesFilter()
  fullName: DeployedApplicationHealthStatesFilter system.fabric.ApplicationHealthQueryDescription.getDeployedApplicationHealthStatesFilter()
  type: Method
  summary: >-
    <p>Gets the filter for <xref href="system.fabric.health._deployed_application_health_state" data-throw-if-not-resolved="false"></xref> children. Only children that match the filter will be returned. All children will be used to evaluate the application aggregated health state.</p>

    <p>

      <bold>Remarks:</bold> Only children that match the filter will be returned. All children will be used to evaluate the application aggregated health state. If the filter is not specified, all deployed application children of the application are returned. </p>
  syntax:
    content: public DeployedApplicationHealthStatesFilter getDeployedApplicationHealthStatesFilter()
    return:
      type: system.fabric._deployed_application_health_states_filter
      description: <p>The filter for <xref href="system.fabric._deployed_application_health_states_filter" data-throw-if-not-resolved="false"></xref> children. </p>
- uid: system.fabric._health_client.getApplicationHealthAsync(URI)
  parent: system.fabric._health_client
  href: system.fabric._health_client.yml
  name: getApplicationHealthAsync(URI applicationName)
  nameWithType: HealthClient.getApplicationHealthAsync(URI applicationName)
  fullName: CompletableFuture<ApplicationHealth> system.fabric.HealthClient.getApplicationHealthAsync(URI applicationName)
  type: Method
  summary: >-
    <p>Asynchronously gets the health of the specified Service Fabric application.</p>

    <p></p>
  syntax:
    content: public CompletableFuture<ApplicationHealth> getApplicationHealthAsync(URI applicationName)
    parameters:
    - id: applicationName
      type: "62304784"
      description: <p>The URI of the Service Fabric application. </p>
    return:
      type: 9cdf14d0system.fabric.health._application_healtha08ddfce
      description: <p>The health of the specified Service Fabric application. </p>
