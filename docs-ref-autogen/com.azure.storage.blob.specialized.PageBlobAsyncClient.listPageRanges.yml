### YamlMime:JavaMember
uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges*"
fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges"
name: "listPageRanges"
nameWithType: "PageBlobAsyncClient.listPageRanges"
members:
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.models.BlobRange)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(BlobRange blobRange)"
  name: "listPageRanges(BlobRange blobRange)"
  nameWithType: "PageBlobAsyncClient.listPageRanges(BlobRange blobRange)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "blobRange"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRanges(BlobRange blobRange)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(offset);\n\n System.out.println(\"Valid Page Ranges are:\");\n client.listPageRanges(blobRange).subscribe(rangeItem -> System.out.printf(\"Offset: %s, Length: %s%n\",\n     rangeItem.getRange().getOffset(), rangeItem.getRange().getLength()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response containing the information of the cleared pages."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(com.azure.storage.blob.options.ListPageRangesOptions)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.listPageRanges(ListPageRangesOptions options)"
  name: "listPageRanges(ListPageRangesOptions options)"
  nameWithType: "PageBlobAsyncClient.listPageRanges(ListPageRangesOptions options)"
  summary: "Returns the list of valid page ranges for a page blob or snapshot of a page blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.ListPageRangesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ListPageRangesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.ListPageRangesOptions?alt=com.azure.storage.blob.options.ListPageRangesOptions&text=ListPageRangesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<PageRangeItem> listPageRanges(ListPageRangesOptions options)"
  desc: "Returns the list of valid page ranges for a page blob or snapshot of a page blob. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListPageRangesOptions options = new ListPageRangesOptions(new BlobRange(offset))\n     .setMaxResultsPerPage(1000).setRequestConditions(new BlobRequestConditions().setLeaseId(leaseId));\n\n client.listPageRanges(options)\n     .subscribe(rangeItem -> System.out.printf(\"Offset: %s, Length: %s%n\", rangeItem.getRange().getOffset(),\n         rangeItem.getRange().getLength()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-page-ranges"
  returns:
    description: "A reactive response emitting all the page ranges."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageRangeItem?alt=com.azure.storage.blob.models.PageRangeItem&text=PageRangeItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.19.0
