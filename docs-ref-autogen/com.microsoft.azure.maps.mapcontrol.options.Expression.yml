### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression
  id: Expression
  parent: com.microsoft.azure.maps.mapcontrol.options
  children:
  - com.microsoft.azure.maps.mapcontrol.options.Expression.abs(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.abs(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.all(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.any(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.array(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Number,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.bool(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean,boolean)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean,boolean,Locale)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression,Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression,Expression,Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.color(@ColorInt int)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull String...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.e()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,boolean)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.equals(@Nullable Object)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.Expression(@NonNull String,@Nullable Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.floor(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.floor(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.format(@NonNull FormatEntry...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression,@Nullable FormatOption...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String,@Nullable FormatOption...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.id()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.image(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Number,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator,@NonNull Expression,@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator,@NonNull Expression,Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.let(@Size(min=1) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.linear()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object [])
  - com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.literal(boolean)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.ln(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.ln(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.ln2()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull @Size(min=2) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull Expression,@NonNull Expression,@NonNull Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Number...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Number...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull String,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.neq(Expression,boolean)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.not(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.not(boolean)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.number(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Expression,@NonNull NumberFormatOption...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Number,@NonNull NumberFormatOption...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.object(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.pi()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Number...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.properties()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.raw(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Number,@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.round(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.round(Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Expression,@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Expression,Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Number,Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Number,Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Expression,Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Expression,Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Number,Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Number,Stop...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.stop(@NonNull Object,@NonNull Object)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.string(@NonNull Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression,@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number,@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Number...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase(@NonNull @Size(min=1) Expression...)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Number)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toArray()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toBool(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toColor(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toString()
  - com.microsoft.azure.maps.mapcontrol.options.Expression.toString(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull Expression)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull String)
  - com.microsoft.azure.maps.mapcontrol.options.Expression.zoom()
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: Expression
  nameWithType: Expression
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression
  type: Class
  source:
    remote: &o0
      path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
      branch: master
      repo: https://dev.azure.com/msazure/One/_git/Azure-IoT-Maps-AndroidSDK
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 111
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>The value for any layout property, paint property, or filter may be specified as an expression. An expression defines a formula for computing the value of the property using the operators described below. <ul><li><p>Element </p></li><li><p>Mathematical operators for performing arithmetic and other operations on numeric values </p></li><li><p>Logical operators for manipulating boolean values and making conditional decisions </p></li><li><p>String operators for manipulating strings </p></li><li><p>Data operators, providing access to the properties of source features </p></li><li><p>Camera operators, providing access to the parameters defining the current map view </p></li></ul></p>\r\n<p>Expressions are represented as JSON arrays. The first element of an expression array is a string naming the expression operator, e.g. \"*\"or \"case\". Subsequent elements (if any) are the arguments to the expression. Each argument is either a literal value (a string, number, boolean, or null), or another expression array. </p>\r\n<p>Data expression: a data expression is any expression that access feature data <ndash></ndash> that is, any expression that uses one of the data operators:get,has,id,geometry-type, or properties. Data expressions allow a feature's properties to determine its appearance. They can be used to differentiate features within the same layer and to create data visualizations. </p>\r\n<p>Camera expression: a camera expression is any expression that uses the zoom operator. Such expressions allow the the appearance of a layer to change with the map's zoom level. Camera expressions can be used to create the appearance of depth and to control data density. </p>\r\n<p>Composition: a single expression may use a mix of data operators, camera operators, and other operators. Such composite expressions allows a layer's appearance to be determined by a combination of the zoom level and individual feature properties. </p>\r\n<p>Example expression: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n      \"source-id\",\r\n      fillColor(\r\n        interpolate( linear(), zoom(),\r\n          stop(12, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.RED)),\r\n            stop(2f, color(Color.WHITE)),\r\n            stop(3f, color(Color.BLUE))\r\n          )),\r\n          stop(15, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.YELLOW)),\r\n            stop(2f, color(Color.LTGRAY)),\r\n            stop(3f, color(Color.CYAN))\r\n          )),\r\n          stop(18, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.WHITE)),\r\n            stop(2f, color(Color.GRAY)),\r\n            stop(3f, color(Color.GREEN))\r\n          ))\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>"
  syntax: &o1
    content: public class Expression
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.abs(@NonNull Number)
  id: abs(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: abs(@NonNull Number number)
  nameWithType: Expression.abs(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.abs(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.abs*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2698
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the absolute value of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(abs(-3.14159265359f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression abs(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>number to get absolute value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.abs(Expression)
  id: abs(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: abs(Expression expression)
  nameWithType: Expression.abs(Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.abs(Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.abs*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2677
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the absolute value of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(abs(subtract(pi())))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression abs(Expression expression)
    parameters:
    - id: expression
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>number expression to get absolute value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated()
  id: accumulated()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: accumulated()
  nameWithType: Expression.accumulated()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1411
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the value of a cluster property accumulated so far. Can only be used in the clusterProperties option of a clustered GeoJSON source. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>GeoJsonOptions options = new GeoJsonOptions()\r\n                                .withCluster(true)\r\n                                .withClusterProperty(\"max\", max(accumulated(), get(\"max\")).toArray(), get(\"mag\").toArray());\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression accumulated()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Expression)
  id: acos(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: acos(@NonNull Expression number)
  nameWithType: Expression.acos(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.acos*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2452
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arccosine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(acos(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression acos(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the arccosine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Number)
  id: acos(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: acos(@NonNull Number number)
  nameWithType: Expression.acos(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.acos(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.acos*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2473
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arccosine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(acos(0))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression acos(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the arccosine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.all(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: all(@NonNull Expression... input)
  nameWithType: Expression.all(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.all(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.all*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1143
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns `true` if all the inputs are `true`, `false` otherwise. </p>\r\n<p>The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(all(get(\"keyToValue\"), get(\"keyToOtherValue\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression all(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.any(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: any(@NonNull Expression... input)
  nameWithType: Expression.any(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.any(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.any*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1168
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns `true` if any of the inputs are `true`, `false` otherwise. </p>\r\n<p>The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(any(get(\"keyToValue\"), get(\"keyToOtherValue\")))\r\n    );   *  \r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression any(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.array(@NonNull Expression)
  id: array(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: array(@NonNull Expression input)
  nameWithType: Expression.array(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.array(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.array*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3023
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Asserts that the input is an array (optionally with a specific item type and length). If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.</p>\r\n<p></p>"
  syntax:
    content: public static Expression array(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Expression)
  id: asin(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: asin(@NonNull Expression number)
  nameWithType: Expression.asin(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.asin*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2410
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arcsine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(asin(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression asin(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the arcsine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Number)
  id: asin(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: asin(@NonNull Number number)
  nameWithType: Expression.asin(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.asin(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.asin*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2431
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arcsine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(asin(90))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression asin(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the arcsine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Expression,@NonNull Expression)
  id: at(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: at(@NonNull Expression number, @NonNull Expression expression)
  nameWithType: Expression.at(@NonNull Expression number, @NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Expression number, @NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.at*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1481
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>HeatmapLayer layer = new HeatmapLayer(\"layer-id\", \"source-id\");\r\n    layer.setProperties(\r\n        heatmapColor(interpolate(linear(), heatmapDensity(),\r\n            literal(0), rgba(33, 102, 172, 0),\r\n            literal(0.2), rgb(103, 169, 207),\r\n            literal(0.4), rgb(209, 229, 240),\r\n            literal(0.6), rgb(253, 219, 199),\r\n            literal(0.8), rgb(239, 138, 98),\r\n            literal(1), rgb(178, 24, 43))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p>\r\nExample usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>LineLayer layer = new LineLayer(\"layer-id\", \"source-id\");\r\n    layer.setProperties(\r\n        lineGradient(interpolate(\r\n            linear(), lineProgress(),\r\n            stop(0f, rgb(0, 0, 255)),\r\n            stop(0.5f, rgb(0, 255, 0)),\r\n            stop(1f, rgb(255, 0, 0)))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression at(@NonNull Expression number, @NonNull Expression expression)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the index expression </p>
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the array expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression Gets the progress along a gradient line. Can only be used in the line-gradient property. </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Number,@NonNull Expression)
  id: at(@NonNull Number,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: at(@NonNull Number number, @NonNull Expression expression)
  nameWithType: Expression.at(@NonNull Number number, @NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.at(@NonNull Number number, @NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.at*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1492
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves an item from an array.</p>\r\n<p></p>"
  syntax:
    content: public static Expression at(@NonNull Number number, @NonNull Expression expression)
    parameters:
    - id: number
      type: b8420207
      description: <p>the index expression </p>
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the array expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Expression)
  id: atan(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: atan(@NonNull Expression number)
  nameWithType: Expression.atan(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.atan*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2494
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arctangent of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(asin(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression atan(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the arctangent for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Number)
  id: atan(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: atan(@NonNull Number number)
  nameWithType: Expression.atan(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.atan(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.atan*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2515
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the arctangent of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(atan(90))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression atan(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the arctangent for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.bool(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: bool(@NonNull Expression... input)
  nameWithType: Expression.bool(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.bool(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.bool*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3106
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean value is obtained. If none of the inputs are booleans, the expression is an error. The asserted input value is returned as result.</p>\r\n<p></p>"
  syntax:
    content: public static Expression bool(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(@NonNull Number)
  id: ceil(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: ceil(@NonNull Number number)
  nameWithType: Expression.ceil(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2740
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the smallest integer that is greater than or equal to the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(ceil(3.14159265359))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression ceil(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>number to get value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(Expression)
  id: ceil(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: ceil(Expression expression)
  nameWithType: Expression.ceil(Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil(Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2719
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the smallest integer that is greater than or equal to the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(ceil(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression ceil(Expression expression)
    parameters:
    - id: expression
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>number expression to get value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: coalesce(@NonNull Expression... input)
  nameWithType: Expression.coalesce(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1328
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Evaluates each expression in turn until the first non-null value is obtained, and returns that value. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textColor(\r\n            coalesce(\r\n                get(\"keyToNullValue\"),\r\n                get(\"keyToNonNullValue\")\r\n            )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression coalesce(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean,boolean)
  id: collator(boolean,boolean)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: collator(boolean caseSensitive, boolean diacriticSensitive)
  nameWithType: Expression.collator(boolean caseSensitive, boolean diacriticSensitive)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean caseSensitive, boolean diacriticSensitive)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.collator*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3157
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a collator for use in locale-dependent comparison operations. The case-sensitive and diacritic-sensitive options default to false. The locale argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the collator will use a system-defined fallback locale. Use resolved-locale to test the results of locale fallback behavior.</p>\r\n<p></p>"
  syntax:
    content: public static Expression collator(boolean caseSensitive, boolean diacriticSensitive)
    parameters:
    - id: caseSensitive
      type: 4fc6e284
      description: <p>case sensitive flag </p>
    - id: diacriticSensitive
      type: 4fc6e284
      description: <p>diacritic sensitive flag </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean,boolean,Locale)
  id: collator(boolean,boolean,Locale)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: collator(boolean caseSensitive, boolean diacriticSensitive, Locale locale)
  nameWithType: Expression.collator(boolean caseSensitive, boolean diacriticSensitive, Locale locale)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(boolean caseSensitive, boolean diacriticSensitive, Locale locale)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.collator*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3123
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a collator for use in locale-dependent comparison operations. The case-sensitive and diacritic-sensitive options default to false. The locale argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the collator will use a system-defined fallback locale. Use resolved-locale to test the results of locale fallback behavior.</p>\r\n<p></p>"
  syntax:
    content: public static Expression collator(boolean caseSensitive, boolean diacriticSensitive, Locale locale)
    parameters:
    - id: caseSensitive
      type: 4fc6e284
      description: <p>case sensitive flag </p>
    - id: diacriticSensitive
      type: 4fc6e284
      description: <p>diacritic sensitive flag </p>
    - id: locale
      type: 240f1f91
      description: <p>locale </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression,Expression)
  id: collator(Expression,Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: collator(Expression caseSensitive, Expression diacriticSensitive)
  nameWithType: Expression.collator(Expression caseSensitive, Expression diacriticSensitive)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression caseSensitive, Expression diacriticSensitive)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.collator*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3197
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a collator for use in locale-dependent comparison operations. The case-sensitive and diacritic-sensitive options default to false. The locale argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the collator will use a system-defined fallback locale. Use resolved-locale to test the results of locale fallback behavior.</p>\r\n<p></p>"
  syntax:
    content: public static Expression collator(Expression caseSensitive, Expression diacriticSensitive)
    parameters:
    - id: caseSensitive
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>case sensitive flag </p>
    - id: diacriticSensitive
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>diacritic sensitive flag </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression,Expression,Expression)
  id: collator(Expression,Expression,Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: collator(Expression caseSensitive, Expression diacriticSensitive, Expression locale)
  nameWithType: Expression.collator(Expression caseSensitive, Expression diacriticSensitive, Expression locale)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.collator(Expression caseSensitive, Expression diacriticSensitive, Expression locale)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.collator*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3177
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a collator for use in locale-dependent comparison operations. The case-sensitive and diacritic-sensitive options default to false. The locale argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the collator will use a system-defined fallback locale. Use resolved-locale to test the results of locale fallback behavior.</p>\r\n<p></p>"
  syntax:
    content: public static Expression collator(Expression caseSensitive, Expression diacriticSensitive, Expression locale)
    parameters:
    - id: caseSensitive
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>case sensitive flag </p>
    - id: diacriticSensitive
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>diacritic sensitive flag </p>
    - id: locale
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>locale </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.color(@ColorInt int)
  id: color(@ColorInt int)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: color(@ColorInt int color)
  nameWithType: Expression.color(@ColorInt int color)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.color(@ColorInt int color)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.color*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 231
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Expression literal utility method to convert a color int to an color expression </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     fillColor(color(Color.GREEN)\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression color(@ColorInt int color)
    parameters:
    - id: color
      type: 3d494a14
      description: <p>the int color </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the color expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: concat(@NonNull Expression... input)
  nameWithType: Expression.concat(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.concat*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2986
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a string consisting of the concatenation of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(concat(get(\"key-to-string-value\"), literal(\"other string\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression concat(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull String...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: concat(@NonNull String... input)
  nameWithType: Expression.concat(@NonNull String... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.concat(@NonNull String... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.concat*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3007
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a string consisting of the concatenation of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(concat(\"foo\", \"bar\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression concat(@NonNull String... input)
    parameters:
    - id: input
      type: 02c3141c
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Expression)
  id: cos(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: cos(@NonNull Expression number)
  nameWithType: Expression.cos(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.cos*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2326
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the cosine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(cos(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression cos(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the cosine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Number)
  id: cos(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: cos(@NonNull Number number)
  nameWithType: Expression.cos(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cos(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.cos*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2347
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the cosine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(cos(0))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression cos(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the cosine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: cubicBezier(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: cubicBezier(@NonNull Expression x1, @NonNull Expression y1, @NonNull Expression x2, @NonNull Expression y2)
  nameWithType: Expression.cubicBezier(@NonNull Expression x1, @NonNull Expression y1, @NonNull Expression x2, @NonNull Expression y2)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Expression x1, @NonNull Expression y1, @NonNull Expression x2, @NonNull Expression y2)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4000
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Interpolates using the cubic bezier curve defined by the given control points. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            cubicBezier(0.42f, 0.0f, 1.0f, 1.0f), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Interpolator cubicBezier(@NonNull Expression x1, @NonNull Expression y1, @NonNull Expression x2, @NonNull Expression y2)
    parameters:
    - id: x1
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>x value of the first point of a cubic bezier, ranges from 0 to 1 </p>
    - id: y1
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>y value of the first point of a cubic bezier, ranges from 0 to 1 </p>
    - id: x2
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>x value of the second point of a cubic bezier, ranges from 0 to 1 </p>
    - id: y2
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>y value fo the second point of a cubic bezier, ranges from 0 to 1 </p>
    return:
      type: cedce597
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  id: cubicBezier(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: cubicBezier(@NonNull Number x1, @NonNull Number y1, @NonNull Number x2, @NonNull Number y2)
  nameWithType: Expression.cubicBezier(@NonNull Number x1, @NonNull Number y1, @NonNull Number x2, @NonNull Number y2)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier(@NonNull Number x1, @NonNull Number y1, @NonNull Number x2, @NonNull Number y2)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4032
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Interpolates using the cubic bezier curve defined by the given control points. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            cubicBezier(0.42f, 0.0f, 1.0f, 1.0f), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Interpolator cubicBezier(@NonNull Number x1, @NonNull Number y1, @NonNull Number x2, @NonNull Number y2)
    parameters:
    - id: x1
      type: b8420207
      description: <p>x value of the first point of a cubic bezier, ranges from 0 to 1 </p>
    - id: y1
      type: b8420207
      description: <p>y value of the first point of a cubic bezier, ranges from 0 to 1 </p>
    - id: x2
      type: b8420207
      description: <p>x value of the second point of a cubic bezier, ranges from 0 to 1 </p>
    - id: y2
      type: b8420207
      description: <p>y value fo the second point of a cubic bezier, ranges from 0 to 1 </p>
    return:
      type: cedce597
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Expression,@NonNull Expression)
  id: division(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: division(@NonNull Expression first, @NonNull Expression second)
  nameWithType: Expression.division(@NonNull Expression first, @NonNull Expression second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Expression first, @NonNull Expression second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.division*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1985
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of floating point division of the first input by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(division(literal(10.0f), pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression division(@NonNull Expression first, @NonNull Expression second)
    parameters:
    - id: first
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first number </p>
    - id: second
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Number,@NonNull Number)
  id: division(@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: division(@NonNull Number first, @NonNull Number second)
  nameWithType: Expression.division(@NonNull Number first, @NonNull Number second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.division(@NonNull Number first, @NonNull Number second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.division*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2007
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of floating point division of the first input by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(division(10.0f, 20.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression division(@NonNull Number first, @NonNull Number second)
    parameters:
    - id: first
      type: b8420207
      description: <p>the first number </p>
    - id: second
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull Expression)
  id: downcase(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: downcase(@NonNull Expression input)
  nameWithType: Expression.downcase(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2940
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the input string converted to lowercase. </p>\r\n<p>Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(downcase(get(\"key-to-string-value\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression downcase(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull String)
  id: downcase(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: downcase(@NonNull String input)
  nameWithType: Expression.downcase(@NonNull String input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase(@NonNull String input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2965
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the input string converted to lowercase. </p>\r\n<p>Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(upcase(\"key-to-string-value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression downcase(@NonNull String input)
    parameters:
    - id: input
      type: 3d663bb1
      description: <p>string to downcase </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.e()
  id: e()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: e()
  nameWithType: Expression.e()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.e()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.e*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1783
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the mathematical constant e. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(product(literal(10.0f), e()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression e()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Expression)
  id: eq(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.eq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 394
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: eq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.eq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 418
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull Number)
  id: eq(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.eq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 510
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull String)
  id: eq(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.eq(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 463
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: eq(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.eq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 487
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression,boolean)
  id: eq(@NonNull Expression,boolean)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: eq(@NonNull Expression compareOne, boolean compareTwo)
  nameWithType: Expression.eq(@NonNull Expression compareOne, boolean compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq(@NonNull Expression compareOne, boolean compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 441
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(eq(get(\"keyToValue\"), true))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression eq(@NonNull Expression compareOne, boolean compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 4fc6e284
      description: <p>the second boolean </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.equals(@Nullable Object)
  id: equals(@Nullable Object)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: equals(@Nullable Object o)
  nameWithType: Expression.equals(@Nullable Object o)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.equals(@Nullable Object o)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.equals*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4128
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Indicates whether some other object is \"equal to\" this one.</p>\r\n<p></p>"
  syntax:
    content: public boolean equals(@Nullable Object o)
    parameters:
    - id: o
      type: 6c59ec0e
      description: <p>the other object </p>
    return:
      type: 4fc6e284
      description: <p>true if equal, false if not </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Expression)
  id: exponential(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: exponential(@NonNull Expression expression)
  nameWithType: Expression.exponential(@NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3969
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Interpolates exponentially between the stops just less than and just greater than the input. The parameter controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            exponential(get(\"keyToValue\")), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Interpolator exponential(@NonNull Expression expression)
    parameters:
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>base number expression </p>
    return:
      type: cedce597
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Number)
  id: exponential(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: exponential(@NonNull Number base)
  nameWithType: Expression.exponential(@NonNull Number base)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential(@NonNull Number base)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3938
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            exponential(0.5f), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Interpolator exponential(@NonNull Number base)
    parameters:
    - id: base
      type: b8420207
      description: <p>value controlling the route at which the output increases </p>
    return:
      type: cedce597
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.Expression(@NonNull String,@Nullable Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: Expression(@NonNull String operator,@Nullable Expression... arguments)
  nameWithType: Expression.Expression(@NonNull String operator,@Nullable Expression... arguments)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.Expression(@NonNull String operator,@Nullable Expression... arguments)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.Expression*
  type: Constructor
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 132
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Creates an expression from its operator and varargs expressions.</p>\r\n<p></p>"
  syntax:
    content: public Expression(@NonNull String operator,@Nullable Expression... arguments)
    parameters:
    - id: operator
      type: 3d663bb1
      description: <p>the expression operator </p>
    - id: arguments
      type: a1286b14
      description: <p>expressions input </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.floor(@NonNull Number)
  id: floor(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: floor(@NonNull Number number)
  nameWithType: Expression.floor(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.floor(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.floor*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2782
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the largest integer that is less than or equal to the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(floor(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression floor(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>number to get value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.floor(Expression)
  id: floor(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: floor(Expression expression)
  nameWithType: Expression.floor(Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.floor(Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.floor*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2761
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the largest integer that is less than or equal to the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(floor(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression floor(Expression expression)
    parameters:
    - id: expression
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>number expression to get value from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.format(@NonNull FormatEntry...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: format(@NonNull FormatEntry... formatEntries)
  nameWithType: Expression.format(@NonNull FormatEntry... formatEntries)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.format(@NonNull FormatEntry... formatEntries)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.format*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3237
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns formatted text containing annotations for use in mixed-format text-field entries. </p>\r\n<p>To build the expression, use <xref uid=\"\" data-throw-if-not-resolved=\"false\">formatEntry(Expression, FormatOption...)</xref>. </p>\r\n<p>\"format\" expression can be used, for example, with the <xref uid=\"\" data-throw-if-not-resolved=\"false\">SymbolLayerOptions#textField(Expression)</xref> and accepts unlimited numbers of formatted sections. </p>\r\n<p>Each section consist of the input, the displayed text, and options, like font-scale and text-font. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n       textField(\r\n        format(\r\n          formatEntry(\r\n            get(\"header_property\"),\r\n            formatFontScale(2.0),\r\n            formatTextFont(new String[] {\"DIN Offc Pro Regular\", \"Arial Unicode MS Regular\"})\r\n          ),\r\n          formatEntry(concat(literal(\"\\n\"), get(\"description_property\")), formatFontScale(1.5))\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression format(@NonNull FormatEntry... formatEntries)
    parameters:
    - id: formatEntries
      type: 8690356c
      description: <p>format entries </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression)
  id: formatEntry(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: formatEntry(@NonNull Expression text)
  nameWithType: Expression.formatEntry(@NonNull Expression text)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression text)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3288
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a format entry that can be used in <xref uid=\"\" data-throw-if-not-resolved=\"false\">format(FormatEntry...)</xref> to create formatted text fields. </p>\r\n<p>Text is required to be of a resulting type string. </p>\r\n<p>Text is required to be passed; <xref uid=\"\" data-throw-if-not-resolved=\"false\">FormatOption</xref>s are optional and will default to the base values defined for the symbol.</p>\r\n<p></p>"
  syntax:
    content: public static FormatEntry formatEntry(@NonNull Expression text)
    parameters:
    - id: text
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>displayed text </p>
    return:
      type: bbe6aec5
      description: <p>format entry </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression,@Nullable FormatOption...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: formatEntry(@NonNull Expression text, @Nullable FormatOption... formatOptions)
  nameWithType: Expression.formatEntry(@NonNull Expression text, @Nullable FormatOption... formatOptions)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull Expression text, @Nullable FormatOption... formatOptions)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3273
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a format entry that can be used in <xref uid=\"\" data-throw-if-not-resolved=\"false\">format(FormatEntry...)</xref> to create formatted text fields. </p>\r\n<p>Text is required to be of a resulting type string. </p>\r\n<p>Text is required to be passed; <xref uid=\"\" data-throw-if-not-resolved=\"false\">FormatOption</xref>s are optional and will default to the base values defined for the symbol.</p>\r\n<p></p>"
  syntax:
    content: public static FormatEntry formatEntry(@NonNull Expression text, @Nullable FormatOption... formatOptions)
    parameters:
    - id: text
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>displayed text </p>
    - id: formatOptions
      type: 2b6674c2
      description: <p>format options </p>
    return:
      type: bbe6aec5
      description: <p>format entry </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String)
  id: formatEntry(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: formatEntry(@NonNull String text)
  nameWithType: Expression.formatEntry(@NonNull String text)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String text)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3319
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a format entry that can be used in <xref uid=\"\" data-throw-if-not-resolved=\"false\">format(FormatEntry...)</xref> to create formatted text fields. </p>\r\n<p>Text is required to be of a resulting type string. </p>\r\n<p>Text is required to be passed; <xref uid=\"\" data-throw-if-not-resolved=\"false\">FormatOption</xref>s are optional and will default to the base values defined for the symbol.</p>\r\n<p></p>"
  syntax:
    content: public static FormatEntry formatEntry(@NonNull String text)
    parameters:
    - id: text
      type: 3d663bb1
      description: <p>displayed text </p>
    return:
      type: bbe6aec5
      description: <p>format entry </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String,@Nullable FormatOption...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: formatEntry(@NonNull String text, @Nullable FormatOption... formatOptions)
  nameWithType: Expression.formatEntry(@NonNull String text, @Nullable FormatOption... formatOptions)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry(@NonNull String text, @Nullable FormatOption... formatOptions)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3304
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a format entry that can be used in <xref uid=\"\" data-throw-if-not-resolved=\"false\">format(FormatEntry...)</xref> to create formatted text fields. </p>\r\n<p>Text is required to be of a resulting type string. </p>\r\n<p>Text is required to be passed; <xref uid=\"\" data-throw-if-not-resolved=\"false\">FormatOption</xref>s are optional and will default to the base values defined for the symbol.</p>\r\n<p></p>"
  syntax:
    content: public static FormatEntry formatEntry(@NonNull String text, @Nullable FormatOption... formatOptions)
    parameters:
    - id: text
      type: 3d663bb1
      description: <p>displayed text </p>
    - id: formatOptions
      type: 2b6674c2
      description: <p>format options </p>
    return:
      type: bbe6aec5
      description: <p>format entry </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType()
  id: geometryType()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: geometryType()
  nameWithType: Expression.geometryType()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1371
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the feature's geometry type: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(concat(get(\"key-to-value\"), literal(\" \"), geometryType()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression geometryType()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression)
  id: get(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: get(@NonNull Expression input)
  nameWithType: Expression.get(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.get*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1548
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns null if the requested property is missing. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(get(\"key-to-feature\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression get(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression,@NonNull Expression)
  id: get(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: get(@NonNull Expression key, @NonNull Expression object)
  nameWithType: Expression.get(@NonNull Expression key, @NonNull Expression object)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull Expression key, @NonNull Expression object)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.get*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1594
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves a property value from another object. Returns null if the requested property is missing. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(get(\"key-to-property\", get(\"key-to-object\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression get(@NonNull Expression key, @NonNull Expression object)
    parameters:
    - id: key
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>a property value key </p>
    - id: object
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression object </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String)
  id: get(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: get(@NonNull String input)
  nameWithType: Expression.get(@NonNull String input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.get*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1571
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns null if the requested property is missing. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(get(\"key-to-feature\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression get(@NonNull String input)
    parameters:
    - id: input
      type: 3d663bb1
      description: <p>string input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String,@NonNull Expression)
  id: get(@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: get(@NonNull String key, @NonNull Expression object)
  nameWithType: Expression.get(@NonNull String key, @NonNull Expression object)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.get(@NonNull String key, @NonNull Expression object)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.get*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1617
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves a property value from another object. Returns null if the requested property is missing. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(get(\"key-to-property\", get(\"key-to-object\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression get(@NonNull String key, @NonNull Expression object)
    parameters:
    - id: key
      type: 3d663bb1
      description: <p>a property value key </p>
    - id: object
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression object </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Expression)
  id: gt(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.gt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 672
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly greater than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gt(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: gt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.gt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 696
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly greater than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gt(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull Number)
  id: gt(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.gt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 719
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly greater than the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gt(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gt(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull String)
  id: gt(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gt(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.gt(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 741
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly greater than the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gt(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gt(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: gt(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.gt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 765
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly greater than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gt(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Expression)
  id: gte(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.gte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 906
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is greater than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gte(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: gte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.gte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 930
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is greater than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gte(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull Number)
  id: gte(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.gte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 953
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is greater than or equal to the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gte(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gte(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull String)
  id: gte(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gte(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.gte(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 975
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is greater than or equal to the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gte(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gte(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: gte(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: gte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.gte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 999
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is greater than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(gte(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression gte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression)
  id: has(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: has(@NonNull Expression key)
  nameWithType: Expression.has(@NonNull Expression key)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression key)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.has*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1638
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Tests for the presence of an property value in the current feature's properties. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        has(get(\"keyToValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression has(@NonNull Expression key)
    parameters:
    - id: key
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression property value key </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression,@NonNull Expression)
  id: has(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: has(@NonNull Expression key, @NonNull Expression object)
  nameWithType: Expression.has(@NonNull Expression key, @NonNull Expression object)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull Expression key, @NonNull Expression object)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.has*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1681
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Tests for the presence of an property value from another object. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        has(get(\"keyToValue\"), get(\"keyToObject\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression has(@NonNull Expression key, @NonNull Expression object)
    parameters:
    - id: key
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression property value key </p>
    - id: object
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression object </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String)
  id: has(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: has(@NonNull String key)
  nameWithType: Expression.has(@NonNull String key)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String key)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.has*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1659
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Tests for the presence of an property value in the current feature's properties. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        has(\"keyToValue\")\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression has(@NonNull String key)
    parameters:
    - id: key
      type: 3d663bb1
      description: <p>the property value key </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String,@NonNull Expression)
  id: has(@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: has(@NonNull String key, @NonNull Expression object)
  nameWithType: Expression.has(@NonNull String key, @NonNull Expression object)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.has(@NonNull String key, @NonNull Expression object)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.has*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1703
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Tests for the presence of an property value from another object. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        has(\"keyToValue\", get(\"keyToObject\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression has(@NonNull String key, @NonNull Expression object)
    parameters:
    - id: key
      type: 3d663bb1
      description: <p>the property value key </p>
    - id: object
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression object </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode()
  id: hashCode()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: hashCode()
  nameWithType: Expression.hashCode()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4152
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a hash code value for the expression.</p>\r\n<p></p>"
  syntax:
    content: public int hashCode()
    return:
      type: f75371fa
      description: <p>a hash code value for this expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.id()
  id: id()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: id()
  nameWithType: Expression.id()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.id()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.id*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1391
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the feature's id, if it has one. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(id())\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression id()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.image(@NonNull Expression)
  id: image(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: image(@NonNull Expression input)
  nameWithType: Expression.image(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.image(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.image*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3361
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns image expression for use in '*-pattern' and 'icon-image' layer properties. Compared to string literals that can be used to represent an image, image expression allows to determine an image's availability at runtime, thus, can be used in conditional</p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\"layer-id\", \"source-id\");\r\n    symbolLayer.setProperties(\r\n        iconImage(image(get(\"key-to-feature\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p>Example usage with coalesce operator: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconImage(\r\n            coalesce(\r\n                image(literal(\"maki-11\")),\r\n                image(literal(\"bicycle-15\")),\r\n                image(literal(\"default-icon\"))\r\n            )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression image(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Expression,@NonNull Expression)
  id: in(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: in(@NonNull Expression needle, @NonNull Expression haystack)
  nameWithType: Expression.in(@NonNull Expression needle, @NonNull Expression haystack)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Expression needle, @NonNull Expression haystack)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.in*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1503
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves whether an item exists in an array or a substring exists in a string.</p>\r\n<p></p>"
  syntax:
    content: public static Expression in(@NonNull Expression needle, @NonNull Expression haystack)
    parameters:
    - id: needle
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the item expression </p>
    - id: haystack
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the array or string expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>true if exists. </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Number,@NonNull Expression)
  id: in(@NonNull Number,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: in(@NonNull Number needle, @NonNull Expression haystack)
  nameWithType: Expression.in(@NonNull Number needle, @NonNull Expression haystack)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull Number needle, @NonNull Expression haystack)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.in*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1514
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves whether an item exists in an array or a substring exists in a string.</p>\r\n<p></p>"
  syntax:
    content: public static Expression in(@NonNull Number needle, @NonNull Expression haystack)
    parameters:
    - id: needle
      type: b8420207
      description: <p>the item expression </p>
    - id: haystack
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the array or string expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>true if exists. </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull String,@NonNull Expression)
  id: in(@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: in(@NonNull String needle, @NonNull Expression haystack)
  nameWithType: Expression.in(@NonNull String needle, @NonNull Expression haystack)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.in(@NonNull String needle, @NonNull Expression haystack)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.in*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1525
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Retrieves whether an item exists in an array or a substring exists in a string.</p>\r\n<p></p>"
  syntax:
    content: public static Expression in(@NonNull String needle, @NonNull Expression haystack)
    parameters:
    - id: needle
      type: 3d663bb1
      description: <p>the item expression </p>
    - id: haystack
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the array or string expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>true if exists. </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator,@NonNull Expression,@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, @NonNull Expression... stops)
  nameWithType: Expression.interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, @NonNull Expression... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, @NonNull Expression... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3845
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces continuous, smooth results by interpolating between pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array&lt;number&gt;`, or `color`. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n       fillColor(\r\n        interpolate(exponential(0.5f), zoom(),\r\n           stop(1.0f, color(Color.RED)),\r\n           stop(5.0f, color(Color.BLUE)),\r\n           stop(10.0f, color(Color.GREEN)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, @NonNull Expression... stops)
    parameters:
    - id: interpolation
      type: ba8d0c6b
      description: <p>type of interpolation </p>
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input expression </p>
    - id: stops
      type: 21653df1
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator,@NonNull Expression,Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, Stop... stops)
  nameWithType: Expression.interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3879
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces continuous, smooth results by interpolating between pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array&lt;number&gt;`, or `color`. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            exponential(0.5f), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression interpolate(@NonNull Interpolator interpolation, @NonNull Expression number, Stop... stops)
    parameters:
    - id: interpolation
      type: ba8d0c6b
      description: <p>type of interpolation </p>
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input expression </p>
    - id: stops
      type: fa1c5848
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(@NonNull String)
  id: isSupportedScript(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: isSupportedScript(@NonNull String string)
  nameWithType: Expression.isSupportedScript(@NonNull String string)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(@NonNull String string)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2865
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input string is expected to render legibly. Returns false if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping). </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n       textField(\r\n        switchCase(\r\n          isSupportedScript(\"ಗೌರವಾರ್ಥವಾಗಿ\"), literal(\"ಗೌರವಾರ್ಥವಾಗಿ\"),\r\n          literal(\"not-compatible\"))\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression isSupportedScript(@NonNull String string)
    parameters:
    - id: string
      type: 3d663bb1
      description: <p>the string to evaluate </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(Expression)
  id: isSupportedScript(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: isSupportedScript(Expression expression)
  nameWithType: Expression.isSupportedScript(Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript(Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2838
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input string is expected to render legibly. Returns false if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping). </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(\r\n          switchCase(\r\n            isSupportedScript(get(\"name_property\")),\r\n            get(\"name_property\"),\r\n            literal(\"not-compatible\")\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression isSupportedScript(Expression expression)
    parameters:
    - id: expression
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression to evaluate </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull Expression)
  id: length(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: length(@NonNull Expression expression)
  nameWithType: Expression.length(@NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.length*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1713
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the length of an array or string.</p>\r\n<p></p>"
  syntax:
    content: public static Expression length(@NonNull Expression expression)
    parameters:
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression object or expression string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull String)
  id: length(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: length(@NonNull String input)
  nameWithType: Expression.length(@NonNull String input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.length(@NonNull String input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.length*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1723
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the length of an array or string.</p>\r\n<p></p>"
  syntax:
    content: public static Expression length(@NonNull String input)
    parameters:
    - id: input
      type: 3d663bb1
      description: <p>a string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.let(@Size(min=1) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: let(@Size(min=1) Expression... input)
  nameWithType: Expression.let(@Size(min=1) Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.let(@Size(min=1) Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.let*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3482
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Binds input to named variables, which can then be referenced in the result expression using <xref uid=\"\" data-throw-if-not-resolved=\"false\">var(String)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">var(Expression)</xref>.</p>\r\n<p></p>"
  syntax:
    content: public static Expression let(@Size(min=1) Expression... input)
    parameters:
    - id: input
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)bed674f9
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.linear()
  id: linear()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: linear()
  nameWithType: Expression.linear()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.linear()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.linear*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3907
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>interpolates linearly between the pair of stops just less than and just greater than the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n        \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            linear(), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Interpolator linear()
    return:
      type: cedce597
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Number)
  id: literal(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: literal(@NonNull Number number)
  nameWithType: Expression.literal(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 154
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Create a literal number expression. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n       \"source-id\",\r\n       textSize(literal(10.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression literal(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object)
  id: literal(@NonNull Object)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: literal(@NonNull Object object)
  nameWithType: Expression.literal(@NonNull Object object)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object object)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 195
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Create a literal object expression.</p>\r\n<p></p>"
  syntax:
    content: public static Expression literal(@NonNull Object object)
    parameters:
    - id: object
      type: 48a6d93c
      description: <p>the object </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object [])
  id: literal(@NonNull Object [])
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: literal(@NonNull Object[] array)
  nameWithType: Expression.literal(@NonNull Object[] array)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull Object[] array)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 210
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Create a literal array expression</p>\r\n<p></p>"
  syntax:
    content: public static Expression literal(@NonNull Object[] array)
    parameters:
    - id: array
      type: cf84f4ca
      description: <p>the array </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull String)
  id: literal(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: literal(@NonNull String string)
  nameWithType: Expression.literal(@NonNull String string)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(@NonNull String string)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 175
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Create a literal string expression. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n       \"source-id\",\r\n        textField(literal(\"Text\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression literal(@NonNull String string)
    parameters:
    - id: string
      type: 3d663bb1
      description: <p>the string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(boolean)
  id: literal(boolean)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: literal(boolean bool)
  nameWithType: Expression.literal(boolean bool)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal(boolean bool)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 185
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Create a literal boolean expression.</p>\r\n<p></p>"
  syntax:
    content: public static Expression literal(boolean bool)
    parameters:
    - id: bool
      type: 4fc6e284
      description: <p>the boolean </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ln(@NonNull Number)
  id: ln(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: ln(@NonNull Number number)
  nameWithType: Expression.ln(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ln(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.ln*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2221
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the natural logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(ln(10))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression ln(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to take natural logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ln(Expression)
  id: ln(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: ln(Expression number)
  nameWithType: Expression.ln(Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ln(Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.ln*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2200
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the natural logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(ln(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression ln(Expression number)
    parameters:
    - id: number
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to take natural logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ln2()
  id: ln2()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: ln2()
  nameWithType: Expression.ln2()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ln2()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.ln2*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1743
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns mathematical constant ln(2). </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(product(literal(10.0f), ln2()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression ln2()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Expression)
  id: log10(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: log10(@NonNull Expression number)
  nameWithType: Expression.log10(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.log10*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2158
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the base-ten logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(log10(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression log10(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to take base-ten logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Number)
  id: log10(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: log10(@NonNull Number number)
  nameWithType: Expression.log10(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log10(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.log10*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2179
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the base-ten logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(log10(10))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression log10(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to take base-ten logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Expression)
  id: log2(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: log2(@NonNull Expression number)
  nameWithType: Expression.log2(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.log2*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2242
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the base-two logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(log2(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression log2(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to take base-two logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Number)
  id: log2(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: log2(@NonNull Number number)
  nameWithType: Expression.log2(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log2(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.log2*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2263
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the base-two logarithm of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(log2(2))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression log2(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to take base-two logarithm from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Expression)
  id: lt(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.lt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 789
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly less than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lt(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lt(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: lt(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.lt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 813
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly less than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lt(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lt(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second number </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull Number)
  id: lt(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.lt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 836
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly less than the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lt(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lt(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull String)
  id: lt(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lt(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.lt(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 858
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly less than the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lt(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lt(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: lt(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.lt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 882
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is strictly less than the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lt(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lt(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Expression)
  id: lte(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.lte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1023
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is less than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lte(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lte(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: lte(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.lte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1047
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is less than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lte(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lte(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull Number)
  id: lte(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.lte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1070
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is less than or equal to the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lte(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lte(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull String)
  id: lte(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lte(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.lte(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1092
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is less than or equal to the second, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lte(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lte(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: lte(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: lte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.lte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1116
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the first input is less than or equal to the second, false otherwise. The inputs must be numbers or strings, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(lte(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression lte(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull @Size(min=2) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: match(@NonNull @Size(min=2) Expression... input)
  nameWithType: Expression.match(@NonNull @Size(min=2) Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull @Size(min=2) Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.match*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1272
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Selects the output whose label value matches the input value, or the fallback value if no match is found. The `input` can be any string or number expression. Each label can either be a single literal value or an array of values. If types of the input and keys don't match, or the input value doesn't exist, the expresion will fail without falling back to the default value. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textColor(\r\n            match(get(\"keyToValue\"),\r\n                literal(1), rgba(255, 0, 0, 1.0f),\r\n                literal(2), rgba(0, 0, 255.0f, 1.0f),\r\n                rgba(0.0f, 255.0f, 0.0f, 1.0f)\r\n            )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression match(@NonNull @Size(min=2) Expression... input)
    parameters:
    - id: input
      type: 48b3c1c1com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)777ca77e
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull Expression,@NonNull Expression,@NonNull Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: match(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Stop... stops)
  nameWithType: Expression.match(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.match(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.match*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1302
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Selects the output whose label value matches the input value, or the fallback value if no match is found. The `input` can be any string or number expression. Each label can either be a single literal value or an array of values. If types of the input and keys don't match, or the input value doesn't exist, the expresion will fail without falling back to the default value. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n      \"source-id\",\r\n      textColor(\r\n        match(get(\"keyToValue\"), rgba(0.0f, 255.0f, 0.0f, 1.0f),\r\n          stop(1f, rgba(255, 0, 0, 1.0f)),\r\n          stop(2f, rgba(0, 0, 255.0f, 1.0f))\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression match(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Stop... stops)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    - id: defaultOutput
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
    - id: stops
      type: a648cc18
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: max(@Size(min=1) Expression... numbers)
  nameWithType: Expression.max(@Size(min=1) Expression... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Expression... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.max*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2583
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the maximum value of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(max(pi(), product(pi(), pi())))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression max(@Size(min=1) Expression... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)bed674f9
      description: <p>varargs of numbers to get the maximum from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Number...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: max(@Size(min=1) Number... numbers)
  nameWithType: Expression.max(@Size(min=1) Number... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.max(@Size(min=1) Number... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.max*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2605
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the maximum value of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(max(3.141, 3.14f, 3.15f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression max(@Size(min=1) Number... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)db470960
      description: <p>varargs of numbers to get the maximum from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: min(@Size(min=1) Expression... numbers)
  nameWithType: Expression.min(@Size(min=1) Expression... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.min*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2536
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the minimum value of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(min(pi(), literal(3.14f), literal(3.15f)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax: &o2
    content: public static Expression min(@Size(min=1) Expression... numbers)
    parameters:
    - id: numbers
      type: 772af23b
      description: <p>varargs of numbers to get the minimum from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Number...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: min(@Size(min=1) Number... numbers)
  nameWithType: Expression.min(@Size(min=1) Number... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Number... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.min*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2558
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the minimum value of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(min(3.141, 3.14f, 3.15f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression min(@Size(min=1) Number... numbers)
    parameters:
    - id: numbers
      type: 74ff92be
      description: <p>varargs of numbers to get the minimum from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Expression,@NonNull Expression)
  id: mod(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: mod(@NonNull Expression first, @NonNull Expression second)
  nameWithType: Expression.mod(@NonNull Expression first, @NonNull Expression second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Expression first, @NonNull Expression second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.mod*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2029
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the remainder after integer division of the first input by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(mod(literal(10.0f), pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression mod(@NonNull Expression first, @NonNull Expression second)
    parameters:
    - id: first
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first number </p>
    - id: second
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Number,@NonNull Number)
  id: mod(@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: mod(@NonNull Number first, @NonNull Number second)
  nameWithType: Expression.mod(@NonNull Number first, @NonNull Number second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.mod(@NonNull Number first, @NonNull Number second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.mod*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2051
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the remainder after integer division of the first input by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(mod(10.0f, 10.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression mod(@NonNull Number first, @NonNull Number second)
    parameters:
    - id: first
      type: b8420207
      description: <p>the first number </p>
    - id: second
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Expression)
  id: neq(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  nameWithType: Expression.neq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 533
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are not equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), get(\"keyToOtherValue\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(@NonNull Expression compareOne, @NonNull Expression compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: neq(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  nameWithType: Expression.neq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 557
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are not equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), get(\"keyToOtherValue\"), collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(@NonNull Expression compareOne, @NonNull Expression compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second expression </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull Number)
  id: neq(@NonNull Expression,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  nameWithType: Expression.neq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression compareOne, @NonNull Number compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 649
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns `true` if the input values are not equal, `false` otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(@NonNull Expression compareOne, @NonNull Number compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull String)
  id: neq(@NonNull Expression,@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(@NonNull Expression compareOne, @NonNull String compareTwo)
  nameWithType: Expression.neq(@NonNull Expression compareOne, @NonNull String compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression compareOne, @NonNull String compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 602
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns `true` if the input values are not equal, `false` otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), \"Value\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(@NonNull Expression compareOne, @NonNull String compareTwo)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second string </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression,@NonNull String,@NonNull Expression)
  id: neq(@NonNull Expression,@NonNull String,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  nameWithType: Expression.neq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 626
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are not equal, false otherwise. The inputs must be numbers, strings, or booleans, and both of the same type. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), \"Value\" ,collator(true, false)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(@NonNull Expression compareOne, @NonNull String compareTwo, @NonNull Expression collator)
    parameters:
    - id: compareOne
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 3d663bb1
      description: <p>the second String </p>
    - id: collator
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(Expression,boolean)
  id: neq(Expression,boolean)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: neq(Expression compareOne, boolean compareTwo)
  nameWithType: Expression.neq(Expression compareOne, boolean compareTwo)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq(Expression compareOne, boolean compareTwo)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 580
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns true if the input values are equal, false otherwise. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(neq(get(\"keyToValue\"), true))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression neq(Expression compareOne, boolean compareTwo)
    parameters:
    - id: compareOne
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first expression </p>
    - id: compareTwo
      type: 4fc6e284
      description: <p>the second boolean </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.not(@NonNull Expression)
  id: not(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: not(@NonNull Expression input)
  nameWithType: Expression.not(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.not(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.not*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1189
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(not(get(\"keyToValue\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression not(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.not(boolean)
  id: not(boolean)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: not(boolean input)
  nameWithType: Expression.not(boolean input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.not(boolean input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.not*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1210
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     filter(not(false))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression not(boolean input)
    parameters:
    - id: input
      type: 4fc6e284
      description: <p>boolean input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.number(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: number(@NonNull Expression... input)
  nameWithType: Expression.number(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.number(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.number*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3059
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number value is obtained. If none of the inputs are numbers, the expression is an error. The asserted input value is returned as result.</p>\r\n<p></p>"
  syntax:
    content: public static Expression number(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Expression,@NonNull NumberFormatOption...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: numberFormat(@NonNull Expression number, @NonNull NumberFormatOption... options)
  nameWithType: Expression.numberFormat(@NonNull Expression number, @NonNull NumberFormatOption... options)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Expression number, @NonNull NumberFormatOption... options)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3074
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input number into a string representation using the providing formatting rules. If set, the locale argument specifies the locale to use, as a BCP 47 language tag. If set, the currency argument specifies an ISO 4217 code to use for currency-style formatting. If set, the min-fraction-digits and max-fraction-digits arguments specify the minimum and maximum number of fractional digits to include.</p>\r\n<p></p>"
  syntax:
    content: public static Expression numberFormat(@NonNull Expression number, @NonNull NumberFormatOption... options)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>number expression </p>
    - id: options
      type: e7cc4385
      description: <p>number formatting options </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Number,@NonNull NumberFormatOption...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: numberFormat(@NonNull Number number, @NonNull NumberFormatOption... options)
  nameWithType: Expression.numberFormat(@NonNull Number number, @NonNull NumberFormatOption... options)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat(@NonNull Number number, @NonNull NumberFormatOption... options)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3093
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input number into a string representation using the providing formatting rules. If set, the locale argument specifies the locale to use, as a BCP 47 language tag. If set, the currency argument specifies an ISO 4217 code to use for currency-style formatting. If set, the min-fraction-digits and max-fraction-digits arguments specify the minimum and maximum number of fractional digits to include.</p>\r\n<p></p>"
  syntax:
    content: public static Expression numberFormat(@NonNull Number number, @NonNull NumberFormatOption... options)
    parameters:
    - id: number
      type: b8420207
      description: <p>number expression </p>
    - id: options
      type: e7cc4385
      description: <p>number formatting options </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.object(@NonNull Expression)
  id: object(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: object(@NonNull Expression input)
  nameWithType: Expression.object(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.object(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.object*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3372
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Asserts that the input value is an object. If it is not, the expression is an error The asserted input value is returned as result.</p>\r\n<p></p>"
  syntax:
    content: public static Expression object(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.pi()
  id: pi()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: pi()
  nameWithType: Expression.pi()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.pi()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.pi*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1763
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the mathematical constant pi. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(product(literal(10.0f), pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression pi()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Expression,@NonNull Expression)
  id: pow(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: pow(@NonNull Expression first, @NonNull Expression second)
  nameWithType: Expression.pow(@NonNull Expression first, @NonNull Expression second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Expression first, @NonNull Expression second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.pow*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2073
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of raising the first input to the power specified by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(pow(pi(), literal(2.0f)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression pow(@NonNull Expression first, @NonNull Expression second)
    parameters:
    - id: first
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first number </p>
    - id: second
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Number,@NonNull Number)
  id: pow(@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: pow(@NonNull Number first, @NonNull Number second)
  nameWithType: Expression.pow(@NonNull Number first, @NonNull Number second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.pow(@NonNull Number first, @NonNull Number second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.pow*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2095
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of raising the first input to the power specified by the second. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(pow(5.0f, 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression pow(@NonNull Number first, @NonNull Number second)
    parameters:
    - id: first
      type: b8420207
      description: <p>the first number </p>
    - id: second
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: product(@Size(min=2) Expression... numbers)
  nameWithType: Expression.product(@Size(min=2) Expression... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Expression... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.product*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1851
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the product of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(product(literal(10.0f), ln2()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression product(@Size(min=2) Expression... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)777ca77e
      description: <p>the numbers to calculate the product for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Number...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: product(@Size(min=2) Number... numbers)
  nameWithType: Expression.product(@Size(min=2) Number... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.product(@Size(min=2) Number... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.product*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1873
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the product of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(product(10.0f, 2.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression product(@Size(min=2) Number... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)8842889d
      description: <p>the numbers to calculate the product for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.properties()
  id: properties()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: properties()
  nameWithType: Expression.properties()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.properties()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.properties*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1351
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the feature properties object. </p>\r\n<p>Note that in some cases, it may be more efficient to use <xref uid=\"\" data-throw-if-not-resolved=\"false\">get(Expression)</xref>} instead. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(get(\"key-to-value\", properties()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression properties()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.raw(@NonNull String)
  id: raw(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: raw(@NonNull String rawExpression)
  nameWithType: Expression.raw(@NonNull String rawExpression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.raw(@NonNull String rawExpression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.raw*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4117
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a DSL equivalent of a raw expression. </p>\r\n<p>If your raw expression contains a coma (,) delimited literal it has to be enclosed with double quotes (\"), for example </p>\r\n<p>\r\n  <pre>\r\n    <code>[\"to-color\", \"rgba(255, 0, 0, 255)\"]\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression raw(@NonNull String rawExpression)
    parameters:
    - id: rawExpression
      type: 3d663bb1
      description: <p>the raw expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the resulting expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale(Expression)
  id: resolvedLocale(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: resolvedLocale(Expression collator)
  nameWithType: Expression.resolvedLocale(Expression collator)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale(Expression collator)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2809
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the IETF language tag of the locale being used by the provided collator. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n      \"source-id\",\r\n      fillColor(\r\n         switchCase(\r\n             eq(literal(\"it\"), resolvedLocale(collator(true, true, Locale.ITALY))),\r\n             literal(ColorUtils.colorToRgbaString(Color.GREEN)),\r\n             literal(ColorUtils.colorToRgbaString(Color.RED))))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression resolvedLocale(Expression collator)
    parameters:
    - id: collator
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the collator expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: rgb(@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: rgb(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue)
  nameWithType: Expression.rgb(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 265
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. </p>\r\n<p>If any component is out of range, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     fillColor(\r\n         rgb(\r\n             literal(255.0f),\r\n             literal(255.0f),\r\n             literal(255.0f)\r\n         )\r\n     )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression rgb(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue)
    parameters:
    - id: red
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>red color expression </p>
    - id: green
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>green color expression </p>
    - id: blue
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>blue color expression </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Number,@NonNull Number,@NonNull Number)
  id: rgb(@NonNull Number,@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: rgb(@NonNull Number red, @NonNull Number green, @NonNull Number blue)
  nameWithType: Expression.rgb(@NonNull Number red, @NonNull Number green, @NonNull Number blue)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb(@NonNull Number red, @NonNull Number green, @NonNull Number blue)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 294
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. </p>\r\n<p>If any component is out of range, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n      fillColor(\r\n         rgb(255.0f, 255.0f, 255.0f)\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression rgb(@NonNull Number red, @NonNull Number green, @NonNull Number blue)
    parameters:
    - id: red
      type: b8420207
      description: <p>red color value </p>
    - id: green
      type: b8420207
      description: <p>green color value </p>
    - id: blue
      type: b8420207
      description: <p>blue color value </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  id: rgba(@NonNull Expression,@NonNull Expression,@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: rgba(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue, @NonNull Expression alpha)
  nameWithType: Expression.rgba(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue, @NonNull Expression alpha)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue, @NonNull Expression alpha)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 329
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. </p>\r\n<p>If any component is out of range, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n     fillColor(\r\n         rgb(\r\n             literal(255.0f),\r\n             literal(255.0f),\r\n             literal(255.0f),\r\n             literal(1.0f)\r\n         )\r\n     )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression rgba(@NonNull Expression red, @NonNull Expression green, @NonNull Expression blue, @NonNull Expression alpha)
    parameters:
    - id: red
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>red color value </p>
    - id: green
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>green color value </p>
    - id: blue
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>blue color value </p>
    - id: alpha
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>alpha color value </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  id: rgba(@NonNull Number,@NonNull Number,@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: rgba(@NonNull Number red, @NonNull Number green, @NonNull Number blue, @NonNull Number alpha)
  nameWithType: Expression.rgba(@NonNull Number red, @NonNull Number green, @NonNull Number blue, @NonNull Number alpha)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba(@NonNull Number red, @NonNull Number green, @NonNull Number blue, @NonNull Number alpha)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 360
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. </p>\r\n<p>If any component is out of range, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n     \"source-id\",\r\n      fillColor(\r\n         rgb(255.0f, 255.0f, 255.0f, 1.0f)\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression rgba(@NonNull Number red, @NonNull Number green, @NonNull Number blue, @NonNull Number alpha)
    parameters:
    - id: red
      type: b8420207
      description: <p>red color value </p>
    - id: green
      type: b8420207
      description: <p>green color value </p>
    - id: blue
      type: b8420207
      description: <p>blue color value </p>
    - id: alpha
      type: b8420207
      description: <p>alpha color value </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.round(@NonNull Number)
  id: round(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: round(@NonNull Number number)
  nameWithType: Expression.round(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.round(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.round*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2655
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example `[\"round\", -1.5]` evaluates to -2. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(round(3.14159265359f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression round(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>number to round </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.round(Expression)
  id: round(Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: round(Expression expression)
  nameWithType: Expression.round(Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.round(Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.round*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2632
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example `[\"round\", -1.5]` evaluates to -2. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(round(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression round(Expression expression)
    parameters:
    - id: expression
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>number expression to round </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Expression)
  id: sin(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sin(@NonNull Expression number)
  nameWithType: Expression.sin(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sin*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2284
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the sine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sin(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sin(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the sine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Number)
  id: sin(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sin(@NonNull Number number)
  nameWithType: Expression.sin(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sin(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sin*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2305
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the sine of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sin(90.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sin(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the sine for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Expression)
  id: sqrt(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sqrt(@NonNull Expression number)
  nameWithType: Expression.sqrt(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2116
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the square root of the input </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sqrt(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sqrt(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to take the square root from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Number)
  id: sqrt(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sqrt(@NonNull Number number)
  nameWithType: Expression.sqrt(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2137
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the square root of the input </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sqrt(25.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sqrt(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to take the square root from </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Expression,@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Expression... stops)
  nameWithType: Expression.step(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Expression... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Expression... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3625
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), literal(0.0f),\r\n            literal(1.0f), literal(2.5f),\r\n            literal(10.0f), literal(5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Expression input, @NonNull Expression defaultOutput, @NonNull Expression... stops)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input expression </p>
    - id: defaultOutput
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the default output expression </p>
    - id: stops
      type: 21653df1
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Expression,Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Expression input, @NonNull Expression defaultOutput, Stop... stops)
  nameWithType: Expression.step(@NonNull Expression input, @NonNull Expression defaultOutput, Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression input, @NonNull Expression defaultOutput, Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3688
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), literal(0.0f),\r\n            stop(1, 2.5f),\r\n            stop(10, 5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Expression input, @NonNull Expression defaultOutput, Stop... stops)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input value </p>
    - id: defaultOutput
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the default output expression </p>
    - id: stops
      type: fa1c5848
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Number,Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Expression input, @NonNull Number defaultOutput, Expression... stops)
  nameWithType: Expression.step(@NonNull Expression input, @NonNull Number defaultOutput, Expression... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression input, @NonNull Number defaultOutput, Expression... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3750
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), 0.0f,\r\n            literal(1.0f), literal(2.5f),\r\n            literal(10.0f), literal(5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Expression input, @NonNull Number defaultOutput, Expression... stops)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input expression </p>
    - id: defaultOutput
      type: b8420207
      description: <p>the default output expression </p>
    - id: stops
      type: 83d57cc4
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression,@NonNull Number,Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Expression input, @NonNull Number defaultOutput, Stop... stops)
  nameWithType: Expression.step(@NonNull Expression input, @NonNull Number defaultOutput, Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Expression input, @NonNull Number defaultOutput, Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3812
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), 0.0f,\r\n            stop(1, 2.5f),\r\n            stop(10, 5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Expression input, @NonNull Number defaultOutput, Stop... stops)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the input value </p>
    - id: defaultOutput
      type: b8420207
      description: <p>the default output expression </p>
    - id: stops
      type: fa1c5848
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Expression,Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Number input, @NonNull Expression defaultOutput, Expression... stops)
  nameWithType: Expression.step(@NonNull Number input, @NonNull Expression defaultOutput, Expression... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number input, @NonNull Expression defaultOutput, Expression... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3594
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), literal(0.0f),\r\n            literal(1.0f), literal(2.5f),\r\n            literal(10.0f), literal(5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Number input, @NonNull Expression defaultOutput, Expression... stops)
    parameters:
    - id: input
      type: b8420207
      description: <p>the input value </p>
    - id: defaultOutput
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the default output expression </p>
    - id: stops
      type: 83d57cc4
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Expression,Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Number input, @NonNull Expression defaultOutput, Stop... stops)
  nameWithType: Expression.step(@NonNull Number input, @NonNull Expression defaultOutput, Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number input, @NonNull Expression defaultOutput, Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3657
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), literal(0.0f),\r\n            stop(1, 2.5f),\r\n            stop(10, 5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Number input, @NonNull Expression defaultOutput, Stop... stops)
    parameters:
    - id: input
      type: b8420207
      description: <p>the input value </p>
    - id: defaultOutput
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the default output expression </p>
    - id: stops
      type: fa1c5848
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Number,Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Number input, @NonNull Number defaultOutput, Expression... stops)
  nameWithType: Expression.step(@NonNull Number input, @NonNull Number defaultOutput, Expression... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number input, @NonNull Number defaultOutput, Expression... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3719
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(1.0f, 0.0f,\r\n            literal(1.0f), literal(2.5f),\r\n            literal(10.0f), literal(5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Number input, @NonNull Number defaultOutput, Expression... stops)
    parameters:
    - id: input
      type: b8420207
      description: <p>the input value </p>
    - id: defaultOutput
      type: b8420207
      description: <p>the default output expression </p>
    - id: stops
      type: 83d57cc4
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number,@NonNull Number,Stop...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: step(@NonNull Number input, @NonNull Number defaultOutput, Stop... stops)
  nameWithType: Expression.step(@NonNull Number input, @NonNull Number defaultOutput, Stop... stops)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step(@NonNull Number input, @NonNull Number defaultOutput, Stop... stops)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3781
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values (\"stops\"). The `input` may be any numeric expression (e.g., `[\"get\", \"population\"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first input if the input is less than the first stop. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), 0.0f,\r\n            stop(1, 2.5f),\r\n            stop(10, 5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression step(@NonNull Number input, @NonNull Number defaultOutput, Stop... stops)
    parameters:
    - id: input
      type: b8420207
      description: <p>the input value </p>
    - id: defaultOutput
      type: b8420207
      description: <p>the default output expression </p>
    - id: stops
      type: fa1c5848
      description: <p>pair of input and output values </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.stop(@NonNull Object,@NonNull Object)
  id: stop(@NonNull Object,@NonNull Object)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: stop(@NonNull Object stop, @NonNull Object value)
  nameWithType: Expression.stop(@NonNull Object stop, @NonNull Object value)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.stop(@NonNull Object stop, @NonNull Object value)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.stop*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3563
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Produces a stop value. </p>\r\n<p>Can be used for <xref uid=\"\" data-throw-if-not-resolved=\"false\">stop(Object, Object)</xref> as part of varargs parameter in <xref uid=\"\" data-throw-if-not-resolved=\"false\">step(Number, Expression, Stop...)</xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\">interpolate(Interpolator, Expression, Stop...)</xref>. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            step(zoom(), literal(0.0f),\r\n            stop(1.0f, 2.5f),\r\n            stop(10.0f, 5.0f))\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Stop stop(@NonNull Object stop, @NonNull Object value)
    parameters:
    - id: stop
      type: 48a6d93c
      description: <p>the stop input </p>
    - id: value
      type: 48a6d93c
      description: <p>the stop output </p>
    return:
      type: d555a711
      description: <p>the stop </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.string(@NonNull Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: string(@NonNull Expression... input)
  nameWithType: Expression.string(@NonNull Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.string(@NonNull Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.string*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3046
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string value is obtained. If none of the inputs are strings, the expression is an error. The asserted input value is returned as result.</p>\r\n<p></p>"
  syntax:
    content: public static Expression string(@NonNull Expression... input)
    parameters:
    - id: input
      type: 21653df1
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression,@NonNull Expression)
  id: subtract(@NonNull Expression,@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: subtract(@NonNull Expression first, @NonNull Expression second)
  nameWithType: Expression.subtract(@NonNull Expression first, @NonNull Expression second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression first, @NonNull Expression second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1941
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of subtracting the second input from the first. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(subtract(literal(10.0f), pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression subtract(@NonNull Expression first, @NonNull Expression second)
    parameters:
    - id: first
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the first number </p>
    - id: second
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression)
  id: subtract(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: subtract(@NonNull Expression number)
  nameWithType: Expression.subtract(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1898
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of subtracting a number from 0. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(subtract(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression subtract(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number subtract from 0 </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number,@NonNull Number)
  id: subtract(@NonNull Number,@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: subtract(@NonNull Number first, @NonNull Number second)
  nameWithType: Expression.subtract(@NonNull Number first, @NonNull Number second)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number first, @NonNull Number second)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1963
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of subtracting the second input from the first. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(subtract(10.0f, 20.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression subtract(@NonNull Number first, @NonNull Number second)
    parameters:
    - id: first
      type: b8420207
      description: <p>the first number </p>
    - id: second
      type: b8420207
      description: <p>the second number </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number)
  id: subtract(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: subtract(@NonNull Number number)
  nameWithType: Expression.subtract(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1919
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the result of subtracting a number from 0. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(subtract(10.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression subtract(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number subtract from 0 </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sum(@Size(min=2) Expression... numbers)
  nameWithType: Expression.sum(@Size(min=2) Expression... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Expression... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sum*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1804
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the sum of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sum(literal(10.0f), ln2(), pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sum(@Size(min=2) Expression... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)777ca77e
      description: <p>the numbers to calculate the sum for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Number...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: sum(@Size(min=2) Number... numbers)
  nameWithType: Expression.sum(@Size(min=2) Number... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sum(@Size(min=2) Number... numbers)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.sum*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1826
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the sum of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(sum(10.0f, 5.0f, 3.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression sum(@Size(min=2) Number... numbers)
    parameters:
    - id: numbers
      type: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)8842889d
      description: <p>the numbers to calculate the sum for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase(@NonNull @Size(min=1) Expression...)
  id: )
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: switchCase(@NonNull @Size(min=1) Expression... input)
  nameWithType: Expression.switchCase(@NonNull @Size(min=1) Expression... input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase(@NonNull @Size(min=1) Expression... input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 1241
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Selects the first output whose corresponding test condition evaluates to true. </p>\r\n<p>For each case a condition and an output should be provided. The last parameter should provide the default output. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(\r\n            switchCase(\r\n                get(KEY_TO_BOOLEAN), literal(3.0f),\r\n                get(KEY_TO_OTHER_BOOLEAN), literal(5.0f),\r\n                literal(1.0f) // default value\r\n            )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression switchCase(@NonNull @Size(min=1) Expression... input)
    parameters:
    - id: input
      type: 48b3c1c1com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)bed674f9
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Expression)
  id: tan(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: tan(@NonNull Expression number)
  nameWithType: Expression.tan(@NonNull Expression number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Expression number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.tan*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2368
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the tangent of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(tan(pi()))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression tan(@NonNull Expression number)
    parameters:
    - id: number
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the number to calculate the tangent for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Number)
  id: tan(@NonNull Number)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: tan(@NonNull Number number)
  nameWithType: Expression.tan(@NonNull Number number)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.tan(@NonNull Number number)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.tan*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2389
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the tangent of the input. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(tan(45.0f))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression tan(@NonNull Number number)
    parameters:
    - id: number
      type: b8420207
      description: <p>the number to calculate the tangent for </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toArray()
  id: toArray()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toArray()
  nameWithType: Expression.toArray()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toArray()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toArray*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4064
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the expression to Object array representation. </p>\r\n<p>The output will later be converted to a JSON Object array. </p>\r\n<p></p>"
  syntax:
    content: public Object [] toArray()
    return:
      type: 055b929b
      description: <p>the converted object array expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toBool(@NonNull Expression)
  id: toBool(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toBool(@NonNull Expression input)
  nameWithType: Expression.toBool(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toBool(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toBool*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3448
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, false, null, or NaN; otherwise it is true. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconAllowOverlap(toBool(get(\"key-to-value\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression toBool(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toColor(@NonNull Expression)
  id: toColor(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toColor(@NonNull Expression input)
  nameWithType: Expression.toColor(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toColor(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toColor*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3471
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n       \"source-id\",\r\n        fillColor(toColor(get(\"keyStringValue\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression toColor(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber(@NonNull Expression)
  id: toNumber(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toNumber(@NonNull Expression input)
  nameWithType: Expression.toNumber(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3426
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input value to a number, if possible. If the input is null or false, the result is 0. If the input is true, the result is 1. If the input is a string, it is converted to a number as specified by the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textOpacity(toNumber(get(\"key-to-string-value\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression toNumber(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba(@NonNull Expression)
  id: toRgba(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toRgba(@NonNull Expression expression)
  nameWithType: Expression.toRgba(@NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba(@NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 371
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.</p>\r\n<p></p>"
  syntax:
    content: public static Expression toRgba(@NonNull Expression expression)
    parameters:
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>an expression to convert to a color </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toString()
  id: toString()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toString()
  nameWithType: Expression.toString()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toString()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toString*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 4089
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a string representation of the object that matches the definition set in the style specification. </p>\r\n<p>If this expression contains a coma (,) delimited literal, like 'rgba(r, g, b, a)`, it will be enclosed with double quotes (\"). </p>\r\n<p></p>"
  syntax:
    content: public String toString()
    return:
      type: "26831127"
      description: <p>a string representation of the object. </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toString(@NonNull Expression)
  id: toString(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: toString(@NonNull Expression input)
  nameWithType: Expression.toString(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toString(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.toString*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3400
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Converts the input value to a string. If the input is null, the result is null. If the input is a boolean, the result is true or false. If the input is a number, it is converted to a string by NumberToString in the ECMAScript Language Specification. If the input is a color, it is converted to a string of the form \"rgba(r,g,b,a)\", where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. Otherwise, the input is converted to a string in the format specified by the JSON.stringify in the ECMAScript Language Specification. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(toString(get(\"key-to-number-value\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression toString(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf(@NonNull Expression)
  id: typeOf(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: typeOf(@NonNull Expression input)
  nameWithType: Expression.typeOf(@NonNull Expression input)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf(@NonNull Expression input)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3033
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns a string describing the type of the given value.</p>\r\n<p></p>"
  syntax:
    content: public static Expression typeOf(@NonNull Expression input)
    parameters:
    - id: input
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression input </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull Expression)
  id: upcase(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: upcase(@NonNull Expression string)
  nameWithType: Expression.upcase(@NonNull Expression string)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull Expression string)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2890
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the input string converted to uppercase. </p>\r\n<p>Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(upcase(get(\"key-to-string-value\")))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression upcase(@NonNull Expression string)
    parameters:
    - id: string
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the string to upcase </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull String)
  id: upcase(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: upcase(@NonNull String string)
  nameWithType: Expression.upcase(@NonNull String string)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase(@NonNull String string)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 2915
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Returns the input string converted to uppercase. </p>\r\n<p>Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        textField(upcase(\"text\"))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression upcase(@NonNull String string)
    parameters:
    - id: string
      type: 3d663bb1
      description: <p>string to upcase </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull Expression)
  id: var(@NonNull Expression)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: var(@NonNull Expression expression)
  nameWithType: Expression.var(@NonNull Expression expression)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull Expression expression)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.var*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3492
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>References variable bound using let.</p>\r\n<p></p>"
  syntax:
    content: public static Expression var(@NonNull Expression expression)
    parameters:
    - id: expression
      type: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>the variable naming expression that was bound with using let </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull String)
  id: var(@NonNull String)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: var(@NonNull String variableName)
  nameWithType: Expression.var(@NonNull String variableName)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.var(@NonNull String variableName)
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.var*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3502
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>References variable bound using let.</p>\r\n<p></p>"
  syntax:
    content: public static Expression var(@NonNull String variableName)
    parameters:
    - id: variableName
      type: 3d663bb1
      description: <p>the variable naming that was bound with using let </p>
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.zoom()
  id: zoom()
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  langs:
  - java
  name: zoom()
  nameWithType: Expression.zoom()
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.zoom()
  overload: com.microsoft.azure.maps.mapcontrol.options.Expression.zoom*
  type: Method
  source:
    remote: *o0
    path: src/MapControl/mapcontrol/src/main/java/com/microsoft/azure/maps/mapcontrol/options/Expression.java
    startLine: 3533
  package: com.microsoft.azure.maps.mapcontrol.options
  summary: "<p>Gets the current zoom level. </p>\r\n<p>Note that in style layout and paint properties, zoom may only appear as the input to a top-level step or interpolate expression. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n       \"source-id\",\r\n        fillColor(\r\n          interpolate(\r\n            exponential(0.5f), zoom(),\r\n            stop(1.0f, color(Color.RED)),\r\n            stop(5.0f, color(Color.BLUE)),\r\n            stop(10.0f, color(Color.GREEN))\r\n          )\r\n        )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public static Expression zoom()
    return:
      type: com.microsoft.azure.maps.mapcontrol.options.Expression
      description: <p>expression </p>
references:
- uid: 3d663bb1
  spec.java:
  - name: '@NonNull String'
    fullName: '@NonNull String'
- uid: a1286b14
  spec.java:
  - name: '@Nullable Expression...'
    fullName: '@Nullable Expression...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.Expression*
  name: Expression
  nameWithType: Expression.Expression
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.Expression
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 055b929b
  spec.java:
  - name: Object []
    fullName: Object []
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toArray*
  name: toArray
  nameWithType: Expression.toArray
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toArray
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toString*
  name: toString
  nameWithType: Expression.toString
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toString
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 6c59ec0e
  spec.java:
  - name: '@Nullable Object'
    fullName: '@Nullable Object'
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.equals*
  name: equals
  nameWithType: Expression.equals
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.equals
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode*
  name: hashCode
  nameWithType: Expression.hashCode
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.hashCode
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: b8420207
  spec.java:
  - name: '@NonNull Number'
    fullName: '@NonNull Number'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.literal*
  name: literal
  nameWithType: Expression.literal
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.literal
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 48a6d93c
  spec.java:
  - name: '@NonNull Object'
    fullName: '@NonNull Object'
- uid: cf84f4ca
  spec.java:
  - name: '@NonNull Object []'
    fullName: '@NonNull Object []'
- uid: 3d494a14
  spec.java:
  - name: '@ColorInt int'
    fullName: '@ColorInt int'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.color*
  name: color
  nameWithType: Expression.color
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.color
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 3872da22com.microsoft.azure.maps.mapcontrol.options.Expression
  spec.java:
  - name: '@NonNull '
    fullName: '@NonNull '
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression
    name: Expression
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb*
  name: rgb
  nameWithType: Expression.rgb
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgb
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba*
  name: rgba
  nameWithType: Expression.rgba
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.rgba
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba*
  name: toRgba
  nameWithType: Expression.toRgba
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toRgba
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.eq*
  name: eq
  nameWithType: Expression.eq
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.eq
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.neq*
  name: neq
  nameWithType: Expression.neq
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.neq
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gt*
  name: gt
  nameWithType: Expression.gt
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gt
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lt*
  name: lt
  nameWithType: Expression.lt
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lt
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.gte*
  name: gte
  nameWithType: Expression.gte
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.gte
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.lte*
  name: lte
  nameWithType: Expression.lte
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.lte
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 21653df1
  spec.java:
  - name: '@NonNull Expression...'
    fullName: '@NonNull Expression...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.all*
  name: all
  nameWithType: Expression.all
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.all
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.any*
  name: any
  nameWithType: Expression.any
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.any
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.not*
  name: not
  nameWithType: Expression.not
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.not
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 48b3c1c1com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)bed674f9
  spec.java:
  - name: '@NonNull @Size('
    fullName: '@NonNull @Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =1) Expression...
    fullName: =1) Expression...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase*
  name: switchCase
  nameWithType: Expression.switchCase
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.switchCase
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 48b3c1c1com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)777ca77e
  spec.java:
  - name: '@NonNull @Size('
    fullName: '@NonNull @Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =2) Expression...
    fullName: =2) Expression...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.match*
  name: match
  nameWithType: Expression.match
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.match
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: a648cc18
  spec.java:
  - name: '@NonNull Stop...'
    fullName: '@NonNull Stop...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce*
  name: coalesce
  nameWithType: Expression.coalesce
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.coalesce
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.properties*
  name: properties
  nameWithType: Expression.properties
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.properties
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType*
  name: geometryType
  nameWithType: Expression.geometryType
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.geometryType
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.id*
  name: id
  nameWithType: Expression.id
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.id
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated*
  name: accumulated
  nameWithType: Expression.accumulated
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.accumulated
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.at*
  name: at
  nameWithType: Expression.at
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.at
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.in*
  name: in
  nameWithType: Expression.in
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.in
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.get*
  name: get
  nameWithType: Expression.get
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.get
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.has*
  name: has
  nameWithType: Expression.has
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.has
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.length*
  name: length
  nameWithType: Expression.length
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.length
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ln2*
  name: ln2
  nameWithType: Expression.ln2
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ln2
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.pi*
  name: pi
  nameWithType: Expression.pi
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.pi
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.e*
  name: e
  nameWithType: Expression.e
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.e
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)777ca77e
  spec.java:
  - name: '@Size('
    fullName: '@Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =2) Expression...
    fullName: =2) Expression...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sum*
  name: sum
  nameWithType: Expression.sum
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sum
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)8842889d
  spec.java:
  - name: '@Size('
    fullName: '@Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =2) Number...
    fullName: =2) Number...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.product*
  name: product
  nameWithType: Expression.product
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.product
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract*
  name: subtract
  nameWithType: Expression.subtract
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.subtract
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.division*
  name: division
  nameWithType: Expression.division
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.division
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.mod*
  name: mod
  nameWithType: Expression.mod
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.mod
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.pow*
  name: pow
  nameWithType: Expression.pow
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.pow
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt*
  name: sqrt
  nameWithType: Expression.sqrt
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sqrt
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log10*
  name: log10
  nameWithType: Expression.log10
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log10
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ln*
  name: ln
  nameWithType: Expression.ln
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ln
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.log2*
  name: log2
  nameWithType: Expression.log2
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.log2
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.sin*
  name: sin
  nameWithType: Expression.sin
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.sin
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cos*
  name: cos
  nameWithType: Expression.cos
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cos
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.tan*
  name: tan
  nameWithType: Expression.tan
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.tan
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.asin*
  name: asin
  nameWithType: Expression.asin
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.asin
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.acos*
  name: acos
  nameWithType: Expression.acos
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.acos
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.atan*
  name: atan
  nameWithType: Expression.atan
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.atan
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 772af23b
  spec.java:
  - name: '@Size(min=1) Expression...'
    fullName: '@Size(min=1) Expression...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min*
  name: min
  nameWithType: Expression.min
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 74ff92be
  spec.java:
  - name: '@Size(min=1) Number...'
    fullName: '@Size(min=1) Number...'
- uid: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)bed674f9
  spec.java:
  - name: '@Size('
    fullName: '@Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =1) Expression...
    fullName: =1) Expression...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.max*
  name: max
  nameWithType: Expression.max
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.max
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 19eab87ecom.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)db470960
  spec.java:
  - name: '@Size('
    fullName: '@Size('
  - uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
    name: min(@Size(min=1) Expression... numbers)
    fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
    href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  - name: =1) Number...
    fullName: =1) Number...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.round*
  name: round
  nameWithType: Expression.round
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.round
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.abs*
  name: abs
  nameWithType: Expression.abs
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.abs
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil*
  name: ceil
  nameWithType: Expression.ceil
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ceil
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.floor*
  name: floor
  nameWithType: Expression.floor
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.floor
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale*
  name: resolvedLocale
  nameWithType: Expression.resolvedLocale
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.resolvedLocale
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript*
  name: isSupportedScript
  nameWithType: Expression.isSupportedScript
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.isSupportedScript
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase*
  name: upcase
  nameWithType: Expression.upcase
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.upcase
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase*
  name: downcase
  nameWithType: Expression.downcase
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.downcase
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.concat*
  name: concat
  nameWithType: Expression.concat
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.concat
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 02c3141c
  spec.java:
  - name: '@NonNull String...'
    fullName: '@NonNull String...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.array*
  name: array
  nameWithType: Expression.array
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.array
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf*
  name: typeOf
  nameWithType: Expression.typeOf
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.typeOf
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.string*
  name: string
  nameWithType: Expression.string
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.string
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.number*
  name: number
  nameWithType: Expression.number
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.number
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: e7cc4385
  spec.java:
  - name: '@NonNull NumberFormatOption...'
    fullName: '@NonNull NumberFormatOption...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat*
  name: numberFormat
  nameWithType: Expression.numberFormat
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.numberFormat
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.bool*
  name: bool
  nameWithType: Expression.bool
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.bool
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 240f1f91
  spec.java:
  - name: Locale
    fullName: Locale
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.collator*
  name: collator
  nameWithType: Expression.collator
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.collator
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 8690356c
  spec.java:
  - name: '@NonNull FormatEntry...'
    fullName: '@NonNull FormatEntry...'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.format*
  name: format
  nameWithType: Expression.format
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.format
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 2b6674c2
  spec.java:
  - name: '@Nullable FormatOption...'
    fullName: '@Nullable FormatOption...'
- uid: bbe6aec5
  spec.java:
  - name: FormatEntry
    fullName: FormatEntry
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry*
  name: formatEntry
  nameWithType: Expression.formatEntry
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.formatEntry
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.image*
  name: image
  nameWithType: Expression.image
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.image
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.object*
  name: object
  nameWithType: Expression.object
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.object
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber*
  name: toNumber
  nameWithType: Expression.toNumber
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toNumber
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toBool*
  name: toBool
  nameWithType: Expression.toBool
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toBool
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.toColor*
  name: toColor
  nameWithType: Expression.toColor
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.toColor
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.let*
  name: let
  nameWithType: Expression.let
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.let
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.var*
  name: var
  nameWithType: Expression.var
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.var
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.zoom*
  name: zoom
  nameWithType: Expression.zoom
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.zoom
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: d555a711
  spec.java:
  - name: Stop
    fullName: Stop
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.stop*
  name: stop
  nameWithType: Expression.stop
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.stop
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: 83d57cc4
  spec.java:
  - name: Expression...
    fullName: Expression...
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.step*
  name: step
  nameWithType: Expression.step
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.step
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: fa1c5848
  spec.java:
  - name: Stop...
    fullName: Stop...
- uid: ba8d0c6b
  spec.java:
  - name: '@NonNull Interpolator'
    fullName: '@NonNull Interpolator'
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate*
  name: interpolate
  nameWithType: Expression.interpolate
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.interpolate
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: cedce597
  spec.java:
  - name: Interpolator
    fullName: Interpolator
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.linear*
  name: linear
  nameWithType: Expression.linear
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.linear
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential*
  name: exponential
  nameWithType: Expression.exponential
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.exponential
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier*
  name: cubicBezier
  nameWithType: Expression.cubicBezier
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.cubicBezier
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.raw*
  name: raw
  nameWithType: Expression.raw
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.raw
  package: com.microsoft.azure.maps.mapcontrol.options
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.ExpressionLiteral
  parent: com.microsoft.azure.maps.mapcontrol.options
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.ExpressionLiteral.yml
  name: Expression.ExpressionLiteral
  nameWithType: Expression.ExpressionLiteral
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.ExpressionLiteral
  type: Class
  summary: "<p>ExpressionLiteral wraps an object to be used as a literal in an expression. </p>\r\n<p>ExpressionLiteral is created with <xref uid=\"\" data-throw-if-not-resolved=\"false\">literal(Number)</xref>, <xref uid=\"com.microsoft.azure.maps.mapcontrol.options.Expression.literal(boolean)\" data-throw-if-not-resolved=\"false\">literal(boolean)</xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\">literal(String)</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">literal(Object)</xref>. </p>"
  syntax:
    content: public class ExpressionLiteral
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.Interpolator
  parent: com.microsoft.azure.maps.mapcontrol.options
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.Interpolator.yml
  name: Expression.Interpolator
  nameWithType: Expression.Interpolator
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.Interpolator
  type: Class
  summary: "<p>Expression interpolator type. </p>\r\n<p>Is used for first parameter of <xref uid=\"\" data-throw-if-not-resolved=\"false\">interpolate(Interpolator, Expression, Stop...)</xref>. </p>"
  syntax:
    content: public class Interpolator
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression
  parent: com.microsoft.azure.maps.mapcontrol.options
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  name: Expression
  nameWithType: Expression
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression
  type: Class
  summary: "<p>The value for any layout property, paint property, or filter may be specified as an expression. An expression defines a formula for computing the value of the property using the operators described below. <ul><li><p>Element </p></li><li><p>Mathematical operators for performing arithmetic and other operations on numeric values </p></li><li><p>Logical operators for manipulating boolean values and making conditional decisions </p></li><li><p>String operators for manipulating strings </p></li><li><p>Data operators, providing access to the properties of source features </p></li><li><p>Camera operators, providing access to the parameters defining the current map view </p></li></ul></p>\r\n<p>Expressions are represented as JSON arrays. The first element of an expression array is a string naming the expression operator, e.g. \"*\"or \"case\". Subsequent elements (if any) are the arguments to the expression. Each argument is either a literal value (a string, number, boolean, or null), or another expression array. </p>\r\n<p>Data expression: a data expression is any expression that access feature data <ndash></ndash> that is, any expression that uses one of the data operators:get,has,id,geometry-type, or properties. Data expressions allow a feature's properties to determine its appearance. They can be used to differentiate features within the same layer and to create data visualizations. </p>\r\n<p>Camera expression: a camera expression is any expression that uses the zoom operator. Such expressions allow the the appearance of a layer to change with the map's zoom level. Camera expressions can be used to create the appearance of depth and to control data density. </p>\r\n<p>Composition: a single expression may use a mix of data operators, camera operators, and other operators. Such composite expressions allows a layer's appearance to be determined by a combination of the zoom level and individual feature properties. </p>\r\n<p>Example expression: </p>\r\n<p>\r\n  <pre>\r\n    <code>PolygonLayer polygonLayer = new PolygonLayer(\r\n      \"source-id\",\r\n      fillColor(\r\n        interpolate( linear(), zoom(),\r\n          stop(12, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.RED)),\r\n            stop(2f, color(Color.WHITE)),\r\n            stop(3f, color(Color.BLUE))\r\n          )),\r\n          stop(15, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.YELLOW)),\r\n            stop(2f, color(Color.LTGRAY)),\r\n            stop(3f, color(Color.CYAN))\r\n          )),\r\n          stop(18, step(get(\"stroke-width\"),\r\n            color(Color.BLACK),\r\n            stop(1f, color(Color.WHITE)),\r\n            stop(2f, color(Color.GRAY)),\r\n            stop(3f, color(Color.GREEN))\r\n          ))\r\n        )\r\n      )\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>"
  syntax: *o1
- uid: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression...)
  parent: com.microsoft.azure.maps.mapcontrol.options.Expression
  href: com.microsoft.azure.maps.mapcontrol.options.Expression.yml
  name: min(@Size(min=1) Expression... numbers)
  nameWithType: Expression.min(@Size(min=1) Expression... numbers)
  fullName: com.microsoft.azure.maps.mapcontrol.options.Expression.min(@Size(min=1) Expression... numbers)
  type: Method
  summary: "<p>Returns the minimum value of the inputs. </p>\r\n<p>Example usage: </p>\r\n<p>\r\n  <pre>\r\n    <code>SymbolLayer symbolLayer = new SymbolLayer(\r\n        \"source-id\",\r\n        iconSize(min(pi(), literal(3.14f), literal(3.15f)))\r\n    );\r\n    </code>\r\n  </pre>\r\n</p>\r\n<p></p>"
  syntax: *o2
