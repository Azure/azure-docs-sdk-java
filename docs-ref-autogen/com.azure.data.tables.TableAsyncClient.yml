### YamlMime:JavaType
uid: "com.azure.data.tables.TableAsyncClient"
fullName: "com.azure.data.tables.TableAsyncClient"
name: "TableAsyncClient"
nameWithType: "TableAsyncClient"
summary: "Provides an asynchronous service client for accessing a table in the Azure Tables service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class TableAsyncClient"
methods:
- uid: "com.azure.data.tables.TableAsyncClient.createEntity(com.azure.data.tables.models.TableEntity)"
  fullName: "com.azure.data.tables.TableAsyncClient.createEntity(TableEntity entity)"
  name: "createEntity(TableEntity entity)"
  nameWithType: "TableAsyncClient.createEntity(TableEntity entity)"
  summary: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to insert."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> createEntity(TableEntity entity)"
  desc: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table.\n\n**Code Samples**\n\nInserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table. Prints out the details of the created <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString partitionKey = \"partitionKey\";\n String rowKey = \"rowKey\";\n\n TableEntity tableEntity = new TableEntity(partitionKey, rowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.createEntity(tableEntity)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was created.\", partitionKey,\n             rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity)"
  fullName: "com.azure.data.tables.TableAsyncClient.createEntityWithResponse(TableEntity entity)"
  name: "createEntityWithResponse(TableEntity entity)"
  nameWithType: "TableAsyncClient.createEntityWithResponse(TableEntity entity)"
  summary: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to insert."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> createEntityWithResponse(TableEntity entity)"
  desc: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table.\n\n**Code Samples**\n\nInserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the created <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString myPartitionKey = \"partitionKey\";\n String myRowKey = \"rowKey\";\n\n TableEntity myTableEntity = new TableEntity(myPartitionKey, myRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.createEntityWithResponse(myTableEntity)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Table entity with partition key '%s' and\"\n             + \" row key '%s' was created.\", response.getStatusCode(), myPartitionKey, myRowKey));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.createTable()"
  fullName: "com.azure.data.tables.TableAsyncClient.createTable()"
  name: "createTable()"
  nameWithType: "TableAsyncClient.createTable()"
  summary: "Creates the table within the Tables service."
  syntax: "public Mono<TableItem> createTable()"
  desc: "Creates the table within the Tables service.\n\n**Code Samples**\n\nCreates a table. Prints out the details of the created table.\n\n```java\ntableAsyncClient.createTable()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableItem ->\n         System.out.printf(\"Table with name '%s' was created.\", tableItem.getName()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.data.tables.models.TableItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableItem\"></xref> that represents the table."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableItem?alt=com.azure.data.tables.models.TableItem&text=TableItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.createTableWithResponse()"
  fullName: "com.azure.data.tables.TableAsyncClient.createTableWithResponse()"
  name: "createTableWithResponse()"
  nameWithType: "TableAsyncClient.createTableWithResponse()"
  summary: "Creates the table within the Tables service."
  syntax: "public Mono<Response<TableItem>> createTableWithResponse()"
  desc: "Creates the table within the Tables service.\n\n**Code Samples**\n\nCreates a table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the created table.\n\n```java\ntableAsyncClient.createTableWithResponse()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Table with name '%s' was created.\",\n             response.getStatusCode(), response.getValue().getName()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> that in turn contains a <xref uid=\"com.azure.data.tables.models.TableItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableItem\"></xref>\n that represents the table."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableItem?alt=com.azure.data.tables.models.TableItem&text=TableItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.deleteEntity(com.azure.data.tables.models.TableEntity)"
  fullName: "com.azure.data.tables.TableAsyncClient.deleteEntity(TableEntity entity)"
  name: "deleteEntity(TableEntity entity)"
  nameWithType: "TableAsyncClient.deleteEntity(TableEntity entity)"
  summary: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to delete."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteEntity(TableEntity entity)"
  desc: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table.\n\n**Code Samples**\n\nDeletes a <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the details of the deleted <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString myPartitionKey = \"partitionKey\";\n String myRowKey = \"rowKey\";\n\n TableEntity myTableEntity = new TableEntity(myPartitionKey, myRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.deleteEntity(myTableEntity)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was created.\", partitionKey,\n             rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.tables.TableAsyncClient.deleteEntity(String partitionKey, String rowKey)"
  name: "deleteEntity(String partitionKey, String rowKey)"
  nameWithType: "TableAsyncClient.deleteEntity(String partitionKey, String rowKey)"
  summary: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table."
  parameters:
  - description: "The partition key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "partitionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The row key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "rowKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteEntity(String partitionKey, String rowKey)"
  desc: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table.\n\n**Code Samples**\n\nDeletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the entity's `partitionKey` and `rowKey`.\n\n```java\nString partitionKey = \"partitionKey\";\n String rowKey = \"rowKey\";\n\n tableAsyncClient.deleteEntity(partitionKey, rowKey)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was deleted.\", partitionKey,\n             rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(com.azure.data.tables.models.TableEntity,boolean)"
  fullName: "com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged)"
  name: "deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged)"
  nameWithType: "TableAsyncClient.deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged)"
  summary: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table."
  parameters:
  - description: "The table <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to delete."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "When true, the ETag of the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> must match the ETag of the\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> in the Table service. If the values do not match, the update will not occur and an\n exception will be thrown."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged)"
  desc: "Deletes an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table.\n\n**Code Samples**\n\nDeletes a <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the deleted <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString somePartitionKey = \"partitionKey\";\n String someRowKey = \"rowKey\";\n\n TableEntity someTableEntity = new TableEntity(somePartitionKey, someRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.deleteEntityWithResponse(someTableEntity, true)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Table entity with partition key '%s' and\"\n             + \" row key '%s' was deleted.\", response.getStatusCode(), somePartitionKey, someRowKey));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.deleteTable()"
  fullName: "com.azure.data.tables.TableAsyncClient.deleteTable()"
  name: "deleteTable()"
  nameWithType: "TableAsyncClient.deleteTable()"
  summary: "Deletes the table within the Tables service."
  syntax: "public Mono<Void> deleteTable()"
  desc: "Deletes the table within the Tables service.\n\n**Code Samples**\n\nDeletes a table.\n\n```java\ntableAsyncClient.deleteTable()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused -> System.out.print(\"Table was deleted.\"));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.deleteTableWithResponse()"
  fullName: "com.azure.data.tables.TableAsyncClient.deleteTableWithResponse()"
  name: "deleteTableWithResponse()"
  nameWithType: "TableAsyncClient.deleteTableWithResponse()"
  summary: "Deletes the table within the Tables service."
  syntax: "public Mono<Response<Void>> deleteTableWithResponse()"
  desc: "Deletes the table within the Tables service.\n\n**Code Samples**\n\nDeletes a table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>.\n\n```java\ntableAsyncClient.deleteTableWithResponse()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Table was deleted successfully with status code: %d.\",\n             response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.generateSas(com.azure.data.tables.sas.TableSasSignatureValues)"
  fullName: "com.azure.data.tables.TableAsyncClient.generateSas(TableSasSignatureValues tableSasSignatureValues)"
  name: "generateSas(TableSasSignatureValues tableSasSignatureValues)"
  nameWithType: "TableAsyncClient.generateSas(TableSasSignatureValues tableSasSignatureValues)"
  summary: "Generates a service SAS for the table using the specified <xref uid=\"com.azure.data.tables.sas.TableSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.data.tables.sas.TableSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableSasSignatureValues\"></xref>."
    name: "tableSasSignatureValues"
    type: "<xref href=\"com.azure.data.tables.sas.TableSasSignatureValues?alt=com.azure.data.tables.sas.TableSasSignatureValues&text=TableSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(TableSasSignatureValues tableSasSignatureValues)"
  desc: "Generates a service SAS for the table using the specified <xref uid=\"com.azure.data.tables.sas.TableSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableSasSignatureValues\"></xref>.\n\n**Note:** The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref>.\n\nSee <xref uid=\"com.azure.data.tables.sas.TableSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableSasSignatureValues\"></xref> for more information on how to construct a service SAS."
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.tables.TableAsyncClient.getAccessPolicies()"
  fullName: "com.azure.data.tables.TableAsyncClient.getAccessPolicies()"
  name: "getAccessPolicies()"
  nameWithType: "TableAsyncClient.getAccessPolicies()"
  summary: "Retrieves details about any stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> specified on the table that may be used with Shared Access Signatures."
  syntax: "public Mono<TableAccessPolicies> getAccessPolicies()"
  desc: "Retrieves details about any stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> specified on the table that may be used with Shared Access Signatures.\n\nThis operation is only supported on Azure Storage endpoints.\n\n**Code Samples**\n\nGets a table's <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>. Prints out the details of the retrieved <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>.\n\n```java\ntableAsyncClient.getAccessPolicies()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(accessPolicies ->\n         accessPolicies.getIdentifiers().forEach(signedIdentifier ->\n             System.out.printf(\"Retrieved table access policy with id '%s'.\", signedIdentifier.getId())));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the table's <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableAccessPolicies?alt=com.azure.data.tables.models.TableAccessPolicies&text=TableAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.getAccessPoliciesWithResponse()"
  fullName: "com.azure.data.tables.TableAsyncClient.getAccessPoliciesWithResponse()"
  name: "getAccessPoliciesWithResponse()"
  nameWithType: "TableAsyncClient.getAccessPoliciesWithResponse()"
  summary: "Retrieves details about any stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> specified on the table that may be used with Shared Access Signatures."
  syntax: "public Mono<Response<TableAccessPolicies>> getAccessPoliciesWithResponse()"
  desc: "Retrieves details about any stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> specified on the table that may be used with Shared Access Signatures.\n\nThis operation is only supported on Azure Storage endpoints.\n\n**Code Samples**\n\nGets a table's <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the retrieved <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>.\n\n```java\nList<String> propertiesToSelect = new ArrayList<>();\n propertiesToSelect.add(\"name\");\n propertiesToSelect.add(\"lastname\");\n propertiesToSelect.add(\"age\");\n\n tableAsyncClient.getAccessPoliciesWithResponse()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d. Retrieved table access policies with the\"\n             + \" following IDs:\", response.getStatusCode());\n\n         response.getValue().getIdentifiers().forEach(signedIdentifier ->\n             System.out.printf(\"%n%s\", signedIdentifier.getId()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing an <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> that in turn contains the table's\n <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableAccessPolicies?alt=com.azure.data.tables.models.TableAccessPolicies&text=TableAccessPolicies\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.getAccountName()"
  fullName: "com.azure.data.tables.TableAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "TableAsyncClient.getAccountName()"
  summary: "Gets the name of the account containing the table."
  syntax: "public String getAccountName()"
  desc: "Gets the name of the account containing the table."
  returns:
    description: "The name of the account containing the table."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String)"
  fullName: "com.azure.data.tables.TableAsyncClient.getEntity(String partitionKey, String rowKey)"
  name: "getEntity(String partitionKey, String rowKey)"
  nameWithType: "TableAsyncClient.getEntity(String partitionKey, String rowKey)"
  summary: "Gets a single <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table."
  parameters:
  - description: "The partition key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "partitionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The partition key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "rowKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TableEntity> getEntity(String partitionKey, String rowKey)"
  desc: "Gets a single <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table.\n\n**Code Samples**\n\nGets an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the details of the retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString partitionKey = \"partitionKey\";\n String rowKey = \"rowKey\";\n\n tableAsyncClient.getEntity(partitionKey, rowKey)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableEntity ->\n         System.out.printf(\"Retrieved entity with partition key '%s' and row key '%s'.\",\n             tableEntity.getPartitionKey(), tableEntity.getRowKey()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.getEntityWithResponse(java.lang.String,java.lang.String,java.util.List<java.lang.String>)"
  fullName: "com.azure.data.tables.TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey, List<String> select)"
  name: "getEntityWithResponse(String partitionKey, String rowKey, List<String> select)"
  nameWithType: "TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey, List<String> select)"
  summary: "Gets a single <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table."
  parameters:
  - description: "The partition key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "partitionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The partition key of the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "rowKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A list of properties to select on the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    name: "select"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<TableEntity>> getEntityWithResponse(String partitionKey, String rowKey, List<String> select)"
  desc: "Gets a single <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> from the table.\n\n**Code Samples**\n\nGets an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString myPartitionKey = \"partitionKey\";\n String myRowKey = \"rowKey\";\n\n List<String> propertiesToSelect = new ArrayList<>();\n propertiesToSelect.add(\"name\");\n propertiesToSelect.add(\"lastname\");\n propertiesToSelect.add(\"age\");\n\n tableAsyncClient.getEntityWithResponse(myPartitionKey, myRowKey, propertiesToSelect)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response -> {\n         TableEntity tableEntity = response.getValue();\n\n         System.out.printf(\"Response successful with status code: %d. Retrieved entity with partition key '%s',\"\n                 + \" row key '%s' and properties:\", response.getStatusCode(), tableEntity.getPartitionKey(),\n             tableEntity.getRowKey());\n\n         tableEntity.getProperties().forEach((key, value) ->\n             System.out.printf(\"%nName: '%s'. Value: '%s'.\", key, value));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> that in turn contains the\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.getServiceVersion()"
  fullName: "com.azure.data.tables.TableAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "TableAsyncClient.getServiceVersion()"
  summary: "Gets the REST API version used by this client."
  syntax: "public TableServiceVersion getServiceVersion()"
  desc: "Gets the REST API version used by this client."
  returns:
    description: "The REST API version used by this client."
    type: "<xref href=\"com.azure.data.tables.TableServiceVersion?alt=com.azure.data.tables.TableServiceVersion&text=TableServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.tables.TableAsyncClient.getTableEndpoint()"
  fullName: "com.azure.data.tables.TableAsyncClient.getTableEndpoint()"
  name: "getTableEndpoint()"
  nameWithType: "TableAsyncClient.getTableEndpoint()"
  summary: "Gets the endpoint for this table."
  syntax: "public String getTableEndpoint()"
  desc: "Gets the endpoint for this table."
  returns:
    description: "The endpoint for this table."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.tables.TableAsyncClient.getTableName()"
  fullName: "com.azure.data.tables.TableAsyncClient.getTableName()"
  name: "getTableName()"
  nameWithType: "TableAsyncClient.getTableName()"
  summary: "Gets the name of the table."
  syntax: "public String getTableName()"
  desc: "Gets the name of the table."
  returns:
    description: "The name of the table."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.tables.TableAsyncClient.listEntities()"
  fullName: "com.azure.data.tables.TableAsyncClient.listEntities()"
  name: "listEntities()"
  nameWithType: "TableAsyncClient.listEntities()"
  summary: "Lists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table."
  syntax: "public PagedFlux<TableEntity> listEntities()"
  desc: "Lists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table.\n\n**Code Samples**\n\nLists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on the table. Prints out the details of the retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref>.\n\n```java\ntableAsyncClient.listEntities()\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableEntity ->\n         System.out.printf(\"Retrieved entity with partition key '%s' and row key '%s'.%n\",\n             tableEntity.getPartitionKey(), tableEntity.getRowKey()));\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)"
  fullName: "com.azure.data.tables.TableAsyncClient.listEntities(ListEntitiesOptions options)"
  name: "listEntities(ListEntitiesOptions options)"
  nameWithType: "TableAsyncClient.listEntities(ListEntitiesOptions options)"
  summary: "Lists <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> using the parameters in the provided options."
  parameters:
  - description: "The <code>filter</code>, <code>select</code>, and <code>top</code> OData query options to apply to this\n operation."
    name: "options"
    type: "<xref href=\"com.azure.data.tables.models.ListEntitiesOptions?alt=com.azure.data.tables.models.ListEntitiesOptions&text=ListEntitiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TableEntity> listEntities(ListEntitiesOptions options)"
  desc: "Lists <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> using the parameters in the provided options.\n\nIf the `filter` parameter in the options is set, only <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> matching the filter will be returned. If the `select` parameter is set, only the properties included in the select parameter will be returned for each <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>. If the `top` parameter is set, the maximum number of returned <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> per page will be limited to that value.\n\n**Code Samples**\n\nLists all <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on the table. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and all the retrieved <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref>.\n\n```java\nList<String> propertiesToSelect = new ArrayList<>();\n propertiesToSelect.add(\"name\");\n propertiesToSelect.add(\"lastname\");\n propertiesToSelect.add(\"age\");\n\n ListEntitiesOptions listEntitiesOptions = new ListEntitiesOptions()\n     .setTop(15)\n     .setFilter(\"PartitionKey eq 'MyPartitionKey' and RowKey eq 'MyRowKey'\")\n     .setSelect(propertiesToSelect);\n\n tableAsyncClient.listEntities(listEntitiesOptions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableEntity -> {\n         System.out.printf(\"Retrieved entity with partition key '%s', row key '%s' and properties:%n\",\n             tableEntity.getPartitionKey(), tableEntity.getRowKey());\n\n         tableEntity.getProperties().forEach((key, value) ->\n             System.out.printf(\"Name: '%s'. Value: '%s'.%n\", key, value));\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref> containing matching <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> within the table."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.setAccessPolicies(java.util.List<com.azure.data.tables.models.TableSignedIdentifier>)"
  fullName: "com.azure.data.tables.TableAsyncClient.setAccessPolicies(List<TableSignedIdentifier> tableSignedIdentifiers)"
  name: "setAccessPolicies(List<TableSignedIdentifier> tableSignedIdentifiers)"
  nameWithType: "TableAsyncClient.setAccessPolicies(List<TableSignedIdentifier> tableSignedIdentifiers)"
  summary: "Sets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table that may be used with Shared Access Signatures."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table."
    name: "tableSignedIdentifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableSignedIdentifier?alt=com.azure.data.tables.models.TableSignedIdentifier&text=TableSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setAccessPolicies(List<TableSignedIdentifier> tableSignedIdentifiers)"
  desc: "Sets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table that may be used with Shared Access Signatures.\n\nThis operation is only supported on Azure Storage endpoints.\n\n**Code Samples**\n\nSets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> on a table.\n\n```java\nList<TableSignedIdentifier> signedIdentifiers = new ArrayList<>();\n\n signedIdentifiers.add(new TableSignedIdentifier(\"id1\")\n     .setAccessPolicy(new TableAccessPolicy()\n         .setStartsOn(OffsetDateTime.of(2021, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setExpiresOn(OffsetDateTime.of(2022, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setPermissions(\"r\")));\n signedIdentifiers.add(new TableSignedIdentifier(\"id2\")\n     .setAccessPolicy(new TableAccessPolicy()\n         .setStartsOn(OffsetDateTime.of(2021, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setExpiresOn(OffsetDateTime.of(2021, 1, 2, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setPermissions(\"raud\")));\n\n tableAsyncClient.setAccessPolicies(signedIdentifiers)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused -> System.out.print(\"Set table access policies.\"));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.setAccessPoliciesWithResponse(java.util.List<com.azure.data.tables.models.TableSignedIdentifier>)"
  fullName: "com.azure.data.tables.TableAsyncClient.setAccessPoliciesWithResponse(List<TableSignedIdentifier> tableSignedIdentifiers)"
  name: "setAccessPoliciesWithResponse(List<TableSignedIdentifier> tableSignedIdentifiers)"
  nameWithType: "TableAsyncClient.setAccessPoliciesWithResponse(List<TableSignedIdentifier> tableSignedIdentifiers)"
  summary: "Sets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table that may be used with Shared Access Signatures."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableSignedIdentifier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table."
    name: "tableSignedIdentifiers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableSignedIdentifier?alt=com.azure.data.tables.models.TableSignedIdentifier&text=TableSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> setAccessPoliciesWithResponse(List<TableSignedIdentifier> tableSignedIdentifiers)"
  desc: "Sets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> for the table that may be used with Shared Access Signatures.\n\nThis operation is only supported on Azure Storage endpoints.\n\n**Code Samples**\n\nSets stored <xref uid=\"com.azure.data.tables.models.TableAccessPolicies\" data-throw-if-not-resolved=\"false\" data-raw-source=\"access policies\"></xref> on a table. Prints out details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>.\n\n```java\nList<TableSignedIdentifier> mySignedIdentifiers = new ArrayList<>();\n\n mySignedIdentifiers.add(new TableSignedIdentifier(\"id1\")\n     .setAccessPolicy(new TableAccessPolicy()\n         .setStartsOn(OffsetDateTime.of(2021, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setExpiresOn(OffsetDateTime.of(2022, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setPermissions(\"r\")));\n mySignedIdentifiers.add(new TableSignedIdentifier(\"id2\")\n     .setAccessPolicy(new TableAccessPolicy()\n         .setStartsOn(OffsetDateTime.of(2021, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setExpiresOn(OffsetDateTime.of(2021, 1, 2, 0, 0, 0, 0, ZoneOffset.UTC))\n         .setPermissions(\"raud\")));\n\n tableAsyncClient.setAccessPoliciesWithResponse(mySignedIdentifiers)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Set table access policies successfully with status code: %d.\",\n             response.getStatusCode()));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.submitTransaction(java.util.List<com.azure.data.tables.models.TableTransactionAction>)"
  fullName: "com.azure.data.tables.TableAsyncClient.submitTransaction(List<TableTransactionAction> transactionActions)"
  name: "submitTransaction(List<TableTransactionAction> transactionActions)"
  nameWithType: "TableAsyncClient.submitTransaction(List<TableTransactionAction> transactionActions)"
  summary: "Executes all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> within the list inside a transaction."
  parameters:
  - description: "A <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> to perform on\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> in a table."
    name: "transactionActions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionAction?alt=com.azure.data.tables.models.TableTransactionAction&text=TableTransactionAction\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<TableTransactionResult> submitTransaction(List<TableTransactionAction> transactionActions)"
  desc: "Executes all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> within the list inside a transaction. When the call completes, either all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will succeed, or if a failure occurs, all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will be rolled back. Each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> must operate on a distinct row key. Attempting to pass multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> that share the same row key will cause an error.\n\n**Code Samples**\n\nSubmits a transaction that contains multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> to be applied to <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on a table. Prints out details of each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref>'s <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>.\n\n```java\nList<TableTransactionAction> transactionActions = new ArrayList<>();\n\n String partitionKey = \"markers\";\n String firstEntityRowKey = \"m001\";\n String secondEntityRowKey = \"m002\";\n\n TableEntity firstEntity = new TableEntity(partitionKey, firstEntityRowKey)\n     .addProperty(\"Type\", \"Dry\")\n     .addProperty(\"Color\", \"Red\");\n\n transactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, firstEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", partitionKey,\n     firstEntityRowKey);\n\n TableEntity secondEntity = new TableEntity(partitionKey, secondEntityRowKey)\n     .addProperty(\"Type\", \"Wet\")\n     .addProperty(\"Color\", \"Blue\");\n\n transactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, secondEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", partitionKey,\n     secondEntityRowKey);\n\n tableAsyncClient.submitTransaction(transactionActions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(tableTransactionResult -> {\n         System.out.print(\"Submitted transaction. The ordered response status codes for the actions are:\");\n\n         tableTransactionResult.getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n             System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n     });\n```\n\nShows how to handle a transaction with a failing <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> via the provided <xref uid=\"com.azure.data.tables.models.TableTransactionFailedException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"exception\"></xref>, which contains the index of the first failing action in the transaction.\n\n```java\ntry {\n     TableTransactionResult transactionResult = tableClient.submitTransaction(transactionActions);\n\n     System.out.print(\"Submitted transaction. The ordered response status codes for the actions are:\");\n\n     transactionResult.getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n         System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n } catch (TableTransactionFailedException e) {\n     // If the transaction fails, the resulting exception contains the index of the first action that failed.\n     int failedActionIndex = e.getFailedTransactionActionIndex();\n     // You can use this index to modify the offending action or remove it from the list of actions to send in\n     // the transaction, for example.\n     transactionActions.remove(failedActionIndex);\n     // And then retry submitting the transaction.\n }\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionActionResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"sub-responses\"></xref> that\n correspond to each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> in the transaction."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionResult?alt=com.azure.data.tables.models.TableTransactionResult&text=TableTransactionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse(java.util.List<com.azure.data.tables.models.TableTransactionAction>)"
  fullName: "com.azure.data.tables.TableAsyncClient.submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  name: "submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  nameWithType: "TableAsyncClient.submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  summary: "Executes all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> within the list inside a transaction."
  parameters:
  - description: "A <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"transaction actions\"></xref> to perform on\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> in a table."
    name: "transactionActions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionAction?alt=com.azure.data.tables.models.TableTransactionAction&text=TableTransactionAction\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<TableTransactionResult>> submitTransactionWithResponse(List<TableTransactionAction> transactionActions)"
  desc: "Executes all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> within the list inside a transaction. When the call completes, either all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will succeed, or if a failure occurs, all <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> in the transaction will be rolled back. Each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> must operate on a distinct row key. Attempting to pass multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> that share the same row key will cause an error.\n\n**Code Samples**\n\nSubmits a transaction that contains multiple <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"actions\"></xref> to be applied to <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> on a table. Prints out details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> for the operation, as well as each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref>'s corresponding <xref uid=\"Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP\n response\"></xref>.\n\n```java\nList<TableTransactionAction> myTransactionActions = new ArrayList<>();\n\n String myPartitionKey = \"markers\";\n String myFirstEntityRowKey = \"m001\";\n String mySecondEntityRowKey = \"m002\";\n\n TableEntity myFirstEntity = new TableEntity(myPartitionKey, myFirstEntityRowKey)\n     .addProperty(\"Type\", \"Dry\")\n     .addProperty(\"Color\", \"Red\");\n\n myTransactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, myFirstEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", myPartitionKey,\n     myFirstEntityRowKey);\n\n TableEntity mySecondEntity = new TableEntity(myPartitionKey, mySecondEntityRowKey)\n     .addProperty(\"Type\", \"Wet\")\n     .addProperty(\"Color\", \"Blue\");\n\n myTransactionActions.add(new TableTransactionAction(TableTransactionActionType.CREATE, mySecondEntity));\n\n System.out.printf(\"Added create action for entity with partition key '%s', and row key '%s'.%n\", myPartitionKey,\n     mySecondEntityRowKey);\n\n tableAsyncClient.submitTransactionWithResponse(myTransactionActions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d. The ordered response status codes of the\"\n             + \" submitted actions are:\", response.getStatusCode());\n\n         response.getValue().getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n             System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n     });\n```\n\nShows how to handle a transaction with a failing <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> via the provided <xref uid=\"com.azure.data.tables.models.TableTransactionFailedException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"exception\"></xref>, which contains the index of the first failing action in the transaction.\n\n```java\ntableAsyncClient.submitTransactionWithResponse(myTransactionActions)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .doOnError(TableTransactionFailedException.class, e -> {\n         // If the transaction fails, the resulting exception contains the index of the first action that failed.\n         int failedActionIndex = e.getFailedTransactionActionIndex();\n         // You can use this index to modify the offending action or remove it from the list of actions to send\n         // in the transaction, for example.\n         transactionActions.remove(failedActionIndex);\n         // And then retry submitting the transaction.\n     })\n     .subscribe(response -> {\n         System.out.printf(\"Response successful with status code: %d. The ordered response status codes of the\"\n             + \" submitted actions are:\", response.getStatusCode());\n\n         response.getValue().getTransactionActionResponses().forEach(tableTransactionActionResponse ->\n             System.out.printf(\"%n%d\", tableTransactionActionResponse.getStatusCode()));\n     });\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> produced for the transaction itself. The\n response's value will contain a <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"List\"></xref> of <xref uid=\"com.azure.data.tables.models.TableTransactionActionResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"sub-responses\"></xref> that\n correspond to each <xref uid=\"com.azure.data.tables.models.TableTransactionAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"action\"></xref> in the transaction."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.tables.models.TableTransactionResult?alt=com.azure.data.tables.models.TableTransactionResult&text=TableTransactionResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity)"
  fullName: "com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity)"
  name: "updateEntity(TableEntity entity)"
  nameWithType: "TableAsyncClient.updateEntity(TableEntity entity)"
  summary: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> by merging the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> with the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to update."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateEntity(TableEntity entity)"
  desc: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> by merging the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> with the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n**Code Samples**\n\nUpdates a <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table. Prints out the details of the updated <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString partitionKey = \"partitionKey\";\n String rowKey = \"rowKey\";\n\n TableEntity tableEntity = new TableEntity(partitionKey, rowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.updateEntity(tableEntity)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was updated/created.\",\n             partitionKey, rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.TableEntityUpdateMode)"
  fullName: "com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity, TableEntityUpdateMode updateMode)"
  name: "updateEntity(TableEntity entity, TableEntityUpdateMode updateMode)"
  nameWithType: "TableAsyncClient.updateEntity(TableEntity entity, TableEntityUpdateMode updateMode)"
  summary: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to update."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type of update to perform."
    name: "updateMode"
    type: "<xref href=\"com.azure.data.tables.models.TableEntityUpdateMode?alt=com.azure.data.tables.models.TableEntityUpdateMode&text=TableEntityUpdateMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> updateEntity(TableEntity entity, TableEntityUpdateMode updateMode)"
  desc: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref>. The default <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>.\n\nWhen the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will be merged into the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>. When the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.REPLACE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"REPLACE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will completely replace those in the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n**Code Samples**\n\nUpdates a <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table with the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref>. Prints out the details of the updated <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString myPartitionKey = \"partitionKey\";\n String myRowKey = \"rowKey\";\n\n TableEntity myTableEntity = new TableEntity(myPartitionKey, myRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.updateEntity(myTableEntity, TableEntityUpdateMode.REPLACE)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was updated/created.\",\n             partitionKey, rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.TableEntityUpdateMode,boolean)"
  fullName: "com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode, boolean ifUnchanged)"
  name: "updateEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode, boolean ifUnchanged)"
  nameWithType: "TableAsyncClient.updateEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode, boolean ifUnchanged)"
  summary: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref>."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to update."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type of update to perform."
    name: "updateMode"
    type: "<xref href=\"com.azure.data.tables.models.TableEntityUpdateMode?alt=com.azure.data.tables.models.TableEntityUpdateMode&text=TableEntityUpdateMode\" data-throw-if-not-resolved=\"False\" />"
  - description: "When true, the ETag of the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> must match the ETag of the\n <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> in the Table service. If the values do not match, the update will not occur and an\n exception will be thrown."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> updateEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode, boolean ifUnchanged)"
  desc: "Updates an existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref>. The default <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>.\n\nWhen the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will be merged into the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>. When the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.REPLACE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"REPLACE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will completely replace those in the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n**Code Samples**\n\nUpdates a <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> on the table with the specified <xref uid=\"TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update\n mode\"></xref> if the `ETags` on both <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entities\"></xref> match. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> updated <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString somePartitionKey = \"partitionKey\";\n String someRowKey = \"rowKey\";\n\n TableEntity someTableEntity = new TableEntity(somePartitionKey, someRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.updateEntityWithResponse(someTableEntity, TableEntityUpdateMode.REPLACE, true)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Table entity with partition key '%s' and\"\n             + \" row key '%s' was updated.\", response.getStatusCode(), partitionKey, rowKey));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity)"
  fullName: "com.azure.data.tables.TableAsyncClient.upsertEntity(TableEntity entity)"
  name: "upsertEntity(TableEntity entity)"
  nameWithType: "TableAsyncClient.upsertEntity(TableEntity entity)"
  summary: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table if it does not exist, or merges the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> with the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> otherwise."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to upsert."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> upsertEntity(TableEntity entity)"
  desc: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table if it does not exist, or merges the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> with the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> otherwise.\n\n**Code Samples**\n\nUpserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table. Prints out the details of the upserted <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString partitionKey = \"partitionKey\";\n String rowKey = \"rowKey\";\n\n TableEntity tableEntity = new TableEntity(partitionKey, rowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.upsertEntity(tableEntity)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(unused ->\n         System.out.printf(\"Table entity with partition key '%s' and row key '%s' was updated/created.\",\n             partitionKey, rowKey));\n```"
  returns:
    description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.TableEntityUpdateMode)"
  fullName: "com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode)"
  name: "upsertEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode)"
  nameWithType: "TableAsyncClient.upsertEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode)"
  summary: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table if it does not exist, or updates the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> otherwise."
  parameters:
  - description: "The <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> to upsert."
    name: "entity"
    type: "<xref href=\"com.azure.data.tables.models.TableEntity?alt=com.azure.data.tables.models.TableEntity&text=TableEntity\" data-throw-if-not-resolved=\"False\" />"
  - description: "The type of update to perform if the <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> already exits."
    name: "updateMode"
    type: "<xref href=\"com.azure.data.tables.models.TableEntityUpdateMode?alt=com.azure.data.tables.models.TableEntityUpdateMode&text=TableEntityUpdateMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> upsertEntityWithResponse(TableEntity entity, TableEntityUpdateMode updateMode)"
  desc: "Inserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table if it does not exist, or updates the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> using the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> otherwise. The default <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>.\n\nWhen the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.MERGE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MERGE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will be merged into the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>. When the <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> is <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode.REPLACE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"REPLACE\"></xref>, the provided <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>'s properties will completely replace those in the existing <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n**Code Samples**\n\nUpserts an <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> into the table with the specified <xref uid=\"com.azure.data.tables.models.TableEntityUpdateMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"update mode\"></xref> if said <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref> already exists. Prints out the details of the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref> and the upserted <xref uid=\"com.azure.data.tables.models.TableEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entity\"></xref>.\n\n```java\nString myPartitionKey = \"partitionKey\";\n String myRowKey = \"rowKey\";\n\n TableEntity myTableEntity = new TableEntity(myPartitionKey, myRowKey)\n     .addProperty(\"Property\", \"Value\");\n\n tableAsyncClient.upsertEntityWithResponse(myTableEntity, TableEntityUpdateMode.REPLACE)\n     .contextWrite(Context.of(\"key1\", \"value1\", \"key2\", \"value2\"))\n     .subscribe(response ->\n         System.out.printf(\"Response successful with status code: %d. Table entity with partition key '%s' and\"\n             + \" row key '%s' was updated/created.\", response.getStatusCode(), partitionKey, rowKey));\n```"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HTTP response\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Provides an asynchronous service client for accessing a table in the Azure Tables service.\n\nThe client encapsulates the URL for the table within the Tables service endpoint, the name of the table, and the credentials for accessing the storage or CosmosDB table API account. It provides methods to create and delete the table itself, as well as methods to create, upsert, update, delete, list, and get entities within the table. These methods invoke REST API operations to make the requests and obtain the results that are returned.\n\nInstances of this client are obtained by calling the <xref uid=\"com.azure.data.tables.TableClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableClientBuilder#buildAsyncClient()\"></xref> method on a <xref uid=\"com.azure.data.tables.TableClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TableClientBuilder\"></xref> object.\n\n**Samples to construct an async client**\n\n```java\nTableAsyncClient tableAsyncClient = new TableClientBuilder()\n     .endpoint(\"https://myaccount.core.windows.net/\")\n     .credential(new AzureNamedKeyCredential(\"name\", \"key\"))\n     .tableName(\"myTable\")\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.data.tables"
artifact: com.azure:azure-data-tables:12.3.3
