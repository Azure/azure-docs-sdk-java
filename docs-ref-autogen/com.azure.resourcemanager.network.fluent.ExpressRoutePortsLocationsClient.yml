### YamlMime:JavaType
uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient"
fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient"
name: "ExpressRoutePortsLocationsClient"
nameWithType: "ExpressRoutePortsLocationsClient"
summary: "An instance of this class provides access to all the operations defined in Express<wbr>Route<wbr>Ports<wbr>Locations<wbr>Client."
syntax: "public interface ExpressRoutePortsLocationsClient"
methods:
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.get(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.get(String locationName)"
  name: "get(String locationName)"
  nameWithType: "ExpressRoutePortsLocationsClient.get(String locationName)"
  summary: "Retrieves a single Express<wbr>Route<wbr>Port peering location, including the list of available bandwidths available at said peering location."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the requested ExpressRoutePort peering location."
    name: "locationName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract ExpressRoutePortsLocationInner get(String locationName)"
  desc: "Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location."
  returns:
    description: "expressRoutePorts Peering Location."
    type: "<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getAsync(String locationName)"
  name: "getAsync(String locationName)"
  nameWithType: "ExpressRoutePortsLocationsClient.getAsync(String locationName)"
  summary: "Retrieves a single Express<wbr>Route<wbr>Port peering location, including the list of available bandwidths available at said peering location."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the requested ExpressRoutePort peering location."
    name: "locationName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<ExpressRoutePortsLocationInner> getAsync(String locationName)"
  desc: "Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location."
  returns:
    description: "expressRoutePorts Peering Location on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponse(String locationName, Context context)"
  name: "getWithResponse(String locationName, Context context)"
  nameWithType: "ExpressRoutePortsLocationsClient.getWithResponse(String locationName, Context context)"
  summary: "Retrieves a single Express<wbr>Route<wbr>Port peering location, including the list of available bandwidths available at said peering location."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the requested ExpressRoutePort peering location."
    name: "locationName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<ExpressRoutePortsLocationInner> getWithResponse(String locationName, Context context)"
  desc: "Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location."
  returns:
    description: "expressRoutePorts Peering Location along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.getWithResponseAsync(String locationName)"
  name: "getWithResponseAsync(String locationName)"
  nameWithType: "ExpressRoutePortsLocationsClient.getWithResponseAsync(String locationName)"
  summary: "Retrieves a single Express<wbr>Route<wbr>Port peering location, including the list of available bandwidths available at said peering location."
  modifiers:
  - "abstract"
  parameters:
  - description: "Name of the requested ExpressRoutePort peering location."
    name: "locationName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<ExpressRoutePortsLocationInner>> getWithResponseAsync(String locationName)"
  desc: "Retrieves a single ExpressRoutePort peering location, including the list of available bandwidths available at said peering location."
  returns:
    description: "expressRoutePorts Peering Location along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.list()"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.list()"
  name: "list()"
  nameWithType: "ExpressRoutePortsLocationsClient.list()"
  summary: "Retrieves all Express<wbr>Route<wbr>Port peering locations."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<ExpressRoutePortsLocationInner> list()"
  desc: "Retrieves all ExpressRoutePort peering locations. Does not return available bandwidths for each location. Available bandwidths can only be obtained when retrieving a specific peering location."
  returns:
    description: "expressRoutePorts Location List Result as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.list(com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.list(Context context)"
  name: "list(Context context)"
  nameWithType: "ExpressRoutePortsLocationsClient.list(Context context)"
  summary: "Retrieves all Express<wbr>Route<wbr>Port peering locations."
  modifiers:
  - "abstract"
  parameters:
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<ExpressRoutePortsLocationInner> list(Context context)"
  desc: "Retrieves all ExpressRoutePort peering locations. Does not return available bandwidths for each location. Available bandwidths can only be obtained when retrieving a specific peering location."
  returns:
    description: "expressRoutePorts Location List Result as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.listAsync()"
  fullName: "com.azure.resourcemanager.network.fluent.ExpressRoutePortsLocationsClient.listAsync()"
  name: "listAsync()"
  nameWithType: "ExpressRoutePortsLocationsClient.listAsync()"
  summary: "Retrieves all Express<wbr>Route<wbr>Port peering locations."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<ExpressRoutePortsLocationInner> listAsync()"
  desc: "Retrieves all ExpressRoutePort peering locations. Does not return available bandwidths for each location. Available bandwidths can only be obtained when retrieving a specific peering location."
  returns:
    description: "expressRoutePorts Location List Result as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner?alt=com.azure.resourcemanager.network.fluent.models.ExpressRoutePortsLocationInner&text=ExpressRoutePortsLocationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in ExpressRoutePortsLocationsClient."
metadata: {}
package: "com.azure.resourcemanager.network.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-network:2.19.0
