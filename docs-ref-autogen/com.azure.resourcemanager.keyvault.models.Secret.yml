### YamlMime:JavaType
uid: "com.azure.resourcemanager.keyvault.models.Secret"
fullName: "com.azure.resourcemanager.keyvault.models.Secret"
name: "Secret"
nameWithType: "Secret"
summary: "An immutable client-side representation of an Azure Key Vault secret."
syntax: "public interface Secret extends Indexable, HasInnerModel<SecretProperties>, HasId, HasName, Updatable<Secret.Update>"
methods:
- uid: "com.azure.resourcemanager.keyvault.models.Secret.attributes()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.attributes()"
  name: "attributes()"
  nameWithType: "Secret.attributes()"
  modifiers:
  - "abstract"
  syntax: "public abstract SecretProperties attributes()"
  returns:
    description: "the secret management attributes"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.contentType()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.contentType()"
  name: "contentType()"
  nameWithType: "Secret.contentType()"
  modifiers:
  - "abstract"
  syntax: "public abstract String contentType()"
  returns:
    description: "type of the secret value such as a password"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.enabled()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.enabled()"
  name: "enabled()"
  nameWithType: "Secret.enabled()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean enabled()"
  returns:
    description: "whether secret is enabled."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.getValue()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.getValue()"
  name: "getValue()"
  nameWithType: "Secret.getValue()"
  modifiers:
  - "abstract"
  syntax: "public abstract String getValue()"
  returns:
    description: "the secret value when the secret is enabled"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.getValueAsync()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.getValueAsync()"
  name: "getValueAsync()"
  nameWithType: "Secret.getValueAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract Mono<String> getValueAsync()"
  returns:
    description: "the secret value when the secret is enabled"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.kid()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.kid()"
  name: "kid()"
  nameWithType: "Secret.kid()"
  modifiers:
  - "abstract"
  syntax: "public abstract String kid()"
  returns:
    description: "the corresponding key backing the KV certificate if this is a secret backing a KV certificate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.listVersions()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.listVersions()"
  name: "listVersions()"
  nameWithType: "Secret.listVersions()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<Secret> listVersions()"
  returns:
    description: "a list of individual secret versions with the same secret name"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Secret?alt=com.azure.resourcemanager.keyvault.models.Secret&text=Secret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.listVersionsAsync()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.listVersionsAsync()"
  name: "listVersionsAsync()"
  nameWithType: "Secret.listVersionsAsync()"
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<Secret> listVersionsAsync()"
  returns:
    description: "a list of individual secret versions with the same secret name"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Secret?alt=com.azure.resourcemanager.keyvault.models.Secret&text=Secret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.managed()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.managed()"
  name: "managed()"
  nameWithType: "Secret.managed()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean managed()"
  returns:
    description: "true if the secret's lifetime is managed by key vault. If this is a key backing a certificate, then\n     managed will be true"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.keyvault.models.Secret.tags()"
  fullName: "com.azure.resourcemanager.keyvault.models.Secret.tags()"
  name: "tags()"
  nameWithType: "Secret.tags()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> tags()"
  returns:
    description: "application specific metadata in the form of key-value pairs"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
type: "interface"
desc: "An immutable client-side representation of an Azure Key Vault secret."
implements:
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.HasId?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.HasId&text=HasId\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.arm.models.HasName?alt=com.azure.resourcemanager.resources.fluentcore.arm.models.HasName&text=HasName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel?alt=com.azure.resourcemanager.resources.fluentcore.model.HasInnerModel&text=HasInnerModel\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.resources.fluentcore.model.Updatable?alt=com.azure.resourcemanager.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.keyvault.models.Secret.Update?alt=com.azure.resourcemanager.keyvault.models.Secret.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.resourcemanager.keyvault.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-keyvault:2.19.0
