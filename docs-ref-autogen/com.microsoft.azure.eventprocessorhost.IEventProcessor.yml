### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  name: onClose(PartitionContext context, CloseReason reason)
  nameWithType: IEventProcessor.onClose(PartitionContext context, CloseReason reason)
  parameters:
  - description: <p>Information about the partition. </p>
    name: context
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionContext?alt=com.microsoft.azure.eventprocessorhost.PartitionContext&text=PartitionContext" data-throw-if-not-resolved="False"/>
  - description: <p>Reason why the event processor is being stopped. </p>
    name: reason
    type: <xref href="com.microsoft.azure.eventprocessorhost.CloseReason?alt=com.microsoft.azure.eventprocessorhost.CloseReason&text=CloseReason" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>to indicate failure. </p>
  summary: >-
    <p>Called by processor host to indicate that the event processor is being stopped. </p>

    <p>If onClose fails, the exception is reported to the general exception notification handler set via EventProcessorOptions, if any, but is otherwise ignored.</p>

    <p></p>
  syntax: public void onClose(PartitionContext context, CloseReason reason)
  uid: com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose(PartitionContext,CloseReason)
- fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor.onError(PartitionContext context, Throwable error)
  name: onError(PartitionContext context, Throwable error)
  nameWithType: IEventProcessor.onError(PartitionContext context, Throwable error)
  parameters:
  - description: <p>Information about the partition. </p>
    name: context
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionContext?alt=com.microsoft.azure.eventprocessorhost.PartitionContext&text=PartitionContext" data-throw-if-not-resolved="False"/>
  - description: <p>The error that occured. </p>
    name: error
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Called when the underlying client experiences an error while receiving. EventProcessorHost will take care of recovering from the error and continuing to pump events, so no action is required from your code. This method is provided for informational purposes.</p>

    <p></p>
  syntax: public void onError(PartitionContext context, Throwable error)
  uid: com.microsoft.azure.eventprocessorhost.IEventProcessor.onError(PartitionContext,Throwable)
- fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> events)
  name: onEvents(PartitionContext context, Iterable<EventData> events)
  nameWithType: IEventProcessor.onEvents(PartitionContext context, Iterable<EventData> events)
  parameters:
  - description: <p>Information about the partition. </p>
    name: context
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionContext?alt=com.microsoft.azure.eventprocessorhost.PartitionContext&text=PartitionContext" data-throw-if-not-resolved="False"/>
  - description: <p>The events to be processed. May be empty. </p>
    name: events
    type: Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>to indicate failure. </p>
  summary: >-
    <p>Called by the processor host when a batch of events has arrived. </p>

    <p>This is where the real work of the event processor is done. It is normally called when one or more events have arrived. If the EventProcessorHost instance was set up with an EventProcessorOptions on which setInvokeProcessorAfterReceiveTimeout(true) has been called, then when a receive times out, onEvents will be called with an empty iterable. By default this option is false and receive timeouts do not cause a call to this method.</p>

    <p></p>
  syntax: public void onEvents(PartitionContext context, Iterable<EventData> events)
  uid: com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents(PartitionContext,Iterable<EventData>)
- fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen(PartitionContext context)
  name: onOpen(PartitionContext context)
  nameWithType: IEventProcessor.onOpen(PartitionContext context)
  parameters:
  - description: <p>Information about the partition that this event processor will process events from. </p>
    name: context
    type: <xref href="com.microsoft.azure.eventprocessorhost.PartitionContext?alt=com.microsoft.azure.eventprocessorhost.PartitionContext&text=PartitionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>to indicate failure. </p>
  summary: >-
    <p>Called by processor host to initialize the event processor. </p>

    <p>If onOpen fails, this event processor host instance will give up ownership of the partition.</p>

    <p></p>
  syntax: public void onOpen(PartitionContext context)
  uid: com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen(PartitionContext)
nameWithType: IEventProcessor
syntax: public interface IEventProcessor
type: interface
uid: com.microsoft.azure.eventprocessorhost.IEventProcessor
fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor
name: IEventProcessor
package: com.microsoft.azure.eventprocessorhost
summary: >-
  <p>Interface that must be implemented by event processor classes. </p>

  <p>Any given instance of an event processor class will only process events from one partition of one Event Hub. A PartitionContext is provided with each call to the event processor because some parameters could change, but it will always be the same partition. </p>

  <p>Although EventProcessorHost is multithreaded, calls to a given instance of an event processor class are serialized, except for onError(). onOpen() is called first, then onEvents() will be called zero or more times. When the event processor needs to be shut down, whether because there was a failure somewhere, or the lease for the partition has been lost, or because the entire processor host is being shut down, onClose() is called after the last onEvents() call returns. </p>

  <p>onError() could be called while onEvents() or onClose() is executing. No synchronization is attempted in order to avoid possibly deadlocking. </p>
metadata: {}
