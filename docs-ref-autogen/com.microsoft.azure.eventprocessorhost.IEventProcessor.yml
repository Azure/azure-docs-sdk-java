### YamlMime:JavaType
methods:
- com.microsoft.azure.eventprocessorhost.IEventProcessor.onClose(PartitionContext,CloseReason)
- com.microsoft.azure.eventprocessorhost.IEventProcessor.onError(PartitionContext,Throwable)
- com.microsoft.azure.eventprocessorhost.IEventProcessor.onEvents(PartitionContext,Iterable<EventData>)
- com.microsoft.azure.eventprocessorhost.IEventProcessor.onOpen(PartitionContext)
nameWithType: IEventProcessor
syntax: public interface IEventProcessor
type: interface
uid: com.microsoft.azure.eventprocessorhost.IEventProcessor
fullName: com.microsoft.azure.eventprocessorhost.IEventProcessor
name: IEventProcessor
package: com.microsoft.azure.eventprocessorhost
summary: >-
  <p>Interface that must be implemented by event processor classes. </p>

  <p>Any given instance of an event processor class will only process events from one partition of one Event Hub. A PartitionContext is provided with each call to the event processor because some parameters could change, but it will always be the same partition. </p>

  <p>Although EventProcessorHost is multithreaded, calls to a given instance of an event processor class are serialized, except for onError(). onOpen() is called first, then onEvents() will be called zero or more times. When the event processor needs to be shut down, whether because there was a failure somewhere, or the lease for the partition has been lost, or because the entire processor host is being shut down, onClose() is called after the last onEvents() call returns. </p>

  <p>onError() could be called while onEvents() or onClose() is executing. No synchronization is attempted in order to avoid possibly deadlocking. </p>
metadata: {}
