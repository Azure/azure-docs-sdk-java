### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  name: FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  parameters:
  - description: <p>Fabric client Settings </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>Array of management endpoints of the cluster </p>
    name: connectionEndpoints
    type: <xref href="String...?alt=String...&text=String..." data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates a ServicePartitionResolver, uses the given FabricClient Settings and the connectionEndpoints to create a new instance of FabricClient.</p>

    <p></p>
  syntax: public FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings,String...)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(String... connectionEndpoints)
  name: FabricServicePartitionResolver(String... connectionEndpoints)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(String... connectionEndpoints)
  parameters:
  - description: <p>Array of management endpoints of the cluster </p>
    name: connectionEndpoints
    type: <xref href="String...?alt=String...&text=String..." data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of FabricClient.</p>

    <p></p>
  syntax: public FabricServicePartitionResolver(String... connectionEndpoints)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(String...)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  name: FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  parameters:
  - description: <p>Delegate to create fabric client </p>
    name: createFabricClient
    type: Supplier&lt;<xref href="system.fabric.FabricClient?alt=system.fabric.FabricClient&text=FabricClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Instantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.</p>

    <p></p>
  syntax: public FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  name: FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  parameters:
  - description: <p>Delegate to create fabric client </p>
    name: createFabricClient
    type: Supplier&lt;<xref href="system.fabric.FabricClient?alt=system.fabric.FabricClient&text=FabricClient" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Delegate to create fabric client </p>
    name: recreateFabricClient
    type: Supplier&lt;<xref href="system.fabric.FabricClient?alt=system.fabric.FabricClient&text=FabricClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Instantiates a ServicePartionResolver, invoking the first delegate to instantiate FabricClient. During partition resolution if FabricClient object gets disposed and second delegate is provided, it uses the second delegate to re-create the FabricClient. The second delegate provides a way to specify an alternate way to create FabricClient if FabricClient created with first delegates get disposed.</p>

    <p></p>
  syntax: public FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>,Supplier<FabricClient>)
fields:
- field:
    type: <xref href="final+Duration?alt=final+Duration&text=final+Duration" data-throw-if-not-resolved="False"/>
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  name: defaultMaxRetryBackoffInterval
  nameWithType: FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  summary: <p>This is the default max retry backoff interval used by ServicePartitionResolver's ResolveAsync method when it is invoked without explicitly specifying the maxRetryBackoffInterval argument. </p>
  syntax: public static final Duration defaultMaxRetryBackoffInterval= Duration.ofSeconds(5)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
- field:
    type: <xref href="final+Duration?alt=final+Duration&text=final+Duration" data-throw-if-not-resolved="False"/>
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultResolveTimeout
  name: defaultResolveTimeout
  nameWithType: FabricServicePartitionResolver.defaultResolveTimeout
  summary: <p>This is the default resolve timeout per try used by the ResolveAsync method of <xref uid="microsoft.servicefabric.services.client.ServicePartitionResolver" data-throw-if-not-resolved="false" data-raw-source="ServicePartitionResolver"></xref> when it is invoked without explicitly specifying the resolveTimeoutPerTry argument. </p>
  syntax: public static final Duration defaultResolveTimeout= Duration.ofSeconds(30)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultResolveTimeout
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()
  name: getDefault()
  nameWithType: FabricServicePartitionResolver.getDefault()
  returns:
    description: <p>Default <xref uid="microsoft.servicefabric.services.client.ServicePartitionResolver" data-throw-if-not-resolved="false" data-raw-source="ServicePartitionResolver"></xref></p>
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the default ServicePartitionResolver</p>

    <p></p>
  syntax: public static ServicePartitionResolver getDefault()
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout()
  name: getResolveTimeout()
  nameWithType: FabricServicePartitionResolver.getResolveTimeout()
  returns:
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration getResolveTimeout()
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout()
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval()
  name: getRetryBackoffInterval()
  nameWithType: FabricServicePartitionResolver.getRetryBackoffInterval()
  returns:
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration getRetryBackoffInterval()
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval()
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  name: resolveAsync(ResolvedServicePartition previousRsp)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  parameters:
  - description: <p>Previous resolved service partition </p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking FabricClient's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref> method with back-off/retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  name: resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
  parameters:
  - description: <p>Previous resolved service partition </p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout passed to ServiceManagementClient::resolveServicePartitionAsync(URI) method </p>
    name: resolveTimeoutPerTry
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to back-off before retrying when resolve service partition fails with a retriable exception. </p>
    name: maxRetryBackoffInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service with backoff/ retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking FabricClient's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref>method with back-off/retry on retriable errors.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout passed to <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref> method </p>
    name: resolveTimeoutPerTry
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to back-off before retrying when <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref>method fails with a retriable exception. </p>
    name: maxRetryBackoffInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Resolves a partition of the specified service by invoking <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref> method with back-off/retry on retriable errors.</p>

    <p></p>
  syntax: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault(ServicePartitionResolver defaultServiceResolver)
  name: setDefault(ServicePartitionResolver defaultServiceResolver)
  nameWithType: FabricServicePartitionResolver.setDefault(ServicePartitionResolver defaultServiceResolver)
  parameters:
  - description: <p>The new default value </p>
    name: defaultServiceResolver
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the default ServicePartitionResolver</p>

    <p></p>
  syntax: public static void setDefault(ServicePartitionResolver defaultServiceResolver)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault(ServicePartitionResolver)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout(Duration resolveTimeout)
  name: setResolveTimeout(Duration resolveTimeout)
  nameWithType: FabricServicePartitionResolver.setResolveTimeout(Duration resolveTimeout)
  parameters:
  - name: resolveTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setResolveTimeout(Duration resolveTimeout)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout(Duration)
- fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval(Duration retryBackoffInterval)
  name: setRetryBackoffInterval(Duration retryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.setRetryBackoffInterval(Duration retryBackoffInterval)
  parameters:
  - name: retryBackoffInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setRetryBackoffInterval(Duration retryBackoffInterval)
  uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval(Duration)
nameWithType: FabricServicePartitionResolver
syntax: public class FabricServicePartitionResolver implements ServicePartitionResolver
type: class
uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver
fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver
name: FabricServicePartitionResolver
package: microsoft.servicefabric.services.client
summary: <p>Implements the class that helps in determining the endpoint of a service. This class wraps the FabricClient's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(java.net.URI)"></xref> method, and implements a back-off/retry mechanism on errors from that method. </p>
metadata: {}
