### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  id: FabricServicePartitionResolver
  parent: microsoft.servicefabric.services.client
  children:
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultResolveTimeout
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings,String...)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(String...)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>,Supplier<FabricClient>)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout()
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval()
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault(ServicePartitionResolver)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout(Duration)
  - microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval(Duration)
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: FabricServicePartitionResolver
  nameWithType: FabricServicePartitionResolver
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 29
  package: microsoft.servicefabric.services.client
  summary: "<p>Implements the class that helps in determining the endpoint of a service. This class wraps the FabricClient's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(java.net.URI)\"></xref> method, and implements a back-off/retry mechanism on errors from that method. </p>"
  syntax:
    content: public class FabricServicePartitionResolver implements ServicePartitionResolver
  inheritance:
  - java.lang.Object
  - microsoft.servicefabric.services.client.ServicePartitionResolver
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  id: defaultMaxRetryBackoffInterval
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: defaultMaxRetryBackoffInterval
  nameWithType: FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultMaxRetryBackoffInterval
  type: Field
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 42
  package: microsoft.servicefabric.services.client
  summary: "<p>This is the default max retry backoff interval used by ServicePartitionResolver's ResolveAsync method when it is invoked without explicitly specifying the maxRetryBackoffInterval argument. </p>"
  syntax:
    content: public static final Duration defaultMaxRetryBackoffInterval= Duration.ofSeconds(5)
    return:
      type: 89ac7c4d
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultResolveTimeout
  id: defaultResolveTimeout
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: defaultResolveTimeout
  nameWithType: FabricServicePartitionResolver.defaultResolveTimeout
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.defaultResolveTimeout
  type: Field
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 35
  package: microsoft.servicefabric.services.client
  summary: "<p>This is the default resolve timeout per try used by the ResolveAsync method of <xref uid=\"microsoft.servicefabric.services.client.ServicePartitionResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServicePartitionResolver\"></xref> when it is invoked without explicitly specifying the resolveTimeoutPerTry argument. </p>"
  syntax:
    content: public static final Duration defaultResolveTimeout= Duration.ofSeconds(30)
    return:
      type: 89ac7c4d
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings,String...)
  id: )
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 123
  package: microsoft.servicefabric.services.client
  summary: "<p>Instantiates a ServicePartitionResolver, uses the given FabricClient Settings and the connectionEndpoints to create a new instance of FabricClient.</p>\r\n<p></p>"
  syntax:
    content: public FabricServicePartitionResolver(FabricClientSettings settings, String... connectionEndpoints)
    parameters:
    - id: settings
      type: system.fabric.FabricClientSettings
      description: <p>Fabric client Settings </p>
    - id: connectionEndpoints
      type: 04d2b762
      description: <p>Array of management endpoints of the cluster </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(String...)
  id: )
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: FabricServicePartitionResolver(String... connectionEndpoints)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(String... connectionEndpoints)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(String... connectionEndpoints)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 110
  package: microsoft.servicefabric.services.client
  summary: "<p>Instantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of FabricClient.</p>\r\n<p></p>"
  syntax:
    content: public FabricServicePartitionResolver(String... connectionEndpoints)
    parameters:
    - id: connectionEndpoints
      type: 04d2b762
      description: <p>Array of management endpoints of the cluster </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>)
  id: FabricServicePartitionResolver(Supplier<FabricClient>)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 99
  package: microsoft.servicefabric.services.client
  summary: "<p>Instantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.</p>\r\n<p></p>"
  syntax:
    content: public FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient)
    parameters:
    - id: createFabricClient
      type: 97b3324csystem.fabric.FabricClienta08ddfce
      description: <p>Delegate to create fabric client </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient>,Supplier<FabricClient>)
  id: FabricServicePartitionResolver(Supplier<FabricClient>,Supplier<FabricClient>)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 83
  package: microsoft.servicefabric.services.client
  summary: "<p>Instantiates a ServicePartionResolver, invoking the first delegate to instantiate FabricClient. During partition resolution if FabricClient object gets disposed and second delegate is provided, it uses the second delegate to re-create the FabricClient. The second delegate provides a way to specify an alternate way to create FabricClient if FabricClient created with first delegates get disposed.</p>\r\n<p></p>"
  syntax:
    content: public FabricServicePartitionResolver(Supplier<FabricClient> createFabricClient, Supplier<FabricClient> recreateFabricClient)
    parameters:
    - id: createFabricClient
      type: 97b3324csystem.fabric.FabricClienta08ddfce
      description: <p>Delegate to create fabric client </p>
    - id: recreateFabricClient
      type: 97b3324csystem.fabric.FabricClienta08ddfce
      description: <p>Delegate to create fabric client </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()
  id: getDefault()
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: getDefault()
  nameWithType: FabricServicePartitionResolver.getDefault()
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault()
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 281
  package: microsoft.servicefabric.services.client
  summary: "<p>Gets the default ServicePartitionResolver</p>\r\n<p></p>"
  syntax:
    content: public static ServicePartitionResolver getDefault()
    return:
      type: microsoft.servicefabric.services.client.ServicePartitionResolver
      description: <p>Default <xref uid="microsoft.servicefabric.services.client.ServicePartitionResolver" data-throw-if-not-resolved="false" data-raw-source="ServicePartitionResolver"></xref></p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout()
  id: getResolveTimeout()
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: getResolveTimeout()
  nameWithType: FabricServicePartitionResolver.getResolveTimeout()
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout()
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 55
  package: microsoft.servicefabric.services.client
  syntax:
    content: public Duration getResolveTimeout()
    return:
      type: e02a2de0
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval()
  id: getRetryBackoffInterval()
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: getRetryBackoffInterval()
  nameWithType: FabricServicePartitionResolver.getRetryBackoffInterval()
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval()
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 63
  package: microsoft.servicefabric.services.client
  syntax:
    content: public Duration getRetryBackoffInterval()
    return:
      type: e02a2de0
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition)
  id: resolveAsync(ResolvedServicePartition)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: resolveAsync(ResolvedServicePartition previousRsp)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 211
  package: microsoft.servicefabric.services.client
  summary: "<p>Resolves a partition of the specified service by invoking FabricClient's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)\"></xref> method with back-off/retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp)
    parameters:
    - id: previousRsp
      type: system.fabric.ResolvedServicePartition
      description: <p>Previous resolved service partition </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
  id: resolveAsync(ResolvedServicePartition,Duration,Duration)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 233
  package: microsoft.servicefabric.services.client
  summary: "<p>Resolves a partition of the specified service with backoff/ retry on retriable errors. This takes in the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. This api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
    parameters:
    - id: previousRsp
      type: system.fabric.ResolvedServicePartition
      description: <p>Previous resolved service partition </p>
    - id: resolveTimeoutPerTry
      type: e02a2de0
      description: <p>The timeout passed to ServiceManagementClient::resolveServicePartitionAsync(URI) method </p>
    - id: maxRetryBackoffInterval
      type: e02a2de0
      description: <p>The interval to back-off before retrying when resolve service partition fails with a retriable exception. </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey)
  id: resolveAsync(URI,ServicePartitionKey)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 140
  package: microsoft.servicefabric.services.client
  summary: "<p>Resolves a partition of the specified service by invoking FabricClient's <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)\"></xref>method with back-off/retry on retriable errors.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the service to resolve </p>
    - id: partitionKey
      type: microsoft.servicefabric.services.client.ServicePartitionKey
      description: <p>Key that identifies the partition to resolve </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  id: resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 165
  package: microsoft.servicefabric.services.client
  summary: "<p>Resolves a partition of the specified service by invoking <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)\"></xref> method with back-off/retry on retriable errors.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceUri, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
    parameters:
    - id: serviceUri
      type: "62304784"
      description: <p>Uri of the service to resolve </p>
    - id: partitionKey
      type: microsoft.servicefabric.services.client.ServicePartitionKey
      description: <p>Key that identifies the partition to resolve </p>
    - id: resolveTimeoutPerTry
      type: e02a2de0
      description: <p>The timeout passed to <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref> method </p>
    - id: maxRetryBackoffInterval
      type: e02a2de0
      description: <p>The interval to back-off before retrying when <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.client.ServiceManagementClient#resolveServicePartitionAsync(URI)"></xref>method fails with a retriable exception. </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
  overridden: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault(ServicePartitionResolver)
  id: setDefault(ServicePartitionResolver)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: setDefault(ServicePartitionResolver defaultServiceResolver)
  nameWithType: FabricServicePartitionResolver.setDefault(ServicePartitionResolver defaultServiceResolver)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault(ServicePartitionResolver defaultServiceResolver)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 270
  package: microsoft.servicefabric.services.client
  summary: "<p>Updates the default ServicePartitionResolver</p>\r\n<p></p>"
  syntax:
    content: public static void setDefault(ServicePartitionResolver defaultServiceResolver)
    parameters:
    - id: defaultServiceResolver
      type: microsoft.servicefabric.services.client.ServicePartitionResolver
      description: <p>The new default value </p>
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout(Duration)
  id: setResolveTimeout(Duration)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: setResolveTimeout(Duration resolveTimeout)
  nameWithType: FabricServicePartitionResolver.setResolveTimeout(Duration resolveTimeout)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout(Duration resolveTimeout)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 59
  package: microsoft.servicefabric.services.client
  syntax:
    content: public void setResolveTimeout(Duration resolveTimeout)
    parameters:
    - id: resolveTimeout
      type: e02a2de0
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval(Duration)
  id: setRetryBackoffInterval(Duration)
  parent: microsoft.servicefabric.services.client.FabricServicePartitionResolver
  href: microsoft.servicefabric.services.client.FabricServicePartitionResolver.yml
  langs:
  - java
  name: setRetryBackoffInterval(Duration retryBackoffInterval)
  nameWithType: FabricServicePartitionResolver.setRetryBackoffInterval(Duration retryBackoffInterval)
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval(Duration retryBackoffInterval)
  overload: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.services/src/microsoft/servicefabric/services/client/FabricServicePartitionResolver.java
    startLine: 67
  package: microsoft.servicefabric.services.client
  syntax:
    content: public void setRetryBackoffInterval(Duration retryBackoffInterval)
    parameters:
    - id: retryBackoffInterval
      type: e02a2de0
references:
- uid: 89ac7c4d
  spec.java:
  - name: final Duration
    fullName: final Duration
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout*
  name: getResolveTimeout
  nameWithType: FabricServicePartitionResolver.getResolveTimeout
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getResolveTimeout
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout*
  name: setResolveTimeout
  nameWithType: FabricServicePartitionResolver.setResolveTimeout
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setResolveTimeout
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval*
  name: getRetryBackoffInterval
  nameWithType: FabricServicePartitionResolver.getRetryBackoffInterval
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getRetryBackoffInterval
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval*
  name: setRetryBackoffInterval
  nameWithType: FabricServicePartitionResolver.setRetryBackoffInterval
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setRetryBackoffInterval
  package: microsoft.servicefabric.services.client
- uid: 97b3324csystem.fabric.FabricClienta08ddfce
  spec.java:
  - name: Supplier<
    fullName: Supplier<
  - uid: system.fabric.FabricClient
    name: FabricClient
    fullName: system.fabric.FabricClient
    href: system.fabric.FabricClient.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver*
  name: FabricServicePartitionResolver
  nameWithType: FabricServicePartitionResolver.FabricServicePartitionResolver
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.FabricServicePartitionResolver
  package: microsoft.servicefabric.services.client
- uid: 04d2b762
  spec.java:
  - name: String...
    fullName: String...
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: system.fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    fullName: system.fabric.ResolvedServicePartition
    href: system.fabric.ResolvedServicePartition.yml
  - name: '>'
    fullName: '>'
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync*
  name: resolveAsync
  nameWithType: FabricServicePartitionResolver.resolveAsync
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.resolveAsync
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault*
  name: setDefault
  nameWithType: FabricServicePartitionResolver.setDefault
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.setDefault
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault*
  name: getDefault
  nameWithType: FabricServicePartitionResolver.getDefault
  fullName: microsoft.servicefabric.services.client.FabricServicePartitionResolver.getDefault
  package: microsoft.servicefabric.services.client
- uid: microsoft.servicefabric.services.client.ServicePartitionResolver
  parent: microsoft.servicefabric.services.client
  href: microsoft.servicefabric.services.client.ServicePartitionResolver.yml
  name: ServicePartitionResolver
  nameWithType: ServicePartitionResolver
  fullName: microsoft.servicefabric.services.client.ServicePartitionResolver
  type: Interface
  summary: "<p>Implements the class that helps in determining the endpoint of a service. </p>"
  syntax:
    content: public interface ServicePartitionResolver
- uid: system.fabric.FabricClient
  parent: system.fabric
  href: system.fabric.FabricClient.yml
  name: FabricClient
  nameWithType: FabricClient
  fullName: system.fabric.FabricClient
  type: Class
  summary: "<p>Client for a Service Fabric cluster. </p>\r\n<p>\r\n  <b>Remarks:</b>It is highly recommended that you share FabricClients as much as possible. This is because the FabricClient has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise. </p>"
  syntax:
    content: public class FabricClient
- uid: system.fabric.FabricClientSettings
  parent: system.fabric
  href: system.fabric.FabricClientSettings.yml
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: system.fabric.FabricClientSettings
  type: Class
  summary: "<p>Represents the configuration settings for the <xref uid=\"system.fabric.FabricClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"system.fabric.FabricClient\"></xref> class. </p>"
  syntax:
    content: public class FabricClientSettings
- uid: system.fabric.ResolvedServicePartition
  parent: system.fabric
  href: system.fabric.ResolvedServicePartition.yml
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: system.fabric.ResolvedServicePartition
  type: Class
  summary: "<p>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</p>\r\n<p></p>"
  syntax:
    content: public class ResolvedServicePartition
- uid: microsoft.servicefabric.services.client.ServicePartitionKey
  parent: microsoft.servicefabric.services.client
  href: microsoft.servicefabric.services.client.ServicePartitionKey.yml
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: microsoft.servicefabric.services.client.ServicePartitionKey
  type: Class
  summary: "<p>Defines a key to address a service partition. </p>"
  syntax:
    content: public class ServicePartitionKey
- uid: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(URI,ServicePartitionKey,Duration,Duration)
  parent: microsoft.servicefabric.services.client.ServicePartitionResolver
  href: microsoft.servicefabric.services.client.ServicePartitionResolver.yml
  name: resolveAsync(URI serviceName, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: ServicePartitionResolver.resolveAsync(URI serviceName, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  fullName: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(URI serviceName, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  type: Method
  summary: "<p>Resolves a partition of the specified service.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(URI serviceName, ServicePartitionKey partitionKey, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
    parameters:
    - id: serviceName
      type: "62304784"
      description: <p>Uri of the service to resolve </p>
    - id: partitionKey
      type: microsoft.servicefabric.services.client.ServicePartitionKey
      description: <p>Key that identifies the partition to resolve </p>
    - id: resolveTimeoutPerTry
      type: e02a2de0
      description: <p>The timeout passed to FabricClient's </p>
    - id: maxRetryBackoffInterval
      type: e02a2de0
      description: <p>The interval to back-off before retrying when FabricClient's method fails with a retriable exception. </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A CompletableFuture that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
- uid: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(ResolvedServicePartition,Duration,Duration)
  parent: microsoft.servicefabric.services.client.ServicePartitionResolver
  href: microsoft.servicefabric.services.client.ServicePartitionResolver.yml
  name: resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  nameWithType: ServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  fullName: microsoft.servicefabric.services.client.ServicePartitionResolver.resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
  type: Method
  summary: "<p>Resolves a partition of the specified service.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<ResolvedServicePartition> resolveAsync(ResolvedServicePartition previousRsp, Duration resolveTimeoutPerTry, Duration maxRetryBackoffInterval)
    parameters:
    - id: previousRsp
      type: system.fabric.ResolvedServicePartition
      description: <p>Previous resolved partition </p>
    - id: resolveTimeoutPerTry
      type: e02a2de0
      description: <p>The timeout passed to FabricClient's </p>
    - id: maxRetryBackoffInterval
      type: e02a2de0
      description: <p>The interval to back-off before retrying when FabricClient's method fails with a retriable exception. </p>
    return:
      type: 9cdf14d0system.fabric.ResolvedServicePartitiona08ddfce
      description: <p>A CompletableFuture that represents outstanding operation. The result from the Task is the <xref uid="system.fabric.ResolvedServicePartition" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> object, that contains the information about the resolved service partition including the service endpoints. </p>
