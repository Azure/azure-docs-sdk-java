### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient"
fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient"
name: "ContainerRegistryContentAsyncClient"
nameWithType: "ContainerRegistryContentAsyncClient"
summary: "This class provides a client that exposes operations to push and pull images into container registry."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ContainerRegistryContentAsyncClient**"
methods:
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteBlob(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteBlob(String digest)"
  name: "deleteBlob(String digest)"
  nameWithType: "ContainerRegistryContentAsyncClient.deleteBlob(String digest)"
  summary: "Delete the image identified by the given digest"
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteBlob(String digest)"
  desc: "Delete the image identified by the given digest\n\n**Code Samples:**\n\n```java\ncontentClient.getManifest(\"latest\")\n     .flatMap(manifest -> contentClient.deleteBlob(manifest.getDigest()))\n     .block();\n```"
  returns:
    description: "The completion signal."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteBlobWithResponse(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteBlobWithResponse(String digest)"
  name: "deleteBlobWithResponse(String digest)"
  nameWithType: "ContainerRegistryContentAsyncClient.deleteBlobWithResponse(String digest)"
  summary: "Delete the image identified by the given digest"
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<Void>> deleteBlobWithResponse(String digest)"
  desc: "Delete the image identified by the given digest"
  returns:
    description: "The REST response for the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteManifest(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteManifest(String digest)"
  name: "deleteManifest(String digest)"
  nameWithType: "ContainerRegistryContentAsyncClient.deleteManifest(String digest)"
  summary: "Delete the manifest identified by the given digest."
  parameters:
  - description: "The digest of the manifest."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteManifest(String digest)"
  desc: "Delete the manifest identified by the given digest.\n\n**Code Samples:**\n\n```java\ncontentClient.getManifest(\"latest\")\n     .flatMap(manifest -> contentClient.deleteManifest(manifest.getDigest()))\n     .block();\n```"
  returns:
    description: "The completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteManifestWithResponse(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.deleteManifestWithResponse(String digest)"
  name: "deleteManifestWithResponse(String digest)"
  nameWithType: "ContainerRegistryContentAsyncClient.deleteManifestWithResponse(String digest)"
  summary: "Delete the manifest identified by the given digest."
  parameters:
  - description: "The digest of the manifest."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<Void>> deleteManifestWithResponse(String digest)"
  desc: "Delete the manifest identified by the given digest."
  returns:
    description: "The REST response for completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.downloadStream(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.downloadStream(String digest)"
  name: "downloadStream(String digest)"
  nameWithType: "ContainerRegistryContentAsyncClient.downloadStream(String digest)"
  summary: "Download the blob identified by the given digest."
  parameters:
  - description: "The digest for the given image layer."
    name: "digest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<BinaryData> downloadStream(String digest)"
  desc: "Download the blob identified by the given digest. Content is downloaded in chunks of 4MB size each.\n\n**Code Samples:**\n\nWrite content to synchronous channel, for example [FileChannel][]:\n\n```java\ncontentClient\n     .downloadStream(digest)\n     .flatMap(downloadResult ->\n         Mono.using(() -> new FileOutputStream(trimSha(digest)),\n             fileStream -> FluxUtil.writeToWritableByteChannel(\n                 downloadResult.toFluxByteBuffer(), fileStream.getChannel()),\n             fileStream -> closeStream(fileStream)))\n     .block();\n```\n\nWrite content to asynchronous byte channel, for example [AsynchronousSocketChannel][]:\n\n```java\ncontentClient\n     .downloadStream(digest)\n     .flatMap(downloadResult ->\n         Mono.using(\n             () -> openSocket(),\n             socket -> FluxUtil.writeToAsynchronousByteChannel(downloadResult.toFluxByteBuffer(), socket),\n             socket -> closeStream(socket)))\n     .block();\n```\n\n\n[FileChannel]: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html\n[AsynchronousSocketChannel]: https://docs.oracle.com/javase/8/docs/api/java/nio/channels/AsynchronousSocketChannel.html"
  returns:
    description: "The image identified by the given digest."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getEndpoint()"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "ContainerRegistryContentAsyncClient.getEndpoint()"
  summary: "This method returns the complete registry endpoint."
  syntax: "public String getEndpoint()"
  desc: "This method returns the complete registry endpoint."
  returns:
    description: "The registry endpoint including the authority."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getManifest(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getManifest(String tagOrDigest)"
  name: "getManifest(String tagOrDigest)"
  nameWithType: "ContainerRegistryContentAsyncClient.getManifest(String tagOrDigest)"
  summary: "Download the manifest identified by the given tag or digest."
  parameters:
  - description: "Manifest reference which can be tag or digest."
    name: "tagOrDigest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<GetManifestResult> getManifest(String tagOrDigest)"
  desc: "Download the manifest identified by the given tag or digest.\n\n**Code Samples:**\n\n```java\ncontentClient.getManifest(\"latest\")\n     .doOnNext(downloadResult -> {\n         if (ManifestMediaType.OCI_IMAGE_MANIFEST.equals(downloadResult.getManifestMediaType())\n             || ManifestMediaType.DOCKER_MANIFEST.equals(downloadResult.getManifestMediaType())) {\n             OciImageManifest manifest = downloadResult.getManifest().toObject(OciImageManifest.class);\n             System.out.println(\"Got OCI manifest\");\n         } else {\n             throw new IllegalArgumentException(\"Unexpected manifest type: \" + downloadResult.getManifestMediaType());\n         }\n     })\n     .block();\n```"
  returns:
    description: "The manifest identified by the given tag or digest."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.GetManifestResult?alt=com.azure.containers.containerregistry.models.GetManifestResult&text=GetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getManifestWithResponse(java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getManifestWithResponse(String tagOrDigest)"
  name: "getManifestWithResponse(String tagOrDigest)"
  nameWithType: "ContainerRegistryContentAsyncClient.getManifestWithResponse(String tagOrDigest)"
  summary: "Download the manifest identified by the given tag or digest."
  parameters:
  - description: "Manifest reference which can be tag or digest."
    name: "tagOrDigest"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<GetManifestResult>> getManifestWithResponse(String tagOrDigest)"
  desc: "Download the manifest identified by the given tag or digest.\n\n**Code Samples:**\n\n```java\ncontentClient.getManifestWithResponse(\"latest\")\n     .doOnNext(response -> {\n         GetManifestResult manifestResult = response.getValue();\n         if (ManifestMediaType.OCI_IMAGE_MANIFEST.equals(manifestResult.getManifestMediaType())\n             || ManifestMediaType.DOCKER_MANIFEST.equals(manifestResult.getManifestMediaType())) {\n             OciImageManifest manifest = manifestResult.getManifest().toObject(OciImageManifest.class);\n             System.out.println(\"Got OCI manifest\");\n         } else {\n             throw new IllegalArgumentException(\"Unexpected manifest type: \" + manifestResult.getManifestMediaType());\n         }\n     })\n     .block();\n```"
  returns:
    description: "The response for the manifest identified by the given tag or digest."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.GetManifestResult?alt=com.azure.containers.containerregistry.models.GetManifestResult&text=GetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getRepositoryName()"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.getRepositoryName()"
  name: "getRepositoryName()"
  nameWithType: "ContainerRegistryContentAsyncClient.getRepositoryName()"
  summary: "This method returns the registry's repository on which operations are being performed."
  syntax: "public String getRepositoryName()"
  desc: "This method returns the registry's repository on which operations are being performed."
  returns:
    description: "The name of the repository"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.setManifest(com.azure.containers.containerregistry.models.OciImageManifest,java.lang.String)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.setManifest(OciImageManifest manifest, String tag)"
  name: "setManifest(OciImageManifest manifest, String tag)"
  nameWithType: "ContainerRegistryContentAsyncClient.setManifest(OciImageManifest manifest, String tag)"
  summary: "Upload the Oci manifest to the repository."
  parameters:
  - description: "The <xref uid=\"com.azure.containers.containerregistry.models.OciImageManifest\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OciImageManifest\"></xref> that needs to be uploaded."
    name: "manifest"
    type: "<xref href=\"com.azure.containers.containerregistry.models.OciImageManifest?alt=com.azure.containers.containerregistry.models.OciImageManifest&text=OciImageManifest\" data-throw-if-not-resolved=\"False\" />"
  - description: "Tag to apply on uploaded manifest. If <code>null</code> is passed, no tags will be applied."
    name: "tag"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SetManifestResult> setManifest(OciImageManifest manifest, String tag)"
  desc: "Upload the Oci manifest to the repository.\n\n**Code Samples:**\n\n```java\nOciImageManifest manifest = new OciImageManifest()\n         .setConfiguration(configDescriptor)\n         .setSchemaVersion(2)\n         .setLayers(Collections.singletonList(layerDescriptor));\n Mono<SetManifestResult> result = contentClient.setManifest(manifest, \"latest\");\n```"
  returns:
    description: "upload result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.SetManifestResult?alt=com.azure.containers.containerregistry.models.SetManifestResult&text=SetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.setManifestWithResponse(com.azure.containers.containerregistry.models.SetManifestOptions)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.setManifestWithResponse(SetManifestOptions options)"
  name: "setManifestWithResponse(SetManifestOptions options)"
  nameWithType: "ContainerRegistryContentAsyncClient.setManifestWithResponse(SetManifestOptions options)"
  summary: "Uploads a manifest to the repository."
  parameters:
  - description: "The options for the upload manifest operation."
    name: "options"
    type: "<xref href=\"com.azure.containers.containerregistry.models.SetManifestOptions?alt=com.azure.containers.containerregistry.models.SetManifestOptions&text=SetManifestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SetManifestResult>> setManifestWithResponse(SetManifestOptions options)"
  desc: "Uploads a manifest to the repository.\n\n**Code Samples:**\n\n```java\nSetManifestOptions options = new SetManifestOptions(manifestList, DOCKER_MANIFEST_LIST_TYPE)\n     .setTag(\"v2\");\n\n contentClient.setManifestWithResponse(options)\n     .subscribe(response ->\n         System.out.println(\"Manifest uploaded, digest - \" + response.getValue().getDigest()));\n```"
  returns:
    description: "The rest response containing the upload result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.SetManifestResult?alt=com.azure.containers.containerregistry.models.SetManifestResult&text=SetManifestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.uploadBlob(com.azure.core.util.BinaryData)"
  fullName: "com.azure.containers.containerregistry.ContainerRegistryContentAsyncClient.uploadBlob(BinaryData content)"
  name: "uploadBlob(BinaryData content)"
  nameWithType: "ContainerRegistryContentAsyncClient.uploadBlob(BinaryData content)"
  summary: "Uploads a blob to the repository."
  parameters:
  - description: "The blob content that needs to be uploaded."
    name: "content"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UploadRegistryBlobResult> uploadBlob(BinaryData content)"
  desc: "Uploads a blob to the repository.\n\n**Code Samples:**\n\n```java\nBinaryData configContent = BinaryData.fromObject(Collections.singletonMap(\"hello\", \"world\"));\n\n contentClient\n     .uploadBlob(configContent)\n     .subscribe(uploadResult -> System.out.printf(\"Uploaded blob: digest - '%s', size - %s\\n\",\n             uploadResult.getDigest(), uploadResult.getSizeInBytes()));\n```\n\n```java\ncontentClient.uploadBlob(BinaryData.fromFile(Paths.get(\"artifact.tar.gz\"), CHUNK_SIZE))\n     .subscribe(uploadResult ->\n         System.out.printf(\"Uploaded blob: digest - '%s', size - %s\\n\",\n             uploadResult.getDigest(), uploadResult.getSizeInBytes()));\n```\n\n```java\nlayerContent\n     .flatMap(content -> contentClient.uploadBlob(content))\n     .doOnError(HttpResponseException.class, (ex) -> {\n         if (ex.getCause() instanceof AcrErrorsException) {\n             AcrErrorsException acrErrors = (AcrErrorsException) ex.getCause();\n             for (AcrErrorInfo info : acrErrors.getValue().getErrors()) {\n                 System.out.printf(\"Uploaded blob failed: code '%s'\\n\", info.getCode());\n             }\n         }\n     });\n```\n\nNote:\n\nContent may be uploaded in chunks of up to 4MB size. Chunk size depends on the passed <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> content. When <xref uid=\"com.azure.core.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> is created using <xref uid=\"com.azure.core.util.BinaryData.fromFlux*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData#fromFlux(Flux, Long, boolean)\"></xref>, it may be uploaded in chunks matching individual <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> in the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> and up to 4MB size. Buffers that are bigger than 4MB can be broken down into smaller chunks, but small buffers are not aggregated. To decrease number of chunks for big content, use buffers of 4MB size."
  returns:
    description: "The operation result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.containers.containerregistry.models.UploadRegistryBlobResult?alt=com.azure.containers.containerregistry.models.UploadRegistryBlobResult&text=UploadRegistryBlobResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that exposes operations to push and pull images into container registry. It exposes methods that upload, download and delete artifacts from the registry i.e. images and manifests.\n\nView <xref uid=\"com.azure.containers.containerregistry.ContainerRegistryContentClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.containers.containerregistry"
artifact: com.azure:azure-containers-containerregistry:1.2.4
