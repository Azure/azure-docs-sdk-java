### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions"
fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions"
name: "DataLakeFileFlushOptions"
nameWithType: "DataLakeFileFlushOptions"
summary: "Optional parameters for appending data to a file when calling flush() on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref>"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **DataLakeFileFlushOptions**"
constructors:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.DataLakeFileFlushOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.DataLakeFileFlushOptions()"
  name: "DataLakeFileFlushOptions()"
  nameWithType: "DataLakeFileFlushOptions.DataLakeFileFlushOptions()"
  syntax: "public DataLakeFileFlushOptions()"
methods:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getLeaseAction()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getLeaseAction()"
  name: "getLeaseAction()"
  nameWithType: "DataLakeFileFlushOptions.getLeaseAction()"
  summary: "Get lease action set on file."
  syntax: "public LeaseAction getLeaseAction()"
  desc: "Get lease action set on file. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileFlushOptions#proposedLeaseId\"></xref> as the lease ID. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileFlushOptions#proposedLeaseId\"></xref> as the lease ID. The lease will be released once the Append operation is complete. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.AUTO_RENEW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#AUTO_RENEW\"></xref> will attempt to renew the lease specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#RELEASE\"></xref> will attempt to release the least specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>."
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction\"></xref> set on the file."
    type: "<xref href=\"com.azure.storage.file.datalake.models.LeaseAction?alt=com.azure.storage.file.datalake.models.LeaseAction&text=LeaseAction\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getLeaseDuration()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getLeaseDuration()"
  name: "getLeaseDuration()"
  nameWithType: "DataLakeFileFlushOptions.getLeaseDuration()"
  syntax: "public Integer getLeaseDuration()"
  returns:
    description: "the lease duration in seconds."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getPathHttpHeaders()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getPathHttpHeaders()"
  name: "getPathHttpHeaders()"
  nameWithType: "DataLakeFileFlushOptions.getPathHttpHeaders()"
  summary: "Optional standard HTTP header properties for the file."
  syntax: "public PathHttpHeaders getPathHttpHeaders()"
  desc: "Optional standard HTTP header properties for the file."
  returns:
    description: "the <xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref> for this file."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getProposedLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getProposedLeaseId()"
  name: "getProposedLeaseId()"
  nameWithType: "DataLakeFileFlushOptions.getProposedLeaseId()"
  summary: "Gets proposed lease id."
  syntax: "public String getProposedLeaseId()"
  desc: "Gets proposed lease id. Valid with <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> and <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref>."
  returns:
    description: "the proposed lease id."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getRequestConditions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.getRequestConditions()"
  name: "getRequestConditions()"
  nameWithType: "DataLakeFileFlushOptions.getRequestConditions()"
  summary: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions that are set on the flush of this file."
  syntax: "public DataLakeRequestConditions getRequestConditions()"
  desc: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions that are set on the flush of this file."
  returns:
    description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> for this file."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.isClose()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.isClose()"
  name: "isClose()"
  nameWithType: "DataLakeFileFlushOptions.isClose()"
  summary: "Azure Storage Events allow applications to receive notifications when files change."
  syntax: "public Boolean isClose()"
  desc: "Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is \"flush\" and change notifications are enabled. If the value of close is \"true\" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If \"false\" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed."
  returns:
    description: "whether the file stream has been closed."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.isUncommittedDataRetained()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.isUncommittedDataRetained()"
  name: "isUncommittedDataRetained()"
  nameWithType: "DataLakeFileFlushOptions.isUncommittedDataRetained()"
  summary: "If \"true\", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation."
  syntax: "public Boolean isUncommittedDataRetained()"
  desc: "If \"true\", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation. The default is false. Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation."
  returns:
    description: "whether to retain uncommitted data."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setClose(java.lang.Boolean)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setClose(Boolean close)"
  name: "setClose(Boolean close)"
  nameWithType: "DataLakeFileFlushOptions.setClose(Boolean close)"
  summary: "Sets whether file stream has been closed."
  parameters:
  - description: "boolean flag to indicate whether file stream has been closed."
    name: "close"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public DataLakeFileFlushOptions setClose(Boolean close)"
  desc: "Sets whether file stream has been closed. Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is \"flush\" and change notifications are enabled. If the value of close is \"true\" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If \"false\" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setLeaseAction(com.azure.storage.file.datalake.models.LeaseAction)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setLeaseAction(LeaseAction leaseAction)"
  name: "setLeaseAction(LeaseAction leaseAction)"
  nameWithType: "DataLakeFileFlushOptions.setLeaseAction(LeaseAction leaseAction)"
  summary: "Get lease action set on file."
  parameters:
  - description: "the <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction\"></xref> to set on the file."
    name: "leaseAction"
    type: "<xref href=\"com.azure.storage.file.datalake.models.LeaseAction?alt=com.azure.storage.file.datalake.models.LeaseAction&text=LeaseAction\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileFlushOptions setLeaseAction(LeaseAction leaseAction)"
  desc: "Get lease action set on file. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileFlushOptions#proposedLeaseId\"></xref> as the lease ID. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref> will attempt to acquire a new lease on the file, with <xref uid=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.proposedLeaseId\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileFlushOptions#proposedLeaseId\"></xref> as the lease ID. The lease will be released once the Append operation is complete. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.AUTO_RENEW\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#AUTO_RENEW\"></xref> will attempt to renew the lease specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>. <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#RELEASE\"></xref> will attempt to release the least specified by <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions.getLeaseId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions#getLeaseId()\"></xref>."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setLeaseDuration(java.lang.Integer)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setLeaseDuration(Integer leaseDurationInSeconds)"
  name: "setLeaseDuration(Integer leaseDurationInSeconds)"
  nameWithType: "DataLakeFileFlushOptions.setLeaseDuration(Integer leaseDurationInSeconds)"
  summary: "Sets the lease duration."
  parameters:
  - description: "the new lease duration."
    name: "leaseDurationInSeconds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public DataLakeFileFlushOptions setLeaseDuration(Integer leaseDurationInSeconds)"
  desc: "Sets the lease duration. Optional. Specifies the duration of the lease, in seconds, or specify -1 for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setPathHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setPathHttpHeaders(PathHttpHeaders pathHttpHeaders)"
  name: "setPathHttpHeaders(PathHttpHeaders pathHttpHeaders)"
  nameWithType: "DataLakeFileFlushOptions.setPathHttpHeaders(PathHttpHeaders pathHttpHeaders)"
  summary: "Optional standard HTTP header properties that can be set for the file."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.PathHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PathHttpHeaders\"></xref> to be set for this file."
    name: "pathHttpHeaders"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileFlushOptions setPathHttpHeaders(PathHttpHeaders pathHttpHeaders)"
  desc: "Optional standard HTTP header properties that can be set for the file."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setProposedLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setProposedLeaseId(String proposedLeaseId)"
  name: "setProposedLeaseId(String proposedLeaseId)"
  nameWithType: "DataLakeFileFlushOptions.setProposedLeaseId(String proposedLeaseId)"
  summary: "Sets the proposed lease id."
  parameters:
  - description: "the proposed lease id to set."
    name: "proposedLeaseId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DataLakeFileFlushOptions setProposedLeaseId(String proposedLeaseId)"
  desc: "Sets the proposed lease id. Valid with <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE\"></xref> and <xref uid=\"com.azure.storage.file.datalake.models.LeaseAction.ACQUIRE_RELEASE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LeaseAction#ACQUIRE_RELEASE\"></xref>."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  name: "setRequestConditions(DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakeFileFlushOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  summary: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions to add on the flush of this file."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> to set on this file."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileFlushOptions setRequestConditions(DataLakeRequestConditions requestConditions)"
  desc: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions to add on the flush of this file."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setUncommittedDataRetained(java.lang.Boolean)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileFlushOptions.setUncommittedDataRetained(Boolean retainUncommittedData)"
  name: "setUncommittedDataRetained(Boolean retainUncommittedData)"
  nameWithType: "DataLakeFileFlushOptions.setUncommittedDataRetained(Boolean retainUncommittedData)"
  summary: "Sets whether uncommitted data should be retained."
  parameters:
  - description: "boolean flag to indicate whether uncommitted data should be retained."
    name: "retainUncommittedData"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public DataLakeFileFlushOptions setUncommittedDataRetained(Boolean retainUncommittedData)"
  desc: "Sets whether uncommitted data should be retained. If \"true\", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation. The default is false. Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation."
  returns:
    description: "the updated DataLakeFileFlushOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileFlushOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileFlushOptions&text=DataLakeFileFlushOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Optional parameters for appending data to a file when calling flush() on <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref>"
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.21.0
