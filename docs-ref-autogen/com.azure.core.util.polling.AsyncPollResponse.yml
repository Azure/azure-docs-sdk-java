### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.polling.AsyncPollResponse"
  id: "AsyncPollResponse"
  parent: "com.azure.core.util.polling"
  children:
  - "com.azure.core.util.polling.AsyncPollResponse.AsyncPollResponse(com.azure.core.util.polling.PollingContext<T>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)"
  - "com.azure.core.util.polling.AsyncPollResponse.cancelOperation()"
  - "com.azure.core.util.polling.AsyncPollResponse.getFinalResult()"
  - "com.azure.core.util.polling.AsyncPollResponse.getRetryAfter()"
  - "com.azure.core.util.polling.AsyncPollResponse.getStatus()"
  - "com.azure.core.util.polling.AsyncPollResponse.getValue()"
  langs:
  - "java"
  name: "AsyncPollResponse<T,U>"
  nameWithType: "AsyncPollResponse<T,U>"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>"
  type: "Class"
  package: "com.azure.core.util.polling"
  summary: "AsyncPollResponse represents an event emitted by the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\">PollerFlux</xref> that asynchronously polls a long-running operation (LRO). An AsyncPollResponse event provides information such as the current <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">status</xref> of the LRO, any <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> returned in the poll, as well as other useful information provided by the service. AsyncPollResponse also exposes <xref uid=\"\" data-throw-if-not-resolved=\"false\">#cancelOperation</xref> method to cancel the long-running operation from reactor operator chain and <xref uid=\"com.azure.core.util.polling.AsyncPollResponse.getFinalResult()\" data-throw-if-not-resolved=\"false\">#getFinalResult()</xref> method that returns final result of the long-running operation."
  syntax:
    content: "public final class AsyncPollResponse<T,U>"
    typeParameters:
    - id: "T"
    - id: "U"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.polling.AsyncPollResponse.AsyncPollResponse(com.azure.core.util.polling.PollingContext<T>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)"
  id: "AsyncPollResponse(com.azure.core.util.polling.PollingContext<T>,java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>,java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>)"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "AsyncPollResponse(PollingContext<T> pollingContext, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancellationOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)"
  nameWithType: "AsyncPollResponse<T,U>.AsyncPollResponse(PollingContext<T> pollingContext, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancellationOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.AsyncPollResponse(PollingContext<T> pollingContext, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancellationOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)"
  overload: "com.azure.core.util.polling.AsyncPollResponse.AsyncPollResponse*"
  type: "Constructor"
  package: "com.azure.core.util.polling"
  summary: "Creates AsyncPollResponse."
  syntax:
    content: " AsyncPollResponse(PollingContext<T> pollingContext, BiFunction<PollingContext<T>,PollResponse<T>,Mono<T>> cancellationOperation, Function<PollingContext<T>,Mono<U>> fetchResultOperation)"
    parameters:
    - id: "pollingContext"
      type: "com.azure.core.util.polling.PollingContext<T>"
      description: "the polling context"
    - id: "cancellationOperation"
      type: "java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>"
      description: "the cancellation operation if supported by the service"
    - id: "fetchResultOperation"
      type: "java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>"
      description: "the operation to fetch final result of long-running operation, if supported\n                             by the service"
- uid: "com.azure.core.util.polling.AsyncPollResponse.cancelOperation()"
  id: "cancelOperation()"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "cancelOperation()"
  nameWithType: "AsyncPollResponse<T,U>.cancelOperation()"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.cancelOperation()"
  overload: "com.azure.core.util.polling.AsyncPollResponse.cancelOperation*"
  type: "Method"
  package: "com.azure.core.util.polling"
  syntax:
    content: "public Mono<T> cancelOperation()"
    return:
      type: "reactor.core.publisher.Mono<T>"
      description: "a Mono, upon subscription it cancels the remote long-running operation if cancellation\n is supported by the service."
- uid: "com.azure.core.util.polling.AsyncPollResponse.getFinalResult()"
  id: "getFinalResult()"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "getFinalResult()"
  nameWithType: "AsyncPollResponse<T,U>.getFinalResult()"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getFinalResult()"
  overload: "com.azure.core.util.polling.AsyncPollResponse.getFinalResult*"
  type: "Method"
  package: "com.azure.core.util.polling"
  syntax:
    content: "public Mono<U> getFinalResult()"
    return:
      type: "reactor.core.publisher.Mono<U>"
      description: "a Mono, upon subscription it fetches the final result of long-running operation if it\n is supported by the service. If the long-running operation is not completed, then an empty\n Mono will be returned."
- uid: "com.azure.core.util.polling.AsyncPollResponse.getRetryAfter()"
  id: "getRetryAfter()"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "getRetryAfter()"
  nameWithType: "AsyncPollResponse<T,U>.getRetryAfter()"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getRetryAfter()"
  overload: "com.azure.core.util.polling.AsyncPollResponse.getRetryAfter*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Returns the delay the service has requested until the next polling operation is performed. A null or negative value will be taken to mean that the Poller should determine on its own when the next poll operation is to occur."
  syntax:
    content: " Duration getRetryAfter()"
    return:
      type: "java.time.Duration"
      description: "Duration How long to wait before next retry."
- uid: "com.azure.core.util.polling.AsyncPollResponse.getStatus()"
  id: "getStatus()"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "getStatus()"
  nameWithType: "AsyncPollResponse<T,U>.getStatus()"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getStatus()"
  overload: "com.azure.core.util.polling.AsyncPollResponse.getStatus*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "Represents the status of the long-running operation at the time the last polling operation finished successfully."
  syntax:
    content: "public LongRunningOperationStatus getStatus()"
    return:
      type: "com.azure.core.util.polling.LongRunningOperationStatus"
      description: "A <xref uid=\"com.azure.core.util.polling.LongRunningOperationStatus\" data-throw-if-not-resolved=\"false\">LongRunningOperationStatus</xref> representing the result of the poll operation."
- uid: "com.azure.core.util.polling.AsyncPollResponse.getValue()"
  id: "getValue()"
  parent: "com.azure.core.util.polling.AsyncPollResponse"
  langs:
  - "java"
  name: "getValue()"
  nameWithType: "AsyncPollResponse<T,U>.getValue()"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getValue()"
  overload: "com.azure.core.util.polling.AsyncPollResponse.getValue*"
  type: "Method"
  package: "com.azure.core.util.polling"
  summary: "The value returned as a result of the last successful poll operation. This can be any custom user defined object, or null if no value was returned from the service."
  syntax:
    content: "public T getValue()"
    return:
      type: "T"
      description: "T result of poll operation."
references:
- uid: "com.azure.core.util.polling.PollingContext<T>"
  spec.java:
  - uid: "com.azure.core.util.polling.PollingContext"
    name: "PollingContext"
    fullName: "com.azure.core.util.polling.PollingContext"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.util.function.BiFunction<com.azure.core.util.polling.PollingContext<T>,com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<T>>"
  spec.java:
  - uid: "java.util.function.BiFunction"
    name: "BiFunction"
    fullName: "java.util.function.BiFunction"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollingContext"
    name: "PollingContext"
    fullName: "com.azure.core.util.polling.PollingContext"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "java.util.function.Function<com.azure.core.util.polling.PollingContext<T>,reactor.core.publisher.Mono<U>>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollingContext"
    name: "PollingContext"
    fullName: "com.azure.core.util.polling.PollingContext"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "U"
    name: "U"
    fullName: "U"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.polling.AsyncPollResponse.AsyncPollResponse*"
  name: "AsyncPollResponse"
  nameWithType: "AsyncPollResponse<T,U>.AsyncPollResponse"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.AsyncPollResponse"
  package: "com.azure.core.util.polling"
- uid: "com.azure.core.util.polling.LongRunningOperationStatus"
  name: "LongRunningOperationStatus"
  nameWithType: "LongRunningOperationStatus"
  fullName: "com.azure.core.util.polling.LongRunningOperationStatus"
- uid: "com.azure.core.util.polling.AsyncPollResponse.getStatus*"
  name: "getStatus"
  nameWithType: "AsyncPollResponse<T,U>.getStatus"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getStatus"
  package: "com.azure.core.util.polling"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "com.azure.core.util.polling.AsyncPollResponse.getValue*"
  name: "getValue"
  nameWithType: "AsyncPollResponse<T,U>.getValue"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getValue"
  package: "com.azure.core.util.polling"
- uid: "reactor.core.publisher.Mono<T>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.polling.AsyncPollResponse.cancelOperation*"
  name: "cancelOperation"
  nameWithType: "AsyncPollResponse<T,U>.cancelOperation"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.cancelOperation"
  package: "com.azure.core.util.polling"
- uid: "reactor.core.publisher.Mono<U>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "U"
    name: "U"
    fullName: "U"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.util.polling.AsyncPollResponse.getFinalResult*"
  name: "getFinalResult"
  nameWithType: "AsyncPollResponse<T,U>.getFinalResult"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getFinalResult"
  package: "com.azure.core.util.polling"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.core.util.polling.AsyncPollResponse.getRetryAfter*"
  name: "getRetryAfter"
  nameWithType: "AsyncPollResponse<T,U>.getRetryAfter"
  fullName: "com.azure.core.util.polling.AsyncPollResponse<T,U>.getRetryAfter"
  package: "com.azure.core.util.polling"
- uid: "U"
  name: "U"
  nameWithType: "U"
  fullName: "U"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.util.polling.PollingContext"
  name: "PollingContext"
  nameWithType: "PollingContext"
  fullName: "com.azure.core.util.polling.PollingContext"
- uid: "java.util.function.BiFunction"
  name: "BiFunction"
  nameWithType: "BiFunction"
  fullName: "java.util.function.BiFunction"
- uid: "T>,reactor.core.publisher.Mono"
  name: "T>,Mono"
  nameWithType: "T>,Mono"
  fullName: "T>,reactor.core.publisher.Mono"
- uid: "T>,com.azure.core.util.polling.PollResponse"
  name: "T>,PollResponse"
  nameWithType: "T>,PollResponse"
  fullName: "T>,com.azure.core.util.polling.PollResponse"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
