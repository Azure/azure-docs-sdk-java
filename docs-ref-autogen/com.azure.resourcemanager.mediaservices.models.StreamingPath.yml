### YamlMime:JavaType
uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath"
fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath"
name: "StreamingPath"
nameWithType: "StreamingPath"
summary: "Class of paths for streaming."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class StreamingPath"
constructors:
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.StreamingPath()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.StreamingPath()"
  name: "StreamingPath()"
  nameWithType: "StreamingPath.StreamingPath()"
  syntax: "public StreamingPath()"
methods:
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.encryptionScheme()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.encryptionScheme()"
  name: "encryptionScheme()"
  nameWithType: "StreamingPath.encryptionScheme()"
  summary: "Get the encryption<wbr>Scheme property: Encryption scheme."
  syntax: "public EncryptionScheme encryptionScheme()"
  desc: "Get the encryptionScheme property: Encryption scheme."
  returns:
    description: "the encryptionScheme value."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.EncryptionScheme?alt=com.azure.resourcemanager.mediaservices.models.EncryptionScheme&text=EncryptionScheme\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.paths()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.paths()"
  name: "paths()"
  nameWithType: "StreamingPath.paths()"
  summary: "Get the paths property: Streaming paths for each protocol and encryption<wbr>Scheme pair."
  syntax: "public List<String> paths()"
  desc: "Get the paths property: Streaming paths for each protocol and encryptionScheme pair."
  returns:
    description: "the paths value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.streamingProtocol()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.streamingProtocol()"
  name: "streamingProtocol()"
  nameWithType: "StreamingPath.streamingProtocol()"
  summary: "Get the streaming<wbr>Protocol property: Streaming protocol."
  syntax: "public StreamingPolicyStreamingProtocol streamingProtocol()"
  desc: "Get the streamingProtocol property: Streaming protocol."
  returns:
    description: "the streamingProtocol value."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol?alt=com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol&text=StreamingPolicyStreamingProtocol\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.validate()"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.validate()"
  name: "validate()"
  nameWithType: "StreamingPath.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withEncryptionScheme(com.azure.resourcemanager.mediaservices.models.EncryptionScheme)"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withEncryptionScheme(EncryptionScheme encryptionScheme)"
  name: "withEncryptionScheme(EncryptionScheme encryptionScheme)"
  nameWithType: "StreamingPath.withEncryptionScheme(EncryptionScheme encryptionScheme)"
  summary: "Set the encryption<wbr>Scheme property: Encryption scheme."
  parameters:
  - description: "the encryptionScheme value to set."
    name: "encryptionScheme"
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.EncryptionScheme?alt=com.azure.resourcemanager.mediaservices.models.EncryptionScheme&text=EncryptionScheme\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPath withEncryptionScheme(EncryptionScheme encryptionScheme)"
  desc: "Set the encryptionScheme property: Encryption scheme."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPath?alt=com.azure.resourcemanager.mediaservices.models.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withPaths(java.util.List<java.lang.String>)"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withPaths(List<String> paths)"
  name: "withPaths(List<String> paths)"
  nameWithType: "StreamingPath.withPaths(List<String> paths)"
  summary: "Set the paths property: Streaming paths for each protocol and encryption<wbr>Scheme pair."
  parameters:
  - description: "the paths value to set."
    name: "paths"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public StreamingPath withPaths(List<String> paths)"
  desc: "Set the paths property: Streaming paths for each protocol and encryptionScheme pair."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPath?alt=com.azure.resourcemanager.mediaservices.models.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withStreamingProtocol(com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol)"
  fullName: "com.azure.resourcemanager.mediaservices.models.StreamingPath.withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  name: "withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  nameWithType: "StreamingPath.withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  summary: "Set the streaming<wbr>Protocol property: Streaming protocol."
  parameters:
  - description: "the streamingProtocol value to set."
    name: "streamingProtocol"
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol?alt=com.azure.resourcemanager.mediaservices.models.StreamingPolicyStreamingProtocol&text=StreamingPolicyStreamingProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StreamingPath withStreamingProtocol(StreamingPolicyStreamingProtocol streamingProtocol)"
  desc: "Set the streamingProtocol property: Streaming protocol."
  returns:
    description: "the StreamingPath object itself."
    type: "<xref href=\"com.azure.resourcemanager.mediaservices.models.StreamingPath?alt=com.azure.resourcemanager.mediaservices.models.StreamingPath&text=StreamingPath\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Class of paths for streaming."
metadata: {}
package: "com.azure.resourcemanager.mediaservices.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-mediaservices:2.1.0
