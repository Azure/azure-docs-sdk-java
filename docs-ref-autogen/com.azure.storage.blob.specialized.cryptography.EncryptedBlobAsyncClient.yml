### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient"
fullName: "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient"
name: "EncryptedBlobAsyncClient"
nameWithType: "EncryptedBlobAsyncClient"
summary: "This class provides a client side encryption client that contains generic blob operations for Azure Storage Blobs. Operations allowed by the client are uploading, downloading and copying a blob, retrieving and setting metadata, retrieving and setting HTTP headers, and deleting and un-deleting a blob. The upload and download operation allow for encryption and decryption of the data client side. Note: setting metadata in particular is unsafe and should only be done so with caution.\n\nPlease refer to the [Azure Docs For Client-Side Encryption][] for more information.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobClientBuilder\" data-throw-if-not-resolved=\"false\">EncryptedBlobClientBuilder</xref>\n\nFor operations on a specific blob type (i.e append, block, or page) use <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.getAppendBlobAsyncClient*\" data-throw-if-not-resolved=\"false\">getAppendBlobAsyncClient</xref>, <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.getBlockBlobAsyncClient*\" data-throw-if-not-resolved=\"false\">getBlockBlobAsyncClient</xref>, or <xref uid=\"com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.getPageBlobAsyncClient*\" data-throw-if-not-resolved=\"false\">getPageBlobAsyncClient</xref> to construct a client that allows blob specific operations. Note, these types do not support client-side encryption, though decryption is possible in case the associated block/page/append blob contains encrypted data.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs For Client-Side Encryption]: https://docs.microsoft.com/en-us/azure/storage/common/storage-client-side-encryption-java\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.storage.blob.BlobAsyncClient.getAppendBlobAsyncClient()"
- "com.azure.storage.blob.BlobAsyncClient.getBlockBlobAsyncClient()"
- "com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()"
- "com.azure.storage.blob.BlobAsyncClient.getSnapshotClient(java.lang.String)"
- "com.azure.storage.blob.BlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions)"
- "com.azure.storage.blob.BlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,boolean)"
- "com.azure.storage.blob.BlobAsyncClient.uploadFileResourceSupplier(java.lang.String)"
- "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String)"
- "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String,boolean)"
- "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.BlobAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.download()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()"
- "com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EncryptedBlobAsyncClient extends BlobAsyncClient"
methods:
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,boolean)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadFromFile(java.lang.String)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadFromFile(java.lang.String,boolean)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
- "com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
type: "class"
metadata: {}
package: "com.azure.storage.blob.specialized.cryptography"
artifact: com.azure:azure-storage-blob-cryptography:12.7.0
