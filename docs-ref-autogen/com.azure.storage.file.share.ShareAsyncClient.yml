### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareAsyncClient
  id: ShareAsyncClient
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareAsyncClient.create()
  - com.azure.storage.file.share.ShareAsyncClient.createDirectory(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareAsyncClient.createFile(java.lang.String,long)
  - com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareAsyncClient.createPermission(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.createSnapshot()
  - com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  - com.azure.storage.file.share.ShareAsyncClient.delete()
  - com.azure.storage.file.share.ShareAsyncClient.deleteDirectory(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.deleteFile(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse()
  - com.azure.storage.file.share.ShareAsyncClient.exists()
  - com.azure.storage.file.share.ShareAsyncClient.existsWithResponse()
  - com.azure.storage.file.share.ShareAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  - com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy()
  - com.azure.storage.file.share.ShareAsyncClient.getAccountName()
  - com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.getFileClient(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareAsyncClient.getPermission(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareAsyncClient.getProperties()
  - com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse()
  - com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient()
  - com.azure.storage.file.share.ShareAsyncClient.getServiceVersion()
  - com.azure.storage.file.share.ShareAsyncClient.getShareName()
  - com.azure.storage.file.share.ShareAsyncClient.getShareUrl()
  - com.azure.storage.file.share.ShareAsyncClient.getSnapshotId()
  - com.azure.storage.file.share.ShareAsyncClient.getStatistics()
  - com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse()
  - com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  - com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  - com.azure.storage.file.share.ShareAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareAsyncClient.setQuota(int)
  - com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse(int)
  langs:
  - java
  name: ShareAsyncClient
  nameWithType: ShareAsyncClient
  fullName: com.azure.storage.file.share.ShareAsyncClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a azureFileStorageClient that contains all the operations for interacting with a share in Azure Storage Share. Operations allowed by the azureFileStorageClient are creating and deleting the share, creating snapshots for the share, creating and deleting directories in the share and retrieving and updating properties metadata and access policies of the share.


    **Instantiating an Asynchronous Share Client**


    ```java

    ShareAsyncClient client = new ShareClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildAsyncClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the azureFileStorageClient.
  syntax:
    content: public class ShareAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareAsyncClient.ShareAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  id: ShareAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: ShareAsyncClient(AzureFileStorageImpl client, String shareName, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  nameWithType: ShareAsyncClient.ShareAsyncClient(AzureFileStorageImpl client, String shareName, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  fullName: com.azure.storage.file.share.ShareAsyncClient.ShareAsyncClient(AzureFileStorageImpl client, String shareName, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  overload: com.azure.storage.file.share.ShareAsyncClient.ShareAsyncClient*
  type: Constructor
  package: com.azure.storage.file.share
  summary: Creates a ShareAsyncClient that sends requests to the storage share at <xref uid="com.azure.storage.file.share.implementation.AzureFileStorageImpl.getUrl*" data-throw-if-not-resolved="false">endpoint</xref>. Each service call goes through the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">pipeline</xref> in the `azureFileStorageClient`.
  syntax:
    content: " ShareAsyncClient(AzureFileStorageImpl client, String shareName, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
    parameters:
    - id: client
      type: com.azure.storage.file.share.implementation.AzureFileStorageImpl
      description: Client that interacts with the service interfaces
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: snapshot
      type: java.lang.String
    - id: accountName
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareAsyncClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: create()
  nameWithType: ShareAsyncClient.create()
  fullName: com.azure.storage.file.share.ShareAsyncClient.create()
  overload: com.azure.storage.file.share.ShareAsyncClient.create*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the share in the storage account.


    **Code Samples**


    Create the share


    ```java

    shareAsyncClient.create().subscribe(
         response -> {
         },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the share!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public Mono<ShareInfo> create()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareInfo>
      description: The information about the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.createDirectory(java.lang.String)
  id: createDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createDirectory(String directoryName)
  nameWithType: ShareAsyncClient.createDirectory(String directoryName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createDirectory(String directoryName)
  overload: com.azure.storage.file.share.ShareAsyncClient.createDirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the directory in the share with the given name.


    **Code Samples**


    Create the directory "mydirectory"


    ```java

    shareAsyncClient.createDirectory("mydirectory").subscribe(
         response -> {
         },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the directory!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<ShareDirectoryAsyncClient> createDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareDirectoryAsyncClient>
      description: The <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> to interact with the created directory.
- uid: com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareAsyncClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the directory in the share with the given name and associates the passed metadata to it.


    **Code Samples**


    Create the directory "documents" with metadata "directory:metadata"


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     shareAsyncClient.createDirectoryWithResponse("documents", smbProperties, filePermission,
         Collections.singletonMap("directory", "metadata"))
         .subscribe(response -> System.out.printf("Creating the directory completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<Response<ShareDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the directory
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryAsyncClient>>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> to interact with the created directory and the
         status of its creation.
- uid: com.azure.storage.file.share.ShareAsyncClient.createFile(java.lang.String,long)
  id: createFile(java.lang.String,long)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createFile(String fileName, long maxSize)
  nameWithType: ShareAsyncClient.createFile(String fileName, long maxSize)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createFile(String fileName, long maxSize)
  overload: com.azure.storage.file.share.ShareAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the file in the share with the given name and file max size.


    **Code Samples**


    Create the file "myfile" with size of 1024 bytes.


    ```java

    shareAsyncClient.createFile("myfile", 1024).subscribe(
         response -> {
         },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the directory!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<ShareFileAsyncClient> createFile(String fileName, long maxSize)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareFileAsyncClient>
      description: The <xref uid="com.azure.storage.file.share.ShareFileAsyncClient" data-throw-if-not-resolved="false">ShareFileAsyncClient</xref> to interact with the created file.
- uid: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the file in the share with the given name, file max size and associates the passed properties to it.


    **Code Samples**


    Create the file "myfile" with length of 1024 bytes, some headers, file smb properties and metadata


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     shareAsyncClient.createFileWithResponse("myfile", 1024, httpHeaders, smbProperties,
         filePermission, Collections.singletonMap("directory", "metadata"))
         .subscribe(response -> System.out.printf("Creating the file completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareFileAsyncClient" data-throw-if-not-resolved="false">ShareFileAsyncClient</xref> to interact with the created file and the status of
         its creation.
- uid: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  nameWithType: ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Creates the file in the share with the given name, file max size and associates the passed properties to it.\n\n**Code Samples**\n\nCreate the file \"myfile\" with length of 1024 bytes, some headers, file smb properties and metadata\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n shareAsyncClient.createFileWithResponse(\"myfile\", 1024, httpHeaders, smbProperties,\n     filePermission, Collections.singletonMap(\"directory\", \"metadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: maxSize
      type: long
      description: The maximum size in bytes for the file.
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
      description: >-
        A response containing a <xref uid="com.azure.storage.file.share.ShareFileAsyncClient" data-throw-if-not-resolved="false">ShareFileAsyncClient</xref> to interact with the created file and the status of
         its creation.
- uid: com.azure.storage.file.share.ShareAsyncClient.createPermission(java.lang.String)
  id: createPermission(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createPermission(String filePermission)
  nameWithType: ShareAsyncClient.createPermission(String filePermission)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createPermission(String filePermission)
  overload: com.azure.storage.file.share.ShareAsyncClient.createPermission*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a permission at the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.


    **Code Samples**


    ```java

    shareAsyncClient.createPermission("filePermission").subscribe(
         response -> System.out.printf("The file permission key is %s", response));
    ```
  syntax:
    content: public Mono<String> createPermission(String filePermission)
    parameters:
    - id: filePermission
      type: java.lang.String
      description: The file permission to get/create.
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: The file permission key associated with the file permission.
- uid: com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse(java.lang.String)
  id: createPermissionWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createPermissionWithResponse(String filePermission)
  nameWithType: ShareAsyncClient.createPermissionWithResponse(String filePermission)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse(String filePermission)
  overload: com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a permission at the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.


    **Code Samples**


    ```java

    shareAsyncClient.createPermissionWithResponse("filePermission").subscribe(
         response -> System.out.printf("The file permission key is %s", response.getValue()));
    ```
  syntax:
    content: public Mono<Response<String>> createPermissionWithResponse(String filePermission)
    parameters:
    - id: filePermission
      type: java.lang.String
      description: The file permission to get/create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A response that contains the file permission key associated with the file permission.
- uid: com.azure.storage.file.share.ShareAsyncClient.createSnapshot()
  id: createSnapshot()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createSnapshot()
  nameWithType: ShareAsyncClient.createSnapshot()
  fullName: com.azure.storage.file.share.ShareAsyncClient.createSnapshot()
  overload: com.azure.storage.file.share.ShareAsyncClient.createSnapshot*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a snapshot of the share with the same metadata associated to the share at the time of creation.


    **Code Samples**


    Create a snapshot


    ```java

    shareAsyncClient.createSnapshot().subscribe(
         response -> System.out.println("Successfully creating the share snapshot with snapshot id: "
             + response.getSnapshot()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete creating the share snapshot.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-share
  syntax:
    content: public Mono<ShareSnapshotInfo> createSnapshot()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareSnapshotInfo>
      description: The information about the <xref uid="com.azure.storage.file.share.models.ShareSnapshotInfo" data-throw-if-not-resolved="false">snapshot of share</xref>.
- uid: com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  id: createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createSnapshotWithResponse(Map<String,String> metadata)
  nameWithType: ShareAsyncClient.createSnapshotWithResponse(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a snapshot of the share with the metadata that was passed associated to the snapshot.


    **Code Samples**


    Create a snapshot with metadata "snapshot:metadata"


    ```java

    shareAsyncClient.createSnapshotWithResponse(Collections.singletonMap("snapshot", "metadata")).subscribe(
         response -> System.out.println("Successfully creating the share snapshot with snapshot id: "
             + response.getValue().getSnapshot()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete creating the share snapshot.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-share
  syntax:
    content: public Mono<Response<ShareSnapshotInfo>> createSnapshotWithResponse(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to associate with the snapshot. If <code>null</code> the metadata of the share will
         be copied to the snapshot.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareSnapshotInfo>>
      description: A response containing information about the <xref uid="com.azure.storage.file.share.models.ShareSnapshotInfo" data-throw-if-not-resolved="false">snapshot of share</xref>.
- uid: com.azure.storage.file.share.ShareAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  id: createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: createWithResponse(Map<String,String> metadata, Integer quotaInGB)
  nameWithType: ShareAsyncClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB)
  fullName: com.azure.storage.file.share.ShareAsyncClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB)
  overload: com.azure.storage.file.share.ShareAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates the share in the storage account with the specified metadata and quota.


    **Code Samples**


    Create the share with metadata "share:metadata"


    ```java

    shareAsyncClient.createWithResponse(Collections.singletonMap("share", "metadata"), null).subscribe(
         response -> System.out.printf("Creating the share completed with status code %d", response.getStatusCode()),
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the share!")
     );
    ```


    Create the share with a quota of 10 GB


    ```java

    shareAsyncClient.createWithResponse(null, 10).subscribe(
         response -> System.out.printf("Creating the share completed with status code %d", response.getStatusCode()),
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the share!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public Mono<Response<ShareInfo>> createWithResponse(Map<String,String> metadata, Integer quotaInGB)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the share
    - id: quotaInGB
      type: java.lang.Integer
      description: >-
        Optional maximum size the share is allowed to grow to in GB. This must be greater than 0 and
         less than or equal to 5120. The default value is 5120.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>>
      description: A response containing information about the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">share</xref> and the status its creation.
- uid: com.azure.storage.file.share.ShareAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: ShareAsyncClient.delete()
  fullName: com.azure.storage.file.share.ShareAsyncClient.delete()
  overload: com.azure.storage.file.share.ShareAsyncClient.delete*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the share in the storage account


    **Code Samples**


    Delete the share


    ```java

    shareAsyncClient.delete().subscribe(
         response -> System.out.println("Deleting the shareAsyncClient completed."),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the share.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteDirectory(java.lang.String)
  id: deleteDirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteDirectory(String directoryName)
  nameWithType: ShareAsyncClient.deleteDirectory(String directoryName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteDirectory(String directoryName)
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteDirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified directory in the share.


    **Code Samples**


    Delete the directory "mydirectory"


    ```java

    shareAsyncClient.deleteDirectory("mydirectory").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the directory.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Void> deleteDirectory(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse(java.lang.String)
  id: deleteDirectoryWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteDirectoryWithResponse(String directoryName)
  nameWithType: ShareAsyncClient.deleteDirectoryWithResponse(String directoryName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse(String directoryName)
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified directory in the share.


    **Code Samples**


    Delete the directory "mydirectory"


    ```java

    shareAsyncClient.deleteDirectory("mydirectory").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the directory.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Response<Void>> deleteDirectoryWithResponse(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: ShareAsyncClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteFile(String fileName)
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    shareAsyncClient.deleteFile("myfile").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Void> deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A empty response
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String)
  id: deleteFileWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName)
  nameWithType: ShareAsyncClient.deleteFileWithResponse(String fileName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(String fileName)
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    shareAsyncClient.deleteFile("myfile").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  nameWithType: ShareAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specified file in the share.


    **Code Samples**


    Delete the file "myfile"


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareAsyncClient.deleteFileWithResponse("myfile", requestConditions).subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse()
  id: deleteWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: deleteWithResponse()
  nameWithType: ShareAsyncClient.deleteWithResponse()
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse()
  overload: com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the share in the storage account


    **Code Samples**


    Delete the share


    ```java

    shareAsyncClient.deleteWithResponse().subscribe(
         response -> System.out.println("Deleting the shareAsyncClient completed with status code: "
             + response.getStatusCode()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Complete deleting the share.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareAsyncClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: exists()
  nameWithType: ShareAsyncClient.exists()
  fullName: com.azure.storage.file.share.ShareAsyncClient.exists()
  overload: com.azure.storage.file.share.ShareAsyncClient.exists*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the share this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.exists().subscribe(response -> System.out.printf("Exists? %b%n", response));

    ```
  syntax:
    content: public Mono<Boolean> exists()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: Flag indicating existence of the share.
- uid: com.azure.storage.file.share.ShareAsyncClient.existsWithResponse()
  id: existsWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: existsWithResponse()
  nameWithType: ShareAsyncClient.existsWithResponse()
  fullName: com.azure.storage.file.share.ShareAsyncClient.existsWithResponse()
  overload: com.azure.storage.file.share.ShareAsyncClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the share this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.existsWithResponse().subscribe(response -> System.out.printf("Exists? %b%n", response.getValue()));

    ```
  syntax:
    content: public Mono<Response<Boolean>> existsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: Flag indicating existence of the share.
- uid: com.azure.storage.file.share.ShareAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  nameWithType: ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  overload: com.azure.storage.file.share.ShareAsyncClient.generateSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareSasPermission permission = new ShareSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
    parameters:
    - id: shareServiceSasSignatureValues
      type: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.share.sas.ShareServiceSasSignatureValues" data-throw-if-not-resolved="false">ShareServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy()
  id: getAccessPolicy()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getAccessPolicy()
  nameWithType: ShareAsyncClient.getAccessPolicy()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy()
  overload: com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves stored access policies specified for the share.


    **Code Samples**


    List the stored access policies


    ```java

    shareAsyncClient.getAccessPolicy()
         .subscribe(result -> System.out.printf("Access policy %s allows these permissions: %s", result.getId(),
             result.getAccessPolicy().getPermissions())
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-acl
  syntax:
    content: public PagedFlux<ShareSignedIdentifier> getAccessPolicy()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: The stored access policies specified on the queue.
- uid: com.azure.storage.file.share.ShareAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareAsyncClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getAccountName()
  overload: com.azure.storage.file.share.ShareAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient(java.lang.String)
  id: getDirectoryClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getDirectoryClient(String directoryName)
  nameWithType: ShareAsyncClient.getDirectoryClient(String directoryName)
  fullName: com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient(String directoryName)
  overload: com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> that interacts with the specified directory.


    If the directory doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient.create()" data-throw-if-not-resolved="false">create</xref> in the azureFileStorageClient will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryAsyncClient getDirectoryClient(String directoryName)
    parameters:
    - id: directoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: com.azure.storage.file.share.ShareDirectoryAsyncClient
      description: a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> that interacts with the directory in the share
- uid: com.azure.storage.file.share.ShareAsyncClient.getFileClient(java.lang.String)
  id: getFileClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getFileClient(String filePath)
  nameWithType: ShareAsyncClient.getFileClient(String filePath)
  fullName: com.azure.storage.file.share.ShareAsyncClient.getFileClient(String filePath)
  overload: com.azure.storage.file.share.ShareAsyncClient.getFileClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareFileAsyncClient" data-throw-if-not-resolved="false">ShareFileAsyncClient</xref> that interacts with the specified file.


    If the file doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareFileAsyncClient.create(long)" data-throw-if-not-resolved="false">ShareFileAsyncClient#create(long)</xref> ) create\} in the client will need to be called before interaction with the file can happen.
  syntax:
    content: public ShareFileAsyncClient getFileClient(String filePath)
    parameters:
    - id: filePath
      type: java.lang.String
      description: Name of the file
    return:
      type: com.azure.storage.file.share.ShareFileAsyncClient
      description: a <xref uid="com.azure.storage.file.share.ShareFileAsyncClient" data-throw-if-not-resolved="false">ShareFileAsyncClient</xref> that interacts with the file in the share
- uid: com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareAsyncClient.getPermission(java.lang.String)
  id: getPermission(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getPermission(String filePermissionKey)
  nameWithType: ShareAsyncClient.getPermission(String filePermissionKey)
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPermission(String filePermissionKey)
  overload: com.azure.storage.file.share.ShareAsyncClient.getPermission*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Gets a permission for a given key.


    **Code Samples**


    ```java

    shareAsyncClient.getPermission("filePermissionKey").subscribe(
         response -> System.out.printf("The file permission is %s", response));
    ```
  syntax:
    content: public Mono<String> getPermission(String filePermissionKey)
    parameters:
    - id: filePermissionKey
      type: java.lang.String
      description: The file permission key.
    return:
      type: reactor.core.publisher.Mono<java.lang.String>
      description: The file permission associated with the file permission key.
- uid: com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse(java.lang.String)
  id: getPermissionWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getPermissionWithResponse(String filePermissionKey)
  nameWithType: ShareAsyncClient.getPermissionWithResponse(String filePermissionKey)
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse(String filePermissionKey)
  overload: com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Gets a permission for a given key.


    **Code Samples**


    ```java

    shareAsyncClient.getPermissionWithResponse("filePermissionKey").subscribe(
         response -> System.out.printf("The file permission is %s", response.getValue()));
    ```
  syntax:
    content: public Mono<Response<String>> getPermissionWithResponse(String filePermissionKey)
    parameters:
    - id: filePermissionKey
      type: java.lang.String
      description: The file permission key.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
      description: A response that contains th file permission associated with the file permission key.
- uid: com.azure.storage.file.share.ShareAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareAsyncClient.getProperties()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getProperties()
  overload: com.azure.storage.file.share.ShareAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to.


    **Code Samples**


    Retrieve the share properties


    ```java

    shareAsyncClient.getProperties()
         .subscribe(properties -> {
             System.out.printf("Share quota: %d, Metadata: %s", properties.getQuota(), properties.getMetadata());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Mono<ShareProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareProperties>
      description: The <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse()
  id: getPropertiesWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse()
  nameWithType: ShareAsyncClient.getPropertiesWithResponse()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse()
  overload: com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to.


    **Code Samples**


    Retrieve the share properties


    ```java

    shareAsyncClient.getPropertiesWithResponse()
         .subscribe(properties -> {
             System.out.printf("Share quota: %d, Metadata: %s", properties.getValue().getQuota(),
                 properties.getValue().getMetadata());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Mono<Response<ShareProperties>> getPropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareProperties>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareProperties" data-throw-if-not-resolved="false">properties of the share</xref> with headers and response
         status code
- uid: com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient()
  id: getRootDirectoryClient()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getRootDirectoryClient()
  nameWithType: ShareAsyncClient.getRootDirectoryClient()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient()
  overload: com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> that interacts with the root directory in the share.


    If the directory doesn't exist in the share <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient.create()" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient#create()</xref> in the azureFileStorageClient will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryAsyncClient getRootDirectoryClient()
    return:
      type: com.azure.storage.file.share.ShareDirectoryAsyncClient
      description: a <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient</xref> that interacts with the root directory in the share
- uid: com.azure.storage.file.share.ShareAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareAsyncClient.getShareName()
  id: getShareName()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getShareName()
  nameWithType: ShareAsyncClient.getShareName()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getShareName()
  overload: com.azure.storage.file.share.ShareAsyncClient.getShareName*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get share name from share client.


    **Code Samples**


    ```java

    String shareName = shareAsyncClient.getShareName();
     System.out.println("The name of the share is " + shareName);
    ```
  syntax:
    content: public String getShareName()
    return:
      type: java.lang.String
      description: The name of the share.
- uid: com.azure.storage.file.share.ShareAsyncClient.getShareUrl()
  id: getShareUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getShareUrl()
  nameWithType: ShareAsyncClient.getShareUrl()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getShareUrl()
  overload: com.azure.storage.file.share.ShareAsyncClient.getShareUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage share client.
  syntax:
    content: public String getShareUrl()
    return:
      type: java.lang.String
      description: the url of the Storage Share.
- uid: com.azure.storage.file.share.ShareAsyncClient.getSnapshotId()
  id: getSnapshotId()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getSnapshotId()
  nameWithType: ShareAsyncClient.getSnapshotId()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getSnapshotId()
  overload: com.azure.storage.file.share.ShareAsyncClient.getSnapshotId*
  type: Method
  package: com.azure.storage.file.share
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\">ShareAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareAsyncClient shareAsyncClient = new ShareClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .snapshot(currentTime.toString())\n     .buildAsyncClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareAsyncClient.getSnapshotId());\n```"
  syntax:
    content: public String getSnapshotId()
    return:
      type: java.lang.String
      description: >-
        The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base
         share.
- uid: com.azure.storage.file.share.ShareAsyncClient.getStatistics()
  id: getStatistics()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getStatistics()
  nameWithType: ShareAsyncClient.getStatistics()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getStatistics()
  overload: com.azure.storage.file.share.ShareAsyncClient.getStatistics*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves storage statistics about the share.


    **Code Samples**


    Retrieve the storage statistics


    ```java

    shareAsyncClient.getStatistics().doOnSuccess(response -> System.out.printf("The share is using %d GB",
         response.getShareUsageInGB()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-stats
  syntax:
    content: public Mono<ShareStatistics> getStatistics()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareStatistics>
      description: The storage <xref uid="com.azure.storage.file.share.models.ShareStatistics" data-throw-if-not-resolved="false">statistics of the share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse()
  id: getStatisticsWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: getStatisticsWithResponse()
  nameWithType: ShareAsyncClient.getStatisticsWithResponse()
  fullName: com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse()
  overload: com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves storage statistics about the share.


    **Code Samples**


    Retrieve the storage statistics


    ```java

    shareAsyncClient.getStatisticsWithResponse().subscribe(response -> System.out.printf("The share is using %d GB",
         response.getValue().getShareUsageInGB()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-stats
  syntax:
    content: public Mono<Response<ShareStatistics>> getStatisticsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareStatistics>>
      description: >-
        A response containing the storage <xref uid="com.azure.storage.file.share.models.ShareStatistics" data-throw-if-not-resolved="false">statistics of the share</xref> with headers and
         response status code
- uid: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  id: setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setAccessPolicy(List<ShareSignedIdentifier> permissions)
  nameWithType: ShareAsyncClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)
  overload: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n shareAsyncClient.setAccessPolicy(Collections.singletonList(permission)).doOnSuccess(\n     response -> System.out.println(\"Setting access policies completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl"
  syntax:
    content: public Mono<ShareInfo> setAccessPolicy(List<ShareSignedIdentifier> permissions)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: Access policies to set on the queue
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  id: setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)
  nameWithType: ShareAsyncClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)
  overload: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n \n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n shareAsyncClient.setAccessPolicyWithResponse(Collections.singletonList(permission))\n     .subscribe(response -> System.out.printf(\"Setting access policies completed completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-acl"
  syntax:
    content: public Mono<Response<ShareInfo>> setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)
    parameters:
    - id: permissions
      type: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
      description: Access policies to set on the queue
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref> with headers and response status
         code
- uid: com.azure.storage.file.share.ShareAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: ShareAsyncClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareAsyncClient.setMetadata*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the share.


    If `null` is passed for the metadata it will clear the metadata associated to the share.


    **Code Samples**


    Set the metadata to "share:updatedMetadata"


    ```java

    shareAsyncClient.setMetadata(Collections.singletonMap("share", "updatedMetadata")).doOnSuccess(response ->
         System.out.println("Setting the share metadata completed.")
     );
    ```


    Clear the metadata of the share


    ```java

    shareAsyncClient.setMetadata(null).doOnSuccess(response ->
         System.out.println("Setting the share metadata completed.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata
  syntax:
    content: public Mono<ShareInfo> setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the share, if null is passed the metadata for the share is cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata)
  nameWithType: ShareAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the share.


    If `null` is passed for the metadata it will clear the metadata associated to the share.


    **Code Samples**


    Set the metadata to "share:updatedMetadata"


    ```java

    shareAsyncClient.setMetadata(Collections.singletonMap("share", "updatedMetadata")).doOnSuccess(response ->
         System.out.println("Setting the share metadata completed.")
     );
    ```


    Clear the metadata of the share


    ```java

    shareAsyncClient.setMetadata(null).doOnSuccess(response ->
         System.out.println("Setting the share metadata completed.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-share-metadata
  syntax:
    content: public Mono<Response<ShareInfo>> setMetadataWithResponse(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to set on the share, if null is passed the metadata for the share is cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref> with headers and response status
         code
- uid: com.azure.storage.file.share.ShareAsyncClient.setQuota(int)
  id: setQuota(int)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setQuota(int quotaInGB)
  nameWithType: ShareAsyncClient.setQuota(int quotaInGB)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setQuota(int quotaInGB)
  overload: com.azure.storage.file.share.ShareAsyncClient.setQuota*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the maximum size in GB that the share is allowed to grow.


    **Code Samples**


    Set the quota to 1024 GB


    ```java

    shareAsyncClient.setQuota(1024).doOnSuccess(response ->
         System.out.println("Setting the share quota completed.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Mono<ShareInfo> setQuota(int quotaInGB)
    parameters:
    - id: quotaInGB
      type: int
      description: Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref>
- uid: com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse(int)
  id: setQuotaWithResponse(int)
  artifact: com.azure:azure-storage-file-share:12.6.0
  parent: com.azure.storage.file.share.ShareAsyncClient
  langs:
  - java
  name: setQuotaWithResponse(int quotaInGB)
  nameWithType: ShareAsyncClient.setQuotaWithResponse(int quotaInGB)
  fullName: com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse(int quotaInGB)
  overload: com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the maximum size in GB that the share is allowed to grow.


    **Code Samples**


    Set the quota to 1024 GB


    ```java

    shareAsyncClient.setQuotaWithResponse(1024)
         .subscribe(response ->
             System.out.printf("Setting the share quota completed with status code %d", response.getStatusCode())
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-share-properties
  syntax:
    content: public Mono<Response<ShareInfo>> setQuotaWithResponse(int quotaInGB)
    parameters:
    - id: quotaInGB
      type: int
      description: Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>>
      description: >-
        A response containing the <xref uid="com.azure.storage.file.share.models.ShareInfo" data-throw-if-not-resolved="false">information about the share</xref> with headers and response status
         code
references:
- uid: com.azure.storage.file.share.implementation.AzureFileStorageImpl
  name: AzureFileStorageImpl
  nameWithType: AzureFileStorageImpl
  fullName: com.azure.storage.file.share.implementation.AzureFileStorageImpl
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareAsyncClient.ShareAsyncClient*
  name: ShareAsyncClient
  nameWithType: ShareAsyncClient.ShareAsyncClient
  fullName: com.azure.storage.file.share.ShareAsyncClient.ShareAsyncClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getShareUrl*
  name: getShareUrl
  nameWithType: ShareAsyncClient.getShareUrl
  fullName: com.azure.storage.file.share.ShareAsyncClient.getShareUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareAsyncClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
  name: ShareDirectoryAsyncClient
  nameWithType: ShareDirectoryAsyncClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
- uid: com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient*
  name: getRootDirectoryClient
  nameWithType: ShareAsyncClient.getRootDirectoryClient
  fullName: com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient*
  name: getDirectoryClient
  nameWithType: ShareAsyncClient.getDirectoryClient
  fullName: com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient
  name: ShareFileAsyncClient
  nameWithType: ShareFileAsyncClient
  fullName: com.azure.storage.file.share.ShareFileAsyncClient
- uid: com.azure.storage.file.share.ShareAsyncClient.getFileClient*
  name: getFileClient
  nameWithType: ShareAsyncClient.getFileClient
  fullName: com.azure.storage.file.share.ShareAsyncClient.getFileClient
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.exists*
  name: exists
  nameWithType: ShareAsyncClient.exists
  fullName: com.azure.storage.file.share.ShareAsyncClient.exists
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: ShareAsyncClient.existsWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.existsWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareInfo
    name: ShareInfo
    fullName: com.azure.storage.file.share.models.ShareInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.create*
  name: create
  nameWithType: ShareAsyncClient.create
  fullName: com.azure.storage.file.share.ShareAsyncClient.create
  package: com.azure.storage.file.share
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareInfo
    name: ShareInfo
    fullName: com.azure.storage.file.share.models.ShareInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: ShareAsyncClient.createWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.createWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareSnapshotInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSnapshotInfo
    name: ShareSnapshotInfo
    fullName: com.azure.storage.file.share.models.ShareSnapshotInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createSnapshot*
  name: createSnapshot
  nameWithType: ShareAsyncClient.createSnapshot
  fullName: com.azure.storage.file.share.ShareAsyncClient.createSnapshot
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareSnapshotInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSnapshotInfo
    name: ShareSnapshotInfo
    fullName: com.azure.storage.file.share.models.ShareSnapshotInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse*
  name: createSnapshotWithResponse
  nameWithType: ShareAsyncClient.createSnapshotWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.delete*
  name: delete
  nameWithType: ShareAsyncClient.delete
  fullName: com.azure.storage.file.share.ShareAsyncClient.delete
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: ShareAsyncClient.deleteWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareProperties
    name: ShareProperties
    fullName: com.azure.storage.file.share.models.ShareProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.getProperties*
  name: getProperties
  nameWithType: ShareAsyncClient.getProperties
  fullName: com.azure.storage.file.share.ShareAsyncClient.getProperties
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareProperties
    name: ShareProperties
    fullName: com.azure.storage.file.share.models.ShareProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.file.share.ShareAsyncClient.setQuota*
  name: setQuota
  nameWithType: ShareAsyncClient.setQuota
  fullName: com.azure.storage.file.share.ShareAsyncClient.setQuota
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse*
  name: setQuotaWithResponse
  nameWithType: ShareAsyncClient.setQuotaWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.setMetadata*
  name: setMetadata
  nameWithType: ShareAsyncClient.setMetadata
  fullName: com.azure.storage.file.share.ShareAsyncClient.setMetadata
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: ShareAsyncClient.setMetadataWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareSignedIdentifier>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSignedIdentifier
    name: ShareSignedIdentifier
    fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy*
  name: getAccessPolicy
  nameWithType: ShareAsyncClient.getAccessPolicy
  fullName: com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy
  package: com.azure.storage.file.share
- uid: java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareSignedIdentifier
    name: ShareSignedIdentifier
    fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy*
  name: setAccessPolicy
  nameWithType: ShareAsyncClient.setAccessPolicy
  fullName: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse*
  name: setAccessPolicyWithResponse
  nameWithType: ShareAsyncClient.setAccessPolicyWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareStatistics>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareStatistics
    name: ShareStatistics
    fullName: com.azure.storage.file.share.models.ShareStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.getStatistics*
  name: getStatistics
  nameWithType: ShareAsyncClient.getStatistics
  fullName: com.azure.storage.file.share.ShareAsyncClient.getStatistics
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareStatistics>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareStatistics
    name: ShareStatistics
    fullName: com.azure.storage.file.share.models.ShareStatistics
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse*
  name: getStatisticsWithResponse
  nameWithType: ShareAsyncClient.getStatisticsWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareDirectoryAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
    name: ShareDirectoryAsyncClient
    fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createDirectory*
  name: createDirectory
  nameWithType: ShareAsyncClient.createDirectory
  fullName: com.azure.storage.file.share.ShareAsyncClient.createDirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.FileSmbProperties
  name: FileSmbProperties
  nameWithType: FileSmbProperties
  fullName: com.azure.storage.file.share.FileSmbProperties
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
    name: ShareDirectoryAsyncClient
    fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse*
  name: createDirectoryWithResponse
  nameWithType: ShareAsyncClient.createDirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse
  package: com.azure.storage.file.share
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareFileAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileAsyncClient
    name: ShareFileAsyncClient
    fullName: com.azure.storage.file.share.ShareFileAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createFile*
  name: createFile
  nameWithType: ShareAsyncClient.createFile
  fullName: com.azure.storage.file.share.ShareAsyncClient.createFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileHttpHeaders
  name: ShareFileHttpHeaders
  nameWithType: ShareFileHttpHeaders
  fullName: com.azure.storage.file.share.models.ShareFileHttpHeaders
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileAsyncClient
    name: ShareFileAsyncClient
    fullName: com.azure.storage.file.share.ShareFileAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: ShareAsyncClient.createFileWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareRequestConditions
  name: ShareRequestConditions
  nameWithType: ShareRequestConditions
  fullName: com.azure.storage.file.share.models.ShareRequestConditions
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteDirectory*
  name: deleteDirectory
  nameWithType: ShareAsyncClient.deleteDirectory
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteDirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse*
  name: deleteDirectoryWithResponse
  nameWithType: ShareAsyncClient.deleteDirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteFile*
  name: deleteFile
  nameWithType: ShareAsyncClient.deleteFile
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: ShareAsyncClient.deleteFileWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.String>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createPermission*
  name: createPermission
  nameWithType: ShareAsyncClient.createPermission
  fullName: com.azure.storage.file.share.ShareAsyncClient.createPermission
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.String>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse*
  name: createPermissionWithResponse
  nameWithType: ShareAsyncClient.createPermissionWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getPermission*
  name: getPermission
  nameWithType: ShareAsyncClient.getPermission
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPermission
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse*
  name: getPermissionWithResponse
  nameWithType: ShareAsyncClient.getPermissionWithResponse
  fullName: com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getSnapshotId*
  name: getSnapshotId
  nameWithType: ShareAsyncClient.getSnapshotId
  fullName: com.azure.storage.file.share.ShareAsyncClient.getSnapshotId
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getShareName*
  name: getShareName
  nameWithType: ShareAsyncClient.getShareName
  fullName: com.azure.storage.file.share.ShareAsyncClient.getShareName
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: ShareAsyncClient.getAccountName
  fullName: com.azure.storage.file.share.ShareAsyncClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
  name: ShareServiceSasSignatureValues
  nameWithType: ShareServiceSasSignatureValues
  fullName: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
- uid: com.azure.storage.file.share.ShareAsyncClient.generateSas*
  name: generateSas
  nameWithType: ShareAsyncClient.generateSas
  fullName: com.azure.storage.file.share.ShareAsyncClient.generateSas
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.storage.file.share.models.ShareInfo
  name: ShareInfo
  nameWithType: ShareInfo
  fullName: com.azure.storage.file.share.models.ShareInfo
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.storage.file.share.models.ShareSnapshotInfo
  name: ShareSnapshotInfo
  nameWithType: ShareSnapshotInfo
  fullName: com.azure.storage.file.share.models.ShareSnapshotInfo
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.share.models.ShareProperties
  name: ShareProperties
  nameWithType: ShareProperties
  fullName: com.azure.storage.file.share.models.ShareProperties
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.share.models.ShareSignedIdentifier
  name: ShareSignedIdentifier
  nameWithType: ShareSignedIdentifier
  fullName: com.azure.storage.file.share.models.ShareSignedIdentifier
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.storage.file.share.models.ShareStatistics
  name: ShareStatistics
  nameWithType: ShareStatistics
  fullName: com.azure.storage.file.share.models.ShareStatistics
