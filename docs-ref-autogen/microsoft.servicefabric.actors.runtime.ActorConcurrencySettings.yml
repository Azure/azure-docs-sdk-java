### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings()
  name: ActorConcurrencySettings()
  nameWithType: ActorConcurrencySettings.ActorConcurrencySettings()
  summary: <p>Initializes a new instance of the ActorConcurrencySettings class. </p>
  syntax: public ActorConcurrencySettings()
  uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout()
  name: getLockTimeout()
  nameWithType: ActorConcurrencySettings.getLockTimeout()
  returns:
    description: <p>Timeout for the turn based concurrency lock. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>sets timeout for the turn based concurrency lock. If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid="microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException"></xref> exception. This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times. The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value.</p>

    <p></p>
  syntax: public Duration getLockTimeout()
  uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout()
- fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode()
  name: getReentrancyMode()
  nameWithType: ActorConcurrencySettings.getReentrancyMode()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.runtime.ActorReentrancyMode" data-throw-if-not-resolved="false" data-raw-source="ActorReentrancyMode"></xref> for the actor method calls. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReentrancyMode?alt=microsoft.servicefabric.actors.runtime.ActorReentrancyMode&text=ActorReentrancyMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>gets Reentrancy mode for actor method calls.</p>

    <p></p>
  syntax: public ActorReentrancyMode getReentrancyMode()
  uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode()
- fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout(Duration timeout)
  name: setLockTimeout(Duration timeout)
  nameWithType: ActorConcurrencySettings.setLockTimeout(Duration timeout)
  parameters:
  - description: <p>This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times. The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>sets timeout for the turn based concurrency lock. If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid="microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException"></xref> exception.</p>

    <p></p>
  syntax: public void setLockTimeout(Duration timeout)
  uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout(Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
  name: setReentrancyMode(ActorReentrancyMode mode)
  nameWithType: ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
  parameters:
  - description: <p>reentrancy mode. <xref uid="microsoft.servicefabric.actors.runtime.ActorReentrancyMode" data-throw-if-not-resolved="false" data-raw-source="ActorReentrancyMode"></xref> for the actor method calls. </p>
    name: mode
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReentrancyMode?alt=microsoft.servicefabric.actors.runtime.ActorReentrancyMode&text=ActorReentrancyMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>sets Reentrancy mode for actor method calls.</p>

    <p></p>
  syntax: public void setReentrancyMode(ActorReentrancyMode mode)
  uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode)
nameWithType: ActorConcurrencySettings
syntax: public class ActorConcurrencySettings
type: class
uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
name: ActorConcurrencySettings
package: microsoft.servicefabric.actors.runtime
summary: <p>The method calls on an actor dispatched via in turn with support for logical call context based reentrancy. This class provides the settings to configure the turn based concurrency lock for actors. </p>
metadata: {}
