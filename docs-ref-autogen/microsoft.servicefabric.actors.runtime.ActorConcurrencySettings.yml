### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  id: ActorConcurrencySettings
  parent: microsoft.servicefabric.actors.runtime
  children:
  - microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings()
  - microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout()
  - microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode()
  - microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout(Duration)
  - microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode)
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: ActorConcurrencySettings
  nameWithType: ActorConcurrencySettings
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  type: Class
  source:
    remote: &o0
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 11
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>The method calls on an actor dispatched via in turn with support for logical call context based reentrancy. This class provides the settings to configure the turn based concurrency lock for actors. </p>"
  syntax: &o1
    content: public class ActorConcurrencySettings
  inheritance:
  - java.lang.Object
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings()
  id: ActorConcurrencySettings()
  parent: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: ActorConcurrencySettings()
  nameWithType: ActorConcurrencySettings.ActorConcurrencySettings()
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings()
  overload: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings*
  type: Constructor
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 20
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>Initializes a new instance of the ActorConcurrencySettings class. </p>"
  syntax:
    content: public ActorConcurrencySettings()
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout()
  id: getLockTimeout()
  parent: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: getLockTimeout()
  nameWithType: ActorConcurrencySettings.getLockTimeout()
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout()
  overload: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 59
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>sets timeout for the turn based concurrency lock. If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\"></xref> exception. This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times. The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value.</p>\r\n<p></p>"
  syntax:
    content: public Duration getLockTimeout()
    return:
      type: e02a2de0
      description: <p>Timeout for the turn based concurrency lock. </p>
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode()
  id: getReentrancyMode()
  parent: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: getReentrancyMode()
  nameWithType: ActorConcurrencySettings.getReentrancyMode()
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode()
  overload: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 35
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>gets Reentrancy mode for actor method calls.</p>\r\n<p></p>"
  syntax:
    content: public ActorReentrancyMode getReentrancyMode()
    return:
      type: microsoft.servicefabric.actors.runtime.ActorReentrancyMode
      description: >-
        <p>

          <xref uid="microsoft.servicefabric.actors.runtime.ActorReentrancyMode" data-throw-if-not-resolved="false" data-raw-source="ActorReentrancyMode"></xref> for the actor method calls. </p>
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout(Duration)
  id: setLockTimeout(Duration)
  parent: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: setLockTimeout(Duration timeout)
  nameWithType: ActorConcurrencySettings.setLockTimeout(Duration timeout)
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout(Duration timeout)
  overload: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 73
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>sets timeout for the turn based concurrency lock. If the runtime cannot acquire the lock to dispatch the method call, it will throw <xref uid=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\"></xref> exception.</p>\r\n<p></p>"
  syntax:
    content: public void setLockTimeout(Duration timeout)
    parameters:
    - id: timeout
      type: e02a2de0
      description: <p>This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times. The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to the supplied value. </p>
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode)
  id: setReentrancyMode(ActorReentrancyMode)
  parent: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  langs:
  - java
  name: setReentrancyMode(ActorReentrancyMode mode)
  nameWithType: ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode(ActorReentrancyMode mode)
  overload: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode*
  type: Method
  source:
    remote: *o0
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/runtime/ActorConcurrencySettings.java
    startLine: 45
  package: microsoft.servicefabric.actors.runtime
  summary: "<p>sets Reentrancy mode for actor method calls.</p>\r\n<p></p>"
  syntax:
    content: public void setReentrancyMode(ActorReentrancyMode mode)
    parameters:
    - id: mode
      type: microsoft.servicefabric.actors.runtime.ActorReentrancyMode
      description: <p>reentrancy mode. <xref uid="microsoft.servicefabric.actors.runtime.ActorReentrancyMode" data-throw-if-not-resolved="false" data-raw-source="ActorReentrancyMode"></xref> for the actor method calls. </p>
references:
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings*
  name: ActorConcurrencySettings
  nameWithType: ActorConcurrencySettings.ActorConcurrencySettings
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.ActorConcurrencySettings
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode*
  name: getReentrancyMode
  nameWithType: ActorConcurrencySettings.getReentrancyMode
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getReentrancyMode
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode*
  name: setReentrancyMode
  nameWithType: ActorConcurrencySettings.setReentrancyMode
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setReentrancyMode
  package: microsoft.servicefabric.actors.runtime
- uid: e02a2de0
  spec.java:
  - name: Duration
    fullName: Duration
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout*
  name: getLockTimeout
  nameWithType: ActorConcurrencySettings.getLockTimeout
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.getLockTimeout
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout*
  name: setLockTimeout
  nameWithType: ActorConcurrencySettings.setLockTimeout
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.setLockTimeout
  package: microsoft.servicefabric.actors.runtime
- uid: microsoft.servicefabric.actors.runtime.ActorReentrancyMode
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime.ActorReentrancyMode.yml
  name: ActorReentrancyMode
  nameWithType: ActorReentrancyMode
  fullName: microsoft.servicefabric.actors.runtime.ActorReentrancyMode
  type: Enum
  summary: "<p>Specifies Reentrancy mode for actor method calls. </p>"
  syntax:
    content: public enum ActorReentrancyMode
- uid: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException
  parent: microsoft.servicefabric.actors
  href: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException.yml
  name: ActorConcurrencyLockTimeoutException
  nameWithType: ActorConcurrencyLockTimeoutException
  fullName: microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException
  type: Class
  summary: "<p>Exception thrown by actor runtime when runtime cannot acquire the turn based concurrency lock to dispatch the method. </p>"
  syntax:
    content: public class ActorConcurrencyLockTimeoutException extends FabricException
- uid: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  parent: microsoft.servicefabric.actors.runtime
  href: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings.yml
  name: ActorConcurrencySettings
  nameWithType: ActorConcurrencySettings
  fullName: microsoft.servicefabric.actors.runtime.ActorConcurrencySettings
  type: Class
  summary: "<p>The method calls on an actor dispatched via in turn with support for logical call context based reentrancy. This class provides the settings to configure the turn based concurrency lock for actors. </p>"
  syntax: *o1
