### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.add(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  name: add(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  nameWithType: StorageAccounts.add(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to add </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and optional suffix for the Azure Storage Account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters&text=AddStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to add an Azure Storage account.</p>

    <p></p>
  syntax: public void add(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.add(String,String,String,AddStorageAccountParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  name: addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  nameWithType: StorageAccounts.addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to add </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and optional suffix for the Azure Storage Account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters&text=AddStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to add an Azure Storage account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addAsync(String,String,String,AddStorageAccountParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: StorageAccounts.addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to add </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and optional suffix for the Azure Storage Account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters&text=AddStorageAccountParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to add an Azure Storage account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addAsync(String,String,String,AddStorageAccountParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  name: addWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  nameWithType: StorageAccounts.addWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to add the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to add </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and optional suffix for the Azure Storage Account. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.AddStorageAccountParameters&text=AddStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to add an Azure Storage account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> addWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.addWithServiceResponseAsync(String,String,String,AddStorageAccountParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.delete(String resourceGroupName, String accountName, String storageAccountName)
  name: delete(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.delete(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to remove </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to remove an Azure Storage account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.delete(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: deleteAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.deleteAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to remove </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to remove an Azure Storage account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: StorageAccounts.deleteAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to remove </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to remove an Azure Storage account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to remove the Azure Storage account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account to remove </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified Data Lake Analytics account to remove an Azure Storage account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.get(String resourceGroupName, String accountName, String storageAccountName)
  name: get(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.get(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve Azure storage account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account for which to retrieve the details. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the StorageAccountInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Azure Storage account linked to the given Data Lake Analytics account.</p>

    <p></p>
  syntax: public StorageAccountInfo get(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.get(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: getAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.getAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve Azure storage account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account for which to retrieve the details. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the StorageAccountInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Azure Storage account linked to the given Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<StorageAccountInfo> getAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<StorageAccountInfo> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<StorageAccountInfo> serviceCallback)
  nameWithType: StorageAccounts.getAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<StorageAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve Azure storage account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account for which to retrieve the details. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Azure Storage account linked to the given Data Lake Analytics account.</p>

    <p></p>
  syntax: public ServiceFuture<StorageAccountInfo> getAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<StorageAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getAsync(String,String,String,final ServiceCallback<StorageAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainer(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  name: getStorageContainer(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  nameWithType: StorageAccounts.getStorageContainer(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to retrieve blob container. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to retrieve the blob container. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container to retrieve </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the StorageContainer object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure Storage accounts.</p>

    <p></p>
  syntax: public StorageContainer getStorageContainer(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainer(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  name: getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  nameWithType: StorageAccounts.getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to retrieve blob container. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to retrieve the blob container. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container to retrieve </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the StorageContainer object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure Storage accounts.</p>

    <p></p>
  syntax: public Observable<StorageContainer> getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName, final ServiceCallback<StorageContainer> serviceCallback)
  name: getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName, final ServiceCallback<StorageContainer> serviceCallback)
  nameWithType: StorageAccounts.getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName, final ServiceCallback<StorageContainer> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to retrieve blob container. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to retrieve the blob container. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container to retrieve </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure Storage accounts.</p>

    <p></p>
  syntax: public ServiceFuture<StorageContainer> getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName, final ServiceCallback<StorageContainer> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerAsync(String,String,String,String,final ServiceCallback<StorageContainer>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  name: getStorageContainerWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  nameWithType: StorageAccounts.getStorageContainerWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to retrieve blob container. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to retrieve the blob container. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container to retrieve </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the StorageContainer object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure Storage accounts.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<StorageContainer>> getStorageContainerWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getStorageContainerWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.getWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to retrieve Azure storage account details. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Storage account for which to retrieve the details. </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the StorageAccountInfo object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Azure Storage account linked to the given Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<StorageAccountInfo>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccount(final String resourceGroupName, final String accountName)
  name: listByAccount(final String resourceGroupName, final String accountName)
  nameWithType: StorageAccounts.listByAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;StorageAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<StorageAccountInfo> listByAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccount(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: StorageAccounts.listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;StorageAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<StorageAccountInfo> listByAccount(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccount(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName)
  name: listByAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<StorageAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  nameWithType: StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String,final String,final ListOperationCallback<StorageAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<StorageAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  nameWithType: StorageAccounts.listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageAccountInfo>> listByAccountAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<StorageAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNext(final String nextPageLink)
  name: listByAccountNext(final String nextPageLink)
  nameWithType: StorageAccounts.listByAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;StorageAccountInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public PagedList<StorageAccountInfo> listByAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextAsync(final String nextPageLink)
  name: listByAccountNextAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listByAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<Page<StorageAccountInfo>> listByAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<StorageAccountInfo>> serviceFuture, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  name: listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<StorageAccountInfo>> serviceFuture, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  nameWithType: StorageAccounts.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<StorageAccountInfo>> serviceFuture, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageAccountInfo>> listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<StorageAccountInfo>> serviceFuture, final ListOperationCallback<StorageAccountInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextAsync(final String,final ServiceFuture<List<StorageAccountInfo>>,final ListOperationCallback<StorageAccountInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<StorageAccountInfo>>> listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: StorageAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<StorageAccountInfo>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: StorageAccounts.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage accounts. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageAccountInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo?alt=com.microsoft.azure.management.datalake.analytics.models.StorageAccountInfo&text=StorageAccountInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account. The response includes a link to the next page, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<StorageAccountInfo>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listByAccountWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokens(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  name: listSasTokens(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  nameWithType: StorageAccounts.listSasTokens(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which an Azure Storage account's SAS token is being requested. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account for which the SAS token is being requested. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container for which the SAS token is being requested. </p>
    name: containerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;SasTokenInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public PagedList<SasTokenInfo> listSasTokens(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokens(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  name: listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  nameWithType: StorageAccounts.listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which an Azure Storage account's SAS token is being requested. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account for which the SAS token is being requested. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container for which the SAS token is being requested. </p>
    name: containerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;SasTokenInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public Observable<Page<SasTokenInfo>> listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName, final ListOperationCallback<SasTokenInfo> serviceCallback)
  name: listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName, final ListOperationCallback<SasTokenInfo> serviceCallback)
  nameWithType: StorageAccounts.listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName, final ListOperationCallback<SasTokenInfo> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which an Azure Storage account's SAS token is being requested. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account for which the SAS token is being requested. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container for which the SAS token is being requested. </p>
    name: containerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public ServiceFuture<List<SasTokenInfo>> listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName, final ListOperationCallback<SasTokenInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensAsync(final String,final String,final String,final String,final ListOperationCallback<SasTokenInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNext(final String nextPageLink)
  name: listSasTokensNext(final String nextPageLink)
  nameWithType: StorageAccounts.listSasTokensNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;SasTokenInfo&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public PagedList<SasTokenInfo> listSasTokensNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextAsync(final String nextPageLink)
  name: listSasTokensNextAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listSasTokensNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;SasTokenInfo&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public Observable<Page<SasTokenInfo>> listSasTokensNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextAsync(final String nextPageLink, final ServiceFuture<List<SasTokenInfo>> serviceFuture, final ListOperationCallback<SasTokenInfo> serviceCallback)
  name: listSasTokensNextAsync(final String nextPageLink, final ServiceFuture<List<SasTokenInfo>> serviceFuture, final ListOperationCallback<SasTokenInfo> serviceCallback)
  nameWithType: StorageAccounts.listSasTokensNextAsync(final String nextPageLink, final ServiceFuture<List<SasTokenInfo>> serviceFuture, final ListOperationCallback<SasTokenInfo> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public ServiceFuture<List<SasTokenInfo>> listSasTokensNextAsync(final String nextPageLink, final ServiceFuture<List<SasTokenInfo>> serviceFuture, final ListOperationCallback<SasTokenInfo> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextAsync(final String,final ServiceFuture<List<SasTokenInfo>>,final ListOperationCallback<SasTokenInfo>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextWithServiceResponseAsync(final String nextPageLink)
  name: listSasTokensNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listSasTokensNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;SasTokenInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<SasTokenInfo>>> listSasTokensNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  name: listSasTokensWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  nameWithType: StorageAccounts.listSasTokensWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which an Azure Storage account's SAS token is being requested. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account for which the SAS token is being requested. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage container for which the SAS token is being requested. </p>
    name: containerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;SasTokenInfo&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo?alt=com.microsoft.azure.management.datalake.analytics.models.SasTokenInfo&text=SasTokenInfo" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and container combination.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<SasTokenInfo>>> listSasTokensWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listSasTokensWithServiceResponseAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainers(final String resourceGroupName, final String accountName, final String storageAccountName)
  name: listStorageContainers(final String resourceGroupName, final String accountName, final String storageAccountName)
  nameWithType: StorageAccounts.listStorageContainers(final String resourceGroupName, final String accountName, final String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage blob containers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to list blob containers. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;StorageContainer&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<StorageContainer> listStorageContainers(final String resourceGroupName, final String accountName, final String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainers(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  name: listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  nameWithType: StorageAccounts.listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage blob containers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to list blob containers. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageContainer&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<StorageContainer>> listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final ListOperationCallback<StorageContainer> serviceCallback)
  name: listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final ListOperationCallback<StorageContainer> serviceCallback)
  nameWithType: StorageAccounts.listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final ListOperationCallback<StorageContainer> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage blob containers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to list blob containers. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageContainer>> listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final ListOperationCallback<StorageContainer> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersAsync(final String,final String,final String,final ListOperationCallback<StorageContainer>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNext(final String nextPageLink)
  name: listStorageContainersNext(final String nextPageLink)
  nameWithType: StorageAccounts.listStorageContainersNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;StorageContainer&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public PagedList<StorageContainer> listStorageContainersNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextAsync(final String nextPageLink)
  name: listStorageContainersNextAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listStorageContainersNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageContainer&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<Page<StorageContainer>> listStorageContainersNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextAsync(final String nextPageLink, final ServiceFuture<List<StorageContainer>> serviceFuture, final ListOperationCallback<StorageContainer> serviceCallback)
  name: listStorageContainersNextAsync(final String nextPageLink, final ServiceFuture<List<StorageContainer>> serviceFuture, final ListOperationCallback<StorageContainer> serviceCallback)
  nameWithType: StorageAccounts.listStorageContainersNextAsync(final String nextPageLink, final ServiceFuture<List<StorageContainer>> serviceFuture, final ListOperationCallback<StorageContainer> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageContainer>> listStorageContainersNextAsync(final String nextPageLink, final ServiceFuture<List<StorageContainer>> serviceFuture, final ListOperationCallback<StorageContainer> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextAsync(final String,final ServiceFuture<List<StorageContainer>>,final ListOperationCallback<StorageContainer>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextWithServiceResponseAsync(final String nextPageLink)
  name: listStorageContainersNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: StorageAccounts.listStorageContainersNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageContainer&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<StorageContainer>>> listStorageContainersNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  name: listStorageContainersWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  nameWithType: StorageAccounts.listStorageContainersWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account for which to list Azure Storage blob containers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure storage account from which to list blob containers. </p>
    name: storageAccountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;StorageContainer&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.StorageContainer?alt=com.microsoft.azure.management.datalake.analytics.models.StorageContainer&text=StorageContainer" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and Azure Storage account combination. The response includes a link to the next page of results, if any.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<StorageContainer>>> listStorageContainersWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.listStorageContainersWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.update(String resourceGroupName, String accountName, String storageAccountName)
  name: update(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.update(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public void update(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.update(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.update(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  name: update(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  nameWithType: StorageAccounts.update(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and suffix to update the storage account with, if any. Passing nothing results in no change. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters&text=UpdateStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public void update(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.update(String,String,String,UpdateStorageAccountParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: updateAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  nameWithType: StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String resourceGroupName, String accountName, String storageAccountName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  name: updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  nameWithType: StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and suffix to update the storage account with, if any. Passing nothing results in no change. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters&text=UpdateStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String,String,String,UpdateStorageAccountParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: StorageAccounts.updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and suffix to update the storage account with, if any. Passing nothing results in no change. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters&text=UpdateStorageAccountParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateAsync(String,String,String,UpdateStorageAccountParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  nameWithType: StorageAccounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  nameWithType: StorageAccounts.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to modify storage accounts in </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Storage account to modify </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters containing the access key and suffix to update the storage account with, if any. Passing nothing results in no change. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters?alt=com.microsoft.azure.management.datalake.analytics.models.UpdateStorageAccountParameters&text=UpdateStorageAccountParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the access key and/or suffix.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String storageAccountName, UpdateStorageAccountParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts.updateWithServiceResponseAsync(String,String,String,UpdateStorageAccountParameters)
nameWithType: StorageAccounts
syntax: public interface StorageAccounts
type: interface
uid: com.microsoft.azure.management.datalake.analytics.StorageAccounts
fullName: com.microsoft.azure.management.datalake.analytics.StorageAccounts
name: StorageAccounts
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in StorageAccounts. </p>
metadata: {}
