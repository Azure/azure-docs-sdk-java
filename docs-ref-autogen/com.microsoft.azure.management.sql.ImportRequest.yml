### YamlMime:JavaType
uid: "com.microsoft.azure.management.sql.ImportRequest"
fullName: "com.microsoft.azure.management.sql.ImportRequest"
name: "ImportRequest"
nameWithType: "ImportRequest"
summary: "Import database parameters."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.management.sql.ExportRequest?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.management.sql.ExportRequest.administratorLogin()"
- "com.microsoft.azure.management.sql.ExportRequest.administratorLoginPassword()"
- "com.microsoft.azure.management.sql.ExportRequest.authenticationType()"
- "com.microsoft.azure.management.sql.ExportRequest.storageKey()"
- "com.microsoft.azure.management.sql.ExportRequest.storageKeyType()"
- "com.microsoft.azure.management.sql.ExportRequest.storageUri()"
- "com.microsoft.azure.management.sql.ExportRequest.withAdministratorLogin(java.lang.String)"
- "com.microsoft.azure.management.sql.ExportRequest.withAdministratorLoginPassword(java.lang.String)"
- "com.microsoft.azure.management.sql.ExportRequest.withAuthenticationType(com.microsoft.azure.management.sql.AuthenticationType)"
- "com.microsoft.azure.management.sql.ExportRequest.withStorageKey(java.lang.String)"
- "com.microsoft.azure.management.sql.ExportRequest.withStorageKeyType(com.microsoft.azure.management.sql.StorageKeyType)"
- "com.microsoft.azure.management.sql.ExportRequest.withStorageUri(java.lang.String)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ImportRequest extends ExportRequest"
constructors:
- uid: "com.microsoft.azure.management.sql.ImportRequest.ImportRequest()"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.ImportRequest()"
  name: "ImportRequest()"
  nameWithType: "ImportRequest.ImportRequest()"
  syntax: "public ImportRequest()"
methods:
- uid: "com.microsoft.azure.management.sql.ImportRequest.databaseName()"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.databaseName()"
  name: "databaseName()"
  nameWithType: "ImportRequest.databaseName()"
  summary: "Get the name of the database to import."
  syntax: "public String databaseName()"
  desc: "Get the name of the database to import."
  returns:
    description: "the databaseName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.edition()"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.edition()"
  name: "edition()"
  nameWithType: "ImportRequest.edition()"
  summary: "Get the edition for the database being created."
  syntax: "public DatabaseEdition edition()"
  desc: "Get the edition for the database being created. The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the \\`Capabilities\\_ListByLocation\\` REST API or one of the following commands: \\`\\`\\`azurecli az sql db list-editions -l <location> -o table \\`\\`\\`\\` \\`\\`\\`powershell Get-AzSqlServerServiceObjective -Location <location> \\`\\`\\`\\` . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical', 'Hyperscale'."
  returns:
    description: "the edition value"
    type: "<xref href=\"com.microsoft.azure.management.sql.DatabaseEdition?alt=com.microsoft.azure.management.sql.DatabaseEdition&text=DatabaseEdition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.maxSizeBytes()"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.maxSizeBytes()"
  name: "maxSizeBytes()"
  nameWithType: "ImportRequest.maxSizeBytes()"
  summary: "Get the maximum size for the newly imported database."
  syntax: "public String maxSizeBytes()"
  desc: "Get the maximum size for the newly imported database."
  returns:
    description: "the maxSizeBytes value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.serviceObjectiveName()"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.serviceObjectiveName()"
  name: "serviceObjectiveName()"
  nameWithType: "ImportRequest.serviceObjectiveName()"
  summary: "Get the name of the service objective to assign to the database."
  syntax: "public ServiceObjectiveName serviceObjectiveName()"
  desc: "Get the name of the service objective to assign to the database. Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'."
  returns:
    description: "the serviceObjectiveName value"
    type: "<xref href=\"com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.withDatabaseName(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.withDatabaseName(String databaseName)"
  name: "withDatabaseName(String databaseName)"
  nameWithType: "ImportRequest.withDatabaseName(String databaseName)"
  summary: "Set the name of the database to import."
  parameters:
  - description: "the databaseName value to set"
    name: "databaseName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImportRequest withDatabaseName(String databaseName)"
  desc: "Set the name of the database to import."
  returns:
    description: "the ImportRequest object itself."
    type: "<xref href=\"com.microsoft.azure.management.sql.ImportRequest?alt=com.microsoft.azure.management.sql.ImportRequest&text=ImportRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.withEdition(com.microsoft.azure.management.sql.DatabaseEdition)"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.withEdition(DatabaseEdition edition)"
  name: "withEdition(DatabaseEdition edition)"
  nameWithType: "ImportRequest.withEdition(DatabaseEdition edition)"
  summary: "Set the edition for the database being created."
  parameters:
  - description: "the edition value to set"
    name: "edition"
    type: "<xref href=\"com.microsoft.azure.management.sql.DatabaseEdition?alt=com.microsoft.azure.management.sql.DatabaseEdition&text=DatabaseEdition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImportRequest withEdition(DatabaseEdition edition)"
  desc: "Set the edition for the database being created. The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the \\`Capabilities\\_ListByLocation\\` REST API or one of the following commands: \\`\\`\\`azurecli az sql db list-editions -l <location> -o table \\`\\`\\`\\` \\`\\`\\`powershell Get-AzSqlServerServiceObjective -Location <location> \\`\\`\\`\\` . Possible values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System', 'System2', 'GeneralPurpose', 'BusinessCritical', 'Hyperscale'."
  returns:
    description: "the ImportRequest object itself."
    type: "<xref href=\"com.microsoft.azure.management.sql.ImportRequest?alt=com.microsoft.azure.management.sql.ImportRequest&text=ImportRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.withMaxSizeBytes(java.lang.String)"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.withMaxSizeBytes(String maxSizeBytes)"
  name: "withMaxSizeBytes(String maxSizeBytes)"
  nameWithType: "ImportRequest.withMaxSizeBytes(String maxSizeBytes)"
  summary: "Set the maximum size for the newly imported database."
  parameters:
  - description: "the maxSizeBytes value to set"
    name: "maxSizeBytes"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImportRequest withMaxSizeBytes(String maxSizeBytes)"
  desc: "Set the maximum size for the newly imported database."
  returns:
    description: "the ImportRequest object itself."
    type: "<xref href=\"com.microsoft.azure.management.sql.ImportRequest?alt=com.microsoft.azure.management.sql.ImportRequest&text=ImportRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.sql.ImportRequest.withServiceObjectiveName(com.microsoft.azure.management.sql.ServiceObjectiveName)"
  fullName: "com.microsoft.azure.management.sql.ImportRequest.withServiceObjectiveName(ServiceObjectiveName serviceObjectiveName)"
  name: "withServiceObjectiveName(ServiceObjectiveName serviceObjectiveName)"
  nameWithType: "ImportRequest.withServiceObjectiveName(ServiceObjectiveName serviceObjectiveName)"
  summary: "Set the name of the service objective to assign to the database."
  parameters:
  - description: "the serviceObjectiveName value to set"
    name: "serviceObjectiveName"
    type: "<xref href=\"com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImportRequest withServiceObjectiveName(ServiceObjectiveName serviceObjectiveName)"
  desc: "Set the name of the service objective to assign to the database. Possible values include: 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'."
  returns:
    description: "the ImportRequest object itself."
    type: "<xref href=\"com.microsoft.azure.management.sql.ImportRequest?alt=com.microsoft.azure.management.sql.ImportRequest&text=ImportRequest\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Import database parameters."
metadata: {}
package: "com.microsoft.azure.management.sql"
artifact: com.microsoft.azure:azure-mgmt-sql:1.41.4
