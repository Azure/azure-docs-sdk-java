### YamlMime:ManagedReference
items:
- uid: microsoft.servicefabric.actors.remoting.client
  id: client
  children:
  - microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  - microsoft.servicefabric.actors.remoting.client.ActorServicePartitionClient
  - microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
  href: microsoft.servicefabric.actors.remoting.client.yml
  langs:
  - java
  name: microsoft.servicefabric.actors.remoting.client
  nameWithType: microsoft.servicefabric.actors.remoting.client
  fullName: microsoft.servicefabric.actors.remoting.client
  type: Namespace
  source:
    remote:
      path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/sf-java
    path: src/prod/src/java/microsoft.servicefabric.actors/src/microsoft/servicefabric/actors/remoting/client/ActorRemotingExceptionHandler.java
  syntax:
    content: package microsoft.servicefabric.actors.remoting.client
references:
- uid: microsoft.servicefabric.actors.remoting.client.internal
- uid: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  parent: microsoft.servicefabric.actors.remoting.client
  href: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler.yml
  name: ActorRemotingExceptionHandler
  nameWithType: ActorRemotingExceptionHandler
  fullName: microsoft.servicefabric.actors.remoting.client.ActorRemotingExceptionHandler
  type: Class
  summary: "<p>This class provide handling of exceptions encountered in communicating with service fabric actors over remoted actor interfaces.</p>\r\n<p>\r\n  <b>Remarks:</b> This exception handler handles exceptions related to the following scenarios: </p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>&lt;cite&gt;Duplicate Messages:&lt;/cite&gt; </p>\r\n      <p>Operations performed on the actor are retried from the client based on the exception handling logic. These exceptions represent various error condition including service failover. Therefore it is possible for the actors to receive duplicate messages. If a duplicate message is received while previous message is being processed by the actor, runtime return an internal exception to the client. The client then retries the operation to get the result back from the actor. From the actor's perspective duplicate operation will be performed by the clients and it should handle it in the similar manner as if the operation was already processed and then a duplicate message arrived. </p>\r\n      <p></p>\r\n      <p></p>\r\n    </li>\r\n    <li>\r\n      <p>&lt;cite&gt;<xref uid=\"microsoft.servicefabric.actors.ActorConcurrencyLockTimeoutException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ActorConcurrencyLockTimeoutException\"></xref>:&lt;/cite&gt; </p>\r\n      <p>Operations on the actors are performed using a turn based concurrency lock ( <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ActorConcurrencySettings\"></xref>) that supports logical call context based reentrancy. In case of the long running actor operations it is possible for acquisition of this lock to time out. The acquisition of the lock can also time out in case of the deadlock situations (actor A and actor B calling each other almost at the same time). </p>\r\n      <p></p>\r\n      <p>The exception related to concurrency lock timeout is handled by returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref> from the <xref uid=\"microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandler#handleException(ExceptionInformation, OperationRetrySettings)\"></xref> method if the client performing the operation is not another actor. The <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult#isTransient\"></xref> property of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref> is set to true, the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref>'s retryDelay property is set to a random value up to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OperationRetrySettings\"></xref>'s MaxRetryBackoffIntervalOnTransientErrors and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingRetryResult\"></xref>'s MaxRetryCount property is set to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#MAX_VALUE\"></xref>. </p>\r\n      <p></p>\r\n      <p>The exception related to concurrency lock timeout is handled by returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandlingThrowResult\"></xref> from the <xref uid=\"microsoft.servicefabric.services.communication.client.ExceptionHandler.handleException(ExceptionInformation,OperationRetrySettings)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ExceptionHandler#handleException(ExceptionInformation, OperationRetrySettings)\"></xref> method, if the client performing the operation is another actor. In the deadlock situations this allows the call chain to unwind all the way back to the original client and the operation is then retried from there. </p>\r\n      <p></p>\r\n    </li>\r\n  </ul>\r\n</p>"
  syntax:
    content: public class ActorRemotingExceptionHandler extends ServiceRemotingExceptionHandler
- uid: microsoft.servicefabric.actors.remoting.client.ActorServicePartitionClient
  parent: microsoft.servicefabric.actors.remoting.client
  href: microsoft.servicefabric.actors.remoting.client.ActorServicePartitionClient.yml
  name: ActorServicePartitionClient
  nameWithType: ActorServicePartitionClient
  fullName: microsoft.servicefabric.actors.remoting.client.ActorServicePartitionClient
  type: Interface
  summary: "<p>Defines the interface for the client that communicate with an actor within a service partition. </p>"
  syntax:
    content: public interface ActorServicePartitionClient extends ServiceRemotingPartitionClient
- uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
  parent: microsoft.servicefabric.actors.remoting.client
  href: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.yml
  name: FabricActorProxyFactory
  nameWithType: FabricActorProxyFactory
  fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
  type: Class
  summary: "<p>Factory class to create a proxy to the remote actor objects. </p>"
  syntax:
    content: public class FabricActorProxyFactory implements ActorProxyFactory
