### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.Tasks
  id: Tasks
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol
  children:
  - com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  - com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String)
  - com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  langs:
  - java
  name: Tasks
  nameWithType: Tasks
  fullName: com.microsoft.azure.batch.protocol.Tasks
  type: Interface
  package: com.microsoft.azure.batch.protocol
  summary: An instance of this class provides access to all the operations defined in Tasks.
  syntax:
    content: public interface Tasks
- uid: com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  id: add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: add(String jobId, TaskAddParameter task)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.add*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract void add(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
- uid: com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  id: add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.add*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract void add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  id: addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<Void> addAsync(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  id: addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  id: addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollection(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
      description: the TaskAddCollectionResult object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  id: addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
      description: the TaskAddCollectionResult object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  id: addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the observable to the TaskAddCollectionResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  id: addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the observable to the TaskAddCollectionResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  id: addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  id: addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  id: addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<TaskAddCollectionResult,TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult,com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders>>
      description: the observable to the TaskAddCollectionResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  id: addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<TaskAddCollectionResult,TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task collection is to be added.
    - id: value
      type: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
      description: The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks.
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult,com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders>>
      description: the observable to the TaskAddCollectionResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  id: addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskAddHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  id: addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job to which the Task is to be added.
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: The Task to be added.
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskAddHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String)
  id: delete(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: delete(String jobId, String taskId)
  nameWithType: Tasks.delete(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.delete*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract void delete(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
- uid: com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  id: delete(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.delete*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract void delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String)
  id: deleteAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract Observable<Void> deleteAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  id: deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract Observable<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract ServiceFuture<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: deleteAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract ServiceFuture<Void> deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: deleteWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  id: deleteWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job from which to delete the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to delete.
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String)
  id: get(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: get(String jobId, String taskId)
  nameWithType: Tasks.get(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.get*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract CloudTask get(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTask
      description: the CloudTask object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  id: get(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.get*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract CloudTask get(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTask
      description: the CloudTask object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String)
  id: getAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getAsync(String jobId, String taskId)
  nameWithType: Tasks.getAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<CloudTask> getAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the observable to the CloudTask object
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  id: getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the observable to the CloudTask object
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: getAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<CloudTask> getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: getWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<CloudTask,TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTask,com.microsoft.azure.batch.protocol.models.TaskGetHeaders>>
      description: the observable to the CloudTask object
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  id: getWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<CloudTask,TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job that contains the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to get information about.
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTask,com.microsoft.azure.batch.protocol.models.TaskGetHeaders>>
      description: the observable to the CloudTask object
- uid: com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String)
  id: list(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: list(String jobId)
  nameWithType: Tasks.list(String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.list(String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.list*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract PagedList<CloudTask> list(String jobId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the PagedList&lt;CloudTask&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  id: list(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: list(String jobId, TaskListOptions taskListOptions)
  nameWithType: Tasks.list(String jobId, TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.list(String jobId, TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.list*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract PagedList<CloudTask> list(String jobId, TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskListOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the PagedList&lt;CloudTask&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String)
  id: listAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listAsync(String jobId)
  nameWithType: Tasks.listAsync(String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<Page<CloudTask>> listAsync(String jobId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: listAsync(java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<List<CloudTask>> listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  id: listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listAsync(String jobId, TaskListOptions taskListOptions)
  nameWithType: Tasks.listAsync(String jobId, TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<Page<CloudTask>> listAsync(String jobId, TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskListOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<List<CloudTask>> listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskListOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String)
  id: listNext(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNext(String nextPageLink)
  nameWithType: Tasks.listNext(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract PagedList<CloudTask> listNext(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the PagedList&lt;CloudTask&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  id: listNext(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNext*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract PagedList<CloudTask> listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: taskListNextOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the PagedList&lt;CloudTask&gt; object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String)
  id: listNextAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextAsync(String nextPageLink)
  nameWithType: Tasks.listNextAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<Page<CloudTask>> listNextAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  id: listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<Page<CloudTask>> listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: taskListNextOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<List<CloudTask>> listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: taskListNextOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: Additional parameters for the operation
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  id: listNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract ServiceFuture<List<CloudTask>> listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: serviceFuture
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the ServiceFuture object tracking the Retrofit calls
    - id: serviceCallback
      type: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String)
  id: listNextWithServiceResponseAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextWithServiceResponseAsync(String nextPageLink)
  nameWithType: Tasks.listNextWithServiceResponseAsync(String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listNextWithServiceResponseAsync(String nextPageLink)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  id: listNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: java.lang.String
      description: The NextLink from the previous successful call to List operation.
    - id: taskListNextOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String)
  id: listSubtasks(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasks(String jobId, String taskId)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
      description: the CloudTaskListSubtasksResult object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  id: listSubtasks(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: Additional parameters for the operation
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
      description: the CloudTaskListSubtasksResult object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String)
  id: listSubtasksAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the observable to the CloudTaskListSubtasksResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  id: listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the observable to the CloudTaskListSubtasksResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  id: listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  id: listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult,TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult,com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders>>
      description: the observable to the CloudTaskListSubtasksResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  id: listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult,TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task.
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult,com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders>>
      description: the observable to the CloudTaskListSubtasksResult object
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String)
  id: listWithServiceResponseAsync(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listWithServiceResponseAsync(String jobId)
  nameWithType: Tasks.listWithServiceResponseAsync(String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listWithServiceResponseAsync(String jobId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  id: listWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)
  nameWithType: Tasks.listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job.
    - id: taskListOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders>>
      description: the observable to the PagedList&lt;CloudTask&gt; object
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String)
  id: reactivate(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivate(String jobId, String taskId)
  nameWithType: Tasks.reactivate(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract void reactivate(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  id: reactivate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract void reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String)
  id: reactivateAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract Observable<Void> reactivateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  id: reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract Observable<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract ServiceFuture<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: reactivateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract ServiceFuture<Void> reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: reactivateWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  id: reactivateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting).
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to reactivate.
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String)
  id: terminate(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminate(String jobId, String taskId)
  nameWithType: Tasks.terminate(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminate*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract void terminate(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  id: terminate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminate*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract void terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String)
  id: terminateAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract Observable<Void> terminateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  id: terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract Observable<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract ServiceFuture<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: terminateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract ServiceFuture<Void> terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: terminateWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  id: terminateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to terminate.
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String)
  id: update(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: update(String jobId, String taskId)
  nameWithType: Tasks.update(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.update*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract void update(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
- uid: com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  id: update(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.update*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract void update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks.
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: Additional parameters for the operation
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String)
  id: updateAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateAsync(String jobId, String taskId)
  nameWithType: Tasks.updateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract Observable<Void> updateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  id: updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract Observable<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks.
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract ServiceFuture<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks.
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: Additional parameters for the operation
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  id: updateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract ServiceFuture<Void> updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    - id: serviceCallback
      type: com.microsoft.rest.ServiceCallback<java.lang.Void>
      description: the async ServiceCallback to handle successful and failed responses.
    return:
      type: com.microsoft.rest.ServiceFuture<java.lang.Void>
      description: the <xref uid="com.microsoft.rest.ServiceFuture" data-throw-if-not-resolved="false">ServiceFuture</xref> object
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String)
  id: updateWithServiceResponseAsync(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  id: updateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.Tasks
  langs:
  - java
  name: updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  type: Method
  package: com.microsoft.azure.batch.protocol
  summary: Updates the properties of the specified Task.
  syntax:
    content: public abstract Observable<ServiceResponseWithHeaders<Void,TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: java.lang.String
      description: The ID of the Job containing the Task.
    - id: taskId
      type: java.lang.String
      description: The ID of the Task to update.
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks.
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: Additional parameters for the operation
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders>>
      description: the <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter
  name: TaskAddParameter
  nameWithType: TaskAddParameter
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter
- uid: com.microsoft.azure.batch.protocol.Tasks.add*
  name: add
  nameWithType: Tasks.add
  fullName: com.microsoft.azure.batch.protocol.Tasks.add
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.rest.ServiceCallback<java.lang.Void>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<java.lang.Void>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  name: addAsync
  nameWithType: Tasks.addAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<java.lang.Void>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskAddHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
    name: TaskAddHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  name: addWithServiceResponseAsync
  nameWithType: Tasks.addWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskAddOptions
  name: TaskAddOptions
  nameWithType: TaskAddOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddOptions
- uid: com.microsoft.azure.PagedList<com.microsoft.azure.batch.protocol.models.CloudTask>
  spec.java:
  - uid: com.microsoft.azure.PagedList
    name: PagedList
    fullName: com.microsoft.azure.PagedList
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.list*
  name: list
  nameWithType: Tasks.list
  fullName: com.microsoft.azure.batch.protocol.Tasks.list
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
  spec.java:
  - uid: com.microsoft.azure.ListOperationCallback
    name: ListOperationCallback
    fullName: com.microsoft.azure.ListOperationCallback
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  name: listAsync
  nameWithType: Tasks.listAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.Page
    name: Page
    fullName: com.microsoft.azure.Page
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.Page<com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.Page
    name: Page
    fullName: com.microsoft.azure.Page
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskListHeaders
    name: TaskListHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskListHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  name: listWithServiceResponseAsync
  nameWithType: Tasks.listWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskListOptions
  name: TaskListOptions
  nameWithType: TaskListOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListOptions
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter
    name: TaskAddParameter
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  name: TaskAddCollectionResult
  nameWithType: TaskAddCollectionResult
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  name: addCollection
  nameWithType: Tasks.addCollection
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  name: addCollectionAsync
  nameWithType: Tasks.addCollectionAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult,com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
    name: TaskAddCollectionHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  name: addCollectionWithServiceResponseAsync
  nameWithType: Tasks.addCollectionWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
  name: TaskAddCollectionOptions
  nameWithType: TaskAddCollectionOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
- uid: com.microsoft.azure.batch.protocol.Tasks.delete*
  name: delete
  nameWithType: Tasks.delete
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  name: deleteAsync
  nameWithType: Tasks.deleteAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
    name: TaskDeleteHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  name: deleteWithServiceResponseAsync
  nameWithType: Tasks.deleteWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
  name: TaskDeleteOptions
  nameWithType: TaskDeleteOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
- uid: com.microsoft.azure.batch.protocol.models.CloudTask
  name: CloudTask
  nameWithType: CloudTask
  fullName: com.microsoft.azure.batch.protocol.models.CloudTask
- uid: com.microsoft.azure.batch.protocol.Tasks.get*
  name: get
  nameWithType: Tasks.get
  fullName: com.microsoft.azure.batch.protocol.Tasks.get
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTask>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  name: getAsync
  nameWithType: Tasks.getAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTask>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTask,com.microsoft.azure.batch.protocol.models.TaskGetHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
    name: TaskGetHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  name: getWithServiceResponseAsync
  nameWithType: Tasks.getWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskGetOptions
  name: TaskGetOptions
  nameWithType: TaskGetOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskGetOptions
- uid: com.microsoft.azure.batch.protocol.Tasks.update*
  name: update
  nameWithType: Tasks.update
  fullName: com.microsoft.azure.batch.protocol.Tasks.update
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  name: updateAsync
  nameWithType: Tasks.updateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
    name: TaskUpdateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  name: updateWithServiceResponseAsync
  nameWithType: Tasks.updateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskConstraints
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: com.microsoft.azure.batch.protocol.models.TaskConstraints
- uid: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
  name: TaskUpdateOptions
  nameWithType: TaskUpdateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
- uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  name: CloudTaskListSubtasksResult
  nameWithType: CloudTaskListSubtasksResult
  fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  name: listSubtasks
  nameWithType: Tasks.listSubtasks
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
  spec.java:
  - uid: com.microsoft.rest.ServiceCallback
    name: ServiceCallback
    fullName: com.microsoft.rest.ServiceCallback
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  - name: '>'
    fullName: '>'
- uid: com.microsoft.rest.ServiceFuture<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
  spec.java:
  - uid: com.microsoft.rest.ServiceFuture
    name: ServiceFuture
    fullName: com.microsoft.rest.ServiceFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  name: listSubtasksAsync
  nameWithType: Tasks.listSubtasksAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  - name: '>'
    fullName: '>'
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult,com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
    name: TaskListSubtasksHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  name: listSubtasksWithServiceResponseAsync
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
  name: TaskListSubtasksOptions
  nameWithType: TaskListSubtasksOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate*
  name: terminate
  nameWithType: Tasks.terminate
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  name: terminateAsync
  nameWithType: Tasks.terminateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
    name: TaskTerminateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  name: terminateWithServiceResponseAsync
  nameWithType: Tasks.terminateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
  name: TaskTerminateOptions
  nameWithType: TaskTerminateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  name: reactivate
  nameWithType: Tasks.reactivate
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  name: reactivateAsync
  nameWithType: Tasks.reactivateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync
  package: com.microsoft.azure.batch.protocol
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
    name: TaskReactivateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  name: reactivateWithServiceResponseAsync
  nameWithType: Tasks.reactivateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
  name: TaskReactivateOptions
  nameWithType: TaskReactivateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext*
  name: listNext
  nameWithType: Tasks.listNext
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  name: listNextAsync
  nameWithType: Tasks.listNextAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  name: listNextWithServiceResponseAsync
  nameWithType: Tasks.listNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
  name: TaskListNextOptions
  nameWithType: TaskListNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.microsoft.rest.ServiceCallback
  name: ServiceCallback
  nameWithType: ServiceCallback
  fullName: com.microsoft.rest.ServiceCallback
- uid: com.microsoft.rest.ServiceFuture
  name: ServiceFuture
  nameWithType: ServiceFuture
  fullName: com.microsoft.rest.ServiceFuture
- uid: rx.Observable
  name: Observable
  nameWithType: Observable
  fullName: rx.Observable
- uid: com.microsoft.rest.ServiceResponseWithHeaders
  name: ServiceResponseWithHeaders
  nameWithType: ServiceResponseWithHeaders
  fullName: com.microsoft.rest.ServiceResponseWithHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskAddHeaders
  name: Void,TaskAddHeaders
  nameWithType: Void,TaskAddHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskAddHeaders
- uid: com.microsoft.azure.PagedList
  name: PagedList
  nameWithType: PagedList
  fullName: com.microsoft.azure.PagedList
- uid: com.microsoft.azure.ListOperationCallback
  name: ListOperationCallback
  nameWithType: ListOperationCallback
  fullName: com.microsoft.azure.ListOperationCallback
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.microsoft.azure.Page
  name: Page
  nameWithType: Page
  fullName: com.microsoft.azure.Page
- uid: com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders
  name: CloudTask>,TaskListHeaders
  nameWithType: CloudTask>,TaskListHeaders
  fullName: com.microsoft.azure.batch.protocol.models.CloudTask>,com.microsoft.azure.batch.protocol.models.TaskListHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult,com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
  name: TaskAddCollectionResult,TaskAddCollectionHeaders
  nameWithType: TaskAddCollectionResult,TaskAddCollectionHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult,com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
  name: Void,TaskDeleteHeaders
  nameWithType: Void,TaskDeleteHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
- uid: com.microsoft.azure.batch.protocol.models.CloudTask,com.microsoft.azure.batch.protocol.models.TaskGetHeaders
  name: CloudTask,TaskGetHeaders
  nameWithType: CloudTask,TaskGetHeaders
  fullName: com.microsoft.azure.batch.protocol.models.CloudTask,com.microsoft.azure.batch.protocol.models.TaskGetHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
  name: Void,TaskUpdateHeaders
  nameWithType: Void,TaskUpdateHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
- uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult,com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
  name: CloudTaskListSubtasksResult,TaskListSubtasksHeaders
  nameWithType: CloudTaskListSubtasksResult,TaskListSubtasksHeaders
  fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult,com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
  name: Void,TaskTerminateHeaders
  nameWithType: Void,TaskTerminateHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
- uid: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
  name: Void,TaskReactivateHeaders
  nameWithType: Void,TaskReactivateHeaders
  fullName: java.lang.Void,com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
