### YamlMime:JavaType
uid: "com.microsoft.azure.batch.protocol.Tasks"
fullName: "com.microsoft.azure.batch.protocol.Tasks"
name: "Tasks"
nameWithType: "Tasks"
summary: "An instance of this class provides access to all the operations defined in Tasks."
syntax: "public interface Tasks"
methods:
- uid: "com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task)"
  name: "add(String jobId, TaskAddParameter task)"
  nameWithType: "Tasks.add(String jobId, TaskAddParameter task)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void add(String jobId, TaskAddParameter task)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
- uid: "com.microsoft.azure.batch.protocol.Tasks.add(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  name: "add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  nameWithType: "Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskAddOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
- uid: "com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task)"
  name: "addAsync(String jobId, TaskAddParameter task)"
  nameWithType: "Tasks.addAsync(String jobId, TaskAddParameter task)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> addAsync(String jobId, TaskAddParameter task)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  name: "addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  nameWithType: "Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskAddOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)"
  name: "addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskAddOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)"
  name: "addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, ServiceCallback<Void> serviceCallback)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value)"
  name: "addCollection(String jobId, List<TaskAddParameter> value)"
  nameWithType: "Tasks.addCollection(String jobId, List<TaskAddParameter> value)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the TaskAddCollectionResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollection(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  name: "addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  nameWithType: "Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional parameters for the operation"
    name: "taskAddCollectionOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the TaskAddCollectionResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)"
  name: "addCollectionAsync(String jobId, List<TaskAddParameter> value)"
  nameWithType: "Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the observable to the TaskAddCollectionResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  name: "addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  nameWithType: "Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional parameters for the operation"
    name: "taskAddCollectionOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the observable to the TaskAddCollectionResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  name: "addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  nameWithType: "Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional parameters for the operation"
    name: "taskAddCollectionOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  name: "addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  nameWithType: "Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, ServiceCallback<TaskAddCollectionResult> serviceCallback)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)"
  name: "addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)"
  nameWithType: "Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<TaskAddCollectionResult,TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the observable to the TaskAddCollectionResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders&text=TaskAddCollectionHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.batch.protocol.models.TaskAddParameter>,com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  name: "addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  nameWithType: "Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  summary: "Adds a collection of Tasks to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task collection is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The collection of Tasks to add. The maximum count of Tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each Task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer Tasks."
    name: "value"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Additional parameters for the operation"
    name: "taskAddCollectionOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<TaskAddCollectionResult,TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)"
  desc: "Adds a collection of Tasks to the specified Job. Note that each Task must have a unique ID. The Batch service may not return the results for each Task in the same order the Tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same Task IDs during a retry so that if the prior operation succeeded, the retry will not create extra Tasks unexpectedly. If the response contains any Tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only Tasks that failed to add, and to omit Tasks that were successfully added on the first attempt. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the observable to the TaskAddCollectionResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders&text=TaskAddCollectionHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)"
  name: "addWithServiceResponseAsync(String jobId, TaskAddParameter task)"
  nameWithType: "Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddHeaders&text=TaskAddHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskAddParameter,com.microsoft.azure.batch.protocol.models.TaskAddOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  name: "addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  nameWithType: "Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  summary: "Adds a Task to the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job to which the Task is to be added."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Task to be added."
    name: "task"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskAddOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)"
  desc: "Adds a Task to the specified Job. The maximum lifetime of a Task from addition to completion is 180 days. If a Task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskAddHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddHeaders&text=TaskAddHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId)"
  name: "delete(String jobId, String taskId)"
  nameWithType: "Tasks.delete(String jobId, String taskId)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void delete(String jobId, String taskId)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
- uid: "com.microsoft.azure.batch.protocol.Tasks.delete(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  name: "delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  nameWithType: "Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskDeleteOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId)"
  name: "deleteAsync(String jobId, String taskId)"
  nameWithType: "Tasks.deleteAsync(String jobId, String taskId)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteAsync(String jobId, String taskId)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  name: "deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  nameWithType: "Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskDeleteOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)"
  name: "deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskDeleteOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  name: "deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> deleteAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)"
  name: "deleteWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders&text=TaskDeleteHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskDeleteOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  name: "deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  nameWithType: "Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  summary: "Deletes a Task from the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job from which to delete the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to delete."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskDeleteOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)"
  desc: "Deletes a Task from the specified Job. When a Task is deleted, all of the files in its directory on the Compute Node where it ran are also deleted (regardless of the retention time). For multi-instance Tasks, the delete Task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders&text=TaskDeleteHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId)"
  name: "get(String jobId, String taskId)"
  nameWithType: "Tasks.get(String jobId, String taskId)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CloudTask get(String jobId, String taskId)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the CloudTask object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.get(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  name: "get(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  nameWithType: "Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CloudTask get(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the CloudTask object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId)"
  name: "getAsync(String jobId, String taskId)"
  nameWithType: "Tasks.getAsync(String jobId, String taskId)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<CloudTask> getAsync(String jobId, String taskId)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the CloudTask object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  name: "getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  nameWithType: "Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the CloudTask object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)"
  name: "getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, ServiceCallback<CloudTask> serviceCallback)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)"
  name: "getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<CloudTask> getAsync(String jobId, String taskId, ServiceCallback<CloudTask> serviceCallback)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId)"
  name: "getWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.getWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<CloudTask,TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the CloudTask object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskGetHeaders&text=TaskGetHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskGetOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  name: "getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  nameWithType: "Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  summary: "Gets information about the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job that contains the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to get information about."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskGetOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<CloudTask,TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)"
  desc: "Gets information about the specified Task. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the CloudTask object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskGetHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskGetHeaders&text=TaskGetHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.list(String jobId)"
  name: "list(String jobId)"
  nameWithType: "Tasks.list(String jobId)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<CloudTask> list(String jobId)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the PagedList&lt;CloudTask&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.list(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.list(String jobId, TaskListOptions taskListOptions)"
  name: "list(String jobId, TaskListOptions taskListOptions)"
  nameWithType: "Tasks.list(String jobId, TaskListOptions taskListOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<CloudTask> list(String jobId, TaskListOptions taskListOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the PagedList&lt;CloudTask&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId)"
  name: "listAsync(String jobId)"
  nameWithType: "Tasks.listAsync(String jobId)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<CloudTask>> listAsync(String jobId)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)"
  name: "listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<CloudTask>> listAsync(String jobId, ListOperationCallback<CloudTask> serviceCallback)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, TaskListOptions taskListOptions)"
  name: "listAsync(String jobId, TaskListOptions taskListOptions)"
  nameWithType: "Tasks.listAsync(String jobId, TaskListOptions taskListOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<CloudTask>> listAsync(String jobId, TaskListOptions taskListOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)"
  name: "listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<CloudTask>> listAsync(String jobId, TaskListOptions taskListOptions, ListOperationCallback<CloudTask> serviceCallback)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNext(String nextPageLink)"
  name: "listNext(String nextPageLink)"
  nameWithType: "Tasks.listNext(String nextPageLink)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<CloudTask> listNext(String nextPageLink)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the PagedList&lt;CloudTask&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNext(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  name: "listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  nameWithType: "Tasks.listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedList<CloudTask> listNext(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the PagedList&lt;CloudTask&gt; object if successful."
    type: "<xref href=\"com.microsoft.azure.PagedList?alt=com.microsoft.azure.PagedList&text=PagedList\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink)"
  name: "listNextAsync(String nextPageLink)"
  nameWithType: "Tasks.listNextAsync(String nextPageLink)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<CloudTask>> listNextAsync(String nextPageLink)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  name: "listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  nameWithType: "Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Page<CloudTask>> listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  name: "listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<CloudTask>> listNextAsync(String nextPageLink, TaskListNextOptions taskListNextOptions, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(java.lang.String,com.microsoft.rest.ServiceFuture<java.util.List<com.microsoft.azure.batch.protocol.models.CloudTask>>,com.microsoft.azure.ListOperationCallback<com.microsoft.azure.batch.protocol.models.CloudTask>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  name: "listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  nameWithType: "Tasks.listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the ServiceFuture object tracking the Retrofit calls"
    name: "serviceFuture"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.azure.ListOperationCallback?alt=com.microsoft.azure.ListOperationCallback&text=ListOperationCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<List<CloudTask>> listNextAsync(String nextPageLink, ServiceFuture<List<CloudTask>> serviceFuture, ListOperationCallback<CloudTask> serviceCallback)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(String nextPageLink)"
  name: "listNextWithServiceResponseAsync(String nextPageLink)"
  nameWithType: "Tasks.listNextWithServiceResponseAsync(String nextPageLink)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listNextWithServiceResponseAsync(String nextPageLink)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListNextOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  name: "listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  nameWithType: "Tasks.listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The NextLink from the previous successful call to List operation."
    name: "nextPageLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListNextOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listNextWithServiceResponseAsync(String nextPageLink, TaskListNextOptions taskListNextOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId)"
  name: "listSubtasks(String jobId, String taskId)"
  nameWithType: "Tasks.listSubtasks(String jobId, String taskId)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the CloudTaskListSubtasksResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasks(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  name: "listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  nameWithType: "Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListSubtasksOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the CloudTaskListSubtasksResult object if successful."
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId)"
  name: "listSubtasksAsync(String jobId, String taskId)"
  nameWithType: "Tasks.listSubtasksAsync(String jobId, String taskId)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the observable to the CloudTaskListSubtasksResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  name: "listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  nameWithType: "Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListSubtasksOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the observable to the CloudTaskListSubtasksResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  name: "listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  nameWithType: "Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListSubtasksOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  name: "listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  nameWithType: "Tasks.listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)"
  name: "listSubtasksWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult,TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the observable to the CloudTaskListSubtasksResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders&text=TaskListSubtasksHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  name: "listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  nameWithType: "Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  summary: "Lists all of the subtasks that are associated with the specified multi-instance Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListSubtasksOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult,TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)"
  desc: "Lists all of the subtasks that are associated with the specified multi-instance Task. If the Task is not a multi-instance Task then this returns an empty collection."
  returns:
    description: "the observable to the CloudTaskListSubtasksResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders&text=TaskListSubtasksHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(String jobId)"
  name: "listWithServiceResponseAsync(String jobId)"
  nameWithType: "Tasks.listWithServiceResponseAsync(String jobId)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listWithServiceResponseAsync(String jobId)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(java.lang.String,com.microsoft.azure.batch.protocol.models.TaskListOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)"
  name: "listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)"
  nameWithType: "Tasks.listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)"
  summary: "Lists all of the Tasks that are associated with the specified Job."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskListOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Page<CloudTask>,TaskListHeaders>> listWithServiceResponseAsync(String jobId, TaskListOptions taskListOptions)"
  desc: "Lists all of the Tasks that are associated with the specified Job. For multi-instance Tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary Task. Use the list subtasks API to retrieve information about subtasks."
  returns:
    description: "the observable to the PagedList&lt;CloudTask&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.Page?alt=com.microsoft.azure.Page&text=Page\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId)"
  name: "reactivate(String jobId, String taskId)"
  nameWithType: "Tasks.reactivate(String jobId, String taskId)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reactivate(String jobId, String taskId)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  name: "reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  nameWithType: "Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskReactivateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId)"
  name: "reactivateAsync(String jobId, String taskId)"
  nameWithType: "Tasks.reactivateAsync(String jobId, String taskId)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> reactivateAsync(String jobId, String taskId)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  name: "reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  nameWithType: "Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskReactivateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)"
  name: "reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskReactivateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  name: "reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> reactivateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)"
  name: "reactivateWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders&text=TaskReactivateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskReactivateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  name: "reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  nameWithType: "Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  summary: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to reactivate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskReactivateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)"
  desc: "Reactivates a Task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a Task eligible to be retried again up to its maximum retry count. The Task's state is changed to active. As the Task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a Task is reactivated, its retry count is reset to 0. Reactivation will fail for Tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the Job has completed (or is terminating or deleting)."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders&text=TaskReactivateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId)"
  name: "terminate(String jobId, String taskId)"
  nameWithType: "Tasks.terminate(String jobId, String taskId)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void terminate(String jobId, String taskId)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminate(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  name: "terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  nameWithType: "Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskTerminateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId)"
  name: "terminateAsync(String jobId, String taskId)"
  nameWithType: "Tasks.terminateAsync(String jobId, String taskId)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> terminateAsync(String jobId, String taskId)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  name: "terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  nameWithType: "Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskTerminateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)"
  name: "terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskTerminateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  name: "terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> terminateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)"
  name: "terminateWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders&text=TaskTerminateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskTerminateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  name: "terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  nameWithType: "Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  summary: "Terminates the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to terminate."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskTerminateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)"
  desc: "Terminates the specified Task. When the Task has been terminated, it moves to the completed state. For multi-instance Tasks, the terminate Task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders&text=TaskTerminateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId)"
  name: "update(String jobId, String taskId)"
  nameWithType: "Tasks.update(String jobId, String taskId)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void update(String jobId, String taskId)"
  desc: "Updates the properties of the specified Task."
- uid: "com.microsoft.azure.batch.protocol.Tasks.update(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  name: "update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  nameWithType: "Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks."
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskUpdateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  desc: "Updates the properties of the specified Task."
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId)"
  name: "updateAsync(String jobId, String taskId)"
  nameWithType: "Tasks.updateAsync(String jobId, String taskId)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> updateAsync(String jobId, String taskId)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  name: "updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  nameWithType: "Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks."
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskUpdateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)"
  name: "updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks."
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskUpdateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, ServiceCallback<Void> serviceCallback)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(java.lang.String,java.lang.String,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  name: "updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  nameWithType: "Tasks.updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract ServiceFuture<Void> updateAsync(String jobId, String taskId, ServiceCallback<Void> serviceCallback)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId)"
  name: "updateWithServiceResponseAsync(String jobId, String taskId)"
  nameWithType: "Tasks.updateWithServiceResponseAsync(String jobId, String taskId)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders&text=TaskUpdateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.batch.protocol.models.TaskConstraints,com.microsoft.azure.batch.protocol.models.TaskUpdateOptions)"
  fullName: "com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  name: "updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  nameWithType: "Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  summary: "Updates the properties of the specified Task."
  modifiers:
  - "abstract"
  parameters:
  - description: "The ID of the Job containing the Task."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The ID of the Task to update."
    name: "taskId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Constraints that apply to this Task. If omitted, the Task is given the default constraints. For multi-instance Tasks, updating the retention time applies only to the primary Task and not subtasks."
    name: "constraints"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation"
    name: "taskUpdateOptions"
    type: "<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<ServiceResponseWithHeaders<Void,TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)"
  desc: "Updates the properties of the specified Task."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders&text=TaskUpdateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in Tasks."
metadata: {}
package: "com.microsoft.azure.batch.protocol"
artifact: com.microsoft.azure:azure-batch:9.0.0
