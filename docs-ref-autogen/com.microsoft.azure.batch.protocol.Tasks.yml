### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.Tasks
  id: Tasks
  parent: com.microsoft.azure.batch.protocol
  children:
  - com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter,TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,final ServiceCallback<TaskAddCollectionResult>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions,final ServiceCallback<TaskAddCollectionResult>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>)
  - com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  - com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter)
  - com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter,TaskAddOptions)
  - com.microsoft.azure.batch.protocol.Tasks.delete(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.delete(String,String,TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String,TaskDeleteOptions)
  - com.microsoft.azure.batch.protocol.Tasks.get(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.get(String,String,TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,final ServiceCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions,final ServiceCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String,TaskGetOptions)
  - com.microsoft.azure.batch.protocol.Tasks.list(final String)
  - com.microsoft.azure.batch.protocol.Tasks.list(final String,final TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(final String)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final ListOperationCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions,final ListOperationCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNext(final String)
  - com.microsoft.azure.batch.protocol.Tasks.listNext(final String,final TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  - com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String,final TaskListNextOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String,TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,final ServiceCallback<CloudTaskListSubtasksResult>)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions,final ServiceCallback<CloudTaskListSubtasksResult>)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String,TaskListSubtasksOptions)
  - com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String,final TaskListOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String,TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String,TaskReactivateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminate(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.terminate(String,String,TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String,TaskTerminateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.update(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.update(String,String,TaskConstraints,TaskUpdateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions)
  - com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String)
  - com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String,TaskConstraints,TaskUpdateOptions)
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: Tasks
  nameWithType: Tasks
  fullName: com.microsoft.azure.batch.protocol.Tasks
  type: Interface
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
      branch: master
      repo: https://github.com/Azure/azure-batch-sdk-for-java
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 49
  package: com.microsoft.azure.batch.protocol
  summary: "<p>An instance of this class provides access to all the operations defined in Tasks. </p>"
  syntax:
    content: public interface Tasks
- uid: com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter)
  id: add(String,TaskAddParameter)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: add(String jobId, TaskAddParameter task)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.add*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 60
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public void add(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter,TaskAddOptions)
  id: add(String,TaskAddParameter,TaskAddOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.add*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 106
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public void add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter)
  id: addAsync(String,TaskAddParameter)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 83
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> addAsync(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,final ServiceCallback<Void>)
  id: addAsync(String,TaskAddParameter,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 72
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions)
  id: addAsync(String,TaskAddParameter,TaskAddOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 131
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions,final ServiceCallback<Void>)
  id: addAsync(String,TaskAddParameter,TaskAddOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 119
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>)
  id: addCollection(String,List<TaskAddParameter>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollection(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 245
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
      description: <p>the TaskAddCollectionResult object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  id: addCollection(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 292
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
      description: <p>the TaskAddCollectionResult object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>)
  id: addCollectionAsync(String,List<TaskAddParameter>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 268
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the observable to the TaskAddCollectionResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,final ServiceCallback<TaskAddCollectionResult>)
  id: addCollectionAsync(String,List<TaskAddParameter>,final ServiceCallback<TaskAddCollectionResult>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 257
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  id: addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 317
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the observable to the TaskAddCollectionResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions,final ServiceCallback<TaskAddCollectionResult>)
  id: addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions,final ServiceCallback<TaskAddCollectionResult>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 305
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>)
  id: addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 279
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<TaskAddCollectionResult, TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.TaskAddCollectionResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaderse7daa122
      description: <p>the observable to the TaskAddCollectionResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  id: addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 329
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<TaskAddCollectionResult, TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task collection is to be added. </p>
    - id: value
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
      description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    - id: taskAddCollectionOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.TaskAddCollectionResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaderse7daa122
      description: <p>the observable to the TaskAddCollectionResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter)
  id: addWithServiceResponseAsync(String,TaskAddParameter)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  overload: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 94
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskAddHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter,TaskAddOptions)
  id: addWithServiceResponseAsync(String,TaskAddParameter,TaskAddOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 143
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job to which the task is to be added. </p>
    - id: task
      type: com.microsoft.azure.batch.protocol.models.TaskAddParameter
      description: <p>The task to be added. </p>
    - id: taskAddOptions
      type: com.microsoft.azure.batch.protocol.models.TaskAddOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskAddHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.delete(String,String)
  id: delete(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: delete(String jobId, String taskId)
  nameWithType: Tasks.delete(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.delete*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 341
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public void delete(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.delete(String,String,TaskDeleteOptions)
  id: delete(String,String,TaskDeleteOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.delete*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 387
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public void delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String)
  id: deleteAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 364
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,final ServiceCallback<Void>)
  id: deleteAsync(String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 353
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions)
  id: deleteAsync(String,String,TaskDeleteOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 412
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions,final ServiceCallback<Void>)
  id: deleteAsync(String,String,TaskDeleteOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 400
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String)
  id: deleteWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 375
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskDeleteHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String,TaskDeleteOptions)
  id: deleteWithServiceResponseAsync(String,String,TaskDeleteOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 424
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job from which to delete the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to delete. </p>
    - id: taskDeleteOptions
      type: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskDeleteHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.get(String,String)
  id: get(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: get(String jobId, String taskId)
  nameWithType: Tasks.get(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.get*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 437
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public CloudTask get(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTask
      description: <p>the CloudTask object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.get(String,String,TaskGetOptions)
  id: get(String,String,TaskGetOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.get*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 484
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public CloudTask get(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTask
      description: <p>the CloudTask object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String)
  id: getAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getAsync(String jobId, String taskId)
  nameWithType: Tasks.getAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 460
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<CloudTask> getAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the observable to the CloudTask object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,final ServiceCallback<CloudTask>)
  id: getAsync(String,String,final ServiceCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 449
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<CloudTask> getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions)
  id: getAsync(String,String,TaskGetOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 509
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the observable to the CloudTask object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions,final ServiceCallback<CloudTask>)
  id: getAsync(String,String,TaskGetOptions,final ServiceCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 497
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String)
  id: getWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 471
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<CloudTask, TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskb33c76fccom.microsoft.azure.batch.protocol.models.TaskGetHeaderse7daa122
      description: <p>the observable to the CloudTask object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String,TaskGetOptions)
  id: getWithServiceResponseAsync(String,String,TaskGetOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 521
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<CloudTask, TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to get information about. </p>
    - id: taskGetOptions
      type: com.microsoft.azure.batch.protocol.models.TaskGetOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskb33c76fccom.microsoft.azure.batch.protocol.models.TaskGetHeaderse7daa122
      description: <p>the observable to the CloudTask object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.list(final String)
  id: list(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: list(final String jobId)
  nameWithType: Tasks.list(final String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.list(final String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.list*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 155
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<CloudTask> list(final String jobId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.list(final String,final TaskListOptions)
  id: list(final String,final TaskListOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: list(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.list(final String jobId, final TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.list(final String jobId, final TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.list*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 198
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<CloudTask> list(final String jobId, final TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    - id: taskListOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String)
  id: listAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listAsync(final String jobId)
  nameWithType: Tasks.listAsync(final String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 176
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<CloudTask>> listAsync(final String jobId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final ListOperationCallback<CloudTask>)
  id: listAsync(final String,final ListOperationCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 166
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions)
  id: listAsync(final String,final TaskListOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listAsync(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 221
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    - id: taskListOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions,final ListOperationCallback<CloudTask>)
  id: listAsync(final String,final TaskListOptions,final ListOperationCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 210
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    - id: taskListOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext(final String)
  id: listNext(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNext(final String nextPageLink)
  nameWithType: Tasks.listNext(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 911
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<CloudTask> listNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext(final String,final TaskListNextOptions)
  id: listNext(final String,final TaskListNextOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 955
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public PagedList<CloudTask> listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: taskListNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String)
  id: listNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextAsync(final String nextPageLink)
  nameWithType: Tasks.listNextAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 933
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<CloudTask>> listNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  id: listNextAsync(final String,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 923
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<CloudTask>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions)
  id: listNextAsync(final String,final TaskListNextOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 979
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Page<CloudTask>> listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: taskListNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  id: listNextAsync(final String,final TaskListNextOptions,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 968
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<List<CloudTask>> listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: taskListNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String)
  id: listNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Tasks.listNextWithServiceResponseAsync(final String nextPageLink)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 943
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.CloudTask8135b5ebcom.microsoft.azure.batch.protocol.models.TaskListHeaderse7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String,final TaskListNextOptions)
  id: listNextWithServiceResponseAsync(final String,final TaskListNextOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 990
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: taskListNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListNextOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.CloudTask8135b5ebcom.microsoft.azure.batch.protocol.models.TaskListHeaderse7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String)
  id: listSubtasks(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasks(String jobId, String taskId)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 625
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
      description: <p>the CloudTaskListSubtasksResult object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String,TaskListSubtasksOptions)
  id: listSubtasks(String,String,TaskListSubtasksOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 672
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
      description: <p>the CloudTaskListSubtasksResult object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String)
  id: listSubtasksAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 648
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the observable to the CloudTaskListSubtasksResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,final ServiceCallback<CloudTaskListSubtasksResult>)
  id: listSubtasksAsync(String,String,final ServiceCallback<CloudTaskListSubtasksResult>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 637
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions)
  id: listSubtasksAsync(String,String,TaskListSubtasksOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 697
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the observable to the CloudTaskListSubtasksResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions,final ServiceCallback<CloudTaskListSubtasksResult>)
  id: listSubtasksAsync(String,String,TaskListSubtasksOptions,final ServiceCallback<CloudTaskListSubtasksResult>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 685
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String)
  id: listSubtasksWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 659
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult, TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaderse7daa122
      description: <p>the observable to the CloudTaskListSubtasksResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String,TaskListSubtasksOptions)
  id: listSubtasksWithServiceResponseAsync(String,String,TaskListSubtasksOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 709
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult, TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task. </p>
    - id: taskListSubtasksOptions
      type: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaderse7daa122
      description: <p>the observable to the CloudTaskListSubtasksResult object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String)
  id: listWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listWithServiceResponseAsync(final String jobId)
  nameWithType: Tasks.listWithServiceResponseAsync(final String jobId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String jobId)
  overload: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 186
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listWithServiceResponseAsync(final String jobId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.CloudTask8135b5ebcom.microsoft.azure.batch.protocol.models.TaskListHeaderse7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String,final TaskListOptions)
  id: listWithServiceResponseAsync(final String,final TaskListOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 232
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job. </p>
    - id: taskListOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models.CloudTask8135b5ebcom.microsoft.azure.batch.protocol.models.TaskListHeaderse7daa122
      description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String)
  id: reactivate(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivate(String jobId, String taskId)
  nameWithType: Tasks.reactivate(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 816
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public void reactivate(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String,TaskReactivateOptions)
  id: reactivate(String,String,TaskReactivateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 862
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public void reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String)
  id: reactivateAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 839
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> reactivateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,final ServiceCallback<Void>)
  id: reactivateAsync(String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 828
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions)
  id: reactivateAsync(String,String,TaskReactivateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 887
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions,final ServiceCallback<Void>)
  id: reactivateAsync(String,String,TaskReactivateOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 875
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String)
  id: reactivateWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 850
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskReactivateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String,TaskReactivateOptions)
  id: reactivateWithServiceResponseAsync(String,String,TaskReactivateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 899
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to reactivate. </p>
    - id: taskReactivateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskReactivateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate(String,String)
  id: terminate(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminate(String jobId, String taskId)
  nameWithType: Tasks.terminate(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminate*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 721
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public void terminate(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate(String,String,TaskTerminateOptions)
  id: terminate(String,String,TaskTerminateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminate*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 767
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public void terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String)
  id: terminateAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 744
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> terminateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,final ServiceCallback<Void>)
  id: terminateAsync(String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 733
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions)
  id: terminateAsync(String,String,TaskTerminateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 792
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions,final ServiceCallback<Void>)
  id: terminateAsync(String,String,TaskTerminateOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 780
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String)
  id: terminateWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 755
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskTerminateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String,TaskTerminateOptions)
  id: terminateWithServiceResponseAsync(String,String,TaskTerminateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 804
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to terminate. </p>
    - id: taskTerminateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskTerminateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.update(String,String)
  id: update(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: update(String jobId, String taskId)
  nameWithType: Tasks.update(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.update*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 532
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public void update(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.update(String,String,TaskConstraints,TaskUpdateOptions)
  id: update(String,String,TaskConstraints,TaskUpdateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.update*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 575
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public void update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: <p>Additional parameters for the operation </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String)
  id: updateAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateAsync(String jobId, String taskId)
  nameWithType: Tasks.updateAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 553
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> updateAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,final ServiceCallback<Void>)
  id: updateAsync(String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 543
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions)
  id: updateAsync(String,String,TaskConstraints,TaskUpdateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 600
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public Observable<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions,final ServiceCallback<Void>)
  id: updateAsync(String,String,TaskConstraints,TaskUpdateOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 588
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public ServiceFuture<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String)
  id: updateWithServiceResponseAsync(String,String)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 563
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskUpdateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String,TaskConstraints,TaskUpdateOptions)
  id: updateWithServiceResponseAsync(String,String,TaskConstraints,TaskUpdateOptions)
  parent: com.microsoft.azure.batch.protocol.Tasks
  href: com.microsoft.azure.batch.protocol.Tasks.yml
  langs:
  - java
  name: updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  overload: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/Tasks.java
    startLine: 612
  package: com.microsoft.azure.batch.protocol
  summary: "<p>Updates the properties of the specified task.</p>\r\n<p></p>"
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job containing the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task to update. </p>
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    - id: taskUpdateOptions
      type: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models.TaskUpdateHeaderse7daa122
      description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
references:
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: c8683d81
  spec.java:
  - name: BatchErrorException
    fullName: BatchErrorException
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.batch.protocol.Tasks.add*
  name: add
  nameWithType: Tasks.add
  fullName: com.microsoft.azure.batch.protocol.Tasks.add
  package: com.microsoft.azure.batch.protocol
- uid: 1c186eb5
  spec.java:
  - name: final ServiceCallback<Void>
    fullName: final ServiceCallback<Void>
- uid: aa81d378
  spec.java:
  - name: ServiceFuture<Void>
    fullName: ServiceFuture<Void>
- uid: com.microsoft.azure.batch.protocol.Tasks.addAsync*
  name: addAsync
  nameWithType: Tasks.addAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync
  package: com.microsoft.azure.batch.protocol
- uid: dcd884b2
  spec.java:
  - name: Observable<Void>
    fullName: Observable<Void>
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.TaskAddHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
    name: TaskAddHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskAddHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync*
  name: addWithServiceResponseAsync
  nameWithType: Tasks.addWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 36b27be0com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
  spec.java:
  - name: PagedList<
    fullName: PagedList<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.list*
  name: list
  nameWithType: Tasks.list
  fullName: com.microsoft.azure.batch.protocol.Tasks.list
  package: com.microsoft.azure.batch.protocol
- uid: 3c4303efcom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
  spec.java:
  - name: final ListOperationCallback<
    fullName: final ListOperationCallback<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>'
    fullName: '>'
- uid: b7698b59com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
  spec.java:
  - name: ServiceFuture<List<
    fullName: ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listAsync*
  name: listAsync
  nameWithType: Tasks.listAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync
  package: com.microsoft.azure.batch.protocol
- uid: 32da0907com.microsoft.azure.batch.protocol.models.CloudTaske7daa122
  spec.java:
  - name: Observable<Page<
    fullName: Observable<Page<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>>'
    fullName: '>>'
- uid: 442ed5e5com.microsoft.azure.batch.protocol.models.CloudTask8135b5ebcom.microsoft.azure.batch.protocol.models.TaskListHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<Page<
    fullName: Observable<ServiceResponseWithHeaders<Page<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>, '
    fullName: '>, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskListHeaders
    name: TaskListHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskListHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskListHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync*
  name: listWithServiceResponseAsync
  nameWithType: Tasks.listWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.TaskListOptions
    name: TaskListOptions
    fullName: com.microsoft.azure.batch.protocol.models.TaskListOptions
    href: com.microsoft.azure.batch.protocol.models.TaskListOptions.yml
- uid: 5618da2dcom.microsoft.azure.batch.protocol.models.TaskAddParametera08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter
    name: TaskAddParameter
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter
    href: com.microsoft.azure.batch.protocol.models.TaskAddParameter.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollection*
  name: addCollection
  nameWithType: Tasks.addCollection
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection
  package: com.microsoft.azure.batch.protocol
- uid: 897eb10acom.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
  spec.java:
  - name: final ServiceCallback<
    fullName: final ServiceCallback<
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult.yml
  - name: '>'
    fullName: '>'
- uid: c522ce07com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
  spec.java:
  - name: ServiceFuture<
    fullName: ServiceFuture<
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync*
  name: addCollectionAsync
  nameWithType: Tasks.addCollectionAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync
  package: com.microsoft.azure.batch.protocol
- uid: c2d0e8c6com.microsoft.azure.batch.protocol.models.TaskAddCollectionResulta08ddfce
  spec.java:
  - name: Observable<
    fullName: Observable<
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult.yml
  - name: '>'
    fullName: '>'
- uid: cc516622com.microsoft.azure.batch.protocol.models.TaskAddCollectionResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<
    fullName: Observable<ServiceResponseWithHeaders<
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    name: TaskAddCollectionResult
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
    href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult.yml
  - name: ', '
    fullName: ', '
  - uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
    name: TaskAddCollectionHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync*
  name: addCollectionWithServiceResponseAsync
  nameWithType: Tasks.addCollectionWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.delete*
  name: delete
  nameWithType: Tasks.delete
  fullName: com.microsoft.azure.batch.protocol.Tasks.delete
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync*
  name: deleteAsync
  nameWithType: Tasks.deleteAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.TaskDeleteHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
    name: TaskDeleteHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync*
  name: deleteWithServiceResponseAsync
  nameWithType: Tasks.deleteWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.get*
  name: get
  nameWithType: Tasks.get
  fullName: com.microsoft.azure.batch.protocol.Tasks.get
  package: com.microsoft.azure.batch.protocol
- uid: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
  spec.java:
  - name: final ServiceCallback<
    fullName: final ServiceCallback<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>'
    fullName: '>'
- uid: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
  spec.java:
  - name: ServiceFuture<
    fullName: ServiceFuture<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.getAsync*
  name: getAsync
  nameWithType: Tasks.getAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync
  package: com.microsoft.azure.batch.protocol
- uid: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaska08ddfce
  spec.java:
  - name: Observable<
    fullName: Observable<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>'
    fullName: '>'
- uid: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskb33c76fccom.microsoft.azure.batch.protocol.models.TaskGetHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<
    fullName: Observable<ServiceResponseWithHeaders<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: ', '
    fullName: ', '
  - uid: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
    name: TaskGetHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskGetHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync*
  name: getWithServiceResponseAsync
  nameWithType: Tasks.getWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.update*
  name: update
  nameWithType: Tasks.update
  fullName: com.microsoft.azure.batch.protocol.Tasks.update
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync*
  name: updateAsync
  nameWithType: Tasks.updateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.TaskUpdateHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
    name: TaskUpdateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync*
  name: updateWithServiceResponseAsync
  nameWithType: Tasks.updateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks*
  name: listSubtasks
  nameWithType: Tasks.listSubtasks
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks
  package: com.microsoft.azure.batch.protocol
- uid: 897eb10acom.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
  spec.java:
  - name: final ServiceCallback<
    fullName: final ServiceCallback<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    href: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult.yml
  - name: '>'
    fullName: '>'
- uid: c522ce07com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
  spec.java:
  - name: ServiceFuture<
    fullName: ServiceFuture<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    href: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync*
  name: listSubtasksAsync
  nameWithType: Tasks.listSubtasksAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync
  package: com.microsoft.azure.batch.protocol
- uid: c2d0e8c6com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResulta08ddfce
  spec.java:
  - name: Observable<
    fullName: Observable<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    href: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult.yml
  - name: '>'
    fullName: '>'
- uid: cc516622com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResultb33c76fccom.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaderse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<
    fullName: Observable<ServiceResponseWithHeaders<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    name: CloudTaskListSubtasksResult
    fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
    href: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult.yml
  - name: ', '
    fullName: ', '
  - uid: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
    name: TaskListSubtasksHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync*
  name: listSubtasksWithServiceResponseAsync
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.terminate*
  name: terminate
  nameWithType: Tasks.terminate
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminate
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync*
  name: terminateAsync
  nameWithType: Tasks.terminateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.TaskTerminateHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
    name: TaskTerminateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync*
  name: terminateWithServiceResponseAsync
  nameWithType: Tasks.terminateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivate*
  name: reactivate
  nameWithType: Tasks.reactivate
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync*
  name: reactivateAsync
  nameWithType: Tasks.reactivateAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync
  package: com.microsoft.azure.batch.protocol
- uid: 6738ce59com.microsoft.azure.batch.protocol.models.TaskReactivateHeaderse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
    name: TaskReactivateHeaders
    fullName: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
    href: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync*
  name: reactivateWithServiceResponseAsync
  nameWithType: Tasks.reactivateWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.listNext*
  name: listNext
  nameWithType: Tasks.listNext
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNext
  package: com.microsoft.azure.batch.protocol
- uid: bd82102acom.microsoft.azure.batch.protocol.models.CloudTaske7daa122
  spec.java:
  - name: final ServiceFuture<List<
    fullName: final ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models.CloudTask
    name: CloudTask
    fullName: com.microsoft.azure.batch.protocol.models.CloudTask
    href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync*
  name: listNextAsync
  nameWithType: Tasks.listNextAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync
  package: com.microsoft.azure.batch.protocol
- uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync*
  name: listNextWithServiceResponseAsync
  nameWithType: Tasks.listNextWithServiceResponseAsync
  fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models.TaskListNextOptions
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
    name: TaskListNextOptions
    fullName: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
    href: com.microsoft.azure.batch.protocol.models.TaskListNextOptions.yml
- uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddParameter.yml
  name: TaskAddParameter
  nameWithType: TaskAddParameter
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter
  type: Class
  summary: "<p>An Azure Batch task to add. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>"
  syntax:
    content: public class TaskAddParameter
- uid: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddHeaders.yml
  name: TaskAddHeaders
  nameWithType: TaskAddHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddHeaders
  type: Class
  summary: "<p>Defines headers for Add operation. </p>"
  syntax:
    content: public class TaskAddHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskAddOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddOptions.yml
  name: TaskAddOptions
  nameWithType: TaskAddOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddOptions
  type: Class
  summary: "<p>Additional parameters for add operation. </p>"
  syntax:
    content: public class TaskAddOptions
- uid: com.microsoft.azure.batch.protocol.models.CloudTask
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.CloudTask.yml
  name: CloudTask
  nameWithType: CloudTask
  fullName: com.microsoft.azure.batch.protocol.models.CloudTask
  type: Class
  summary: "<p>An Azure Batch task. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>"
  syntax:
    content: public class CloudTask
- uid: com.microsoft.azure.batch.protocol.models.TaskListHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskListHeaders.yml
  name: TaskListHeaders
  nameWithType: TaskListHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskListHeaders
  type: Class
  summary: "<p>Defines headers for List operation. </p>"
  syntax:
    content: public class TaskListHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskListOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskListOptions.yml
  name: TaskListOptions
  nameWithType: TaskListOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListOptions
  type: Class
  summary: "<p>Additional parameters for list operation. </p>"
  syntax:
    content: public class TaskListOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult.yml
  name: TaskAddCollectionResult
  nameWithType: TaskAddCollectionResult
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult
  type: Class
  summary: "<p>The result of adding a collection of tasks to a job. </p>"
  syntax:
    content: public class TaskAddCollectionResult
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders.yml
  name: TaskAddCollectionHeaders
  nameWithType: TaskAddCollectionHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders
  type: Class
  summary: "<p>Defines headers for AddCollection operation. </p>"
  syntax:
    content: public class TaskAddCollectionHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions.yml
  name: TaskAddCollectionOptions
  nameWithType: TaskAddCollectionOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions
  type: Class
  summary: "<p>Additional parameters for addCollection operation. </p>"
  syntax:
    content: public class TaskAddCollectionOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders.yml
  name: TaskDeleteHeaders
  nameWithType: TaskDeleteHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders
  type: Class
  summary: "<p>Defines headers for Delete operation. </p>"
  syntax:
    content: public class TaskDeleteHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions.yml
  name: TaskDeleteOptions
  nameWithType: TaskDeleteOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskDeleteOptions
  type: Class
  summary: "<p>Additional parameters for delete operation. </p>"
  syntax:
    content: public class TaskDeleteOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskGetHeaders.yml
  name: TaskGetHeaders
  nameWithType: TaskGetHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskGetHeaders
  type: Class
  summary: "<p>Defines headers for Get operation. </p>"
  syntax:
    content: public class TaskGetHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskGetOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskGetOptions.yml
  name: TaskGetOptions
  nameWithType: TaskGetOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskGetOptions
  type: Class
  summary: "<p>Additional parameters for get operation. </p>"
  syntax:
    content: public class TaskGetOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders.yml
  name: TaskUpdateHeaders
  nameWithType: TaskUpdateHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders
  type: Class
  summary: "<p>Defines headers for Update operation. </p>"
  syntax:
    content: public class TaskUpdateHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskConstraints
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskConstraints.yml
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: com.microsoft.azure.batch.protocol.models.TaskConstraints
  type: Class
  summary: "<p>Execution constraints to apply to a task. </p>"
  syntax:
    content: public class TaskConstraints
- uid: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions.yml
  name: TaskUpdateOptions
  nameWithType: TaskUpdateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskUpdateOptions
  type: Class
  summary: "<p>Additional parameters for update operation. </p>"
  syntax:
    content: public class TaskUpdateOptions
- uid: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult.yml
  name: CloudTaskListSubtasksResult
  nameWithType: CloudTaskListSubtasksResult
  fullName: com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult
  type: Class
  summary: "<p>The result of listing the subtasks of a task. </p>"
  syntax:
    content: public class CloudTaskListSubtasksResult
- uid: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders.yml
  name: TaskListSubtasksHeaders
  nameWithType: TaskListSubtasksHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders
  type: Class
  summary: "<p>Defines headers for ListSubtasks operation. </p>"
  syntax:
    content: public class TaskListSubtasksHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions.yml
  name: TaskListSubtasksOptions
  nameWithType: TaskListSubtasksOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions
  type: Class
  summary: "<p>Additional parameters for listSubtasks operation. </p>"
  syntax:
    content: public class TaskListSubtasksOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders.yml
  name: TaskTerminateHeaders
  nameWithType: TaskTerminateHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders
  type: Class
  summary: "<p>Defines headers for Terminate operation. </p>"
  syntax:
    content: public class TaskTerminateHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions.yml
  name: TaskTerminateOptions
  nameWithType: TaskTerminateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskTerminateOptions
  type: Class
  summary: "<p>Additional parameters for terminate operation. </p>"
  syntax:
    content: public class TaskTerminateOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders.yml
  name: TaskReactivateHeaders
  nameWithType: TaskReactivateHeaders
  fullName: com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders
  type: Class
  summary: "<p>Defines headers for Reactivate operation. </p>"
  syntax:
    content: public class TaskReactivateHeaders
- uid: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions.yml
  name: TaskReactivateOptions
  nameWithType: TaskReactivateOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskReactivateOptions
  type: Class
  summary: "<p>Additional parameters for reactivate operation. </p>"
  syntax:
    content: public class TaskReactivateOptions
- uid: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskListNextOptions.yml
  name: TaskListNextOptions
  nameWithType: TaskListNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.TaskListNextOptions
  type: Class
  summary: "<p>Additional parameters for listNext operation. </p>"
  syntax:
    content: public class TaskListNextOptions
