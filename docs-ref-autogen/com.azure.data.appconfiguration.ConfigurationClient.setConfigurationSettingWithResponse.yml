### YamlMime:JavaMember
uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse*"
fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse"
name: "setConfigurationSettingWithResponse"
nameWithType: "ConfigurationClient.setConfigurationSettingWithResponse"
members:
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  name: "setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  summary: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is specified, the configuration value is updated if the current setting's ETag matches. If the ETag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n```java\n// Add a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db_connection\"\n Response<ConfigurationSetting> responseSetting = configurationClient.setConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"db_connection\"),\n     false,\n     new Context(key2, value2));\n final ConfigurationSetting initSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", initSetting.getKey(), initSetting.getValue());\n \n // Update the value of the setting to \"updated_db_connection\".\n responseSetting = configurationClient.setConfigurationSettingWithResponse(\n     new ConfigurationSetting().setKey(\"prodDBConnection\").setLabel(\"westUS\").setValue(\"updated_db_connection\"),\n     false,\n     new Context(key2, value2));\n final ConfigurationSetting updatedSetting = responseSetting.getValue();\n System.out.printf(\"Key: %s, Value: %s\", updatedSetting.getKey(), updatedSetting.getValue());\n```"
  parameters:
  - description: "The setting to create or update based on its key, optional label and optional ETag combination."
    name: "setting"
    type: "<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />"
  - description: "A boolean indicates if <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ETag\"></xref> is used as a\n IF-MATCH header."
    name: "ifUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ConfigurationSetting> setConfigurationSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  returns:
    description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConfigurationSetting\"></xref> that was created or updated, or <code>null</code>,\n if the configuration value does not exist or the key is an invalid value (which will also throw\n ServiceRequestException described below)."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.data.appconfiguration"
artifact: com.azure:azure-data-appconfiguration:1.1.8
