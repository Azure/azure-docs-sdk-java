### YamlMime:JavaMember
nameWithType: Schedule.recurrenceInterval
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
  name: recurrenceInterval()
  nameWithType: Schedule.recurrenceInterval()
  returns:
    description: <p>the recurrenceInterval value </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>

    <p></p>
  syntax: public Period recurrenceInterval()
  uid: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
uid: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval*
fullName: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
name: recurrenceInterval()
package: com.microsoft.azure.batch.protocol.models
metadata: {}
