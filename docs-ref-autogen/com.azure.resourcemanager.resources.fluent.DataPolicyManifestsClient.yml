### YamlMime:JavaType
uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient"
fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient"
name: "DataPolicyManifestsClient"
nameWithType: "DataPolicyManifestsClient"
summary: "An instance of this class provides access to all the operations defined in Data<wbr>Policy<wbr>Manifests<wbr>Client."
syntax: "public interface DataPolicyManifestsClient"
methods:
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyMode(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyMode(String policyMode)"
  name: "getByPolicyMode(String policyMode)"
  nameWithType: "DataPolicyManifestsClient.getByPolicyMode(String policyMode)"
  summary: "This operation retrieves the data policy manifest with the given policy mode."
  modifiers:
  - "abstract"
  parameters:
  - description: "The policy mode of the data policy manifest to get."
    name: "policyMode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract DataPolicyManifestInner getByPolicyMode(String policyMode)"
  desc: "This operation retrieves the data policy manifest with the given policy mode."
  returns:
    description: "the data policy manifest."
    type: "<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeAsync(String policyMode)"
  name: "getByPolicyModeAsync(String policyMode)"
  nameWithType: "DataPolicyManifestsClient.getByPolicyModeAsync(String policyMode)"
  summary: "This operation retrieves the data policy manifest with the given policy mode."
  modifiers:
  - "abstract"
  parameters:
  - description: "The policy mode of the data policy manifest to get."
    name: "policyMode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<DataPolicyManifestInner> getByPolicyModeAsync(String policyMode)"
  desc: "This operation retrieves the data policy manifest with the given policy mode."
  returns:
    description: "the data policy manifest on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeWithResponse(String policyMode, Context context)"
  name: "getByPolicyModeWithResponse(String policyMode, Context context)"
  nameWithType: "DataPolicyManifestsClient.getByPolicyModeWithResponse(String policyMode, Context context)"
  summary: "This operation retrieves the data policy manifest with the given policy mode."
  modifiers:
  - "abstract"
  parameters:
  - description: "The policy mode of the data policy manifest to get."
    name: "policyMode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<DataPolicyManifestInner> getByPolicyModeWithResponse(String policyMode, Context context)"
  desc: "This operation retrieves the data policy manifest with the given policy mode."
  returns:
    description: "the data policy manifest along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeWithResponseAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.getByPolicyModeWithResponseAsync(String policyMode)"
  name: "getByPolicyModeWithResponseAsync(String policyMode)"
  nameWithType: "DataPolicyManifestsClient.getByPolicyModeWithResponseAsync(String policyMode)"
  summary: "This operation retrieves the data policy manifest with the given policy mode."
  modifiers:
  - "abstract"
  parameters:
  - description: "The policy mode of the data policy manifest to get."
    name: "policyMode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract Mono<Response<DataPolicyManifestInner>> getByPolicyModeWithResponseAsync(String policyMode)"
  desc: "This operation retrieves the data policy manifest with the given policy mode."
  returns:
    description: "the data policy manifest along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.list()"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.list()"
  name: "list()"
  nameWithType: "DataPolicyManifestsClient.list()"
  summary: "This operation retrieves a list of all the data policy manifests that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<DataPolicyManifestInner> list()"
  desc: "This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: \"$filter=namespace eq '\\{0\\}'\". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value."
  returns:
    description: "list of data policy manifests as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.list(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.list(String filter, Context context)"
  name: "list(String filter, Context context)"
  nameWithType: "DataPolicyManifestsClient.list(String filter, Context context)"
  summary: "This operation retrieves a list of all the data policy manifests that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: \"namespace eq '{value}'\". If\n     $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the\n     returned list only includes all data policy manifests that have a namespace matching the provided value."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<DataPolicyManifestInner> list(String filter, Context context)"
  desc: "This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: \"$filter=namespace eq '\\{0\\}'\". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value."
  returns:
    description: "list of data policy manifests as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.listAsync()"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.listAsync()"
  name: "listAsync()"
  nameWithType: "DataPolicyManifestsClient.listAsync()"
  summary: "This operation retrieves a list of all the data policy manifests that match the optional given $filter."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedFlux<DataPolicyManifestInner> listAsync()"
  desc: "This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: \"$filter=namespace eq '\\{0\\}'\". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value."
  returns:
    description: "list of data policy manifests as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.listAsync(java.lang.String)"
  fullName: "com.azure.resourcemanager.resources.fluent.DataPolicyManifestsClient.listAsync(String filter)"
  name: "listAsync(String filter)"
  nameWithType: "DataPolicyManifestsClient.listAsync(String filter)"
  summary: "This operation retrieves a list of all the data policy manifests that match the optional given $filter."
  modifiers:
  - "abstract"
  parameters:
  - description: "The filter to apply on the operation. Valid values for $filter are: \"namespace eq '{value}'\". If\n     $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is provided, the\n     returned list only includes all data policy manifests that have a namespace matching the provided value."
    name: "filter"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract PagedFlux<DataPolicyManifestInner> listAsync(String filter)"
  desc: "This operation retrieves a list of all the data policy manifests that match the optional given $filter. Valid values for $filter are: \"$filter=namespace eq '\\{0\\}'\". If $filter is not provided, the unfiltered list includes all data policy manifests for data resource types. If $filter=namespace is provided, the returned list only includes all data policy manifests that have a namespace matching the provided value."
  returns:
    description: "list of data policy manifests as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner?alt=com.azure.resourcemanager.resources.fluent.models.DataPolicyManifestInner&text=DataPolicyManifestInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in DataPolicyManifestsClient."
metadata: {}
package: "com.azure.resourcemanager.resources.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.19.0
