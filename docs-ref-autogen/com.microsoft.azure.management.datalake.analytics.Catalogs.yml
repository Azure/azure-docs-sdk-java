### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  name: createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  nameWithType: Catalogs.createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. </p>'
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters&text=DataLakeAnalyticsCatalogCredentialCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Creates the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public void createCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredential(String,String,String,DataLakeAnalyticsCatalogCredentialCreateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  name: createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  nameWithType: Catalogs.createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. </p>'
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters&text=DataLakeAnalyticsCatalogCredentialCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public Observable<Void> createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialCreateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. </p>'
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters&text=DataLakeAnalyticsCatalogCredentialCreateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public ServiceFuture<Void> createCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialCreateParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  name: createCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  nameWithType: Catalogs.createCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: '<p>The name of the database in which to create the credential. Note: This is NOT an external database name, but the name of an existing U-SQL database that should contain the new credential object. </p>'
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialCreateParameters&text=DataLakeAnalyticsCatalogCredentialCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> createCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialCreateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createCredentialWithServiceResponseAsync(String,String,String,DataLakeAnalyticsCatalogCredentialCreateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: createSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.createSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database in which to create the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.</p>

    <p></p>
  syntax: public void createSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecret(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database in which to create the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.</p>

    <p></p>
  syntax: public Observable<Void> createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database in which to create the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.</p>

    <p></p>
  syntax: public ServiceFuture<Void> createSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: createSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.createSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database in which to create the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to create the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use CreateCredential instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> createSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.createSecretWithServiceResponseAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecrets(String accountName, String databaseName)
  name: deleteAllSecrets(String accountName, String databaseName)
  nameWithType: Catalogs.deleteAllSecrets(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential.</p>

    <p></p>
  syntax: public void deleteAllSecrets(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecrets(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsAsync(String accountName, String databaseName)
  name: deleteAllSecretsAsync(String accountName, String databaseName)
  nameWithType: Catalogs.deleteAllSecretsAsync(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential.</p>

    <p></p>
  syntax: public Observable<Void> deleteAllSecretsAsync(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsAsync(String accountName, String databaseName, final ServiceCallback<Void> serviceCallback)
  name: deleteAllSecretsAsync(String accountName, String databaseName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.deleteAllSecretsAsync(String accountName, String databaseName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAllSecretsAsync(String accountName, String databaseName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsWithServiceResponseAsync(String accountName, String databaseName)
  name: deleteAllSecretsWithServiceResponseAsync(String accountName, String databaseName)
  nameWithType: Catalogs.deleteAllSecretsWithServiceResponseAsync(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes all secrets in the specified database. This is deprecated and will be removed in the next release. In the future, please only drop individual credentials using DeleteCredential.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteAllSecretsWithServiceResponseAsync(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteAllSecretsWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredential(String accountName, String databaseName, String credentialName)
  name: deleteCredential(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.deleteCredential(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public void deleteCredential(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredential(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  name: deleteCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  nameWithType: Catalogs.deleteCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to delete a credential if the current user is not the account owner. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters&text=DataLakeAnalyticsCatalogCredentialDeleteParameters" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. </p>
    name: cascade
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public void deleteCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredential(String,String,String,DataLakeAnalyticsCatalogCredentialDeleteParameters,Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName)
  name: deleteCredentialAsync(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public Observable<Void> deleteCredentialAsync(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  name: deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  nameWithType: Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to delete a credential if the current user is not the account owner. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters&text=DataLakeAnalyticsCatalogCredentialDeleteParameters" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. </p>
    name: cascade
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public Observable<Void> deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialDeleteParameters,Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade, final ServiceCallback<Void> serviceCallback)
  name: deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to delete a credential if the current user is not the account owner. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters&text=DataLakeAnalyticsCatalogCredentialDeleteParameters" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. </p>
    name: cascade
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialDeleteParameters,Boolean,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<Void> serviceCallback)
  name: deleteCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.deleteCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  name: deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  name: deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  nameWithType: Catalogs.deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential to delete </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters to delete a credential if the current user is not the account owner. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialDeleteParameters&text=DataLakeAnalyticsCatalogCredentialDeleteParameters" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if the delete should be a cascading delete (which deletes all resources dependent on the credential as well as the credential) or not. If false will fail if there are any resources relying on the credential. </p>
    name: cascade
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified credential in the specified database.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialDeleteParameters parameters, Boolean cascade)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteCredentialWithServiceResponseAsync(String,String,String,DataLakeAnalyticsCatalogCredentialDeleteParameters,Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecret(String accountName, String databaseName, String secretName)
  name: deleteSecret(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.deleteSecret(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to delete </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.</p>

    <p></p>
  syntax: public void deleteSecret(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecret(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretAsync(String accountName, String databaseName, String secretName)
  name: deleteSecretAsync(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.deleteSecretAsync(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to delete </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.</p>

    <p></p>
  syntax: public Observable<Void> deleteSecretAsync(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<Void> serviceCallback)
  name: deleteSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.deleteSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to delete </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  name: deleteSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.deleteSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to delete </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use DeleteCredential instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.deleteSecretWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssembly(String accountName, String databaseName, String assemblyName)
  name: getAssembly(String accountName, String databaseName, String assemblyName)
  nameWithType: Catalogs.getAssembly(String accountName, String databaseName, String assemblyName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the assembly. </p>
    name: assemblyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlAssembly object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssembly?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssembly&text=USqlAssembly" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified assembly from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlAssembly getAssembly(String accountName, String databaseName, String assemblyName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssembly(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyAsync(String accountName, String databaseName, String assemblyName)
  name: getAssemblyAsync(String accountName, String databaseName, String assemblyName)
  nameWithType: Catalogs.getAssemblyAsync(String accountName, String databaseName, String assemblyName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the assembly. </p>
    name: assemblyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlAssembly object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssembly?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssembly&text=USqlAssembly" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified assembly from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlAssembly> getAssemblyAsync(String accountName, String databaseName, String assemblyName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyAsync(String accountName, String databaseName, String assemblyName, final ServiceCallback<USqlAssembly> serviceCallback)
  name: getAssemblyAsync(String accountName, String databaseName, String assemblyName, final ServiceCallback<USqlAssembly> serviceCallback)
  nameWithType: Catalogs.getAssemblyAsync(String accountName, String databaseName, String assemblyName, final ServiceCallback<USqlAssembly> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the assembly. </p>
    name: assemblyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssembly?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssembly&text=USqlAssembly" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssembly?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssembly&text=USqlAssembly" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified assembly from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlAssembly> getAssemblyAsync(String accountName, String databaseName, String assemblyName, final ServiceCallback<USqlAssembly> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyAsync(String,String,String,final ServiceCallback<USqlAssembly>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyWithServiceResponseAsync(String accountName, String databaseName, String assemblyName)
  name: getAssemblyWithServiceResponseAsync(String accountName, String databaseName, String assemblyName)
  nameWithType: Catalogs.getAssemblyWithServiceResponseAsync(String accountName, String databaseName, String assemblyName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the assembly. </p>
    name: assemblyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlAssembly object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssembly?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssembly&text=USqlAssembly" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified assembly from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlAssembly>> getAssemblyWithServiceResponseAsync(String accountName, String databaseName, String assemblyName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getAssemblyWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredential(String accountName, String databaseName, String credentialName)
  name: getCredential(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.getCredential(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlCredential object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified credential from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlCredential getCredential(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredential(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialAsync(String accountName, String databaseName, String credentialName)
  name: getCredentialAsync(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.getCredentialAsync(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlCredential object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified credential from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlCredential> getCredentialAsync(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<USqlCredential> serviceCallback)
  name: getCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<USqlCredential> serviceCallback)
  nameWithType: Catalogs.getCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<USqlCredential> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified credential from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlCredential> getCredentialAsync(String accountName, String databaseName, String credentialName, final ServiceCallback<USqlCredential> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialAsync(String,String,String,final ServiceCallback<USqlCredential>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  name: getCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  nameWithType: Catalogs.getCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlCredential object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified credential from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlCredential>> getCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getCredentialWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabase(String accountName, String databaseName)
  name: getDatabase(String accountName, String databaseName)
  nameWithType: Catalogs.getDatabase(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlDatabase object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlDatabase getDatabase(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabase(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseAsync(String accountName, String databaseName)
  name: getDatabaseAsync(String accountName, String databaseName)
  nameWithType: Catalogs.getDatabaseAsync(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlDatabase object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlDatabase> getDatabaseAsync(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseAsync(String accountName, String databaseName, final ServiceCallback<USqlDatabase> serviceCallback)
  name: getDatabaseAsync(String accountName, String databaseName, final ServiceCallback<USqlDatabase> serviceCallback)
  nameWithType: Catalogs.getDatabaseAsync(String accountName, String databaseName, final ServiceCallback<USqlDatabase> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlDatabase> getDatabaseAsync(String accountName, String databaseName, final ServiceCallback<USqlDatabase> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseAsync(String,String,final ServiceCallback<USqlDatabase>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseWithServiceResponseAsync(String accountName, String databaseName)
  name: getDatabaseWithServiceResponseAsync(String accountName, String databaseName)
  nameWithType: Catalogs.getDatabaseWithServiceResponseAsync(String accountName, String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlDatabase object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlDatabase>> getDatabaseWithServiceResponseAsync(String accountName, String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getDatabaseWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSource(String accountName, String databaseName, String externalDataSourceName)
  name: getExternalDataSource(String accountName, String databaseName, String externalDataSourceName)
  nameWithType: Catalogs.getExternalDataSource(String accountName, String databaseName, String externalDataSourceName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data source. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the external data source. </p>
    name: externalDataSourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlExternalDataSource object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified external data source from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlExternalDataSource getExternalDataSource(String accountName, String databaseName, String externalDataSourceName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSource(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName)
  name: getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName)
  nameWithType: Catalogs.getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data source. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the external data source. </p>
    name: externalDataSourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlExternalDataSource object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified external data source from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlExternalDataSource> getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName, final ServiceCallback<USqlExternalDataSource> serviceCallback)
  name: getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName, final ServiceCallback<USqlExternalDataSource> serviceCallback)
  nameWithType: Catalogs.getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName, final ServiceCallback<USqlExternalDataSource> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data source. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the external data source. </p>
    name: externalDataSourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified external data source from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlExternalDataSource> getExternalDataSourceAsync(String accountName, String databaseName, String externalDataSourceName, final ServiceCallback<USqlExternalDataSource> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceAsync(String,String,String,final ServiceCallback<USqlExternalDataSource>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceWithServiceResponseAsync(String accountName, String databaseName, String externalDataSourceName)
  name: getExternalDataSourceWithServiceResponseAsync(String accountName, String databaseName, String externalDataSourceName)
  nameWithType: Catalogs.getExternalDataSourceWithServiceResponseAsync(String accountName, String databaseName, String externalDataSourceName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data source. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the external data source. </p>
    name: externalDataSourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlExternalDataSource object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified external data source from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlExternalDataSource>> getExternalDataSourceWithServiceResponseAsync(String accountName, String databaseName, String externalDataSourceName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getExternalDataSourceWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackage(String accountName, String databaseName, String schemaName, String packageName)
  name: getPackage(String accountName, String databaseName, String schemaName, String packageName)
  nameWithType: Catalogs.getPackage(String accountName, String databaseName, String schemaName, String packageName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the package. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the package. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the package. </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlPackage object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified package from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlPackage getPackage(String accountName, String databaseName, String schemaName, String packageName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackage(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageAsync(String accountName, String databaseName, String schemaName, String packageName)
  name: getPackageAsync(String accountName, String databaseName, String schemaName, String packageName)
  nameWithType: Catalogs.getPackageAsync(String accountName, String databaseName, String schemaName, String packageName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the package. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the package. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the package. </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlPackage object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified package from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlPackage> getPackageAsync(String accountName, String databaseName, String schemaName, String packageName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageAsync(String accountName, String databaseName, String schemaName, String packageName, final ServiceCallback<USqlPackage> serviceCallback)
  name: getPackageAsync(String accountName, String databaseName, String schemaName, String packageName, final ServiceCallback<USqlPackage> serviceCallback)
  nameWithType: Catalogs.getPackageAsync(String accountName, String databaseName, String schemaName, String packageName, final ServiceCallback<USqlPackage> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the package. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the package. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the package. </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified package from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlPackage> getPackageAsync(String accountName, String databaseName, String schemaName, String packageName, final ServiceCallback<USqlPackage> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageAsync(String,String,String,String,final ServiceCallback<USqlPackage>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String packageName)
  name: getPackageWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String packageName)
  nameWithType: Catalogs.getPackageWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String packageName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the package. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the package. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the package. </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlPackage object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified package from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlPackage>> getPackageWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String packageName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getPackageWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedure(String accountName, String databaseName, String schemaName, String procedureName)
  name: getProcedure(String accountName, String databaseName, String schemaName, String procedureName)
  nameWithType: Catalogs.getProcedure(String accountName, String databaseName, String schemaName, String procedureName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedure. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedure. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the procedure. </p>
    name: procedureName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlProcedure object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified procedure from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlProcedure getProcedure(String accountName, String databaseName, String schemaName, String procedureName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedure(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName)
  name: getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName)
  nameWithType: Catalogs.getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedure. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedure. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the procedure. </p>
    name: procedureName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlProcedure object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified procedure from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlProcedure> getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName, final ServiceCallback<USqlProcedure> serviceCallback)
  name: getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName, final ServiceCallback<USqlProcedure> serviceCallback)
  nameWithType: Catalogs.getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName, final ServiceCallback<USqlProcedure> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedure. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedure. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the procedure. </p>
    name: procedureName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified procedure from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlProcedure> getProcedureAsync(String accountName, String databaseName, String schemaName, String procedureName, final ServiceCallback<USqlProcedure> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureAsync(String,String,String,String,final ServiceCallback<USqlProcedure>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String procedureName)
  name: getProcedureWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String procedureName)
  nameWithType: Catalogs.getProcedureWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String procedureName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedure. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedure. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the procedure. </p>
    name: procedureName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlProcedure object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified procedure from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlProcedure>> getProcedureWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String procedureName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getProcedureWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchema(String accountName, String databaseName, String schemaName)
  name: getSchema(String accountName, String databaseName, String schemaName)
  nameWithType: Catalogs.getSchema(String accountName, String databaseName, String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlSchema object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlSchema getSchema(String accountName, String databaseName, String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchema(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaAsync(String accountName, String databaseName, String schemaName)
  name: getSchemaAsync(String accountName, String databaseName, String schemaName)
  nameWithType: Catalogs.getSchemaAsync(String accountName, String databaseName, String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlSchema object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlSchema> getSchemaAsync(String accountName, String databaseName, String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaAsync(String accountName, String databaseName, String schemaName, final ServiceCallback<USqlSchema> serviceCallback)
  name: getSchemaAsync(String accountName, String databaseName, String schemaName, final ServiceCallback<USqlSchema> serviceCallback)
  nameWithType: Catalogs.getSchemaAsync(String accountName, String databaseName, String schemaName, final ServiceCallback<USqlSchema> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlSchema> getSchemaAsync(String accountName, String databaseName, String schemaName, final ServiceCallback<USqlSchema> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaAsync(String,String,String,final ServiceCallback<USqlSchema>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaWithServiceResponseAsync(String accountName, String databaseName, String schemaName)
  name: getSchemaWithServiceResponseAsync(String accountName, String databaseName, String schemaName)
  nameWithType: Catalogs.getSchemaWithServiceResponseAsync(String accountName, String databaseName, String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlSchema object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlSchema>> getSchemaWithServiceResponseAsync(String accountName, String databaseName, String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSchemaWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecret(String accountName, String databaseName, String secretName)
  name: getSecret(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.getSecret(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to get </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlSecret object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSecret?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSecret&text=USqlSecret" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.</p>

    <p></p>
  syntax: public USqlSecret getSecret(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecret(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretAsync(String accountName, String databaseName, String secretName)
  name: getSecretAsync(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.getSecretAsync(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to get </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlSecret object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSecret?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSecret&text=USqlSecret" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.</p>

    <p></p>
  syntax: public Observable<USqlSecret> getSecretAsync(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<USqlSecret> serviceCallback)
  name: getSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<USqlSecret> serviceCallback)
  nameWithType: Catalogs.getSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<USqlSecret> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to get </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSecret?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSecret&text=USqlSecret" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSecret?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSecret&text=USqlSecret" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.</p>

    <p></p>
  syntax: public ServiceFuture<USqlSecret> getSecretAsync(String accountName, String databaseName, String secretName, final ServiceCallback<USqlSecret> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretAsync(String,String,String,final ServiceCallback<USqlSecret>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  name: getSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  nameWithType: Catalogs.getSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret to get </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlSecret object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSecret?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSecret&text=USqlSecret" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified secret in the specified database. This is deprecated and will be removed in the next release. Please use GetCredential instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlSecret>> getSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getSecretWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTable(String accountName, String databaseName, String schemaName, String tableName)
  name: getTable(String accountName, String databaseName, String schemaName, String tableName)
  nameWithType: Catalogs.getTable(String accountName, String databaseName, String schemaName, String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlTable object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified table from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlTable getTable(String accountName, String databaseName, String schemaName, String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTable(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableAsync(String accountName, String databaseName, String schemaName, String tableName)
  name: getTableAsync(String accountName, String databaseName, String schemaName, String tableName)
  nameWithType: Catalogs.getTableAsync(String accountName, String databaseName, String schemaName, String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTable object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlTable> getTableAsync(String accountName, String databaseName, String schemaName, String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableAsync(String accountName, String databaseName, String schemaName, String tableName, final ServiceCallback<USqlTable> serviceCallback)
  name: getTableAsync(String accountName, String databaseName, String schemaName, String tableName, final ServiceCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.getTableAsync(String accountName, String databaseName, String schemaName, String tableName, final ServiceCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlTable> getTableAsync(String accountName, String databaseName, String schemaName, String tableName, final ServiceCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableAsync(String,String,String,String,final ServiceCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartition(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  name: getTablePartition(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  nameWithType: Catalogs.getTablePartition(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partition. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partition. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partition. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table partition. </p>
    name: partitionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlTablePartition object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified table partition from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlTablePartition getTablePartition(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartition(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  name: getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  nameWithType: Catalogs.getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partition. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partition. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partition. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table partition. </p>
    name: partitionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTablePartition object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table partition from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlTablePartition> getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName, final ServiceCallback<USqlTablePartition> serviceCallback)
  name: getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName, final ServiceCallback<USqlTablePartition> serviceCallback)
  nameWithType: Catalogs.getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName, final ServiceCallback<USqlTablePartition> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partition. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partition. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partition. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table partition. </p>
    name: partitionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table partition from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlTablePartition> getTablePartitionAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName, final ServiceCallback<USqlTablePartition> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionAsync(String,String,String,String,String,final ServiceCallback<USqlTablePartition>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  name: getTablePartitionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  nameWithType: Catalogs.getTablePartitionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partition. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partition. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partition. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table partition. </p>
    name: partitionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTablePartition object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified table partition from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlTablePartition>> getTablePartitionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String partitionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTablePartitionWithServiceResponseAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatistic(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  name: getTableStatistic(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  nameWithType: Catalogs.getTableStatistic(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table statistics. </p>
    name: statisticsName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlTableStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlTableStatistics getTableStatistic(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatistic(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  name: getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  nameWithType: Catalogs.getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table statistics. </p>
    name: statisticsName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlTableStatistics> getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName, final ServiceCallback<USqlTableStatistics> serviceCallback)
  name: getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName, final ServiceCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName, final ServiceCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table statistics. </p>
    name: statisticsName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlTableStatistics> getTableStatisticAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName, final ServiceCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticAsync(String,String,String,String,String,final ServiceCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  name: getTableStatisticWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  nameWithType: Catalogs.getTableStatisticWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table statistics. </p>
    name: statisticsName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableStatistics object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlTableStatistics>> getTableStatisticWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName, String statisticsName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableStatisticWithServiceResponseAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableType(String accountName, String databaseName, String schemaName, String tableTypeName)
  name: getTableType(String accountName, String databaseName, String schemaName, String tableTypeName)
  nameWithType: Catalogs.getTableType(String accountName, String databaseName, String schemaName, String tableTypeName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table type. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table type. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table type to retrieve. </p>
    name: tableTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlTableType object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified table type from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlTableType getTableType(String accountName, String databaseName, String schemaName, String tableTypeName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableType(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  name: getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  nameWithType: Catalogs.getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table type. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table type. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table type to retrieve. </p>
    name: tableTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableType object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table type from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlTableType> getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName, final ServiceCallback<USqlTableType> serviceCallback)
  name: getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName, final ServiceCallback<USqlTableType> serviceCallback)
  nameWithType: Catalogs.getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName, final ServiceCallback<USqlTableType> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table type. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table type. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table type to retrieve. </p>
    name: tableTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table type from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlTableType> getTableTypeAsync(String accountName, String databaseName, String schemaName, String tableTypeName, final ServiceCallback<USqlTableType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeAsync(String,String,String,String,final ServiceCallback<USqlTableType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  name: getTableTypeWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  nameWithType: Catalogs.getTableTypeWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table type. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table type. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table type to retrieve. </p>
    name: tableTypeName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableType object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified table type from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlTableType>> getTableTypeWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableTypeName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableTypeWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunction(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  name: getTableValuedFunction(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  nameWithType: Catalogs.getTableValuedFunction(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued function. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued function. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the tableValuedFunction. </p>
    name: tableValuedFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlTableValuedFunction object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified table valued function from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlTableValuedFunction getTableValuedFunction(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunction(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  name: getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  nameWithType: Catalogs.getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued function. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued function. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the tableValuedFunction. </p>
    name: tableValuedFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableValuedFunction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table valued function from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlTableValuedFunction> getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName, final ServiceCallback<USqlTableValuedFunction> serviceCallback)
  name: getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName, final ServiceCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName, final ServiceCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued function. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued function. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the tableValuedFunction. </p>
    name: tableValuedFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified table valued function from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlTableValuedFunction> getTableValuedFunctionAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName, final ServiceCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionAsync(String,String,String,String,final ServiceCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  name: getTableValuedFunctionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  nameWithType: Catalogs.getTableValuedFunctionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued function. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued function. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the tableValuedFunction. </p>
    name: tableValuedFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTableValuedFunction object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified table valued function from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlTableValuedFunction>> getTableValuedFunctionWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableValuedFunctionName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableValuedFunctionWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName)
  name: getTableWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName)
  nameWithType: Catalogs.getTableWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table. </p>
    name: tableName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlTable object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified table from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlTable>> getTableWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getTableWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getView(String accountName, String databaseName, String schemaName, String viewName)
  name: getView(String accountName, String databaseName, String schemaName, String viewName)
  nameWithType: Catalogs.getView(String accountName, String databaseName, String schemaName, String viewName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the view. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the view. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the view. </p>
    name: viewName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the USqlView object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the specified view from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public USqlView getView(String accountName, String databaseName, String schemaName, String viewName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getView(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewAsync(String accountName, String databaseName, String schemaName, String viewName)
  name: getViewAsync(String accountName, String databaseName, String schemaName, String viewName)
  nameWithType: Catalogs.getViewAsync(String accountName, String databaseName, String schemaName, String viewName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the view. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the view. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the view. </p>
    name: viewName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlView object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified view from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<USqlView> getViewAsync(String accountName, String databaseName, String schemaName, String viewName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewAsync(String accountName, String databaseName, String schemaName, String viewName, final ServiceCallback<USqlView> serviceCallback)
  name: getViewAsync(String accountName, String databaseName, String schemaName, String viewName, final ServiceCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.getViewAsync(String accountName, String databaseName, String schemaName, String viewName, final ServiceCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the view. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the view. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the view. </p>
    name: viewName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the specified view from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<USqlView> getViewAsync(String accountName, String databaseName, String schemaName, String viewName, final ServiceCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewAsync(String,String,String,String,final ServiceCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String viewName)
  name: getViewWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String viewName)
  nameWithType: Catalogs.getViewWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String viewName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the view. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the view. </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the view. </p>
    name: viewName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the USqlView object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the specified view from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<USqlView>> getViewWithServiceResponseAsync(String accountName, String databaseName, String schemaName, String viewName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.getViewWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssemblies(final String accountName, final String databaseName)
  name: listAssemblies(final String accountName, final String databaseName)
  nameWithType: Catalogs.listAssemblies(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlAssemblyClr&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlAssemblyClr> listAssemblies(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssemblies(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssemblies(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAssemblies(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listAssemblies(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlAssemblyClr&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlAssemblyClr> listAssemblies(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssemblies(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String accountName, final String databaseName)
  name: listAssembliesAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listAssembliesAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlAssemblyClr>> listAssembliesAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  name: listAssembliesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  nameWithType: Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlAssemblyClr>> listAssembliesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String,final String,final ListOperationCallback<USqlAssemblyClr>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlAssemblyClr>> listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  name: listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  nameWithType: Catalogs.listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlAssemblyClr>> listAssembliesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlAssemblyClr>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNext(final String nextPageLink)
  name: listAssembliesNext(final String nextPageLink)
  nameWithType: Catalogs.listAssembliesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlAssemblyClr&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlAssemblyClr> listAssembliesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextAsync(final String nextPageLink)
  name: listAssembliesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listAssembliesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlAssemblyClr>> listAssembliesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlAssemblyClr>> serviceFuture, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  name: listAssembliesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlAssemblyClr>> serviceFuture, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  nameWithType: Catalogs.listAssembliesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlAssemblyClr>> serviceFuture, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlAssemblyClr>> listAssembliesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlAssemblyClr>> serviceFuture, final ListOperationCallback<USqlAssemblyClr> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextAsync(final String,final ServiceFuture<List<USqlAssemblyClr>>,final ListOperationCallback<USqlAssemblyClr>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextWithServiceResponseAsync(final String nextPageLink)
  name: listAssembliesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listAssembliesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlAssemblyClr>>> listAssembliesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlAssemblyClr>>> listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the assembly. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlAssemblyClr&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr?alt=com.microsoft.azure.management.datalake.analytics.models.USqlAssemblyClr&text=USqlAssemblyClr" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of assemblies from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlAssemblyClr>>> listAssembliesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listAssembliesWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentials(final String accountName, final String databaseName)
  name: listCredentials(final String accountName, final String databaseName)
  nameWithType: Catalogs.listCredentials(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlCredential&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlCredential> listCredentials(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentials(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentials(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listCredentials(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listCredentials(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlCredential&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlCredential> listCredentials(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentials(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String accountName, final String databaseName)
  name: listCredentialsAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listCredentialsAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlCredential>> listCredentialsAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlCredential> serviceCallback)
  name: listCredentialsAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlCredential> serviceCallback)
  nameWithType: Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlCredential> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlCredential>> listCredentialsAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlCredential> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String,final String,final ListOperationCallback<USqlCredential>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlCredential>> listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlCredential> serviceCallback)
  name: listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlCredential> serviceCallback)
  nameWithType: Catalogs.listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlCredential> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlCredential>> listCredentialsAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlCredential> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlCredential>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNext(final String nextPageLink)
  name: listCredentialsNext(final String nextPageLink)
  nameWithType: Catalogs.listCredentialsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlCredential&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlCredential> listCredentialsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextAsync(final String nextPageLink)
  name: listCredentialsNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listCredentialsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlCredential>> listCredentialsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlCredential>> serviceFuture, final ListOperationCallback<USqlCredential> serviceCallback)
  name: listCredentialsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlCredential>> serviceFuture, final ListOperationCallback<USqlCredential> serviceCallback)
  nameWithType: Catalogs.listCredentialsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlCredential>> serviceFuture, final ListOperationCallback<USqlCredential> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlCredential>> listCredentialsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlCredential>> serviceFuture, final ListOperationCallback<USqlCredential> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextAsync(final String,final ServiceFuture<List<USqlCredential>>,final ListOperationCallback<USqlCredential>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextWithServiceResponseAsync(final String nextPageLink)
  name: listCredentialsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listCredentialsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlCredential>>> listCredentialsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlCredential>>> listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlCredential&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlCredential?alt=com.microsoft.azure.management.datalake.analytics.models.USqlCredential&text=USqlCredential" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of credentials from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlCredential>>> listCredentialsWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listCredentialsWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabases(final String accountName)
  name: listDatabases(final String accountName)
  nameWithType: Catalogs.listDatabases(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlDatabase&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlDatabase> listDatabases(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabases(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabases(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listDatabases(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listDatabases(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlDatabase&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlDatabase> listDatabases(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabases(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String accountName)
  name: listDatabasesAsync(final String accountName)
  nameWithType: Catalogs.listDatabasesAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlDatabase>> listDatabasesAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String accountName, final ListOperationCallback<USqlDatabase> serviceCallback)
  name: listDatabasesAsync(final String accountName, final ListOperationCallback<USqlDatabase> serviceCallback)
  nameWithType: Catalogs.listDatabasesAsync(final String accountName, final ListOperationCallback<USqlDatabase> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlDatabase>> listDatabasesAsync(final String accountName, final ListOperationCallback<USqlDatabase> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String,final ListOperationCallback<USqlDatabase>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlDatabase>> listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlDatabase> serviceCallback)
  name: listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlDatabase> serviceCallback)
  nameWithType: Catalogs.listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlDatabase> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlDatabase>> listDatabasesAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlDatabase> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlDatabase>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNext(final String nextPageLink)
  name: listDatabasesNext(final String nextPageLink)
  nameWithType: Catalogs.listDatabasesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlDatabase&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlDatabase> listDatabasesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextAsync(final String nextPageLink)
  name: listDatabasesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listDatabasesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlDatabase>> listDatabasesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlDatabase>> serviceFuture, final ListOperationCallback<USqlDatabase> serviceCallback)
  name: listDatabasesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlDatabase>> serviceFuture, final ListOperationCallback<USqlDatabase> serviceCallback)
  nameWithType: Catalogs.listDatabasesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlDatabase>> serviceFuture, final ListOperationCallback<USqlDatabase> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlDatabase>> listDatabasesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlDatabase>> serviceFuture, final ListOperationCallback<USqlDatabase> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextAsync(final String,final ServiceFuture<List<USqlDatabase>>,final ListOperationCallback<USqlDatabase>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextWithServiceResponseAsync(final String nextPageLink)
  name: listDatabasesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listDatabasesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlDatabase>>> listDatabasesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesWithServiceResponseAsync(final String accountName)
  name: listDatabasesWithServiceResponseAsync(final String accountName)
  nameWithType: Catalogs.listDatabasesWithServiceResponseAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlDatabase>>> listDatabasesWithServiceResponseAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listDatabasesWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listDatabasesWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlDatabase&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlDatabase?alt=com.microsoft.azure.management.datalake.analytics.models.USqlDatabase&text=USqlDatabase" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of databases from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlDatabase>>> listDatabasesWithServiceResponseAsync(final String accountName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listDatabasesWithServiceResponseAsync(final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSources(final String accountName, final String databaseName)
  name: listExternalDataSources(final String accountName, final String databaseName)
  nameWithType: Catalogs.listExternalDataSources(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlExternalDataSource&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlExternalDataSource> listExternalDataSources(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSources(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSources(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listExternalDataSources(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listExternalDataSources(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlExternalDataSource&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlExternalDataSource> listExternalDataSources(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSources(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName)
  name: listExternalDataSourcesAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlExternalDataSource>> listExternalDataSourcesAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  name: listExternalDataSourcesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  nameWithType: Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlExternalDataSource>> listExternalDataSourcesAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String,final String,final ListOperationCallback<USqlExternalDataSource>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlExternalDataSource>> listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  name: listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  nameWithType: Catalogs.listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlExternalDataSource>> listExternalDataSourcesAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlExternalDataSource>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNext(final String nextPageLink)
  name: listExternalDataSourcesNext(final String nextPageLink)
  nameWithType: Catalogs.listExternalDataSourcesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlExternalDataSource&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlExternalDataSource> listExternalDataSourcesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextAsync(final String nextPageLink)
  name: listExternalDataSourcesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listExternalDataSourcesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlExternalDataSource>> listExternalDataSourcesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlExternalDataSource>> serviceFuture, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  name: listExternalDataSourcesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlExternalDataSource>> serviceFuture, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  nameWithType: Catalogs.listExternalDataSourcesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlExternalDataSource>> serviceFuture, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlExternalDataSource>> listExternalDataSourcesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlExternalDataSource>> serviceFuture, final ListOperationCallback<USqlExternalDataSource> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextAsync(final String,final ServiceFuture<List<USqlExternalDataSource>>,final ListOperationCallback<USqlExternalDataSource>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextWithServiceResponseAsync(final String nextPageLink)
  name: listExternalDataSourcesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listExternalDataSourcesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlExternalDataSource>>> listExternalDataSourcesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlExternalDataSource>>> listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the external data sources. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlExternalDataSource&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource?alt=com.microsoft.azure.management.datalake.analytics.models.USqlExternalDataSource&text=USqlExternalDataSource" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of external data sources from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlExternalDataSource>>> listExternalDataSourcesWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listExternalDataSourcesWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackages(final String accountName, final String databaseName, final String schemaName)
  name: listPackages(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listPackages(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlPackage&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlPackage> listPackages(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackages(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackages(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listPackages(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listPackages(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlPackage&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlPackage> listPackages(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackages(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName)
  name: listPackagesAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlPackage>> listPackagesAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlPackage> serviceCallback)
  name: listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlPackage> serviceCallback)
  nameWithType: Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlPackage> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlPackage>> listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlPackage> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String,final String,final String,final ListOperationCallback<USqlPackage>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlPackage>> listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlPackage> serviceCallback)
  name: listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlPackage> serviceCallback)
  nameWithType: Catalogs.listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlPackage> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlPackage>> listPackagesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlPackage> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlPackage>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNext(final String nextPageLink)
  name: listPackagesNext(final String nextPageLink)
  nameWithType: Catalogs.listPackagesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlPackage&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlPackage> listPackagesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextAsync(final String nextPageLink)
  name: listPackagesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listPackagesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlPackage>> listPackagesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlPackage>> serviceFuture, final ListOperationCallback<USqlPackage> serviceCallback)
  name: listPackagesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlPackage>> serviceFuture, final ListOperationCallback<USqlPackage> serviceCallback)
  nameWithType: Catalogs.listPackagesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlPackage>> serviceFuture, final ListOperationCallback<USqlPackage> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlPackage>> listPackagesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlPackage>> serviceFuture, final ListOperationCallback<USqlPackage> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextAsync(final String,final ServiceFuture<List<USqlPackage>>,final ListOperationCallback<USqlPackage>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextWithServiceResponseAsync(final String nextPageLink)
  name: listPackagesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listPackagesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlPackage>>> listPackagesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlPackage>>> listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the packages. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the packages. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlPackage&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlPackage?alt=com.microsoft.azure.management.datalake.analytics.models.USqlPackage&text=USqlPackage" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of packages from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlPackage>>> listPackagesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listPackagesWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProcedures(final String accountName, final String databaseName, final String schemaName)
  name: listProcedures(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listProcedures(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlProcedure&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlProcedure> listProcedures(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProcedures(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProcedures(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listProcedures(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listProcedures(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlProcedure&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlProcedure> listProcedures(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProcedures(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName)
  name: listProceduresAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlProcedure>> listProceduresAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlProcedure> serviceCallback)
  name: listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlProcedure> serviceCallback)
  nameWithType: Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlProcedure> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlProcedure>> listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlProcedure> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String,final String,final String,final ListOperationCallback<USqlProcedure>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlProcedure>> listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlProcedure> serviceCallback)
  name: listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlProcedure> serviceCallback)
  nameWithType: Catalogs.listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlProcedure> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlProcedure>> listProceduresAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlProcedure> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlProcedure>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNext(final String nextPageLink)
  name: listProceduresNext(final String nextPageLink)
  nameWithType: Catalogs.listProceduresNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlProcedure&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlProcedure> listProceduresNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextAsync(final String nextPageLink)
  name: listProceduresNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listProceduresNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlProcedure>> listProceduresNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextAsync(final String nextPageLink, final ServiceFuture<List<USqlProcedure>> serviceFuture, final ListOperationCallback<USqlProcedure> serviceCallback)
  name: listProceduresNextAsync(final String nextPageLink, final ServiceFuture<List<USqlProcedure>> serviceFuture, final ListOperationCallback<USqlProcedure> serviceCallback)
  nameWithType: Catalogs.listProceduresNextAsync(final String nextPageLink, final ServiceFuture<List<USqlProcedure>> serviceFuture, final ListOperationCallback<USqlProcedure> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlProcedure>> listProceduresNextAsync(final String nextPageLink, final ServiceFuture<List<USqlProcedure>> serviceFuture, final ListOperationCallback<USqlProcedure> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextAsync(final String,final ServiceFuture<List<USqlProcedure>>,final ListOperationCallback<USqlProcedure>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextWithServiceResponseAsync(final String nextPageLink)
  name: listProceduresNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listProceduresNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlProcedure>>> listProceduresNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlProcedure>>> listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the procedures. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the procedures. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlProcedure&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlProcedure?alt=com.microsoft.azure.management.datalake.analytics.models.USqlProcedure&text=USqlProcedure" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of procedures from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlProcedure>>> listProceduresWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listProceduresWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemas(final String accountName, final String databaseName)
  name: listSchemas(final String accountName, final String databaseName)
  nameWithType: Catalogs.listSchemas(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlSchema&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlSchema> listSchemas(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemas(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemas(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listSchemas(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listSchemas(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlSchema&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlSchema> listSchemas(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemas(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String accountName, final String databaseName)
  name: listSchemasAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listSchemasAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlSchema>> listSchemasAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlSchema> serviceCallback)
  name: listSchemasAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlSchema> serviceCallback)
  nameWithType: Catalogs.listSchemasAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlSchema> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlSchema>> listSchemasAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlSchema> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String,final String,final ListOperationCallback<USqlSchema>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlSchema>> listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlSchema> serviceCallback)
  name: listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlSchema> serviceCallback)
  nameWithType: Catalogs.listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlSchema> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlSchema>> listSchemasAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlSchema> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlSchema>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNext(final String nextPageLink)
  name: listSchemasNext(final String nextPageLink)
  nameWithType: Catalogs.listSchemasNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlSchema&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlSchema> listSchemasNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextAsync(final String nextPageLink)
  name: listSchemasNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listSchemasNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlSchema>> listSchemasNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextAsync(final String nextPageLink, final ServiceFuture<List<USqlSchema>> serviceFuture, final ListOperationCallback<USqlSchema> serviceCallback)
  name: listSchemasNextAsync(final String nextPageLink, final ServiceFuture<List<USqlSchema>> serviceFuture, final ListOperationCallback<USqlSchema> serviceCallback)
  nameWithType: Catalogs.listSchemasNextAsync(final String nextPageLink, final ServiceFuture<List<USqlSchema>> serviceFuture, final ListOperationCallback<USqlSchema> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlSchema>> listSchemasNextAsync(final String nextPageLink, final ServiceFuture<List<USqlSchema>> serviceFuture, final ListOperationCallback<USqlSchema> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextAsync(final String,final ServiceFuture<List<USqlSchema>>,final ListOperationCallback<USqlSchema>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextWithServiceResponseAsync(final String nextPageLink)
  name: listSchemasNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listSchemasNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlSchema>>> listSchemasNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listSchemasWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listSchemasWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlSchema>>> listSchemasWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listSchemasWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listSchemasWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the schema. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlSchema&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlSchema?alt=com.microsoft.azure.management.datalake.analytics.models.USqlSchema&text=USqlSchema" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of schemas from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlSchema>>> listSchemasWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listSchemasWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTablePartition&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTablePartition> listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitions(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTablePartition&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTablePartition> listTablePartitions(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitions(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTablePartition>> listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTablePartition> serviceCallback)
  name: listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTablePartition> serviceCallback)
  nameWithType: Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTablePartition> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTablePartition>> listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTablePartition> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String,final String,final String,final String,final ListOperationCallback<USqlTablePartition>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTablePartition>> listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTablePartition> serviceCallback)
  name: listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTablePartition> serviceCallback)
  nameWithType: Catalogs.listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTablePartition> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTablePartition>> listTablePartitionsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTablePartition> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTablePartition>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNext(final String nextPageLink)
  name: listTablePartitionsNext(final String nextPageLink)
  nameWithType: Catalogs.listTablePartitionsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTablePartition&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTablePartition> listTablePartitionsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextAsync(final String nextPageLink)
  name: listTablePartitionsNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablePartitionsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTablePartition>> listTablePartitionsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTablePartition>> serviceFuture, final ListOperationCallback<USqlTablePartition> serviceCallback)
  name: listTablePartitionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTablePartition>> serviceFuture, final ListOperationCallback<USqlTablePartition> serviceCallback)
  nameWithType: Catalogs.listTablePartitionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTablePartition>> serviceFuture, final ListOperationCallback<USqlTablePartition> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTablePartition>> listTablePartitionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTablePartition>> serviceFuture, final ListOperationCallback<USqlTablePartition> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextAsync(final String,final ServiceFuture<List<USqlTablePartition>>,final ListOperationCallback<USqlTablePartition>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextWithServiceResponseAsync(final String nextPageLink)
  name: listTablePartitionsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablePartitionsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTablePartition>>> listTablePartitionsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTablePartition>>> listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsWithServiceResponseAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the partitions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the partitions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the partitions. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTablePartition&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTablePartition&text=USqlTablePartition" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table partitions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTablePartition>>> listTablePartitionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablePartitionsWithServiceResponseAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTables(final String accountName, final String databaseName, final String schemaName)
  name: listTables(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTables(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTables(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTables(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTables(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTables(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTables(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTables(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTables(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTablesAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String,final String,final String,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabase(final String accountName, final String databaseName)
  name: listTablesByDatabase(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTablesByDatabase(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTablesByDatabase(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabase(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTablesByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTablesByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTablesByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabase(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName)
  name: listTablesByDatabaseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesByDatabaseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String,final String,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNext(final String nextPageLink)
  name: listTablesByDatabaseNext(final String nextPageLink)
  nameWithType: Catalogs.listTablesByDatabaseNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTablesByDatabaseNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextAsync(final String nextPageLink)
  name: listTablesByDatabaseNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablesByDatabaseNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesByDatabaseNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextAsync(final String,final ServiceFuture<List<USqlTable>>,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  name: listTablesByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablesByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all tables in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesByDatabaseWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNext(final String nextPageLink)
  name: listTablesNext(final String nextPageLink)
  nameWithType: Catalogs.listTablesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTable&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTable> listTablesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextAsync(final String nextPageLink)
  name: listTablesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTable>> listTablesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  name: listTablesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  nameWithType: Catalogs.listTablesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTable>> listTablesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTable>> serviceFuture, final ListOperationCallback<USqlTable> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextAsync(final String,final ServiceFuture<List<USqlTable>>,final ListOperationCallback<USqlTable>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextWithServiceResponseAsync(final String nextPageLink)
  name: listTablesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTablesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatistics(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatistics(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatistics(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String,final String,final String,final String,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabase(final String accountName, final String databaseName)
  name: listTableStatisticsByDatabase(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableStatisticsByDatabase(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabase(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabase(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabase(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName)
  name: listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchema(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabaseAndSchema(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchema(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String,final String,final String,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNext(final String nextPageLink)
  name: listTableStatisticsByDatabaseAndSchemaNext(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabaseAndSchemaNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink)
  name: listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseAndSchemaNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextAsync(final String,final ServiceFuture<List<USqlTableStatistics>>,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableStatisticsByDatabaseAndSchemaNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseAndSchemaNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table statistics within the specified schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAndSchemaWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName)
  name: listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String,final String,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNext(final String nextPageLink)
  name: listTableStatisticsByDatabaseNext(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsByDatabaseNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextAsync(final String nextPageLink)
  name: listTableStatisticsByDatabaseNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsByDatabaseNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextAsync(final String,final ServiceFuture<List<USqlTableStatistics>>,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableStatisticsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all statistics in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsByDatabaseWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNext(final String nextPageLink)
  name: listTableStatisticsNext(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableStatistics&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableStatistics> listTableStatisticsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextAsync(final String nextPageLink)
  name: listTableStatisticsNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableStatistics>> listTableStatisticsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  name: listTableStatisticsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  nameWithType: Catalogs.listTableStatisticsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableStatistics>> listTableStatisticsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableStatistics>> serviceFuture, final ListOperationCallback<USqlTableStatistics> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextAsync(final String,final ServiceFuture<List<USqlTableStatistics>>,final ListOperationCallback<USqlTableStatistics>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableStatisticsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableStatisticsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  name: listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  nameWithType: Catalogs.listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsWithServiceResponseAsync(final String,final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the statistics. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the statistics. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the table containing the statistics. </p>
    name: tableName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableStatistics&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableStatistics&text=USqlTableStatistics" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table statistics from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableStatistics>>> listTableStatisticsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String tableName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableStatisticsWithServiceResponseAsync(final String,final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  name: listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  nameWithType: Catalogs.listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the tables. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the tables. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The basic switch indicates what level of information to return when listing tables. When basic is true, only database_name, schema_name, table_name and version are returned for each table, otherwise all table metadata is returned. By default, it is false. Optional. </p>
    name: basic
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTable&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTable?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTable&text=USqlTable" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of tables from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTable>>> listTablesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final Boolean basic)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTablesWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypes(final String accountName, final String databaseName, final String schemaName)
  name: listTableTypes(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableTypes(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableType> listTableTypes(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypes(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableType> listTableTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypes(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableTypesAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableType>> listTableTypesAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableType> serviceCallback)
  name: listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableType> serviceCallback)
  nameWithType: Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableType> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableType>> listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String,final String,final String,final ListOperationCallback<USqlTableType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableType>> listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableType> serviceCallback)
  name: listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableType> serviceCallback)
  nameWithType: Catalogs.listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableType> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableType>> listTableTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNext(final String nextPageLink)
  name: listTableTypesNext(final String nextPageLink)
  nameWithType: Catalogs.listTableTypesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableType> listTableTypesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextAsync(final String nextPageLink)
  name: listTableTypesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableTypesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableType>> listTableTypesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableType>> serviceFuture, final ListOperationCallback<USqlTableType> serviceCallback)
  name: listTableTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableType>> serviceFuture, final ListOperationCallback<USqlTableType> serviceCallback)
  nameWithType: Catalogs.listTableTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableType>> serviceFuture, final ListOperationCallback<USqlTableType> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableType>> listTableTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableType>> serviceFuture, final ListOperationCallback<USqlTableType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextAsync(final String,final ServiceFuture<List<USqlTableType>>,final ListOperationCallback<USqlTableType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableTypesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableTypesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableType>>> listTableTypesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableType>>> listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableType&text=USqlTableType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table types from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableType>>> listTableTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableTypesWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName)
  name: listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctions(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctions(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctions(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String,final String,final String,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabase(final String accountName, final String databaseName)
  name: listTableValuedFunctionsByDatabase(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabase(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctionsByDatabase(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabase(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctionsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctionsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabase(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName)
  name: listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String,final String,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNext(final String nextPageLink)
  name: listTableValuedFunctionsByDatabaseNext(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctionsByDatabaseNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink)
  name: listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextAsync(final String,final ServiceFuture<List<USqlTableValuedFunction>>,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableValuedFunctionsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all table valued functions in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsByDatabaseWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNext(final String nextPageLink)
  name: listTableValuedFunctionsNext(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlTableValuedFunction&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlTableValuedFunction> listTableValuedFunctionsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextAsync(final String nextPageLink)
  name: listTableValuedFunctionsNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlTableValuedFunction>> listTableValuedFunctionsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  name: listTableValuedFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  nameWithType: Catalogs.listTableValuedFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlTableValuedFunction>> listTableValuedFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlTableValuedFunction>> serviceFuture, final ListOperationCallback<USqlTableValuedFunction> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextAsync(final String,final ServiceFuture<List<USqlTableValuedFunction>>,final ListOperationCallback<USqlTableValuedFunction>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextWithServiceResponseAsync(final String nextPageLink)
  name: listTableValuedFunctionsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTableValuedFunctionsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the table valued functions. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the table valued functions. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlTableValuedFunction&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction?alt=com.microsoft.azure.management.datalake.analytics.models.USqlTableValuedFunction&text=USqlTableValuedFunction" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of table valued functions from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlTableValuedFunction>>> listTableValuedFunctionsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTableValuedFunctionsWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypes(final String accountName, final String databaseName, final String schemaName)
  name: listTypes(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTypes(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlType> listTypes(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypes(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlType> listTypes(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypes(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTypesAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlType>> listTypesAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlType> serviceCallback)
  name: listTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlType> serviceCallback)
  nameWithType: Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlType> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlType>> listTypesAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String,final String,final String,final ListOperationCallback<USqlType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlType>> listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlType> serviceCallback)
  name: listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlType> serviceCallback)
  nameWithType: Catalogs.listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlType> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlType>> listTypesAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNext(final String nextPageLink)
  name: listTypesNext(final String nextPageLink)
  nameWithType: Catalogs.listTypesNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlType&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlType> listTypesNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextAsync(final String nextPageLink)
  name: listTypesNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listTypesNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlType>> listTypesNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlType>> serviceFuture, final ListOperationCallback<USqlType> serviceCallback)
  name: listTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlType>> serviceFuture, final ListOperationCallback<USqlType> serviceCallback)
  nameWithType: Catalogs.listTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlType>> serviceFuture, final ListOperationCallback<USqlType> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlType>> listTypesNextAsync(final String nextPageLink, final ServiceFuture<List<USqlType>> serviceFuture, final ListOperationCallback<USqlType> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextAsync(final String,final ServiceFuture<List<USqlType>>,final ListOperationCallback<USqlType>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextWithServiceResponseAsync(final String nextPageLink)
  name: listTypesNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listTypesNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlType>>> listTypesNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlType>>> listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the types. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the types. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlType&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of types within the specified database and schema from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlType>>> listTypesWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listTypesWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViews(final String accountName, final String databaseName, final String schemaName)
  name: listViews(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listViews(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViews(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViews(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViews(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViews(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViews(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViews(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViews(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName)
  name: listViewsAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsAsync(final String accountName, final String databaseName, final String schemaName, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String,final String,final String,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabase(final String accountName, final String databaseName)
  name: listViewsByDatabase(final String accountName, final String databaseName)
  nameWithType: Catalogs.listViewsByDatabase(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViewsByDatabase(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabase(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViewsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViewsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViewsByDatabase(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabase(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName)
  name: listViewsByDatabaseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsByDatabaseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsByDatabaseAsync(final String accountName, final String databaseName, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String,final String,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsByDatabaseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNext(final String nextPageLink)
  name: listViewsByDatabaseNext(final String nextPageLink)
  nameWithType: Catalogs.listViewsByDatabaseNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViewsByDatabaseNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextAsync(final String nextPageLink)
  name: listViewsByDatabaseNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listViewsByDatabaseNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsByDatabaseNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsByDatabaseNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextAsync(final String,final ServiceFuture<List<USqlView>>,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  name: listViewsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listViewsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsByDatabaseNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  name: listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  nameWithType: Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of all views in a database from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsByDatabaseWithServiceResponseAsync(final String accountName, final String databaseName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsByDatabaseWithServiceResponseAsync(final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNext(final String nextPageLink)
  name: listViewsNext(final String nextPageLink)
  nameWithType: Catalogs.listViewsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;USqlView&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public PagedList<USqlView> listViewsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextAsync(final String nextPageLink)
  name: listViewsNextAsync(final String nextPageLink)
  nameWithType: Catalogs.listViewsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<Page<USqlView>> listViewsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  name: listViewsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  nameWithType: Catalogs.listViewsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public ServiceFuture<List<USqlView>> listViewsNextAsync(final String nextPageLink, final ServiceFuture<List<USqlView>> serviceFuture, final ListOperationCallback<USqlView> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextAsync(final String,final ServiceFuture<List<USqlView>>,final ListOperationCallback<USqlView>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextWithServiceResponseAsync(final String nextPageLink)
  name: listViewsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Catalogs.listViewsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  name: listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  nameWithType: Catalogs.listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  name: listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  nameWithType: Catalogs.listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the views. </p>
    name: databaseName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the schema containing the views. </p>
    name: schemaName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter. Optional. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to return. Optional. </p>
    name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning elements. Optional. </p>
    name: skip
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. </p>
    name: orderby
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. </p>
    name: count
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;USqlView&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.USqlView?alt=com.microsoft.azure.management.datalake.analytics.models.USqlView&text=USqlView" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Retrieves the list of views from the Data Lake Analytics catalog.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<USqlView>>> listViewsWithServiceResponseAsync(final String accountName, final String databaseName, final String schemaName, final String filter, final Integer top, final Integer skip, final String select, final String orderby, final Boolean count)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.listViewsWithServiceResponseAsync(final String,final String,final String,final String,final Integer,final Integer,final String,final String,final Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  name: updateCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  nameWithType: Catalogs.updateCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters&text=DataLakeAnalyticsCatalogCredentialUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Modifies the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public void updateCredential(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredential(String,String,String,DataLakeAnalyticsCatalogCredentialUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  name: updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  nameWithType: Catalogs.updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters&text=DataLakeAnalyticsCatalogCredentialUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public Observable<Void> updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters&text=DataLakeAnalyticsCatalogCredentialUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateCredentialAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialAsync(String,String,String,DataLakeAnalyticsCatalogCredentialUpdateParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  name: updateCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  nameWithType: Catalogs.updateCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the credential. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the credential. </p>
    name: credentialName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the credential (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogCredentialUpdateParameters&text=DataLakeAnalyticsCatalogCredentialUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified credential for use with external data sources in the specified database.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> updateCredentialWithServiceResponseAsync(String accountName, String databaseName, String credentialName, DataLakeAnalyticsCatalogCredentialUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateCredentialWithServiceResponseAsync(String,String,String,DataLakeAnalyticsCatalogCredentialUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: updateSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.updateSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.</p>

    <p></p>
  syntax: public void updateSecret(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecret(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.</p>

    <p></p>
  syntax: public Observable<Void> updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: Catalogs.updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateSecretAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  name: updateSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  nameWithType: Catalogs.updateSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The Azure Data Lake Analytics account upon which to execute catalog operations. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the database containing the secret. </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret. </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters required to modify the secret (name and password) </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters&text=DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Modifies the specified secret for use with external data sources in the specified database. This is deprecated and will be removed in the next release. Please use UpdateCredential instead.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> updateSecretWithServiceResponseAsync(String accountName, String databaseName, String secretName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.Catalogs.updateSecretWithServiceResponseAsync(String,String,String,DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters)
nameWithType: Catalogs
syntax: public interface Catalogs
type: interface
uid: com.microsoft.azure.management.datalake.analytics.Catalogs
fullName: com.microsoft.azure.management.datalake.analytics.Catalogs
name: Catalogs
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in Catalogs. </p>
metadata: {}
