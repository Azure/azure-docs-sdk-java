### YamlMime:JavaType
uid: "com.microsoft.azure.management.redis.RedisCache"
fullName: "com.microsoft.azure.management.redis.RedisCache"
name: "RedisCache"
nameWithType: "RedisCache"
summary: "An immutable client-side representation of an Azure Redis Cache."
syntax: "public interface RedisCache extends GroupableResource<RedisManager,RedisResourceInner>, Refreshable<RedisCache>, Updatable<RedisCache.Update>"
methods:
- uid: "com.microsoft.azure.management.redis.RedisCache.asPremium()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.asPremium()"
  name: "asPremium()"
  nameWithType: "RedisCache.asPremium()"
  modifiers:
  - "abstract"
  syntax: "public abstract RedisCachePremium asPremium()"
  returns:
    description: "exposes features available only to Premium Sku Redis Cache instances."
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisCachePremium?alt=com.microsoft.azure.management.redis.RedisCachePremium&text=RedisCachePremium\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.firewallRules()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.firewallRules()"
  name: "firewallRules()"
  nameWithType: "RedisCache.firewallRules()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,RedisFirewallRule> firewallRules()"
  returns:
    description: "Firewall Rules in the Redis Cache, indexed by name"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.redis.RedisFirewallRule?alt=com.microsoft.azure.management.redis.RedisFirewallRule&text=RedisFirewallRule\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.redis.RedisCache.forceReboot(com.microsoft.azure.management.redis.RebootType)"
  fullName: "com.microsoft.azure.management.redis.RedisCache.forceReboot(RebootType rebootType)"
  name: "forceReboot(RebootType rebootType)"
  nameWithType: "RedisCache.forceReboot(RebootType rebootType)"
  summary: "Reboot specified Redis node(s)."
  modifiers:
  - "abstract"
  parameters:
  - description: "specifies which Redis node(s) to reboot. Depending on this value data loss is\n                   possible. Possible values include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'."
    name: "rebootType"
    type: "<xref href=\"com.microsoft.azure.management.redis.RebootType?alt=com.microsoft.azure.management.redis.RebootType&text=RebootType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void forceReboot(RebootType rebootType)"
  desc: "Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss."
- uid: "com.microsoft.azure.management.redis.RedisCache.getKeys()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.getKeys()"
  name: "getKeys()"
  nameWithType: "RedisCache.getKeys()"
  modifiers:
  - "abstract"
  syntax: "public abstract RedisAccessKeys getKeys()"
  returns:
    description: "a Redis Cache's access keys. This operation requires write permission to the Cache resource."
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.hostName()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.hostName()"
  name: "hostName()"
  nameWithType: "RedisCache.hostName()"
  modifiers:
  - "abstract"
  syntax: "public abstract String hostName()"
  returns:
    description: "the hostName value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.isPremium()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.isPremium()"
  name: "isPremium()"
  nameWithType: "RedisCache.isPremium()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isPremium()"
  returns:
    description: "returns true if current Redis Cache instance has Premium Sku."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.keys()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.keys()"
  name: "keys()"
  nameWithType: "RedisCache.keys()"
  modifiers:
  - "abstract"
  syntax: "public abstract RedisAccessKeys keys()"
  returns:
    description: "a Redis Cache's access keys. This operation requires write permission to the Cache resource."
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.minimumTlsVersion()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.minimumTlsVersion()"
  name: "minimumTlsVersion()"
  nameWithType: "RedisCache.minimumTlsVersion()"
  modifiers:
  - "abstract"
  syntax: "public abstract TlsVersion minimumTlsVersion()"
  returns:
    description: "the minimum TLS version (or higher) that clients require to use."
    type: "<xref href=\"com.microsoft.azure.management.redis.TlsVersion?alt=com.microsoft.azure.management.redis.TlsVersion&text=TlsVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.nonSslPort()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.nonSslPort()"
  name: "nonSslPort()"
  nameWithType: "RedisCache.nonSslPort()"
  modifiers:
  - "abstract"
  syntax: "public abstract boolean nonSslPort()"
  returns:
    description: "true if non SSL port is enabled, false otherwise"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.patchSchedules()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.patchSchedules()"
  name: "patchSchedules()"
  nameWithType: "RedisCache.patchSchedules()"
  modifiers:
  - "abstract"
  syntax: "public abstract List<ScheduleEntry> patchSchedules()"
  returns:
    description: "List of patch schedules for current Redis Cache."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.redis.ScheduleEntry?alt=com.microsoft.azure.management.redis.ScheduleEntry&text=ScheduleEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.redis.RedisCache.port()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.port()"
  name: "port()"
  nameWithType: "RedisCache.port()"
  modifiers:
  - "abstract"
  syntax: "public abstract int port()"
  returns:
    description: "the port value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.provisioningState()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.provisioningState()"
  name: "provisioningState()"
  nameWithType: "RedisCache.provisioningState()"
  modifiers:
  - "abstract"
  syntax: "public abstract String provisioningState()"
  returns:
    description: "the provisioningState value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.redisConfiguration()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.redisConfiguration()"
  name: "redisConfiguration()"
  nameWithType: "RedisCache.redisConfiguration()"
  modifiers:
  - "abstract"
  syntax: "public abstract Map<String,String> redisConfiguration()"
  returns:
    description: "the Redis configuration value"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.redis.RedisCache.redisVersion()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.redisVersion()"
  name: "redisVersion()"
  nameWithType: "RedisCache.redisVersion()"
  modifiers:
  - "abstract"
  syntax: "public abstract String redisVersion()"
  returns:
    description: "the Redis version value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.refreshKeys()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.refreshKeys()"
  name: "refreshKeys()"
  nameWithType: "RedisCache.refreshKeys()"
  summary: "Fetch the up-to-date access keys from Azure for this Redis Cache."
  modifiers:
  - "abstract"
  syntax: "public abstract RedisAccessKeys refreshKeys()"
  desc: "Fetch the up-to-date access keys from Azure for this Redis Cache."
  returns:
    description: "the access keys for this Redis Cache"
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.regenerateKey(com.microsoft.azure.management.redis.RedisKeyType)"
  fullName: "com.microsoft.azure.management.redis.RedisCache.regenerateKey(RedisKeyType keyType)"
  name: "regenerateKey(RedisKeyType keyType)"
  nameWithType: "RedisCache.regenerateKey(RedisKeyType keyType)"
  summary: "Regenerates the access keys for this Redis Cache."
  modifiers:
  - "abstract"
  parameters:
  - description: "key type to regenerate"
    name: "keyType"
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisKeyType?alt=com.microsoft.azure.management.redis.RedisKeyType&text=RedisKeyType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RedisAccessKeys regenerateKey(RedisKeyType keyType)"
  desc: "Regenerates the access keys for this Redis Cache."
  returns:
    description: "the generated access keys for this Redis Cache"
    type: "<xref href=\"com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.shardCount()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.shardCount()"
  name: "shardCount()"
  nameWithType: "RedisCache.shardCount()"
  modifiers:
  - "abstract"
  syntax: "public abstract int shardCount()"
  returns:
    description: "the shardCount value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.sku()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.sku()"
  name: "sku()"
  nameWithType: "RedisCache.sku()"
  modifiers:
  - "abstract"
  syntax: "public abstract Sku sku()"
  returns:
    description: "the sku value"
    type: "<xref href=\"com.microsoft.azure.management.redis.Sku?alt=com.microsoft.azure.management.redis.Sku&text=Sku\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.sslPort()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.sslPort()"
  name: "sslPort()"
  nameWithType: "RedisCache.sslPort()"
  modifiers:
  - "abstract"
  syntax: "public abstract int sslPort()"
  returns:
    description: "the sslPort value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.staticIP()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.staticIP()"
  name: "staticIP()"
  nameWithType: "RedisCache.staticIP()"
  modifiers:
  - "abstract"
  syntax: "public abstract String staticIP()"
  returns:
    description: "the staticIP value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.redis.RedisCache.subnetId()"
  fullName: "com.microsoft.azure.management.redis.RedisCache.subnetId()"
  name: "subnetId()"
  nameWithType: "RedisCache.subnetId()"
  modifiers:
  - "abstract"
  syntax: "public abstract String subnetId()"
  returns:
    description: "the subnetId value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "An immutable client-side representation of an Azure Redis Cache."
implements:
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.arm.models.GroupableResource?alt=com.microsoft.azure.management.resources.fluentcore.arm.models.GroupableResource&text=GroupableResource\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.redis.implementation.RedisManager?alt=com.microsoft.azure.management.redis.implementation.RedisManager&text=RedisManager\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.management.redis.implementation.RedisResourceInner?alt=com.microsoft.azure.management.redis.implementation.RedisResourceInner&text=RedisResourceInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Refreshable?alt=com.microsoft.azure.management.resources.fluentcore.model.Refreshable&text=Refreshable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.redis.RedisCache?alt=com.microsoft.azure.management.redis.RedisCache&text=RedisCache\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.microsoft.azure.management.resources.fluentcore.model.Updatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Updatable&text=Updatable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.management.redis.RedisCache.Update?alt=com.microsoft.azure.management.redis.RedisCache.Update&text=Update\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.microsoft.azure.management.redis"
artifact: com.microsoft.azure:azure-mgmt-redis:1.41.4
