### YamlMime:ManagedReference
items:
- uid: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor"
  id: "DocumentDBThreadPoolExecutor"
  parent: "com.microsoft.azure.documentdb"
  children:
  - "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue<java.lang.Runnable>)"
  - "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)"
  langs:
  - "java"
  name: "DocumentClient.DocumentDBThreadPoolExecutor"
  nameWithType: "DocumentClient.DocumentDBThreadPoolExecutor"
  fullName: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor"
  type: "Class"
  package: "com.microsoft.azure.documentdb"
  summary: "An custom implementation of ThreadPoolExecutor to handle the exceptions that may happen in the worker threads. In some scenarios such as parallel query, if a worker thread encounters exception the afterExecute should log the trace for diagnostics purpose. Without this class, exceptions in worker threads terminate the thread and only emerge when we check for the task result."
  syntax:
    content: "static class DocumentClient.DocumentDBThreadPoolExecutor extends ThreadPoolExecutor"
  inheritance:
  - "java.lang.Object"
  - "java.util.concurrent.AbstractExecutorService"
  - "java.util.concurrent.ThreadPoolExecutor"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
  - "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
  - "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
  - "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
  - "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.lang.Runnable,T)"
  - "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.util.concurrent.Callable<T>)"
  - "java.util.concurrent.AbstractExecutorService.<T>submit(java.lang.Runnable,T)"
  - "java.util.concurrent.AbstractExecutorService.<T>submit(java.util.concurrent.Callable<T>)"
  - "java.util.concurrent.AbstractExecutorService.submit(java.lang.Runnable)"
  - "java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)"
  - "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
  - "java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()"
  - "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)"
  - "java.util.concurrent.ThreadPoolExecutor.beforeExecute(java.lang.Thread,java.lang.Runnable)"
  - "java.util.concurrent.ThreadPoolExecutor.ensurePrestart()"
  - "java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)"
  - "java.util.concurrent.ThreadPoolExecutor.finalize()"
  - "java.util.concurrent.ThreadPoolExecutor.getActiveCount()"
  - "java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()"
  - "java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()"
  - "java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit)"
  - "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()"
  - "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()"
  - "java.util.concurrent.ThreadPoolExecutor.getPoolSize()"
  - "java.util.concurrent.ThreadPoolExecutor.getQueue()"
  - "java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()"
  - "java.util.concurrent.ThreadPoolExecutor.getTaskCount()"
  - "java.util.concurrent.ThreadPoolExecutor.getThreadFactory()"
  - "java.util.concurrent.ThreadPoolExecutor.isShutdown()"
  - "java.util.concurrent.ThreadPoolExecutor.isStopped()"
  - "java.util.concurrent.ThreadPoolExecutor.isTerminated()"
  - "java.util.concurrent.ThreadPoolExecutor.isTerminating()"
  - "java.util.concurrent.ThreadPoolExecutor.onShutdown()"
  - "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()"
  - "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()"
  - "java.util.concurrent.ThreadPoolExecutor.purge()"
  - "java.util.concurrent.ThreadPoolExecutor.reject(java.lang.Runnable)"
  - "java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable)"
  - "java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor.Worker)"
  - "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)"
  - "java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,java.util.concurrent.TimeUnit)"
  - "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)"
  - "java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
  - "java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)"
  - "java.util.concurrent.ThreadPoolExecutor.shutdown()"
  - "java.util.concurrent.ThreadPoolExecutor.shutdownNow()"
  - "java.util.concurrent.ThreadPoolExecutor.terminated()"
  - "java.util.concurrent.ThreadPoolExecutor.toString()"
  - "java.util.concurrent.ThreadPoolExecutor.tryTerminate()"
- uid: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue<java.lang.Runnable>)"
  id: "DocumentDBThreadPoolExecutor(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue<java.lang.Runnable>)"
  parent: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor"
  langs:
  - "java"
  name: "DocumentDBThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)"
  nameWithType: "DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)"
  fullName: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)"
  overload: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor*"
  type: "Constructor"
  package: "com.microsoft.azure.documentdb"
  syntax:
    content: " DocumentDBThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue)"
    parameters:
    - id: "corePoolSize"
      type: "int"
    - id: "maximumPoolSize"
      type: "int"
    - id: "keepAliveTime"
      type: "long"
    - id: "unit"
      type: "java.util.concurrent.TimeUnit"
    - id: "workQueue"
      type: "java.util.concurrent.BlockingQueue<java.lang.Runnable>"
- uid: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)"
  id: "afterExecute(java.lang.Runnable,java.lang.Throwable)"
  parent: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor"
  langs:
  - "java"
  name: "afterExecute(Runnable r, Throwable t)"
  nameWithType: "DocumentClient.DocumentDBThreadPoolExecutor.afterExecute(Runnable r, Throwable t)"
  fullName: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute(Runnable r, Throwable t)"
  overload: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute*"
  type: "Method"
  package: "com.microsoft.azure.documentdb"
  syntax:
    content: "public void afterExecute(Runnable r, Throwable t)"
    parameters:
    - id: "r"
      type: "java.lang.Runnable"
    - id: "t"
      type: "java.lang.Throwable"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "java.util.concurrent.TimeUnit"
  spec.java:
  - uid: "java.util.concurrent.TimeUnit"
    name: "TimeUnit"
    fullName: "java.util.concurrent.TimeUnit"
- uid: "java.util.concurrent.BlockingQueue<java.lang.Runnable>"
  spec.java:
  - uid: "java.util.concurrent.BlockingQueue"
    name: "BlockingQueue"
    fullName: "java.util.concurrent.BlockingQueue"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Runnable"
    name: "Runnable"
    fullName: "java.lang.Runnable"
  - name: ">"
    fullName: ">"
- uid: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor*"
  name: "DocumentDBThreadPoolExecutor"
  nameWithType: "DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor"
  fullName: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.DocumentDBThreadPoolExecutor"
  package: "com.microsoft.azure.documentdb"
- uid: "java.lang.Runnable"
  spec.java:
  - uid: "java.lang.Runnable"
    name: "Runnable"
    fullName: "java.lang.Runnable"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute*"
  name: "afterExecute"
  nameWithType: "DocumentClient.DocumentDBThreadPoolExecutor.afterExecute"
  fullName: "com.microsoft.azure.documentdb.DocumentClient.DocumentDBThreadPoolExecutor.afterExecute"
  package: "com.microsoft.azure.documentdb"
- uid: "java.util.concurrent.ThreadPoolExecutor"
  name: "ThreadPoolExecutor"
  nameWithType: "ThreadPoolExecutor"
  fullName: "java.util.concurrent.ThreadPoolExecutor"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.util.concurrent.ThreadPoolExecutor.isTerminated()"
  name: "ThreadPoolExecutor.isTerminated()"
  nameWithType: "ThreadPoolExecutor.isTerminated()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.isTerminated()"
- uid: "java.util.concurrent.AbstractExecutorService.<T>submit(java.lang.Runnable,T)"
  name: "AbstractExecutorService.<T>submit(Runnable,T)"
  nameWithType: "AbstractExecutorService.<T>submit(Runnable,T)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>submit(java.lang.Runnable,T)"
- uid: "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.lang.Runnable,T)"
  name: "AbstractExecutorService.<T>newTaskFor(Runnable,T)"
  nameWithType: "AbstractExecutorService.<T>newTaskFor(Runnable,T)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.lang.Runnable,T)"
- uid: "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()"
  name: "ThreadPoolExecutor.getLargestPoolSize()"
  nameWithType: "ThreadPoolExecutor.getLargestPoolSize()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()"
- uid: "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()"
  name: "ThreadPoolExecutor.prestartCoreThread()"
  nameWithType: "ThreadPoolExecutor.prestartCoreThread()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()"
- uid: "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)"
  name: "ThreadPoolExecutor.awaitTermination(long,TimeUnit)"
  nameWithType: "ThreadPoolExecutor.awaitTermination(long,TimeUnit)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)"
- uid: "java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)"
  name: "ThreadPoolExecutor.afterExecute(Runnable,Throwable)"
  nameWithType: "ThreadPoolExecutor.afterExecute(Runnable,Throwable)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable,java.lang.Throwable)"
- uid: "java.util.concurrent.AbstractExecutorService.submit(java.lang.Runnable)"
  name: "AbstractExecutorService.submit(Runnable)"
  nameWithType: "AbstractExecutorService.submit(Runnable)"
  fullName: "java.util.concurrent.AbstractExecutorService.submit(java.lang.Runnable)"
- uid: "java.util.concurrent.ThreadPoolExecutor.tryTerminate()"
  name: "ThreadPoolExecutor.tryTerminate()"
  nameWithType: "ThreadPoolExecutor.tryTerminate()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.tryTerminate()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()"
  name: "ThreadPoolExecutor.getMaximumPoolSize()"
  nameWithType: "ThreadPoolExecutor.getMaximumPoolSize()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.util.concurrent.ThreadPoolExecutor.shutdownNow()"
  name: "ThreadPoolExecutor.shutdownNow()"
  nameWithType: "ThreadPoolExecutor.shutdownNow()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.shutdownNow()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.util.concurrent.ThreadPoolExecutor.terminated()"
  name: "ThreadPoolExecutor.terminated()"
  nameWithType: "ThreadPoolExecutor.terminated()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.terminated()"
- uid: "java.util.concurrent.ThreadPoolExecutor.reject(java.lang.Runnable)"
  name: "ThreadPoolExecutor.reject(Runnable)"
  nameWithType: "ThreadPoolExecutor.reject(Runnable)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.reject(java.lang.Runnable)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
  name: "AbstractExecutorService.<T>invokeAll(Collection<? extends Callable<T>>,long,TimeUnit)"
  nameWithType: "AbstractExecutorService.<T>invokeAll(Collection<? extends Callable<T>>,long,TimeUnit)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
- uid: "java.util.concurrent.ThreadPoolExecutor.finalize()"
  name: "ThreadPoolExecutor.finalize()"
  nameWithType: "ThreadPoolExecutor.finalize()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.finalize()"
- uid: "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
  name: "ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
  nameWithType: "ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(boolean)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
  name: "AbstractExecutorService.<T>invokeAll(Collection<? extends Callable<T>>)"
  nameWithType: "AbstractExecutorService.<T>invokeAll(Collection<? extends Callable<T>>)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
- uid: "java.util.concurrent.ThreadPoolExecutor.isShutdown()"
  name: "ThreadPoolExecutor.isShutdown()"
  nameWithType: "ThreadPoolExecutor.isShutdown()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.isShutdown()"
- uid: "java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable)"
  name: "ThreadPoolExecutor.remove(Runnable)"
  nameWithType: "ThreadPoolExecutor.remove(Runnable)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.remove(java.lang.Runnable)"
- uid: "java.util.concurrent.ThreadPoolExecutor.getThreadFactory()"
  name: "ThreadPoolExecutor.getThreadFactory()"
  nameWithType: "ThreadPoolExecutor.getThreadFactory()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getThreadFactory()"
- uid: "java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()"
  name: "ThreadPoolExecutor.allowsCoreThreadTimeOut()"
  nameWithType: "ThreadPoolExecutor.allowsCoreThreadTimeOut()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()"
- uid: "java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
  name: "ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler)"
  nameWithType: "ThreadPoolExecutor.setRejectedExecutionHandler(RejectedExecutionHandler)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)"
- uid: "java.util.concurrent.ThreadPoolExecutor.isStopped()"
  name: "ThreadPoolExecutor.isStopped()"
  nameWithType: "ThreadPoolExecutor.isStopped()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.isStopped()"
- uid: "java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor.Worker)"
  name: "ThreadPoolExecutor.runWorker(ThreadPoolExecutor.Worker)"
  nameWithType: "ThreadPoolExecutor.runWorker(ThreadPoolExecutor.Worker)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor.Worker)"
- uid: "java.util.concurrent.ThreadPoolExecutor.getActiveCount()"
  name: "ThreadPoolExecutor.getActiveCount()"
  nameWithType: "ThreadPoolExecutor.getActiveCount()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getActiveCount()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()"
  name: "ThreadPoolExecutor.getCorePoolSize()"
  nameWithType: "ThreadPoolExecutor.getCorePoolSize()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()"
- uid: "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
  name: "AbstractExecutorService.<T>invokeAny(Collection<? extends Callable<T>>)"
  nameWithType: "AbstractExecutorService.<T>invokeAny(Collection<? extends Callable<T>>)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"
- uid: "java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,java.util.concurrent.TimeUnit)"
  name: "ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit)"
  nameWithType: "ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,java.util.concurrent.TimeUnit)"
- uid: "java.util.concurrent.ThreadPoolExecutor.toString()"
  name: "ThreadPoolExecutor.toString()"
  nameWithType: "ThreadPoolExecutor.toString()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.toString()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getPoolSize()"
  name: "ThreadPoolExecutor.getPoolSize()"
  nameWithType: "ThreadPoolExecutor.getPoolSize()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getPoolSize()"
- uid: "java.util.concurrent.ThreadPoolExecutor.ensurePrestart()"
  name: "ThreadPoolExecutor.ensurePrestart()"
  nameWithType: "ThreadPoolExecutor.ensurePrestart()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.ensurePrestart()"
- uid: "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.util.concurrent.Callable<T>)"
  name: "AbstractExecutorService.<T>newTaskFor(Callable<T>)"
  nameWithType: "AbstractExecutorService.<T>newTaskFor(Callable<T>)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>newTaskFor(java.util.concurrent.Callable<T>)"
- uid: "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()"
  name: "ThreadPoolExecutor.prestartAllCoreThreads()"
  nameWithType: "ThreadPoolExecutor.prestartAllCoreThreads()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()"
  name: "ThreadPoolExecutor.getRejectedExecutionHandler()"
  nameWithType: "ThreadPoolExecutor.getRejectedExecutionHandler()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()"
- uid: "java.util.concurrent.ThreadPoolExecutor.isTerminating()"
  name: "ThreadPoolExecutor.isTerminating()"
  nameWithType: "ThreadPoolExecutor.isTerminating()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.isTerminating()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getTaskCount()"
  name: "ThreadPoolExecutor.getTaskCount()"
  nameWithType: "ThreadPoolExecutor.getTaskCount()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getTaskCount()"
- uid: "java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)"
  name: "ThreadPoolExecutor.execute(Runnable)"
  nameWithType: "ThreadPoolExecutor.execute(Runnable)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.execute(java.lang.Runnable)"
- uid: "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)"
  name: "ThreadPoolExecutor.setMaximumPoolSize(int)"
  nameWithType: "ThreadPoolExecutor.setMaximumPoolSize(int)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(int)"
- uid: "java.util.concurrent.ThreadPoolExecutor.beforeExecute(java.lang.Thread,java.lang.Runnable)"
  name: "ThreadPoolExecutor.beforeExecute(Thread,Runnable)"
  nameWithType: "ThreadPoolExecutor.beforeExecute(Thread,Runnable)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.beforeExecute(java.lang.Thread,java.lang.Runnable)"
- uid: "java.util.concurrent.ThreadPoolExecutor.getQueue()"
  name: "ThreadPoolExecutor.getQueue()"
  nameWithType: "ThreadPoolExecutor.getQueue()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getQueue()"
- uid: "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)"
  name: "ThreadPoolExecutor.setCorePoolSize(int)"
  nameWithType: "ThreadPoolExecutor.setCorePoolSize(int)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int)"
- uid: "java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()"
  name: "ThreadPoolExecutor.getCompletedTaskCount()"
  nameWithType: "ThreadPoolExecutor.getCompletedTaskCount()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()"
- uid: "java.util.concurrent.ThreadPoolExecutor.purge()"
  name: "ThreadPoolExecutor.purge()"
  nameWithType: "ThreadPoolExecutor.purge()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.purge()"
- uid: "java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit)"
  name: "ThreadPoolExecutor.getKeepAliveTime(TimeUnit)"
  nameWithType: "ThreadPoolExecutor.getKeepAliveTime(TimeUnit)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(java.util.concurrent.TimeUnit)"
- uid: "java.util.concurrent.AbstractExecutorService.<T>submit(java.util.concurrent.Callable<T>)"
  name: "AbstractExecutorService.<T>submit(Callable<T>)"
  nameWithType: "AbstractExecutorService.<T>submit(Callable<T>)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>submit(java.util.concurrent.Callable<T>)"
- uid: "java.util.concurrent.ThreadPoolExecutor.onShutdown()"
  name: "ThreadPoolExecutor.onShutdown()"
  nameWithType: "ThreadPoolExecutor.onShutdown()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.onShutdown()"
- uid: "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
  name: "AbstractExecutorService.<T>invokeAny(Collection<? extends Callable<T>>,long,TimeUnit)"
  nameWithType: "AbstractExecutorService.<T>invokeAny(Collection<? extends Callable<T>>,long,TimeUnit)"
  fullName: "java.util.concurrent.AbstractExecutorService.<T>invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>,long,java.util.concurrent.TimeUnit)"
- uid: "java.util.concurrent.ThreadPoolExecutor.shutdown()"
  name: "ThreadPoolExecutor.shutdown()"
  nameWithType: "ThreadPoolExecutor.shutdown()"
  fullName: "java.util.concurrent.ThreadPoolExecutor.shutdown()"
- uid: "java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)"
  name: "ThreadPoolExecutor.setThreadFactory(ThreadFactory)"
  nameWithType: "ThreadPoolExecutor.setThreadFactory(ThreadFactory)"
  fullName: "java.util.concurrent.ThreadPoolExecutor.setThreadFactory(java.util.concurrent.ThreadFactory)"
- uid: "java.util.concurrent.BlockingQueue"
  name: "BlockingQueue"
  nameWithType: "BlockingQueue"
  fullName: "java.util.concurrent.BlockingQueue"
- uid: "java.util.concurrent.AbstractExecutorService."
  name: "AbstractExecutorService."
  nameWithType: "AbstractExecutorService."
  fullName: "java.util.concurrent.AbstractExecutorService."
- uid: "T>submit(java.lang.Runnable,T)"
  name: "T>submit(Runnable,T)"
  nameWithType: "T>submit(Runnable,T)"
  fullName: "T>submit(java.lang.Runnable,T)"
- uid: "T>newTaskFor(java.lang.Runnable,T)"
  name: "T>newTaskFor(Runnable,T)"
  nameWithType: "T>newTaskFor(Runnable,T)"
  fullName: "T>newTaskFor(java.lang.Runnable,T)"
- uid: "T>>,long,java.util.concurrent.TimeUnit)"
  name: "T>>,long,TimeUnit)"
  nameWithType: "T>>,long,TimeUnit)"
  fullName: "T>>,long,java.util.concurrent.TimeUnit)"
- uid: "? extends java.util.concurrent.Callable"
  name: "? extends Callable"
  nameWithType: "? extends Callable"
  fullName: "? extends java.util.concurrent.Callable"
- uid: "T>invokeAll(java.util.Collection"
  name: "T>invokeAll(Collection"
  nameWithType: "T>invokeAll(Collection"
  fullName: "T>invokeAll(java.util.Collection"
- uid: "T>>)"
  name: "T>>)"
  nameWithType: "T>>)"
  fullName: "T>>)"
- uid: "T>invokeAny(java.util.Collection"
  name: "T>invokeAny(Collection"
  nameWithType: "T>invokeAny(Collection"
  fullName: "T>invokeAny(java.util.Collection"
- uid: "T>newTaskFor(java.util.concurrent.Callable"
  name: "T>newTaskFor(Callable"
  nameWithType: "T>newTaskFor(Callable"
  fullName: "T>newTaskFor(java.util.concurrent.Callable"
- uid: "T>)"
  name: "T>)"
  nameWithType: "T>)"
  fullName: "T>)"
- uid: "T>submit(java.util.concurrent.Callable"
  name: "T>submit(Callable"
  nameWithType: "T>submit(Callable"
  fullName: "T>submit(java.util.concurrent.Callable"
