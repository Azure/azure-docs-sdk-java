### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient"
name: "EventHubProducerAsyncClient"
nameWithType: "EventHubProducerAsyncClient"
summary: "An **asynchronous** producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific Event Hub, grouped together in batches."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EventHubProducerAsyncClient implements Closeable"
methods:
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()"
  name: "close()"
  nameWithType: "EventHubProducerAsyncClient.close()"
  summary: "Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>."
  syntax: "public void close()"
  desc: "Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>. If the client had a dedicated connection, the underlying connection is also closed."
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()"
  name: "createBatch()"
  nameWithType: "EventHubProducerAsyncClient.createBatch()"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
  syntax: "public Mono<EventDataBatch> createBatch()"
  desc: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)"
  name: "createBatch(CreateBatchOptions options)"
  nameWithType: "EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)"
  summary: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> configured with the options specified."
  parameters:
  - description: "A set of options used to configure the <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.CreateBatchOptions?alt=com.azure.messaging.eventhubs.models.CreateBatchOptions&text=CreateBatchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<EventDataBatch> createBatch(CreateBatchOptions options)"
  desc: "Creates an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> configured with the options specified."
  returns:
    description: "A new <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref> that can fit as many events as the transport allows."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()"
  name: "getEventHubName()"
  nameWithType: "EventHubProducerAsyncClient.getEventHubName()"
  summary: "Gets the Event Hub name this client interacts with."
  syntax: "public String getEventHubName()"
  desc: "Gets the Event Hub name this client interacts with."
  returns:
    description: "The Event Hub name this client interacts with."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()"
  name: "getEventHubProperties()"
  nameWithType: "EventHubProducerAsyncClient.getEventHubProperties()"
  summary: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  syntax: "public Mono<EventHubProperties> getEventHubProperties()"
  desc: "Retrieves information about an Event Hub, including the number of partitions present and their identifiers."
  returns:
    description: "The set of information for the Event Hub that this client is associated with."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.EventHubProperties?alt=com.azure.messaging.eventhubs.EventHubProperties&text=EventHubProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "EventHubProducerAsyncClient.getFullyQualifiedNamespace()"
  summary: "Gets the fully qualified Event Hubs namespace that the connection is associated with."
  syntax: "public String getFullyQualifiedNamespace()"
  desc: "Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`."
  returns:
    description: "The fully qualified Event Hubs namespace that the connection is associated with."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getIdentifier()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getIdentifier()"
  name: "getIdentifier()"
  nameWithType: "EventHubProducerAsyncClient.getIdentifier()"
  summary: "Gets the client identifier."
  syntax: "public String getIdentifier()"
  desc: "Gets the client identifier."
  returns:
    description: "The unique identifier string for current client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()"
  name: "getPartitionIds()"
  nameWithType: "EventHubProducerAsyncClient.getPartitionIds()"
  summary: "Retrieves the identifiers for the partitions of an Event Hub."
  syntax: "public Flux<String> getPartitionIds()"
  desc: "Retrieves the identifiers for the partitions of an Event Hub."
  returns:
    description: "A Flux of identifiers for the partitions of an Event Hub."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  name: "getPartitionProperties(String partitionId)"
  nameWithType: "EventHubProducerAsyncClient.getPartitionProperties(String partitionId)"
  summary: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  parameters:
  - description: "The unique identifier of a partition associated with the Event Hub."
    name: "partitionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PartitionProperties> getPartitionProperties(String partitionId)"
  desc: "Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream."
  returns:
    description: "The set of information for the requested partition under the Event Hub this client is associated with."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.PartitionProperties?alt=com.azure.messaging.eventhubs.PartitionProperties&text=PartitionProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventDataBatch batch)"
  name: "send(EventDataBatch batch)"
  nameWithType: "EventHubProducerAsyncClient.send(EventDataBatch batch)"
  summary: "Sends the batch to the associated Event Hub."
  parameters:
  - description: "The batch to send to the service."
    name: "batch"
    type: "<xref href=\"com.azure.messaging.eventhubs.EventDataBatch?alt=com.azure.messaging.eventhubs.EventDataBatch&text=EventDataBatch\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> send(EventDataBatch batch)"
  desc: "Sends the batch to the associated Event Hub."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when the batch is pushed to the service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  name: "send(Iterable<EventData> events)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events)"
  summary: "Sends a set of events to the associated Event Hub using a batched approach."
  parameters:
  - description: "Events to send to the service."
    name: "events"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.EventData?alt=com.azure.messaging.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> send(Iterable<EventData> events)"
  desc: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.\n\n```java\nList<EventData> events = Arrays.asList(new EventData(\"maple\"), new EventData(\"aspen\"),\n     new EventData(\"oak\"));\n producer\n     .send(events)\n     .subscribe(unused -> { },\n         error -> System.err.println(\"Error occurred while sending events:\" + error),\n         () -> System.out.println(\"Send complete.\"));\n```\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all events are pushed to the service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  name: "send(Iterable<EventData> events, SendOptions options)"
  nameWithType: "EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)"
  summary: "Sends a set of events to the associated Event Hub using a batched approach."
  parameters:
  - description: "Events to send to the service."
    name: "events"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.EventData?alt=com.azure.messaging.eventhubs.EventData&text=EventData\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The set of options to consider when sending this batch."
    name: "options"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.SendOptions?alt=com.azure.messaging.eventhubs.models.SendOptions&text=SendOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> send(Iterable<EventData> events, SendOptions options)"
  desc: "Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.\n\n```java\nList<EventData> events = Arrays.asList(new EventData(\"Melbourne\"), new EventData(\"London\"),\n     new EventData(\"New York\"));\n SendOptions sendOptions = new SendOptions().setPartitionKey(\"cities\");\n producer\n     .send(events, sendOptions)\n     .subscribe(unused -> { },\n         error -> System.err.println(\"Error occurred while sending events:\" + error),\n         () -> System.out.println(\"Send complete.\"));\n```\n\nFor more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].\n\n\n[Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when all events are pushed to the service."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "An **asynchronous** producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> to a specific Event Hub, grouped together in batches. Depending on the <xref uid=\"com.azure.messaging.eventhubs.models.CreateBatchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> specified when creating an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>, the events may be automatically routed to an available partition or specific to a partition.\n\nAllowing automatic routing of partitions is recommended when:\n\n *  The sending of events needs to be highly available.\n *  The event data should be evenly distributed among all available partitions.\n\nIf no partition id is specified, the following rules are used for automatically selecting one:\n\n1.  Distribute the events equally amongst all available partitions using a round-robin approach.\n2.  If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.\n\n**Create a producer and publish events to any partition**\n\n```java\n// The required parameter is a way to authenticate with Event Hubs using credentials.\n // The connectionString provides a way to authenticate with Event Hub.\n EventHubProducerAsyncClient producer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\",\n         \"event-hub-name\")\n     .buildAsyncProducerClient();\n\n // Creating a batch without options set, will allow for automatic routing of events to any partition.\n producer.createBatch().flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> { },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events to partition \"foo\"**\n\n```java\n// Creating a batch with partitionId set will route all events in that batch to partition `foo`.\n CreateBatchOptions options = new CreateBatchOptions().setPartitionId(\"foo\");\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> { },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events to the same partition, grouped together using partition key**\n\n```java\n// Creating a batch with partitionKey set will tell the service to hash the partitionKey and decide which\n // partition to send the events to. Events with the same partitionKey are always routed to the same partition.\n CreateBatchOptions options = new CreateBatchOptions().setPartitionKey(\"bread\");\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"sourdough\"));\n     batch.tryAdd(new EventData(\"rye\"));\n     return producer.send(batch);\n }).subscribe(unused -> { },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events using a size-limited <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventDataBatch\"></xref>**\n\n```java\nFlux<EventData> telemetryEvents = Flux.just(firstEvent, secondEvent);\n\n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n CreateBatchOptions options = new CreateBatchOptions().setMaximumSizeInBytes(256);\n AtomicReference<EventDataBatch> currentBatch = new AtomicReference<>(\n     producer.createBatch(options).block());\n\n // The sample Flux contains two events, but it could be an infinite stream of telemetry events.\n telemetryEvents.flatMap(event -> {\n     final EventDataBatch batch = currentBatch.get();\n     if (batch.tryAdd(event)) {\n         return Mono.empty();\n     }\n\n     return Mono.when(\n         producer.send(batch),\n         producer.createBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n\n             // Add the event that did not fit in the previous batch.\n             if (!newBatch.tryAdd(event)) {\n                 throw Exceptions.propagate(new IllegalArgumentException(\n                     \"Event was too large to fit in an empty batch. Max size: \" + newBatch.getMaxSizeInBytes()));\n             }\n\n             return newBatch;\n         }));\n }).then()\n     .doFinally(signal -> {\n         final EventDataBatch batch = currentBatch.getAndSet(null);\n         if (batch != null && batch.getCount() > 0) {\n             producer.send(batch).block();\n         }\n     });\n```"
implements:
- "<xref href=\"java.io.Closeable?alt=java.io.Closeable&text=Closeable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.13.0
