### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  id: EventHubProducerAsyncClient
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)
  - com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)
  langs:
  - java
  name: EventHubProducerAsyncClient
  nameWithType: EventHubProducerAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  type: Class
  package: com.azure.messaging.eventhubs
  summary: "An **asynchronous** producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific Event Hub, grouped together in batches. Depending on the <xref uid=\"com.azure.messaging.eventhubs.models.CreateBatchOptions\" data-throw-if-not-resolved=\"false\">options</xref> specified when creating an <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>, the events may be automatically routed to an available partition or specific to a partition.\n\nAllowing automatic routing of partitions is recommended when:\n\n *  The sending of events needs to be highly available.\n *  The event data should be evenly distributed among all available partitions.\n\nIf no partition id is specified, the following rules are used for automatically selecting one:\n\n1.  Distribute the events equally amongst all available partitions using a round-robin approach.\n2.  If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.\n\n**Create a producer and publish events to any partition**\n\n```java\n// The required parameter is a way to authenticate with Event Hubs using credentials.\n // The connectionString provides a way to authenticate with Event Hub.\n EventHubProducerAsyncClient producer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\",\n         \"event-hub-name\")\n     .buildAsyncProducerClient();\n \n // Creating a batch without options set, will allow for automatic routing of events to any partition.\n producer.createBatch().flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events to partition \"foo\"**\n\n```java\n// Creating a batch with partitionId set will route all events in that batch to partition `foo`.\n CreateBatchOptions options = new CreateBatchOptions().setPartitionId(\"foo\");\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"test-event-1\"));\n     batch.tryAdd(new EventData(\"test-event-2\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events to the same partition, grouped together using partition key**\n\n```java\n// Creating a batch with partitionKey set will tell the service to hash the partitionKey and decide which\n // partition to send the events to. Events with the same partitionKey are always routed to the same partition.\n CreateBatchOptions options = new CreateBatchOptions().setPartitionKey(\"bread\");\n producer.createBatch(options).flatMap(batch -> {\n     batch.tryAdd(new EventData(\"sourdough\"));\n     batch.tryAdd(new EventData(\"rye\"));\n     return producer.send(batch);\n }).subscribe(unused -> {\n },\n     error -> System.err.println(\"Error occurred while sending batch:\" + error),\n     () -> System.out.println(\"Send complete.\"));\n```\n\n**Publish events using a size-limited <xref uid=\"com.azure.messaging.eventhubs.EventDataBatch\" data-throw-if-not-resolved=\"false\">EventDataBatch</xref>**\n\n```java\nfinal Flux<EventData> telemetryEvents = Flux.just(firstEvent, secondEvent);\n \n // Setting `setMaximumSizeInBytes` when creating a batch, limits the size of that batch.\n // In this case, all the batches created with these options are limited to 256 bytes.\n final CreateBatchOptions options = new CreateBatchOptions()\n     .setMaximumSizeInBytes(256);\n final AtomicReference<EventDataBatch> currentBatch = new AtomicReference<>(\n     producer.createBatch(options).block());\n \n // The sample Flux contains two events, but it could be an infinite stream of telemetry events.\n telemetryEvents.flatMap(event -> {\n     final EventDataBatch batch = currentBatch.get();\n     if (batch.tryAdd(event)) {\n         return Mono.empty();\n     }\n \n     return Mono.when(\n         producer.send(batch),\n         producer.createBatch(options).map(newBatch -> {\n             currentBatch.set(newBatch);\n \n             // Add the event that did not fit in the previous batch.\n             if (!newBatch.tryAdd(event)) {\n                 throw Exceptions.propagate(new IllegalArgumentException(\n                     \"Event was too large to fit in an empty batch. Max size: \" + newBatch.getMaxSizeInBytes()));\n             }\n \n             return newBatch;\n         }));\n }).then()\n     .doFinally(signal -> {\n         final EventDataBatch batch = currentBatch.getAndSet(null);\n         if (batch != null && batch.getCount() > 0) {\n             producer.send(batch).block();\n         }\n     });\n```"
  syntax:
    content: public class EventHubProducerAsyncClient implements Closeable
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Closeable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,reactor.core.scheduler.Scheduler,boolean,java.lang.Runnable)
  id: EventHubProducerAsyncClient(java.lang.String,java.lang.String,com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor,com.azure.core.amqp.AmqpRetryOptions,com.azure.core.amqp.implementation.TracerProvider,com.azure.core.amqp.implementation.MessageSerializer,reactor.core.scheduler.Scheduler,boolean,java.lang.Runnable)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose)
  nameWithType: EventHubProducerAsyncClient.EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient*
  type: Constructor
  package: com.azure.messaging.eventhubs
  summary: Creates a new instance of this <xref uid="com.azure.messaging.eventhubs.EventHubProducerAsyncClient" data-throw-if-not-resolved="false">EventHubProducerAsyncClient</xref> that can send messages to a single partition when <xref uid="com.azure.messaging.eventhubs.models.CreateBatchOptions.getPartitionId()" data-throw-if-not-resolved="false">CreateBatchOptions#getPartitionId()</xref> is not null or an empty string. Otherwise, allows the service to load balance the messages amongst available partitions.
  syntax:
    content: " EventHubProducerAsyncClient(String fullyQualifiedNamespace, String eventHubName, EventHubConnectionProcessor connectionProcessor, AmqpRetryOptions retryOptions, TracerProvider tracerProvider, MessageSerializer messageSerializer, Scheduler scheduler, boolean isSharedConnection, Runnable onClientClose)"
    parameters:
    - id: fullyQualifiedNamespace
      type: java.lang.String
    - id: eventHubName
      type: java.lang.String
    - id: connectionProcessor
      type: com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor
    - id: retryOptions
      type: com.azure.core.amqp.AmqpRetryOptions
    - id: tracerProvider
      type: com.azure.core.amqp.implementation.TracerProvider
    - id: messageSerializer
      type: com.azure.core.amqp.implementation.MessageSerializer
    - id: scheduler
      type: reactor.core.scheduler.Scheduler
    - id: isSharedConnection
      type: boolean
    - id: onClientClose
      type: java.lang.Runnable
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()
  id: close()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: close()
  nameWithType: EventHubProducerAsyncClient.close()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Disposes of the <xref uid="com.azure.messaging.eventhubs.EventHubProducerAsyncClient" data-throw-if-not-resolved="false">EventHubProducerAsyncClient</xref>. If the client had a dedicated connection, the underlying connection is also closed.
  syntax:
    content: public void close()
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()
  id: createBatch()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: createBatch()
  nameWithType: EventHubProducerAsyncClient.createBatch()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Creates an <xref uid="com.azure.messaging.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> that can fit as many events as the transport allows.
  syntax:
    content: public Mono<EventDataBatch> createBatch()
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>
      description: A new <xref uid="com.azure.messaging.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> that can fit as many events as the transport allows.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)
  id: createBatch(com.azure.messaging.eventhubs.models.CreateBatchOptions)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: createBatch(CreateBatchOptions options)
  nameWithType: EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch(CreateBatchOptions options)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Creates an <xref uid="com.azure.messaging.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> configured with the options specified.
  syntax:
    content: public Mono<EventDataBatch> createBatch(CreateBatchOptions options)
    parameters:
    - id: options
      type: com.azure.messaging.eventhubs.models.CreateBatchOptions
      description: A set of options used to configure the <xref uid="com.azure.messaging.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref>.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>
      description: A new <xref uid="com.azure.messaging.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> that can fit as many events as the transport allows.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()
  id: getEventHubName()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: getEventHubName()
  nameWithType: EventHubProducerAsyncClient.getEventHubName()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Gets the Event Hub name this client interacts with.
  syntax:
    content: public String getEventHubName()
    return:
      type: java.lang.String
      description: The Event Hub name this client interacts with.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()
  id: getEventHubProperties()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: getEventHubProperties()
  nameWithType: EventHubProducerAsyncClient.getEventHubProperties()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves information about an Event Hub, including the number of partitions present and their identifiers.
  syntax:
    content: public Mono<EventHubProperties> getEventHubProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>
      description: The set of information for the Event Hub that this client is associated with.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()
  id: getFullyQualifiedNamespace()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: getFullyQualifiedNamespace()
  nameWithType: EventHubProducerAsyncClient.getFullyQualifiedNamespace()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`.
  syntax:
    content: public String getFullyQualifiedNamespace()
    return:
      type: java.lang.String
      description: The fully qualified Event Hubs namespace that the connection is associated with.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()
  id: getPartitionIds()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: getPartitionIds()
  nameWithType: EventHubProducerAsyncClient.getPartitionIds()
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds()
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves the identifiers for the partitions of an Event Hub.
  syntax:
    content: public Flux<String> getPartitionIds()
    return:
      type: reactor.core.publisher.Flux<java.lang.String>
      description: A Flux of identifiers for the partitions of an Event Hub.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(java.lang.String)
  id: getPartitionProperties(java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: getPartitionProperties(String partitionId)
  nameWithType: EventHubProducerAsyncClient.getPartitionProperties(String partitionId)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties(String partitionId)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream.
  syntax:
    content: public Mono<PartitionProperties> getPartitionProperties(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: The unique identifier of a partition associated with the Event Hub.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>
      description: The set of information for the requested partition under the Event Hub this client is associated with.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(com.azure.messaging.eventhubs.EventDataBatch)
  id: send(com.azure.messaging.eventhubs.EventDataBatch)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: send(EventDataBatch batch)
  nameWithType: EventHubProducerAsyncClient.send(EventDataBatch batch)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(EventDataBatch batch)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Sends the batch to the associated Event Hub.
  syntax:
    content: public Mono<Void> send(EventDataBatch batch)
    parameters:
    - id: batch
      type: com.azure.messaging.eventhubs.EventDataBatch
      description: The batch to send to the service.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> that completes when the batch is pushed to the service.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)
  id: send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: send(Iterable<EventData> events)
  nameWithType: EventHubProducerAsyncClient.send(Iterable<EventData> events)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: >-
    Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.


    ```java

    List<EventData> events = Arrays.asList(new EventData("maple"), new EventData("aspen"),
         new EventData("oak"));
     producer
         .send(events)
         .subscribe(unused -> { },
             error -> System.err.println("Error occurred while sending events:" + error),
             () -> System.out.println("Send complete."));
    ```


    For more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].



    [Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas
  syntax:
    content: public Mono<Void> send(Iterable<EventData> events)
    parameters:
    - id: events
      type: java.lang.Iterable<com.azure.messaging.eventhubs.EventData>
      description: Events to send to the service.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service.
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)
  id: send(java.lang.Iterable<com.azure.messaging.eventhubs.EventData>,com.azure.messaging.eventhubs.models.SendOptions)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0
  parent: com.azure.messaging.eventhubs.EventHubProducerAsyncClient
  langs:
  - java
  name: send(Iterable<EventData> events, SendOptions options)
  nameWithType: EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send(Iterable<EventData> events, SendOptions options)
  overload: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: >-
    Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.


    ```java

    List<EventData> events = Arrays.asList(new EventData("Melbourne"), new EventData("London"),
         new EventData("New York"));
     SendOptions sendOptions = new SendOptions().setPartitionKey("cities");
     producer
         .send(events, sendOptions)
         .subscribe(unused -> { },
             error -> System.err.println("Error occurred while sending events:" + error),
             () -> System.out.println("Send complete."));
    ```


    For more information regarding the maximum event size allowed, see [Azure Event Hubs Quotas and Limits][].



    [Azure Event Hubs Quotas and Limits]: https://docs.microsoft.com/azure/event-hubs/event-hubs-quotas
  syntax:
    content: public Mono<Void> send(Iterable<EventData> events, SendOptions options)
    parameters:
    - id: events
      type: java.lang.Iterable<com.azure.messaging.eventhubs.EventData>
      description: Events to send to the service.
    - id: options
      type: com.azure.messaging.eventhubs.models.SendOptions
      description: The set of options to consider when sending this batch.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor
  name: EventHubConnectionProcessor
  nameWithType: EventHubConnectionProcessor
  fullName: com.azure.messaging.eventhubs.implementation.EventHubConnectionProcessor
- uid: com.azure.core.amqp.AmqpRetryOptions
  spec.java:
  - uid: com.azure.core.amqp.AmqpRetryOptions
    name: AmqpRetryOptions
    fullName: com.azure.core.amqp.AmqpRetryOptions
- uid: com.azure.core.amqp.implementation.TracerProvider
  spec.java:
  - uid: com.azure.core.amqp.implementation.TracerProvider
    name: TracerProvider
    fullName: com.azure.core.amqp.implementation.TracerProvider
- uid: com.azure.core.amqp.implementation.MessageSerializer
  spec.java:
  - uid: com.azure.core.amqp.implementation.MessageSerializer
    name: MessageSerializer
    fullName: com.azure.core.amqp.implementation.MessageSerializer
- uid: reactor.core.scheduler.Scheduler
  spec.java:
  - uid: reactor.core.scheduler.Scheduler
    name: Scheduler
    fullName: reactor.core.scheduler.Scheduler
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.Runnable
  spec.java:
  - uid: java.lang.Runnable
    name: Runnable
    fullName: java.lang.Runnable
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient*
  name: EventHubProducerAsyncClient
  nameWithType: EventHubProducerAsyncClient.EventHubProducerAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.EventHubProducerAsyncClient
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace*
  name: getFullyQualifiedNamespace
  nameWithType: EventHubProducerAsyncClient.getFullyQualifiedNamespace
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getFullyQualifiedNamespace
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName*
  name: getEventHubName
  nameWithType: EventHubProducerAsyncClient.getEventHubName
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubName
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventHubProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.EventHubProperties
    name: EventHubProperties
    fullName: com.azure.messaging.eventhubs.EventHubProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties*
  name: getEventHubProperties
  nameWithType: EventHubProducerAsyncClient.getEventHubProperties
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getEventHubProperties
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Flux<java.lang.String>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds*
  name: getPartitionIds
  nameWithType: EventHubProducerAsyncClient.getPartitionIds
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionIds
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.PartitionProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.PartitionProperties
    name: PartitionProperties
    fullName: com.azure.messaging.eventhubs.PartitionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties*
  name: getPartitionProperties
  nameWithType: EventHubProducerAsyncClient.getPartitionProperties
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.getPartitionProperties
  package: com.azure.messaging.eventhubs
- uid: reactor.core.publisher.Mono<com.azure.messaging.eventhubs.EventDataBatch>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.EventDataBatch
    name: EventDataBatch
    fullName: com.azure.messaging.eventhubs.EventDataBatch
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch*
  name: createBatch
  nameWithType: EventHubProducerAsyncClient.createBatch
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.createBatch
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.models.CreateBatchOptions
  name: CreateBatchOptions
  nameWithType: CreateBatchOptions
  fullName: com.azure.messaging.eventhubs.models.CreateBatchOptions
- uid: java.lang.Iterable<com.azure.messaging.eventhubs.EventData>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.EventData
    name: EventData
    fullName: com.azure.messaging.eventhubs.EventData
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send*
  name: send
  nameWithType: EventHubProducerAsyncClient.send
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.send
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.models.SendOptions
  name: SendOptions
  nameWithType: SendOptions
  fullName: com.azure.messaging.eventhubs.models.SendOptions
- uid: com.azure.messaging.eventhubs.EventDataBatch
  name: EventDataBatch
  nameWithType: EventDataBatch
  fullName: com.azure.messaging.eventhubs.EventDataBatch
- uid: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close*
  name: close
  nameWithType: EventHubProducerAsyncClient.close
  fullName: com.azure.messaging.eventhubs.EventHubProducerAsyncClient.close
  package: com.azure.messaging.eventhubs
- uid: java.io.Closeable
  name: Closeable
  nameWithType: Closeable
  fullName: java.io.Closeable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.messaging.eventhubs.EventHubProperties
  name: EventHubProperties
  nameWithType: EventHubProperties
  fullName: com.azure.messaging.eventhubs.EventHubProperties
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: com.azure.messaging.eventhubs.PartitionProperties
  name: PartitionProperties
  nameWithType: PartitionProperties
  fullName: com.azure.messaging.eventhubs.PartitionProperties
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.messaging.eventhubs.EventData
  name: EventData
  nameWithType: EventData
  fullName: com.azure.messaging.eventhubs.EventData
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
