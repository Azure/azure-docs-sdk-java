### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential"
name: "updateDataSourceCredential"
nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  name: "updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  nameWithType: "MetricsAdvisorAdministrationAsyncClient.updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  summary: "Update a data source credential entity.\n\n**Code sample**\n\n```java\nString credentialId = \"\";\n metricsAdvisorAdminAsyncClient.getDataSourceCredential(credentialId)\n     .flatMap(existingDatasourceCredential -> {\n         DataSourceServicePrincipalInKeyVault actualCredentialSPInKV = null;\n         if (existingDatasourceCredential instanceof DataSourceServicePrincipalInKeyVault) {\n             actualCredentialSPInKV  = (DataSourceServicePrincipalInKeyVault) existingDatasourceCredential;\n         }\n         return metricsAdvisorAdminAsyncClient.updateDataSourceCredential(\n             actualCredentialSPInKV.setDescription(\"set updated description\"));\n     })\n     .subscribe(credentialEntity -> {\n         if (credentialEntity instanceof DataSourceServicePrincipalInKeyVault) {\n             DataSourceServicePrincipalInKeyVault actualCredentialSPInKV\n                 = (DataSourceServicePrincipalInKeyVault) credentialEntity;\n             System.out.printf(\"Actual credential entity key vault endpoint: %s%n\",\n                     actualCredentialSPInKV.getKeyVaultEndpoint());\n             System.out.printf(\"Actual credential entity key vault updated description: %s%n\",\n                 actualCredentialSPInKV.getDescription());\n         }\n     });\n```"
  parameters:
  - description: "The credential entity."
    name: "dataSourceCredential"
    type: "<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSourceCredentialEntity> updateDataSourceCredential(DataSourceCredentialEntity dataSourceCredential)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing the updated <xref uid=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataSourceCredentialEntity\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity?alt=com.azure.ai.metricsadvisor.administration.models.DataSourceCredentialEntity&text=DataSourceCredentialEntity\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.1.1
