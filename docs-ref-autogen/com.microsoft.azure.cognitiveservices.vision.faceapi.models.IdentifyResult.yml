### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.candidates()
  name: candidates()
  nameWithType: IdentifyResult.candidates()
  returns:
    description: <p>the candidates value </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyCandidate?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyCandidate&text=IdentifyCandidate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the candidates value.</p>

    <p></p>
  syntax: public List<IdentifyCandidate> candidates()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.candidates()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.faceId()
  name: faceId()
  nameWithType: IdentifyResult.faceId()
  returns:
    description: <p>the faceId value </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the faceId value.</p>

    <p></p>
  syntax: public UUID faceId()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.faceId()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.withCandidates(List<IdentifyCandidate> candidates)
  name: withCandidates(List<IdentifyCandidate> candidates)
  nameWithType: IdentifyResult.withCandidates(List<IdentifyCandidate> candidates)
  parameters:
  - description: <p>the candidates value to set </p>
    name: candidates
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyCandidate?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyCandidate&text=IdentifyCandidate" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the IdentifyResult object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the candidates value.</p>

    <p></p>
  syntax: public IdentifyResult withCandidates(List<IdentifyCandidate> candidates)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.withCandidates(List<IdentifyCandidate>)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.withFaceId(UUID faceId)
  name: withFaceId(UUID faceId)
  nameWithType: IdentifyResult.withFaceId(UUID faceId)
  parameters:
  - description: <p>the faceId value to set </p>
    name: faceId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the IdentifyResult object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the faceId value.</p>

    <p></p>
  syntax: public IdentifyResult withFaceId(UUID faceId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult.withFaceId(UUID)
nameWithType: IdentifyResult
syntax: public class IdentifyResult
type: class
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult
name: IdentifyResult
package: com.microsoft.azure.cognitiveservices.vision.faceapi.models
summary: <p>Response body for identify face operation. </p>
metadata: {}
