### YamlMime:JavaType
uid: "com.azure.cosmos.models.CosmosQueryRequestOptions"
fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions"
name: "CosmosQueryRequestOptions"
nameWithType: "CosmosQueryRequestOptions"
summary: "Specifies the options associated with query methods (enumeration operations) in the Azure Cosmos DB database service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CosmosQueryRequestOptions"
constructors:
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.CosmosQueryRequestOptions()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.CosmosQueryRequestOptions()"
  name: "CosmosQueryRequestOptions()"
  nameWithType: "CosmosQueryRequestOptions.CosmosQueryRequestOptions()"
  summary: "Instantiates a new query request options."
  syntax: "public CosmosQueryRequestOptions()"
  desc: "Instantiates a new query request options."
methods:
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getConsistencyLevel()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getConsistencyLevel()"
  name: "getConsistencyLevel()"
  nameWithType: "CosmosQueryRequestOptions.getConsistencyLevel()"
  summary: "Gets the consistency level required for the request."
  syntax: "public ConsistencyLevel getConsistencyLevel()"
  desc: "Gets the consistency level required for the request."
  returns:
    description: "the consistency level."
    type: "<xref href=\"com.azure.cosmos.ConsistencyLevel?alt=com.azure.cosmos.ConsistencyLevel&text=ConsistencyLevel\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getDedicatedGatewayRequestOptions()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getDedicatedGatewayRequestOptions()"
  name: "getDedicatedGatewayRequestOptions()"
  nameWithType: "CosmosQueryRequestOptions.getDedicatedGatewayRequestOptions()"
  summary: "Gets the Dedicated Gateway Request Options"
  syntax: "public DedicatedGatewayRequestOptions getDedicatedGatewayRequestOptions()"
  desc: "Gets the Dedicated Gateway Request Options"
  returns:
    description: "the Dedicated Gateway Request Options"
    type: "<xref href=\"com.azure.cosmos.models.DedicatedGatewayRequestOptions?alt=com.azure.cosmos.models.DedicatedGatewayRequestOptions&text=DedicatedGatewayRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getFeedRange()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getFeedRange()"
  name: "getFeedRange()"
  nameWithType: "CosmosQueryRequestOptions.getFeedRange()"
  summary: "Gets the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
  syntax: "public FeedRange getFeedRange()"
  desc: "Gets the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
  returns:
    description: "the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
    type: "<xref href=\"com.azure.cosmos.models.FeedRange?alt=com.azure.cosmos.models.FeedRange&text=FeedRange\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getMaxBufferedItemCount()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getMaxBufferedItemCount()"
  name: "getMaxBufferedItemCount()"
  nameWithType: "CosmosQueryRequestOptions.getMaxBufferedItemCount()"
  summary: "Gets the maximum number of items that can be buffered client side during parallel query execution."
  syntax: "public int getMaxBufferedItemCount()"
  desc: "Gets the maximum number of items that can be buffered client side during parallel query execution."
  returns:
    description: "maximum number of items that can be buffered client side during\n parallel query execution."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getMaxDegreeOfParallelism()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getMaxDegreeOfParallelism()"
  name: "getMaxDegreeOfParallelism()"
  nameWithType: "CosmosQueryRequestOptions.getMaxDegreeOfParallelism()"
  summary: "Gets the number of concurrent operations run client side during parallel query execution."
  syntax: "public int getMaxDegreeOfParallelism()"
  desc: "Gets the number of concurrent operations run client side during parallel query execution."
  returns:
    description: "number of concurrent operations run client side during parallel query\n execution."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getPartitionKey()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getPartitionKey()"
  name: "getPartitionKey()"
  nameWithType: "CosmosQueryRequestOptions.getPartitionKey()"
  summary: "Gets the partition key used to identify the current request's target partition."
  syntax: "public PartitionKey getPartitionKey()"
  desc: "Gets the partition key used to identify the current request's target partition."
  returns:
    description: "the partition key."
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getResponseContinuationTokenLimitInKb()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getResponseContinuationTokenLimitInKb()"
  name: "getResponseContinuationTokenLimitInKb()"
  nameWithType: "CosmosQueryRequestOptions.getResponseContinuationTokenLimitInKb()"
  summary: "Gets the Response<wbr>Continuation<wbr>Token<wbr>Limit<wbr>InKb request option for item query requests in the Azure Cosmos DB service."
  syntax: "public int getResponseContinuationTokenLimitInKb()"
  desc: "Gets the ResponseContinuationTokenLimitInKb request option for item query requests in the Azure Cosmos DB service. If not already set returns 0.\n\nResponseContinuationTokenLimitInKb is used to limit the length of continuation token in the query response. Valid values are >= 1."
  returns:
    description: "return set ResponseContinuationTokenLimitInKb, or 0 if not set"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getSessionToken()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getSessionToken()"
  name: "getSessionToken()"
  nameWithType: "CosmosQueryRequestOptions.getSessionToken()"
  summary: "Gets the session token for use with session consistency."
  syntax: "public String getSessionToken()"
  desc: "Gets the session token for use with session consistency."
  returns:
    description: "the session token."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getThresholdForDiagnosticsOnTracer()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getThresholdForDiagnosticsOnTracer()"
  name: "getThresholdForDiagnosticsOnTracer()"
  nameWithType: "CosmosQueryRequestOptions.getThresholdForDiagnosticsOnTracer()"
  summary: "Gets the threshold<wbr>For<wbr>Diagnostics<wbr>OnTracer, if latency on query operation is greater than this diagnostics will be send to open telemetry exporter as events in tracer span of end to end CRUD api."
  syntax: "public Duration getThresholdForDiagnosticsOnTracer()"
  desc: "Gets the thresholdForDiagnosticsOnTracer, if latency on query operation is greater than this diagnostics will be send to open telemetry exporter as events in tracer span of end to end CRUD api. Default is 500 ms."
  returns:
    description: "thresholdForDiagnosticsOnTracer the latency threshold for diagnostics on tracer."
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.getThroughputControlGroupName()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.getThroughputControlGroupName()"
  name: "getThroughputControlGroupName()"
  nameWithType: "CosmosQueryRequestOptions.getThroughputControlGroupName()"
  summary: "Get throughput control group name."
  syntax: "public String getThroughputControlGroupName()"
  desc: "Get throughput control group name."
  returns:
    description: "The throughput control group name."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.isIndexMetricsEnabled()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.isIndexMetricsEnabled()"
  name: "isIndexMetricsEnabled()"
  nameWithType: "CosmosQueryRequestOptions.isIndexMetricsEnabled()"
  summary: "Gets index<wbr>Metrics<wbr>Enabled, which is used to obtain the index metrics to understand how the query engine used existing indexes and could use potential new indexes."
  syntax: "public boolean isIndexMetricsEnabled()"
  desc: "Gets indexMetricsEnabled, which is used to obtain the index metrics to understand how the query engine used existing indexes and could use potential new indexes. The results will be displayed in QueryMetrics. Please note that this options will incurs overhead, so it should be enabled when debuging slow queries."
  returns:
    description: "indexMetricsEnabled (default: false)"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.isQueryMetricsEnabled()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.isQueryMetricsEnabled()"
  name: "isQueryMetricsEnabled()"
  nameWithType: "CosmosQueryRequestOptions.isQueryMetricsEnabled()"
  summary: "Gets the option to enable populate query metrics."
  syntax: "public boolean isQueryMetricsEnabled()"
  desc: "Gets the option to enable populate query metrics. By default query metrics are enabled."
  returns:
    description: "whether to enable populate query metrics (default: true)"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.isScanInQueryEnabled()"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.isScanInQueryEnabled()"
  name: "isScanInQueryEnabled()"
  nameWithType: "CosmosQueryRequestOptions.isScanInQueryEnabled()"
  summary: "Gets the option to allow scan on the queries which couldn't be served as indexing was opted out on the requested paths."
  syntax: "public Boolean isScanInQueryEnabled()"
  desc: "Gets the option to allow scan on the queries which couldn't be served as indexing was opted out on the requested paths."
  returns:
    description: "the option of enable scan in query."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setConsistencyLevel(com.azure.cosmos.ConsistencyLevel)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setConsistencyLevel(ConsistencyLevel consistencyLevel)"
  name: "setConsistencyLevel(ConsistencyLevel consistencyLevel)"
  nameWithType: "CosmosQueryRequestOptions.setConsistencyLevel(ConsistencyLevel consistencyLevel)"
  summary: "Sets the consistency level required for the request."
  parameters:
  - description: "the consistency level."
    name: "consistencyLevel"
    type: "<xref href=\"com.azure.cosmos.ConsistencyLevel?alt=com.azure.cosmos.ConsistencyLevel&text=ConsistencyLevel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setConsistencyLevel(ConsistencyLevel consistencyLevel)"
  desc: "Sets the consistency level required for the request. The effective consistency level can only be reduce for read/query requests. So when the Account's default consistency level is for example Session you can specify on a request-by-request level for individual requests that Eventual consistency is sufficient - which could reduce the latency and RU charges for this request but will not guarantee session consistency (read-your-own-write) anymore"
  returns:
    description: "the CosmosItemRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setDedicatedGatewayRequestOptions(com.azure.cosmos.models.DedicatedGatewayRequestOptions)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setDedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions)"
  name: "setDedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions)"
  nameWithType: "CosmosQueryRequestOptions.setDedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions)"
  summary: "Sets the Dedicated Gateway Request Options"
  parameters:
  - description: "Dedicated Gateway Request Options"
    name: "dedicatedGatewayRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.DedicatedGatewayRequestOptions?alt=com.azure.cosmos.models.DedicatedGatewayRequestOptions&text=DedicatedGatewayRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setDedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions)"
  desc: "Sets the Dedicated Gateway Request Options"
  returns:
    description: "the CosmosQueryRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setFeedRange(com.azure.cosmos.models.FeedRange)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setFeedRange(FeedRange feedRange)"
  name: "setFeedRange(FeedRange feedRange)"
  nameWithType: "CosmosQueryRequestOptions.setFeedRange(FeedRange feedRange)"
  summary: "Sets the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that we want to query"
  parameters:
  - description: "the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref>"
    name: "feedRange"
    type: "<xref href=\"com.azure.cosmos.models.FeedRange?alt=com.azure.cosmos.models.FeedRange&text=FeedRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setFeedRange(FeedRange feedRange)"
  desc: "Sets the <xref uid=\"com.azure.cosmos.models.FeedRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FeedRange\"></xref> that we want to query"
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setIndexMetricsEnabled(boolean)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setIndexMetricsEnabled(boolean indexMetricsEnabled)"
  name: "setIndexMetricsEnabled(boolean indexMetricsEnabled)"
  nameWithType: "CosmosQueryRequestOptions.setIndexMetricsEnabled(boolean indexMetricsEnabled)"
  summary: "Sets index<wbr>Metrics<wbr>Enabled, which is used to obtain the index metrics to understand how the query engine used existing indexes and could use potential new indexes."
  parameters:
  - description: "a boolean used to obtain the index metrics"
    name: "indexMetricsEnabled"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setIndexMetricsEnabled(boolean indexMetricsEnabled)"
  desc: "Sets indexMetricsEnabled, which is used to obtain the index metrics to understand how the query engine used existing indexes and could use potential new indexes. The results will be displayed in QueryMetrics. Please note that this options will incurs overhead, so it should be enabled when debuging slow queries. By default the indexMetrics are disabled."
  returns:
    description: "indexMetricsEnabled"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setMaxBufferedItemCount(int)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setMaxBufferedItemCount(int maxBufferedItemCount)"
  name: "setMaxBufferedItemCount(int maxBufferedItemCount)"
  nameWithType: "CosmosQueryRequestOptions.setMaxBufferedItemCount(int maxBufferedItemCount)"
  summary: "Sets the maximum number of items that can be buffered client side during parallel query execution."
  parameters:
  - description: "maximum number of items."
    name: "maxBufferedItemCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setMaxBufferedItemCount(int maxBufferedItemCount)"
  desc: "Sets the maximum number of items that can be buffered client side during parallel query execution."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setMaxDegreeOfParallelism(int)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setMaxDegreeOfParallelism(int maxDegreeOfParallelism)"
  name: "setMaxDegreeOfParallelism(int maxDegreeOfParallelism)"
  nameWithType: "CosmosQueryRequestOptions.setMaxDegreeOfParallelism(int maxDegreeOfParallelism)"
  summary: "Sets the number of concurrent operations run client side during parallel query execution."
  parameters:
  - description: "number of concurrent operations."
    name: "maxDegreeOfParallelism"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setMaxDegreeOfParallelism(int maxDegreeOfParallelism)"
  desc: "Sets the number of concurrent operations run client side during parallel query execution."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setPartitionKey(com.azure.cosmos.models.PartitionKey)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setPartitionKey(PartitionKey partitionkey)"
  name: "setPartitionKey(PartitionKey partitionkey)"
  nameWithType: "CosmosQueryRequestOptions.setPartitionKey(PartitionKey partitionkey)"
  summary: "Sets the partition key used to identify the current request's target partition."
  parameters:
  - description: "the partition key value."
    name: "partitionkey"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKey?alt=com.azure.cosmos.models.PartitionKey&text=PartitionKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setPartitionKey(PartitionKey partitionkey)"
  desc: "Sets the partition key used to identify the current request's target partition."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setQueryMetricsEnabled(boolean)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setQueryMetricsEnabled(boolean queryMetricsEnabled)"
  name: "setQueryMetricsEnabled(boolean queryMetricsEnabled)"
  nameWithType: "CosmosQueryRequestOptions.setQueryMetricsEnabled(boolean queryMetricsEnabled)"
  summary: "Sets the option to enable/disable getting metrics relating to query execution on item query requests."
  parameters:
  - description: "whether to enable or disable query metrics"
    name: "queryMetricsEnabled"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setQueryMetricsEnabled(boolean queryMetricsEnabled)"
  desc: "Sets the option to enable/disable getting metrics relating to query execution on item query requests. By default query metrics are enabled."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setResponseContinuationTokenLimitInKb(int)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setResponseContinuationTokenLimitInKb(int limitInKb)"
  name: "setResponseContinuationTokenLimitInKb(int limitInKb)"
  nameWithType: "CosmosQueryRequestOptions.setResponseContinuationTokenLimitInKb(int limitInKb)"
  summary: "Sets the Response<wbr>Continuation<wbr>Token<wbr>Limit<wbr>InKb request option for item query requests in the Azure Cosmos DB service."
  parameters:
  - description: "continuation token size limit."
    name: "limitInKb"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setResponseContinuationTokenLimitInKb(int limitInKb)"
  desc: "Sets the ResponseContinuationTokenLimitInKb request option for item query requests in the Azure Cosmos DB service.\n\nResponseContinuationTokenLimitInKb is used to limit the length of continuation token in the query response. Valid values are >= 1.\n\nThe continuation token contains both required and optional fields. The required fields are necessary for resuming the execution from where it was stooped. The optional fields may contain serialized index lookup work that was done but not yet utilized. This avoids redoing the work again in subsequent continuations and hence improve the query performance. Setting the maximum continuation size to 1KB, the Azure Cosmos DB service will only serialize required fields. Starting from 2KB, the Azure Cosmos DB service would serialize as much as it could fit till it reaches the maximum specified size."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setScanInQueryEnabled(java.lang.Boolean)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setScanInQueryEnabled(Boolean scanInQueryEnabled)"
  name: "setScanInQueryEnabled(Boolean scanInQueryEnabled)"
  nameWithType: "CosmosQueryRequestOptions.setScanInQueryEnabled(Boolean scanInQueryEnabled)"
  summary: "Sets the option to allow scan on the queries which couldn't be served as indexing was opted out on the requested paths."
  parameters:
  - description: "the option of enable scan in query."
    name: "scanInQueryEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setScanInQueryEnabled(Boolean scanInQueryEnabled)"
  desc: "Sets the option to allow scan on the queries which couldn't be served as indexing was opted out on the requested paths."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setSessionToken(java.lang.String)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setSessionToken(String sessionToken)"
  name: "setSessionToken(String sessionToken)"
  nameWithType: "CosmosQueryRequestOptions.setSessionToken(String sessionToken)"
  summary: "Sets the session token for use with session consistency."
  parameters:
  - description: "the session token."
    name: "sessionToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setSessionToken(String sessionToken)"
  desc: "Sets the session token for use with session consistency."
  returns:
    description: "the CosmosQueryRequestOptions."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setThresholdForDiagnosticsOnTracer(java.time.Duration)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setThresholdForDiagnosticsOnTracer(Duration thresholdForDiagnosticsOnTracer)"
  name: "setThresholdForDiagnosticsOnTracer(Duration thresholdForDiagnosticsOnTracer)"
  nameWithType: "CosmosQueryRequestOptions.setThresholdForDiagnosticsOnTracer(Duration thresholdForDiagnosticsOnTracer)"
  summary: "Sets the threshold<wbr>For<wbr>Diagnostics<wbr>OnTracer, if latency on query operation is greater than this diagnostics will be send to open telemetry exporter as events in tracer span of end to end CRUD api."
  parameters:
  - description: "the latency threshold for diagnostics on tracer."
    name: "thresholdForDiagnosticsOnTracer"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setThresholdForDiagnosticsOnTracer(Duration thresholdForDiagnosticsOnTracer)"
  desc: "Sets the thresholdForDiagnosticsOnTracer, if latency on query operation is greater than this diagnostics will be send to open telemetry exporter as events in tracer span of end to end CRUD api. Default is 500 ms"
  returns:
    description: "the CosmosQueryRequestOptions"
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosQueryRequestOptions.setThroughputControlGroupName(java.lang.String)"
  fullName: "com.azure.cosmos.models.CosmosQueryRequestOptions.setThroughputControlGroupName(String throughputControlGroupName)"
  name: "setThroughputControlGroupName(String throughputControlGroupName)"
  nameWithType: "CosmosQueryRequestOptions.setThroughputControlGroupName(String throughputControlGroupName)"
  summary: "Set the throughput control group name."
  parameters:
  - description: "The throughput control group name."
    name: "throughputControlGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosQueryRequestOptions setThroughputControlGroupName(String throughputControlGroupName)"
  desc: "Set the throughput control group name."
  returns:
    description: "A <xref uid=\"com.azure.cosmos.models.CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosQueryRequestOptions\"></xref>."
    type: "<xref href=\"com.azure.cosmos.models.CosmosQueryRequestOptions?alt=com.azure.cosmos.models.CosmosQueryRequestOptions&text=CosmosQueryRequestOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Specifies the options associated with query methods (enumeration operations) in the Azure Cosmos DB database service."
metadata: {}
package: "com.azure.cosmos.models"
artifact: com.azure:azure-cosmos:4.34.0
