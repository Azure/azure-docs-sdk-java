### YamlMime:JavaMember
nameWithType: Appliable<T>.applyAsync
type: method
members:
- fullName: com.microsoft.azure.management.resources.fluentcore.model.Appliable<T>.applyAsync()
  name: applyAsync()
  nameWithType: Appliable<T>.applyAsync()
  returns:
    description: <p>the handle to the REST call </p>
    type: <xref href="Observable%3CT%3E?alt=Observable<T>&text=Observable%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute the update request asynchronously.</p>

    <p></p>
  syntax: public Observable<T> applyAsync()
  uid: com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync()
- fullName: com.microsoft.azure.management.resources.fluentcore.model.Appliable<T>.applyAsync(final ServiceCallback<T> callback)
  name: applyAsync(final ServiceCallback<T> callback)
  nameWithType: Appliable<T>.applyAsync(final ServiceCallback<T> callback)
  parameters:
  - description: <p>the callback for success and failure </p>
    name: callback
    type: <xref href="final+ServiceCallback%3CT%3E?alt=final ServiceCallback<T>&text=final+ServiceCallback%3CT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the handle to the REST call </p>
    type: <xref href="ServiceFuture%3CT%3E?alt=ServiceFuture<T>&text=ServiceFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute the update request asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<T> applyAsync(final ServiceCallback<T> callback)
  uid: com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync(final ServiceCallback<T>)
uid: com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync*
fullName: com.microsoft.azure.management.resources.fluentcore.model.Appliable<T>.applyAsync()
name: applyAsync()
package: com.microsoft.azure.management.resources.fluentcore.model
metadata: {}
