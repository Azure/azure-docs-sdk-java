### YamlMime:JavaType
uid: "com.azure.security.attestation.models.AttestationOptions"
fullName: "com.azure.security.attestation.models.AttestationOptions"
name: "AttestationOptions"
nameWithType: "AttestationOptions"
summary: "AttestationOptions represent the parameters sent to the <xref uid=\"com.azure.security.attestation.AttestationClient.attestOpenEnclave\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.AttestationClient#attestOpenEnclave\"></xref> or <xref uid=\"com.azure.security.attestation.AttestationClient.attestSgxEnclave\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.security.attestation.AttestationClient#attestSgxEnclave\"></xref>API.\n\nEach <xref uid=\"com.azure.security.attestation.models.AttestationOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AttestationOptions\"></xref> object expresses the options to attest an SGX enclave.\n\nAn enclave (or Trusted Execution Environment) is a chunk of code that is isolated from its host. When code is running inside an enclave, there is a real challenge - if the customer wants to communicate with code in the enclave, there is no way of establishing a secure communication channel that can verify communication to the enclave.\n\nTo support the \"Secure Key Release\" protocol which enables that communication, there are three key pieces of information required:\n\n *  Attestation Evidence (typically an SGX quote or OpenEnclave report\n *  InitTime Data - this is data specified when the TEE is created. (OPTIONAL)\n *  RunTime Data - this can be a public key or other information. (OPTIONAL)\n\nTo perform an attestation operation, you need at minimum a set of attestation evidence.\n\nFor the Secure Key Release scenario, the InitTime Data and RunTime Data are expressed in the token returned by the Attestation Service, a relying party can use the InitTime Data to make decisions about whether the TEE can be trusted, and can use the RunTime Data as data which is known to have come from inside the enclave (if, for instance the RunTime Data is an asymmetric cryptographic key, it can be used to encrypt data that can only be decrypted by code inside the TEE).\n\nFor both InitTime and RunTime data, the data can be expressed in the token as either BINARY or JSON data. This can simplify the evaluation process in the relying party.\n\nIn addition to the evidence, InitTime and RunTime data, an Attest request can also take a \"draft\" attestation policy. This can be used to determine how an attestation policy effects the claims generated by the attestation service.\n\nNote that when a client specifies a draft attestation policy the returned attestation token will not be signed by the attestation service. That is to ensure that the token cannot be used by a relying party.\n\nThe reason that both binary and JSON are represented as binary is that JSON encodings are ambiguous \\\\u2013 there are many possible semantically identical JSON encodings of the same data. Since we\\\\u2019re going to take the SHA256 hash of the data, we accept a sequence of octets (byte\\[\\]) instead of a String (depending on your encoding, the same string can be encoded as different sequences of octets)."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AttestationOptions"
constructors:
- "com.azure.security.attestation.models.AttestationOptions.AttestationOptions(com.azure.core.util.BinaryData)"
methods:
- "com.azure.security.attestation.models.AttestationOptions.getDraftPolicyForAttestation()"
- "com.azure.security.attestation.models.AttestationOptions.getEvidence()"
- "com.azure.security.attestation.models.AttestationOptions.getInitTimeData()"
- "com.azure.security.attestation.models.AttestationOptions.getRunTimeData()"
- "com.azure.security.attestation.models.AttestationOptions.getValidationOptions()"
- "com.azure.security.attestation.models.AttestationOptions.setDraftPolicyForAttestation(java.lang.String)"
- "com.azure.security.attestation.models.AttestationOptions.setInitTimeData(com.azure.security.attestation.models.AttestationData)"
- "com.azure.security.attestation.models.AttestationOptions.setRunTimeData(com.azure.security.attestation.models.AttestationData)"
- "com.azure.security.attestation.models.AttestationOptions.setValidationOptions(com.azure.security.attestation.models.AttestationTokenValidationOptions)"
type: "class"
metadata: {}
package: "com.azure.security.attestation.models"
artifact: com.azure:azure-security-attestation:1.1.0
