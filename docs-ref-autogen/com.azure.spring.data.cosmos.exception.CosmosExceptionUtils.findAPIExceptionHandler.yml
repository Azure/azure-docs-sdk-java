### YamlMime:JavaMember
uid: "com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.findAPIExceptionHandler*"
fullName: "com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler"
name: "<T>findAPIExceptionHandler"
nameWithType: "CosmosExceptionUtils.<T>findAPIExceptionHandler"
members:
- uid: "com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler(java.lang.String,java.lang.Throwable)"
  fullName: "com.azure.spring.data.cosmos.exception.CosmosExceptionUtils.<T>findAPIExceptionHandler(String message, Throwable throwable)"
  name: "<T>findAPIExceptionHandler(String message, Throwable throwable)"
  nameWithType: "CosmosExceptionUtils.<T>findAPIExceptionHandler(String message, Throwable throwable)"
  summary: "To find an exceptionHandler for a exception and return empty Mono if the exception status code is not found"
  parameters:
  - description: "the detail message"
    name: "message"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "exception"
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<T> <T>findAPIExceptionHandler(String message, Throwable throwable)"
  returns:
    description: "Mono instance"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.spring.data.cosmos.exception"
artifact: com.azure:azure-spring-data-cosmos:3.3.0
