items:
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl
  id: _files_impl
  parent: com.microsoft.azure.batch.protocol.implementation
  children:
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.FilesImpl(Retrofit,BatchServiceClientImpl)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,final OutputStream)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode(String,String,String,final OutputStream)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask(String,String,String,FileGetFromTaskOptions,final OutputStream)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask(String,String,String,final OutputStream)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync(final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync(final String,final String)
  - com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: FilesImpl
  nameWithType: FilesImpl
  fullName: com.microsoft.azure.batch.protocol.implementation.FilesImpl
  type: Class
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
      branch: master
      repo: https://github.com/Azure/azure-batch-sdk-for-java
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 68
  package: com.microsoft.azure.batch.protocol.implementation
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.batch.protocol._files" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: &o1
    content: public class FilesImpl implements Files
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.batch.protocol._files
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode(String,String,String)
  id: deleteFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 853
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNode(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: FilesImpl.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 947
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String)
  id: deleteFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 880
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 978
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  id: deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 963
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  id: deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 867
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 898
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  id: deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: FilesImpl.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 998
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask(String,String,String)
  id: deleteFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.deleteFromTask(String jobId, String taskId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 144
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTask(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: FilesImpl.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 238
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String)
  id: deleteFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 171
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 269
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  id: deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 254
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  id: deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 158
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync(String,String,String)
  id: deleteFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 189
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  id: deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: FilesImpl.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 289
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.FilesImpl(Retrofit,BatchServiceClientImpl)
  id: FilesImpl(Retrofit,BatchServiceClientImpl)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: FilesImpl(Retrofit retrofit, BatchServiceClientImpl client)
  nameWithType: FilesImpl.FilesImpl(Retrofit retrofit, BatchServiceClientImpl client)
  fullName: com.microsoft.azure.batch.protocol.implementation.FilesImpl.FilesImpl(Retrofit retrofit, BatchServiceClientImpl client)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.FilesImpl*
  type: Constructor
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 80
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Initializes an instance of <xref href="com.microsoft.azure.batch.protocol.implementation._files_impl" data-throw-if-not-resolved="false"></xref>.</p>

    <p></p>
  syntax:
    content: public FilesImpl(Retrofit retrofit, BatchServiceClientImpl client)
    parameters:
    - id: retrofit
      type: 964879b9
      description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    - id: client
      type: com.microsoft.azure.batch.protocol.implementation._batch_service_client_impl
      description: <p>the instance of the service client containing this operation class. </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,final OutputStream)
  id: getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,final OutputStream)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final OutputStream outputStream)
  nameWithType: FilesImpl.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1183
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 688beaca
      description: <p>The OutputStream object which data will be written to if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode(String,String,String,final OutputStream)
  id: getFromComputeNode(String,String,String,final OutputStream)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNode(String poolId, String nodeId, String filePath, final OutputStream outputStream)
  nameWithType: FilesImpl.getFromComputeNode(String poolId, String nodeId, String filePath, final OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNode(String poolId, String nodeId, String filePath, final OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1064
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, final OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: outputStream
      type: 688beaca
      description: <p>The OutputStream object which data will be written to if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNode(String,String,String,OutputStream)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String)
  id: getFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1106
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  id: getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1227
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  id: getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1213
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  id: getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1093
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: getFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1124
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headerse7daa122
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  id: getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: FilesImpl.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1246
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headerse7daa122
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask(String,String,String,FileGetFromTaskOptions,final OutputStream)
  id: getFromTask(String,String,String,FileGetFromTaskOptions,final OutputStream)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final OutputStream outputStream)
  nameWithType: FilesImpl.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 474
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 688beaca
      description: <p>The OutputStream object which data will be written to if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTask(String,String,String,FileGetFromTaskOptions,OutputStream)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask(String,String,String,final OutputStream)
  id: getFromTask(String,String,String,final OutputStream)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTask(String jobId, String taskId, String filePath, final OutputStream outputStream)
  nameWithType: FilesImpl.getFromTask(String jobId, String taskId, String filePath, final OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTask(String jobId, String taskId, String filePath, final OutputStream outputStream)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 355
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, final OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: outputStream
      type: 688beaca
      description: <p>The OutputStream object which data will be written to if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTask(String,String,String,OutputStream)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String)
  id: getFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 397
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  id: getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 518
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  id: getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 504
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  id: getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 384
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync(String,String,String)
  id: getFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 415
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_task_headerse7daa122
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  id: getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: FilesImpl.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 537
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_task_headerse7daa122
      description: <p>the observable to the InputStream object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode(String,String,String)
  id: getPropertiesFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1331
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNode(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: FilesImpl.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1433
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String)
  id: getPropertiesFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1358
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1462
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  id: getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1448
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  id: getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1345
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1376
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  id: getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1481
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask(String,String,String)
  id: getPropertiesFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromTask(String jobId, String taskId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTask(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 622
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTask(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: FilesImpl.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 724
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String)
  id: getPropertiesFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 649
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 753
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  id: getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 739
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  id: getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 636
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  id: getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: FilesImpl.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 667
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  id: getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: FilesImpl.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 772
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode(final String,final String)
  id: listFromComputeNode(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNode(final String poolId, final String nodeId)
  nameWithType: FilesImpl.listFromComputeNode(final String poolId, final String nodeId)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNode(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1867
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNode(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: FilesImpl.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1994
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String)
  id: listFromComputeNodeAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId)
  nameWithType: FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1906
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2051
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2022
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1886
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext(final String)
  id: listFromComputeNodeNext(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNext(final String nextPageLink)
  nameWithType: FilesImpl.listFromComputeNodeNext(final String nextPageLink)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNext(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2416
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNext(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: FilesImpl.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2529
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String)
  id: listFromComputeNodeNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2454
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2569
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2549
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2435
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync(final String)
  id: listFromComputeNodeNextSinglePageAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextSinglePageAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromComputeNodeNextSinglePageAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextSinglePageAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2492
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextSinglePageAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextSinglePageAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextSinglePageAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: FilesImpl.listFromComputeNodeNextSinglePageAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextSinglePageAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2609
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p>ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextSinglePageAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync(final String)
  id: listFromComputeNodeNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2471
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextWithServiceResponseAsync(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  id: listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: FilesImpl.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2587
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync(final String,final String)
  id: listFromComputeNodeSinglePageAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId)
  nameWithType: FilesImpl.listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1946
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNodeSinglePageAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: FilesImpl.listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2102
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p>ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeSinglePageAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromComputeNodeHeaders&gt; * </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  id: listFromComputeNodeWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  nameWithType: FilesImpl.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1924
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  id: listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: FilesImpl.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2071
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask(final String,final String)
  id: listFromTask(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTask(final String jobId, final String taskId)
  nameWithType: FilesImpl.listFromTask(final String jobId, final String taskId)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTask(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1562
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTask(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: FilesImpl.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1689
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String)
  id: listFromTaskAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId)
  nameWithType: FilesImpl.listFromTaskAsync(final String jobId, final String taskId)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskAsync(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1601
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1746
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  id: listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1717
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  id: listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1581
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext(final String)
  id: listFromTaskNext(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNext(final String nextPageLink)
  nameWithType: FilesImpl.listFromTaskNext(final String nextPageLink)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNext(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2171
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNext(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNext(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: FilesImpl.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2284
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
  - type: c8683d81
    description: <p>thrown if the request is rejected by server </p>
  - type: 9b2a4515
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String)
  id: listFromTaskNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromTaskNextAsync(final String nextPageLink)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2209
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: FilesImpl.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2324
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2304
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  id: listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: FilesImpl.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2190
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync(final String)
  id: listFromTaskNextSinglePageAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextSinglePageAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromTaskNextSinglePageAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextSinglePageAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2247
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextSinglePageAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNextSinglePageAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextSinglePageAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: FilesImpl.listFromTaskNextSinglePageAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextSinglePageAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2364
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p>ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextSinglePageAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync(final String)
  id: listFromTaskNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: FilesImpl.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2226
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextWithServiceResponseAsync(final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  id: listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: FilesImpl.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 2342
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync(final String,final String)
  id: listFromTaskSinglePageAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskSinglePageAsync(final String jobId, final String taskId)
  nameWithType: FilesImpl.listFromTaskSinglePageAsync(final String jobId, final String taskId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskSinglePageAsync(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1641
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskSinglePageAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTaskSinglePageAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskSinglePageAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: FilesImpl.listFromTaskSinglePageAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskSinglePageAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1797
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p>ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskSinglePageAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. ServiceResponseWithHeaders&lt;PageImpl&lt;NodeFile&gt;, FileListFromTaskHeaders&gt; * </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the PagedList&lt;NodeFile&gt; object wrapped in <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> if successful. </p>
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync(final String,final String)
  id: listFromTaskWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  nameWithType: FilesImpl.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1619
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskWithServiceResponseAsync(final String,final String)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  id: listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol.implementation._files_impl
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  langs:
  - java
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: FilesImpl.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  overload: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/implementation/FilesImpl.java
    startLine: 1766
  package: com.microsoft.azure.batch.protocol.implementation
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
  overridden: com.microsoft.azure.batch.protocol._files.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  exceptions:
  - type: 3c87bd19
    description: <p>thrown if parameters fail the validation </p>
references:
- uid: 964879b9
  spec.java:
  - name: Retrofit
    fullName: Retrofit
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.FilesImpl*
  name: FilesImpl
  nameWithType: FilesImpl.FilesImpl
  fullName: com.microsoft.azure.batch.protocol.implementation.FilesImpl.FilesImpl
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 3c87bd19
  spec.java:
  - name: IllegalArgumentException
    fullName: IllegalArgumentException
- uid: c8683d81
  spec.java:
  - name: BatchErrorException
    fullName: BatchErrorException
- uid: 9b2a4515
  spec.java:
  - name: RuntimeException
    fullName: RuntimeException
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTask*
  name: deleteFromTask
  nameWithType: FilesImpl.deleteFromTask
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTask
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 1c186eb5
  spec.java:
  - name: final ServiceCallback<Void>
    fullName: final ServiceCallback<Void>
- uid: aa81d378
  spec.java:
  - name: ServiceFuture<Void>
    fullName: ServiceFuture<Void>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskAsync*
  name: deleteFromTaskAsync
  nameWithType: FilesImpl.deleteFromTaskAsync
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: dcd884b2
  spec.java:
  - name: Observable<Void>
    fullName: Observable<Void>
- uid: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_task_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models._file_delete_from_task_headers
    name: FileDeleteFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models._file_delete_from_task_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromTaskWithServiceResponseAsync*
  name: deleteFromTaskWithServiceResponseAsync
  nameWithType: FilesImpl.deleteFromTaskWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 866c2227
  spec.java:
  - name: Boolean
    fullName: Boolean
- uid: 688beaca
  spec.java:
  - name: final OutputStream
    fullName: final OutputStream
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTask*
  name: getFromTask
  nameWithType: FilesImpl.getFromTask
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTask
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 0377aee2
  spec.java:
  - name: final ServiceCallback<InputStream>
    fullName: final ServiceCallback<InputStream>
- uid: 8601070c
  spec.java:
  - name: ServiceFuture<InputStream>
    fullName: ServiceFuture<InputStream>
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskAsync*
  name: getFromTaskAsync
  nameWithType: FilesImpl.getFromTaskAsync
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 3ab19265
  spec.java:
  - name: Observable<InputStream>
    fullName: Observable<InputStream>
- uid: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_task_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<InputStream, '
    fullName: 'Observable<ServiceResponseWithHeaders<InputStream, '
  - uid: com.microsoft.azure.batch.protocol.models._file_get_from_task_headers
    name: FileGetFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models._file_get_from_task_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromTaskWithServiceResponseAsync*
  name: getFromTaskWithServiceResponseAsync
  nameWithType: FilesImpl.getFromTaskWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTask*
  name: getPropertiesFromTask
  nameWithType: FilesImpl.getPropertiesFromTask
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTask
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskAsync*
  name: getPropertiesFromTaskAsync
  nameWithType: FilesImpl.getPropertiesFromTaskAsync
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headers
    name: FileGetPropertiesFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromTaskWithServiceResponseAsync*
  name: getPropertiesFromTaskWithServiceResponseAsync
  nameWithType: FilesImpl.getPropertiesFromTaskWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNode*
  name: deleteFromComputeNode
  nameWithType: FilesImpl.deleteFromComputeNode
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNode
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeAsync*
  name: deleteFromComputeNodeAsync
  nameWithType: FilesImpl.deleteFromComputeNodeAsync
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headers
    name: FileDeleteFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.deleteFromComputeNodeWithServiceResponseAsync*
  name: deleteFromComputeNodeWithServiceResponseAsync
  nameWithType: FilesImpl.deleteFromComputeNodeWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.deleteFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNode*
  name: getFromComputeNode
  nameWithType: FilesImpl.getFromComputeNode
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNode
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeAsync*
  name: getFromComputeNodeAsync
  nameWithType: FilesImpl.getFromComputeNodeAsync
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<InputStream, '
    fullName: 'Observable<ServiceResponseWithHeaders<InputStream, '
  - uid: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headers
    name: FileGetFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getFromComputeNodeWithServiceResponseAsync*
  name: getFromComputeNodeWithServiceResponseAsync
  nameWithType: FilesImpl.getFromComputeNodeWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNode*
  name: getPropertiesFromComputeNode
  nameWithType: FilesImpl.getPropertiesFromComputeNode
  fullName: void com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNode
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeAsync*
  name: getPropertiesFromComputeNodeAsync
  nameWithType: FilesImpl.getPropertiesFromComputeNodeAsync
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headerse7daa122
  spec.java:
  - name: 'Observable<ServiceResponseWithHeaders<Void, '
    fullName: 'Observable<ServiceResponseWithHeaders<Void, '
  - uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headers
    name: FileGetPropertiesFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.getPropertiesFromComputeNodeWithServiceResponseAsync*
  name: getPropertiesFromComputeNodeWithServiceResponseAsync
  nameWithType: FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.getPropertiesFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
  spec.java:
  - name: PagedList<
    fullName: PagedList<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTask*
  name: listFromTask
  nameWithType: FilesImpl.listFromTask
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTask
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
  spec.java:
  - name: final ListOperationCallback<
    fullName: final ListOperationCallback<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>'
    fullName: '>'
- uid: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
  spec.java:
  - name: ServiceFuture<List<
    fullName: ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskAsync*
  name: listFromTaskAsync
  nameWithType: FilesImpl.listFromTaskAsync
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
  spec.java:
  - name: Observable<Page<
    fullName: Observable<Page<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>>'
    fullName: '>>'
- uid: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<Page<
    fullName: Observable<ServiceResponseWithHeaders<Page<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>, '
    fullName: '>, '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_headers
    name: FileListFromTaskHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
    href: com.microsoft.azure.batch.protocol.models._file_list_from_task_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskWithServiceResponseAsync*
  name: listFromTaskWithServiceResponseAsync
  nameWithType: FilesImpl.listFromTaskWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskSinglePageAsync*
  name: listFromTaskSinglePageAsync
  nameWithType: FilesImpl.listFromTaskSinglePageAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskSinglePageAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 2ec468d1
  spec.java:
  - name: final Boolean
    fullName: final Boolean
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_options
    name: FileListFromTaskOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
    href: com.microsoft.azure.batch.protocol.models._file_list_from_task_options.yml
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNode*
  name: listFromComputeNode
  nameWithType: FilesImpl.listFromComputeNode
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNode
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeAsync*
  name: listFromComputeNodeAsync
  nameWithType: FilesImpl.listFromComputeNodeAsync
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
  spec.java:
  - name: Observable<ServiceResponseWithHeaders<Page<
    fullName: Observable<ServiceResponseWithHeaders<Page<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>, '
    fullName: '>, '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headers
    name: FileListFromComputeNodeHeaders
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
    href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headers.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeWithServiceResponseAsync*
  name: listFromComputeNodeWithServiceResponseAsync
  nameWithType: FilesImpl.listFromComputeNodeWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeSinglePageAsync*
  name: listFromComputeNodeSinglePageAsync
  nameWithType: FilesImpl.listFromComputeNodeSinglePageAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeSinglePageAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
    name: FileListFromComputeNodeOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
    href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options.yml
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNext*
  name: listFromTaskNext
  nameWithType: FilesImpl.listFromTaskNext
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNext
  package: com.microsoft.azure.batch.protocol.implementation
- uid: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
  spec.java:
  - name: final ServiceFuture<List<
    fullName: final ServiceFuture<List<
  - uid: com.microsoft.azure.batch.protocol.models._node_file
    name: NodeFile
    fullName: com.microsoft.azure.batch.protocol.models.NodeFile
    href: com.microsoft.azure.batch.protocol.models._node_file.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextAsync*
  name: listFromTaskNextAsync
  nameWithType: FilesImpl.listFromTaskNextAsync
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextWithServiceResponseAsync*
  name: listFromTaskNextWithServiceResponseAsync
  nameWithType: FilesImpl.listFromTaskNextWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromTaskNextSinglePageAsync*
  name: listFromTaskNextSinglePageAsync
  nameWithType: FilesImpl.listFromTaskNextSinglePageAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromTaskNextSinglePageAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
    name: FileListFromTaskNextOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
    href: com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options.yml
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNext*
  name: listFromComputeNodeNext
  nameWithType: FilesImpl.listFromComputeNodeNext
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNext
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextAsync*
  name: listFromComputeNodeNextAsync
  nameWithType: FilesImpl.listFromComputeNodeNextAsync
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextWithServiceResponseAsync*
  name: listFromComputeNodeNextWithServiceResponseAsync
  nameWithType: FilesImpl.listFromComputeNodeNextWithServiceResponseAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextWithServiceResponseAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl.listFromComputeNodeNextSinglePageAsync*
  name: listFromComputeNodeNextSinglePageAsync
  nameWithType: FilesImpl.listFromComputeNodeNextSinglePageAsync
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.implementation.FilesImpl.listFromComputeNodeNextSinglePageAsync
  package: com.microsoft.azure.batch.protocol.implementation
- uid: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
  spec.java:
  - name: 'final '
    fullName: 'final '
  - uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
    name: FileListFromComputeNodeNextOptions
    fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
    href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options.yml
- uid: com.microsoft.azure.batch.protocol._files
  parent: com.microsoft.azure.batch.protocol
  href: com.microsoft.azure.batch.protocol._files.yml
  name: Files
  nameWithType: Files
  fullName: com.microsoft.azure.batch.protocol.Files
  type: Interface
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.batch.protocol._files" data-throw-if-not-resolved="false"></xref>. </p>
  syntax:
    content: public interface Files
- uid: com.microsoft.azure.batch.protocol.implementation._batch_service_client_impl
  parent: com.microsoft.azure.batch.protocol.implementation
  href: com.microsoft.azure.batch.protocol.implementation._batch_service_client_impl.yml
  name: BatchServiceClientImpl
  nameWithType: BatchServiceClientImpl
  fullName: com.microsoft.azure.batch.protocol.implementation.BatchServiceClientImpl
  type: Class
  summary: <p>Initializes a new instance of the <xref href="com.microsoft.azure.batch.protocol.implementation._batch_service_client_impl" data-throw-if-not-resolved="false"></xref> class. </p>
  syntax:
    content: public class BatchServiceClientImpl implements BatchServiceClient
- uid: com.microsoft.azure.batch.protocol.implementation._files_impl
  parent: com.microsoft.azure.batch.protocol.implementation
  href: com.microsoft.azure.batch.protocol.implementation._files_impl.yml
  name: FilesImpl
  nameWithType: FilesImpl
  fullName: com.microsoft.azure.batch.protocol.implementation.FilesImpl
  type: Class
  summary: <p>An instance of this class provides access to all the operations defined in <xref href="com.microsoft.azure.batch.protocol._files" data-throw-if-not-resolved="false"></xref>. </p>
  syntax: *o1
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_delete_from_task_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_delete_from_task_headers.yml
  name: FileDeleteFromTaskHeaders
  nameWithType: FileDeleteFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskHeaders
  type: Class
  summary: <p>Defines headers for DeleteFromTask operation. </p>
  syntax:
    content: public class FileDeleteFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTask(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: void com.microsoft.azure.batch.protocol.Files.deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public void deleteFromTask(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
- uid: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options.yml
  name: FileDeleteFromTaskOptions
  nameWithType: FileDeleteFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromTaskOptions
  type: Class
  summary: <p>Additional parameters for the File_deleteFromTask operation. </p>
  syntax:
    content: public class FileDeleteFromTaskOptions
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromTaskAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromTaskWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  nameWithType: Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node where the task ran.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromTaskHeaders>> deleteFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, Boolean recursive, FileDeleteFromTaskOptions fileDeleteFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to delete. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTask(String,String,String,OutputStream)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_from_task_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_from_task_headers.yml
  name: FileGetFromTaskHeaders
  nameWithType: FileGetFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskHeaders
  type: Class
  summary: <p>Defines headers for GetFromTask operation. </p>
  syntax:
    content: public class FileGetFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_task_headerse7daa122
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTask(String,String,String,FileGetFromTaskOptions,OutputStream)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  nameWithType: Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.Files.getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromTask(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, OutputStream outputStream)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_from_task_options.yml
  name: FileGetFromTaskOptions
  nameWithType: FileGetFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions
  type: Class
  summary: <p>Additional parameters for the File_getFromTask operation. </p>
  syntax:
    content: public class FileGetFromTaskOptions
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromTaskWithServiceResponseAsync(String,String,String,FileGetFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromTaskHeaders>> getFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to retrieve. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_task_headerse7daa122
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTask(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTask(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headers.yml
  name: FileGetPropertiesFromTaskHeaders
  nameWithType: FileGetPropertiesFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskHeaders
  type: Class
  summary: <p>Defines headers for GetPropertiesFromTask operation. </p>
  syntax:
    content: public class FileGetPropertiesFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTask(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: void com.microsoft.azure.batch.protocol.Files.getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromTask(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options.yml
  name: FileGetPropertiesFromTaskOptions
  nameWithType: FileGetPropertiesFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromTaskOptions
  type: Class
  summary: <p>Additional parameters for the File_getPropertiesFromTask operation. </p>
  syntax:
    content: public class FileGetPropertiesFromTaskOptions
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromTaskAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromTaskWithServiceResponseAsync(String,String,String,FileGetPropertiesFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  nameWithType: Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromTaskHeaders>> getPropertiesFromTaskWithServiceResponseAsync(String jobId, String taskId, String filePath, FileGetPropertiesFromTaskOptions fileGetPropertiesFromTaskOptions)
    parameters:
    - id: jobId
      type: "26831127"
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: "26831127"
      description: <p>The ID of the task whose file you want to get the properties of. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromTaskOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_task_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headers.yml
  name: FileDeleteFromComputeNodeHeaders
  nameWithType: FileDeleteFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeHeaders
  type: Class
  summary: <p>Defines headers for DeleteFromComputeNode operation. </p>
  syntax:
    content: public class FileDeleteFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNode(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: void com.microsoft.azure.batch.protocol.Files.deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public void deleteFromComputeNode(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
- uid: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options.yml
  name: FileDeleteFromComputeNodeOptions
  nameWithType: FileDeleteFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileDeleteFromComputeNodeOptions
  type: Class
  summary: <p>Additional parameters for the File_deleteFromComputeNode operation. </p>
  syntax:
    content: public class FileDeleteFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Void> deleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.deleteFromComputeNodeWithServiceResponseAsync(String,String,String,Boolean,FileDeleteFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  nameWithType: Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Deletes the specified task file from the compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileDeleteFromComputeNodeHeaders>> deleteFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, Boolean recursive, FileDeleteFromComputeNodeOptions fileDeleteFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node from which you want to delete the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the file that you want to delete. </p>
    - id: recursive
      type: 866c2227
      description: <p>Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. </p>
    - id: fileDeleteFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_delete_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNode(String,String,String,OutputStream)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headers.yml
  name: FileGetFromComputeNodeHeaders
  nameWithType: FileGetFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeHeaders
  type: Class
  summary: <p>Defines headers for GetFromComputeNode operation. </p>
  syntax:
    content: public class FileGetFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headerse7daa122
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  fullName: void com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: outputStream
      type: 3a09e348
      description: <p>The OutputStream object which data will be written to if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options.yml
  name: FileGetFromComputeNodeOptions
  nameWithType: FileGetFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions
  type: Class
  summary: <p>Additional parameters for the File_getFromComputeNode operation. </p>
  syntax:
    content: public class FileGetFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  fullName: ServiceFuture<InputStream> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 0377aee2
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: 8601070c
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: Observable<InputStream> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 3ab19265
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<InputStream, FileGetFromComputeNodeHeaders>> getFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the task file that you want to get the content of. </p>
    - id: fileGetFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 2af956f9com.microsoft.azure.batch.protocol.models._file_get_from_compute_node_headerse7daa122
      description: <p>the observable to the InputStream object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNode(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  fullName: void com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headers.yml
  name: FileGetPropertiesFromComputeNodeHeaders
  nameWithType: FileGetPropertiesFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeHeaders
  type: Class
  summary: <p>Defines headers for GetPropertiesFromComputeNode operation. </p>
  syntax:
    content: public class FileGetPropertiesFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNode(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: void com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public void getPropertiesFromComputeNode(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
- uid: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options.yml
  name: FileGetPropertiesFromComputeNodeOptions
  nameWithType: FileGetPropertiesFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileGetPropertiesFromComputeNodeOptions
  type: Class
  summary: <p>Additional parameters for the File_getPropertiesFromComputeNode operation. </p>
  syntax:
    content: public class FileGetPropertiesFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions,final ServiceCallback<Void>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  fullName: ServiceFuture<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions, final ServiceCallback<Void> serviceCallback)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 1c186eb5
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: aa81d378
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: Observable<Void> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<Void> getPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: dcd884b2
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.getPropertiesFromComputeNodeWithServiceResponseAsync(String,String,String,FileGetPropertiesFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  nameWithType: Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Gets the properties of the specified compute node file.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void, FileGetPropertiesFromComputeNodeHeaders>> getPropertiesFromComputeNodeWithServiceResponseAsync(String poolId, String nodeId, String filePath, FileGetPropertiesFromComputeNodeOptions fileGetPropertiesFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: "26831127"
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: "26831127"
      description: <p>The ID of the compute node that contains the file. </p>
    - id: filePath
      type: "26831127"
      description: <p>The path to the compute node file that you want to get the properties of. </p>
    - id: fileGetPropertiesFromComputeNodeOptions
      type: com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 6738ce59com.microsoft.azure.batch.protocol.models._file_get_properties_from_compute_node_headerse7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceResponseWithHeaders</ref> object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._node_file
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._node_file.yml
  name: NodeFile
  nameWithType: NodeFile
  fullName: com.microsoft.azure.batch.protocol.models.NodeFile
  type: Class
  summary: <p>Information about a file or directory on a compute node. </p>
  syntax:
    content: public class NodeFile
- uid: com.microsoft.azure.batch.protocol._files.listFromTask(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTask(final String jobId, final String taskId)
  nameWithType: Files.listFromTask(final String jobId, final String taskId)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromTask(final String jobId, final String taskId)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskAsync(final String jobId, final String taskId)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_task_headers.yml
  name: FileListFromTaskHeaders
  nameWithType: FileListFromTaskHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskHeaders
  type: Class
  summary: <p>Defines headers for ListFromTask operation. </p>
  syntax:
    content: public class FileListFromTaskHeaders
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTask(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTask(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_task_options.yml
  name: FileListFromTaskOptions
  nameWithType: FileListFromTaskOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions
  type: Class
  summary: <p>Additional parameters for the File_listFromTask operation. </p>
  syntax:
    content: public class FileListFromTaskOptions
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskWithServiceResponseAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
    parameters:
    - id: jobId
      type: 3d93591e
      description: <p>The ID of the job that contains the task. </p>
    - id: taskId
      type: 3d93591e
      description: <p>The ID of the task whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    - id: fileListFromTaskOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNode(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNode(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNode(final String poolId, final String nodeId)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String poolId, final String nodeId)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeAsync(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headers
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headers.yml
  name: FileListFromComputeNodeHeaders
  nameWithType: FileListFromComputeNodeHeaders
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeHeaders
  type: Class
  summary: <p>Defines headers for ListFromComputeNode operation. </p>
  syntax:
    content: public class FileListFromComputeNodeHeaders
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeWithServiceResponseAsync(final String,final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNode(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNode(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options.yml
  name: FileListFromComputeNodeOptions
  nameWithType: FileListFromComputeNodeOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeOptions
  type: Class
  summary: <p>Additional parameters for the File_listFromComputeNode operation. </p>
  syntax:
    content: public class FileListFromComputeNodeOptions
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeWithServiceResponseAsync(final String,final String,final Boolean,final FileListFromComputeNodeOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  nameWithType: Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeWithServiceResponseAsync(final String poolId, final String nodeId, final Boolean recursive, final FileListFromComputeNodeOptions fileListFromComputeNodeOptions)
    parameters:
    - id: poolId
      type: 3d93591e
      description: <p>The ID of the pool that contains the compute node. </p>
    - id: nodeId
      type: 3d93591e
      description: <p>The ID of the compute node whose files you want to list. </p>
    - id: recursive
      type: 2ec468d1
      description: <p>Whether to list children of a directory. </p>
    - id: fileListFromComputeNodeOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNext(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNext(final String nextPageLink)
  nameWithType: Files.listFromTaskNext(final String nextPageLink)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextAsync(final String nextPageLink)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNext(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromTaskNext(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options.yml
  name: FileListFromTaskNextOptions
  nameWithType: FileListFromTaskNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromTaskNextOptions
  type: Class
  summary: <p>Additional parameters for the listFromTaskNext operation. </p>
  syntax:
    content: public class FileListFromTaskNextOptions
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromTaskNextAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromTaskNextWithServiceResponseAsync(final String,final FileListFromTaskNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  nameWithType: Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> com.microsoft.azure.batch.protocol.Files.listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
  type: Method
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromTaskHeaders>> listFromTaskNextWithServiceResponseAsync(final String nextPageLink, final FileListFromTaskNextOptions fileListFromTaskNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromTaskNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_task_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_task_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNext(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNext(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNext(final String nextPageLink)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextAsync(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextWithServiceResponseAsync(final String)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNext(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: PagedList<NodeFile> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public PagedList<NodeFile> listFromComputeNodeNext(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 36b27be0com.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the PagedList&lt;NodeFile&gt; object if successful. </p>
- uid: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options.yml
  name: FileListFromComputeNodeNextOptions
  nameWithType: FileListFromComputeNodeNextOptions
  fullName: com.microsoft.azure.batch.protocol.models.FileListFromComputeNodeNextOptions
  type: Class
  summary: <p>Additional parameters for the listFromComputeNodeNext operation. </p>
  syntax:
    content: public class FileListFromComputeNodeNextOptions
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions,final ServiceFuture<List<NodeFile>>,final ListOperationCallback<NodeFile>)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  fullName: ServiceFuture<List<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public ServiceFuture<List<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions, final ServiceFuture<List<NodeFile>> serviceFuture, final ListOperationCallback<NodeFile> serviceCallback)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    - id: serviceFuture
      type: bd82102acom.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    - id: serviceCallback
      type: 3c4303efcom.microsoft.azure.batch.protocol.models._node_filea08ddfce
      description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    return:
      type: b7698b59com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the <ref refid="" kindref="compound">ServiceFuture</ref> object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: Observable<Page<NodeFile>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<Page<NodeFile>> listFromComputeNodeNextAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 32da0907com.microsoft.azure.batch.protocol.models._node_filee7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol._files.listFromComputeNodeNextWithServiceResponseAsync(final String,final FileListFromComputeNodeNextOptions)
  parent: com.microsoft.azure.batch.protocol._files
  href: com.microsoft.azure.batch.protocol._files.yml
  name: listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  nameWithType: Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  fullName: Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> com.microsoft.azure.batch.protocol.Files.listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
  type: Method
  summary: >-
    <p>Lists all of the files in task directories on the specified compute node.</p>

    <p></p>
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Page<NodeFile>, FileListFromComputeNodeHeaders>> listFromComputeNodeNextWithServiceResponseAsync(final String nextPageLink, final FileListFromComputeNodeNextOptions fileListFromComputeNodeNextOptions)
    parameters:
    - id: nextPageLink
      type: 3d93591e
      description: <p>The NextLink from the previous successful call to List operation. </p>
    - id: fileListFromComputeNodeNextOptions
      type: 93de0ef9com.microsoft.azure.batch.protocol.models._file_list_from_compute_node_next_options
      description: <p>Additional parameters for the operation </p>
    return:
      type: 442ed5e5com.microsoft.azure.batch.protocol.models._node_file8135b5ebcom.microsoft.azure.batch.protocol.models._file_list_from_compute_node_headerse7daa122
      description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
- uid: com.microsoft.azure.batch.protocol.models._batch_error_exception
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._batch_error_exception.yml
  name: BatchErrorException
  nameWithType: BatchErrorException
  fullName: com.microsoft.azure.batch.protocol.models.BatchErrorException
  type: Class
  summary: <p>Exception thrown for an invalid response with <xref href="com.microsoft.azure.batch.protocol.models._batch_error" data-throw-if-not-resolved="false"></xref> information. </p>
  syntax:
    content: public class BatchErrorException
- uid: com.microsoft.azure.batch.protocol.models._page_impl
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models._page_impl.yml
  name: PageImpl<T>
  nameWithType: PageImpl<T>
  fullName: com.microsoft.azure.batch.protocol.models.PageImpl<T>
  type: Class
  summary: >-
    <p>An instance of this class defines a page of Azure resources and a link to get the next page of resources, if any.</p>

    <p></p>
  syntax:
    content: public class PageImpl<T>
    typeParameters:
    - type: 8ce1ecb9
      description: <p>type of Azure resource </p>
