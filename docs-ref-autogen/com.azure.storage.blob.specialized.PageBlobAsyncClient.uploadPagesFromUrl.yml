### YamlMime:JavaMember
uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl*"
fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl"
name: "uploadPagesFromUrl"
nameWithType: "PageBlobAsyncClient.uploadPagesFromUrl"
members:
- uid: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(com.azure.storage.blob.models.PageRange,java.lang.String,java.lang.Long)"
  fullName: "com.azure.storage.blob.specialized.PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  name: "uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  nameWithType: "PageBlobAsyncClient.uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  summary: "Writes one or more pages from the source page blob to this page blob. The write size must be a multiple of 512. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nPageRange pageRange = new PageRange()\n     .setStart(0)\n     .setEnd(511);\n \n client.uploadPagesFromUrl(pageRange, url, sourceOffset)\n     .subscribe(response -> System.out.printf(\n         \"Uploaded page blob from URL with sequence number %s%n\", response.getBlobSequenceNumber()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-page"
  parameters:
  - description: "A <xref uid=\"com.azure.storage.blob.models.PageRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageRange\"></xref> object. Given that pages must be aligned with 512-byte boundaries, the start\n offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges\n are 0-511, 512-1023, etc."
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the blob that will be the source of the copy.  A source blob in the same storage\n account can be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n must either be public or must be authenticated via a shared access signature. If the source blob is public, no\n authentication is required to perform the operation."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The source offset to copy from.  Pass null or 0 to copy from the beginning of source page\n blob."
    name: "sourceOffset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PageBlobItem> uploadPagesFromUrl(PageRange range, String sourceUrl, Long sourceOffset)"
  returns:
    description: "A reactive response containing the information of the uploaded pages."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.8.0
