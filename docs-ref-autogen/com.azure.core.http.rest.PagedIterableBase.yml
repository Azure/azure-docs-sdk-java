### YamlMime:JavaType
uid: "com.azure.core.http.rest.PagedIterableBase"
fullName: "com.azure.core.http.rest.PagedIterableBase<T,P>"
name: "PagedIterableBase<T,P>"
nameWithType: "PagedIterableBase<T,P>"
summary: "This class provides utility to iterate over responses that extend <xref uid=\"com.azure.core.http.rest.PagedResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedResponse\"></xref> using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> and <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> interfaces.\n\n**Code sample using <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> by page**\n\n```java\n// process the streamByPage\n CustomPagedFlux<String> customPagedFlux = createCustomInstance();\n PagedIterableBase<String, PagedResponse<String>> customPagedIterableResponse =\n     new PagedIterableBase<>(customPagedFlux);\n customPagedIterableResponse.streamByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %s %n\", value);\n     });\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page**\n\n```java\n// process the iterableByPage\n customPagedIterableResponse.iterableByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %s %n\", value);\n     });\n });\n```\n\n**Code sample using <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> by page and while loop**\n\n```java\n// iterate over each page\n Iterator<PagedResponse<String>> iterator = customPagedIterableResponse.iterableByPage().iterator();\n while (iterator.hasNext()) {\n     PagedResponse<String> resp = iterator.next();\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Response value is %s %n\", value);\n     });\n }\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.paging.ContinuablePagedIterable\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.IterableStream.<T>of(java.lang.Iterable<T>)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage()"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterableByPage(int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.iterator()"
- "com.azure.core.util.paging.ContinuablePagedIterable.stream()"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage()"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C)"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedIterable.streamByPage(int)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PagedIterableBase<T,P> extends ContinuablePagedIterable<String,T,P>"
constructors:
- "com.azure.core.http.rest.PagedIterableBase.PagedIterableBase(com.azure.core.http.rest.PagedFluxBase<T,P>)"
type: "class"
typeParameters:
- name: "T"
- name: "P"
metadata: {}
package: "com.azure.core.http.rest"
artifact: com.azure:azure-core:1.12.0
