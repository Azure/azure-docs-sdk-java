### YamlMime:JavaMember
uid: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader*"
fullName: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader"
name: "getAvroReader"
nameWithType: "AvroReaderFactory.getAvroReader"
members:
- uid: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader(Flux<ByteBuffer> avro)"
  name: "getAvroReader(Flux<ByteBuffer> avro)"
  nameWithType: "AvroReaderFactory.getAvroReader(Flux<ByteBuffer> avro)"
  summary: "Gets a new instance of <xref uid=\"com.azure.storage.internal.avro.implementation.AvroReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AvroReader\"></xref>."
  parameters:
  - description: "A reactive stream that contains the Avro data."
    name: "avro"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public AvroReader getAvroReader(Flux<ByteBuffer> avro)"
  returns:
    description: "An AvroReader."
    type: "<xref href=\"com.azure.storage.internal.avro.implementation.AvroReader?alt=com.azure.storage.internal.avro.implementation.AvroReader&text=AvroReader\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader(reactor.core.publisher.Flux<java.nio.ByteBuffer>,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  fullName: "com.azure.storage.internal.avro.implementation.AvroReaderFactory.getAvroReader(Flux<ByteBuffer> avroHeader, Flux<ByteBuffer> avroBody, long offset, long thresholdIndex)"
  name: "getAvroReader(Flux<ByteBuffer> avroHeader, Flux<ByteBuffer> avroBody, long offset, long thresholdIndex)"
  nameWithType: "AvroReaderFactory.getAvroReader(Flux<ByteBuffer> avroHeader, Flux<ByteBuffer> avroBody, long offset, long thresholdIndex)"
  summary: "Gets a new instance of <xref uid=\"com.azure.storage.internal.avro.implementation.AvroReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AvroReader\"></xref>."
  parameters:
  - description: "A reactive stream that contains the Avro header."
    name: "avroHeader"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A reactive stream that starts at the offset and represents the start of a block."
    name: "avroBody"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The body offset."
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The inclusive index after which to start returning objects."
    name: "thresholdIndex"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AvroReader getAvroReader(Flux<ByteBuffer> avroHeader, Flux<ByteBuffer> avroBody, long offset, long thresholdIndex)"
  returns:
    description: "An AvroReader."
    type: "<xref href=\"com.azure.storage.internal.avro.implementation.AvroReader?alt=com.azure.storage.internal.avro.implementation.AvroReader&text=AvroReader\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.internal.avro.implementation"
artifact: com.azure:azure-storage-internal-avro:12.0.2
