### YamlMime:JavaType
uid: "com.microsoft.azure.management.storage.EncryptionService"
fullName: "com.microsoft.azure.management.storage.EncryptionService"
name: "EncryptionService"
nameWithType: "EncryptionService"
summary: "A service that allows server-side encryption to be used."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EncryptionService"
constructors:
- uid: "com.microsoft.azure.management.storage.EncryptionService.EncryptionService()"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.EncryptionService()"
  name: "EncryptionService()"
  nameWithType: "EncryptionService.EncryptionService()"
  syntax: "public EncryptionService()"
methods:
- uid: "com.microsoft.azure.management.storage.EncryptionService.enabled()"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.enabled()"
  name: "enabled()"
  nameWithType: "EncryptionService.enabled()"
  summary: "Get a boolean indicating whether or not the service encrypts the data as it is stored."
  syntax: "public Boolean enabled()"
  desc: "Get a boolean indicating whether or not the service encrypts the data as it is stored."
  returns:
    description: "the enabled value"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.EncryptionService.keyType()"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.keyType()"
  name: "keyType()"
  nameWithType: "EncryptionService.keyType()"
  summary: "Get encryption key type to be used for the encryption service."
  syntax: "public KeyType keyType()"
  desc: "Get encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used. Possible values include: 'Service', 'Account'."
  returns:
    description: "the keyType value"
    type: "<xref href=\"com.microsoft.azure.management.storage.KeyType?alt=com.microsoft.azure.management.storage.KeyType&text=KeyType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.EncryptionService.lastEnabledTime()"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.lastEnabledTime()"
  name: "lastEnabledTime()"
  nameWithType: "EncryptionService.lastEnabledTime()"
  summary: "Get gets a rough estimate of the date/time when the encryption was last enabled by the user."
  syntax: "public DateTime lastEnabledTime()"
  desc: "Get gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate."
  returns:
    description: "the lastEnabledTime value"
    type: "<xref href=\"org.joda.time.DateTime?alt=org.joda.time.DateTime&text=DateTime\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.EncryptionService.withEnabled(java.lang.Boolean)"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.withEnabled(Boolean enabled)"
  name: "withEnabled(Boolean enabled)"
  nameWithType: "EncryptionService.withEnabled(Boolean enabled)"
  summary: "Set a boolean indicating whether or not the service encrypts the data as it is stored."
  parameters:
  - description: "the enabled value to set"
    name: "enabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptionService withEnabled(Boolean enabled)"
  desc: "Set a boolean indicating whether or not the service encrypts the data as it is stored."
  returns:
    description: "the EncryptionService object itself."
    type: "<xref href=\"com.microsoft.azure.management.storage.EncryptionService?alt=com.microsoft.azure.management.storage.EncryptionService&text=EncryptionService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.storage.EncryptionService.withKeyType(com.microsoft.azure.management.storage.KeyType)"
  fullName: "com.microsoft.azure.management.storage.EncryptionService.withKeyType(KeyType keyType)"
  name: "withKeyType(KeyType keyType)"
  nameWithType: "EncryptionService.withKeyType(KeyType keyType)"
  summary: "Set encryption key type to be used for the encryption service."
  parameters:
  - description: "the keyType value to set"
    name: "keyType"
    type: "<xref href=\"com.microsoft.azure.management.storage.KeyType?alt=com.microsoft.azure.management.storage.KeyType&text=KeyType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EncryptionService withKeyType(KeyType keyType)"
  desc: "Set encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service' key type implies that a default service key is used. Possible values include: 'Service', 'Account'."
  returns:
    description: "the EncryptionService object itself."
    type: "<xref href=\"com.microsoft.azure.management.storage.EncryptionService?alt=com.microsoft.azure.management.storage.EncryptionService&text=EncryptionService\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "A service that allows server-side encryption to be used."
metadata: {}
package: "com.microsoft.azure.management.storage"
artifact: com.microsoft.azure:azure-mgmt-storage:1.41.4
