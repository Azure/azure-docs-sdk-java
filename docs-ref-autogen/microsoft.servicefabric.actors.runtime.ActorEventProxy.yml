### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.ActorEventProxy()
  name: ActorEventProxy()
  nameWithType: ActorEventProxy.ActorEventProxy()
  summary: <p>Initializes a new instance of the <xref uid="microsoft.servicefabric.actors.runtime.ActorEventProxy" data-throw-if-not-resolved="false" data-raw-source="ActorEventProxy"></xref> class. </p>
  syntax: protected ActorEventProxy()
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.ActorEventProxy()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.ProxyBase?alt=microsoft.servicefabric.services.remoting.builder.ProxyBase&text=ProxyBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object>)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,Object,CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,byte [],CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
methods:
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.createRequestMessageBody(Object requestMessageBodyValue)
  name: createRequestMessageBody(Object requestMessageBodyValue)
  nameWithType: ActorEventProxy.createRequestMessageBody(Object requestMessageBodyValue)
  parameters:
  - name: requestMessageBodyValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object createRequestMessageBody(Object requestMessageBodyValue)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.createRequestMessageBody(Object)
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.deserializeMessage(byte[] msgBodyValue)
  name: deserializeMessage(byte[] msgBodyValue)
  nameWithType: ActorEventProxy.deserializeMessage(byte[] msgBodyValue)
  parameters:
  - name: msgBodyValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object deserializeMessage(byte[] msgBodyValue)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.deserializeMessage(byte [])
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.getResponseMessageBodyValue(Object responseMessageBody)
  name: getResponseMessageBodyValue(Object responseMessageBody)
  nameWithType: ActorEventProxy.getResponseMessageBodyValue(Object responseMessageBody)
  parameters:
  - name: responseMessageBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: protected Object getResponseMessageBodyValue(Object responseMessageBody)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.getResponseMessageBodyValue(Object)
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  name: invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  nameWithType: ActorEventProxy.invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  parameters:
  - name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: requestMsgBodyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected void invoke(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.invoke(int,int,byte [])
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  name: invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  nameWithType: ActorEventProxy.invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  parameters:
  - name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: requestMsgBodyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture%3Cbyte%5B%5D%3E&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<byte[]> invokeAsync(int interfaceId, int methodId, byte[] requestMsgBodyBytes)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.invokeAsync(int,int,byte [])
- fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy.serializeMessage(Object msgBodyValue)
  name: serializeMessage(Object msgBodyValue)
  nameWithType: ActorEventProxy.serializeMessage(Object msgBodyValue)
  parameters:
  - name: msgBodyValue
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: protected byte [] serializeMessage(Object msgBodyValue)
  uid: microsoft.servicefabric.actors.runtime.ActorEventProxy.serializeMessage(Object)
nameWithType: ActorEventProxy
syntax: public class ActorEventProxy extends ProxyBase
type: class
uid: microsoft.servicefabric.actors.runtime.ActorEventProxy
fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy
name: ActorEventProxy
package: microsoft.servicefabric.actors.runtime
summary: <p>Provides the base implementation for the proxy to invoke methods on actor event subscribers. </p>
metadata: {}
