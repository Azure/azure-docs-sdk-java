### YamlMime:JavaType
constructors:
- microsoft.servicefabric.actors.runtime.ActorEventProxy.ActorEventProxy()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.builder.ProxyBase?alt=microsoft.servicefabric.services.remoting.builder.ProxyBase&text=ProxyBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.builder.ProxyBase.continueWith(CompletableFuture<Object>)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invoke(int,int,Object)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,Object,CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.invokeAsync(int,int,byte [],CancellationToken)
- microsoft.servicefabric.services.remoting.builder.ProxyBase.ProxyBase()
methods:
- microsoft.servicefabric.actors.runtime.ActorEventProxy.createRequestMessageBody(Object)
- microsoft.servicefabric.actors.runtime.ActorEventProxy.deserializeMessage(byte [])
- microsoft.servicefabric.actors.runtime.ActorEventProxy.getResponseMessageBodyValue(Object)
- microsoft.servicefabric.actors.runtime.ActorEventProxy.invoke(int,int,byte [])
- microsoft.servicefabric.actors.runtime.ActorEventProxy.invokeAsync(int,int,byte [])
- microsoft.servicefabric.actors.runtime.ActorEventProxy.serializeMessage(Object)
nameWithType: ActorEventProxy
syntax: public class ActorEventProxy extends ProxyBase
type: class
uid: microsoft.servicefabric.actors.runtime.ActorEventProxy
fullName: microsoft.servicefabric.actors.runtime.ActorEventProxy
name: ActorEventProxy
package: microsoft.servicefabric.actors.runtime
summary: <p>Provides the base implementation for the proxy to invoke methods on actor event subscribers. </p>
metadata: {}
