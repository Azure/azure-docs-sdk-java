### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.TopicClient
  id: TopicClient
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder)
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  - com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  - com.microsoft.azure.servicebus.TopicClient.getTopicName()
  - com.microsoft.azure.servicebus.TopicClient.onClose()
  - com.microsoft.azure.servicebus.TopicClient.peek()
  - com.microsoft.azure.servicebus.TopicClient.peek(long)
  - com.microsoft.azure.servicebus.TopicClient.peekAsync()
  - com.microsoft.azure.servicebus.TopicClient.peekAsync(long)
  - com.microsoft.azure.servicebus.TopicClient.peekBatch(int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage)
  - com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  - com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  langs:
  - java
  name: TopicClient
  nameWithType: TopicClient
  fullName: com.microsoft.azure.servicebus.TopicClient
  type: Class
  package: com.microsoft.azure.servicebus
  summary: The topic client that interacts with service bus topic.
  syntax:
    content: public final class TopicClient extends InitializableEntity implements ITopicClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus.primitives.ClientEntity
  - com.microsoft.azure.servicebus.InitializableEntity
  implements:
  - com.microsoft.azure.servicebus.ITopicClient
  inheritedMembers:
  - com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient()
  id: TopicClient()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: TopicClient()
  nameWithType: TopicClient.TopicClient()
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient()
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: private TopicClient()
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder)
  id: TopicClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
    parameters:
    - id: amqpConnectionStringBuilder
      type: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String)
  id: TopicClient(com.microsoft.azure.servicebus.primitives.MessagingFactory,java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: TopicClient(MessagingFactory factory, String topicPath)
  nameWithType: TopicClient.TopicClient(MessagingFactory factory, String topicPath)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(MessagingFactory factory, String topicPath)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: " TopicClient(MessagingFactory factory, String topicPath)"
    parameters:
    - id: factory
      type: com.microsoft.azure.servicebus.primitives.MessagingFactory
    - id: topicPath
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  id: TopicClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
    parameters:
    - id: namespace
      type: java.lang.String
    - id: topicPath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  id: TopicClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
    parameters:
    - id: namespaceEndpointURI
      type: java.net.URI
    - id: topicPath
      type: java.lang.String
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods.
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: long
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  id: getEntityPath()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: getEntityPath()
  nameWithType: TopicClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  overload: com.microsoft.azure.servicebus.TopicClient.getEntityPath*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Gets the path of the entity this client is sending messages to or receiving messages from.
  syntax:
    content: public String getEntityPath()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.TopicClient.getTopicName()
  id: getTopicName()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: getTopicName()
  nameWithType: TopicClient.getTopicName()
  fullName: com.microsoft.azure.servicebus.TopicClient.getTopicName()
  overload: com.microsoft.azure.servicebus.TopicClient.getTopicName*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Get the name of the topic
  syntax:
    content: public String getTopicName()
    return:
      type: java.lang.String
- uid: com.microsoft.azure.servicebus.TopicClient.onClose()
  id: onClose()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: onClose()
  nameWithType: TopicClient.onClose()
  fullName: com.microsoft.azure.servicebus.TopicClient.onClose()
  overload: com.microsoft.azure.servicebus.TopicClient.onClose*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: protected CompletableFuture<Void> onClose()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.TopicClient.peek()
  id: peek()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peek()
  nameWithType: TopicClient.peek()
  fullName: com.microsoft.azure.servicebus.TopicClient.peek()
  overload: com.microsoft.azure.servicebus.TopicClient.peek*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus.IMessageBrowser.peek()" data-throw-if-not-resolved="false">IMessageBrowser#peek()</xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.
  syntax:
    content: public IMessage peek()
    return:
      type: com.microsoft.azure.servicebus.IMessage
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.peek(long)
  id: peek(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peek(long fromSequenceNumber)
  nameWithType: TopicClient.peek(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.peek(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.peek*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: long
    return:
      type: com.microsoft.azure.servicebus.IMessage
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync()
  id: peekAsync()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekAsync()
  nameWithType: TopicClient.peekAsync()
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync()
  overload: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public CompletableFuture<IMessage> peekAsync()
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync(long)
  id: peekAsync(long)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekAsync(long fromSequenceNumber)
  nameWithType: TopicClient.peekAsync(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads next the active message without changing the state of the receiver or the message source.
  syntax:
    content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: long
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(int)
  id: peekBatch(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekBatch(int messageCount)
  nameWithType: TopicClient.peekBatch(int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next batch of the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: int
    return:
      type: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)
  id: peekBatch(long,int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Reads next batch of the active messages without changing the state of the receiver or the message source.
  syntax:
    content: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: long
    - id: messageCount
      type: int
    return:
      type: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)
  id: peekBatchAsync(int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekBatchAsync(int messageCount)
  nameWithType: TopicClient.peekBatchAsync(int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: int
    return:
      type: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)
  id: peekBatchAsync(long,int)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: long
    - id: messageCount
      type: int
    return:
      type: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    return:
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods.
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: long
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  id: scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: scheduledEnqueueTimeUtc
      type: java.time.Instant
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Long>
- uid: com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage)
  id: send(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: send(IMessage message)
  nameWithType: TopicClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message)
  overload: com.microsoft.azure.servicebus.TopicClient.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.send*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods.
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: TopicClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  id: sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
  exceptions:
  - type: java.lang.InterruptedException
  - type: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  id: sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.TopicClient
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  type: Method
  package: com.microsoft.azure.servicebus
  summary: Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together.
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
references:
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  name: TopicClient
  nameWithType: TopicClient.TopicClient
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.servicebus.ClientSettings
  name: ClientSettings
  nameWithType: ClientSettings
  fullName: com.microsoft.azure.servicebus.ClientSettings
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
- uid: com.microsoft.azure.servicebus.IMessage
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
- uid: com.microsoft.azure.servicebus.TopicClient.send*
  name: send
  nameWithType: TopicClient.send
  fullName: com.microsoft.azure.servicebus.TopicClient.send
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TransactionContext
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
- uid: java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends com.microsoft.azure.servicebus.IMessage'
    name: IMessage
    fullName: '? extends com.microsoft.azure.servicebus.IMessage'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  name: sendBatch
  nameWithType: TopicClient.sendBatch
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  name: sendAsync
  nameWithType: TopicClient.sendAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: TopicClient.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: java.util.concurrent.CompletableFuture<java.lang.Long>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: TopicClient.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: TopicClient.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  name: scheduleMessage
  nameWithType: TopicClient.scheduleMessage
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: TopicClient.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.getEntityPath*
  name: getEntityPath
  nameWithType: TopicClient.getEntityPath
  fullName: com.microsoft.azure.servicebus.TopicClient.getEntityPath
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.peek*
  name: peek
  nameWithType: TopicClient.peek
  fullName: com.microsoft.azure.servicebus.TopicClient.peek
  package: com.microsoft.azure.servicebus
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.util.Collection<com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  name: peekBatch
  nameWithType: TopicClient.peekBatch
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.servicebus.IMessage>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  name: peekAsync
  nameWithType: TopicClient.peekAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync
  package: com.microsoft.azure.servicebus
- uid: java.util.concurrent.CompletableFuture<java.util.Collection<com.microsoft.azure.servicebus.IMessage>>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  name: peekBatchAsync
  nameWithType: TopicClient.peekBatchAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.onClose*
  name: onClose
  nameWithType: TopicClient.onClose
  fullName: com.microsoft.azure.servicebus.TopicClient.onClose
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.getTopicName*
  name: getTopicName
  nameWithType: TopicClient.getTopicName
  fullName: com.microsoft.azure.servicebus.TopicClient.getTopicName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.InitializableEntity
  name: InitializableEntity
  nameWithType: InitializableEntity
  fullName: com.microsoft.azure.servicebus.InitializableEntity
- uid: com.microsoft.azure.servicebus.ITopicClient
  name: ITopicClient
  nameWithType: ITopicClient
  fullName: com.microsoft.azure.servicebus.ITopicClient
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  name: ClientEntity.setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  name: ClientEntity.finalize()
  nameWithType: ClientEntity.finalize()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
  name: ClientEntity.setClosing()
  nameWithType: ClientEntity.setClosing()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
  name: ClientEntity.throwIfClosed(Throwable)
  nameWithType: ClientEntity.throwIfClosed(Throwable)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  name: ClientEntity.close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  name: ClientEntity.closeAsync()
  nameWithType: ClientEntity.closeAsync()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
  name: ClientEntity.onClose()
  nameWithType: ClientEntity.onClose()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  name: ClientEntity.getIsClosed()
  nameWithType: ClientEntity.getIsClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  name: ClientEntity.getIsClosingOrClosed()
  nameWithType: ClientEntity.getIsClosingOrClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  name: ClientEntity.getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: '? extends com.microsoft.azure.servicebus.IMessage'
  name: '? extends IMessage'
  nameWithType: '? extends IMessage'
  fullName: '? extends com.microsoft.azure.servicebus.IMessage'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
