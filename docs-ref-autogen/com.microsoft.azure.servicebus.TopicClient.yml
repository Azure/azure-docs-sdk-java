### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.TopicClient
  id: TopicClient
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
  - com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
  - com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  - com.microsoft.azure.servicebus.TopicClient.getTopicName()
  - com.microsoft.azure.servicebus.TopicClient.onClose()
  - com.microsoft.azure.servicebus.TopicClient.peek()
  - com.microsoft.azure.servicebus.TopicClient.peek(long)
  - com.microsoft.azure.servicebus.TopicClient.peekAsync()
  - com.microsoft.azure.servicebus.TopicClient.peekAsync(long)
  - com.microsoft.azure.servicebus.TopicClient.peekBatch(int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)
  - com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant)
  - com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.send(IMessage)
  - com.microsoft.azure.servicebus.TopicClient.send(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage)
  - com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>)
  - com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder)
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(String,String,ClientSettings)
  - com.microsoft.azure.servicebus.TopicClient.TopicClient(URI,String,ClientSettings)
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: TopicClient
  nameWithType: TopicClient
  fullName: com.microsoft.azure.servicebus.TopicClient
  type: Class
  source:
    remote: &o0
      path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
      branch: master
      repo: https://github.com/Azure/azure-service-bus-java
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 23
  package: com.microsoft.azure.servicebus
  summary: "<p>The topic client that interacts with service bus topic. </p>"
  syntax:
    content: public class TopicClient implements ITopicClient
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.servicebus.primitives.ClientEntity
  - com.microsoft.azure.servicebus.InitializableEntity
  inheritedMembers:
  - com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
  - com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  - com.microsoft.azure.servicebus.ICloseable.close()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  - com.microsoft.azure.servicebus.ICloseable.closeAsync()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  - com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
  - com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  - com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
  id: cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 129
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if scheduled message couldn't be cancelled </p>
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
  id: cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 114
  package: com.microsoft.azure.servicebus
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
- uid: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  id: getEntityPath()
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: getEntityPath()
  nameWithType: TopicClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  overload: com.microsoft.azure.servicebus.TopicClient.getEntityPath*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 134
  package: com.microsoft.azure.servicebus
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
  overridden: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- uid: com.microsoft.azure.servicebus.TopicClient.getTopicName()
  id: getTopicName()
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: getTopicName()
  nameWithType: TopicClient.getTopicName()
  fullName: com.microsoft.azure.servicebus.TopicClient.getTopicName()
  overload: com.microsoft.azure.servicebus.TopicClient.getTopicName*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 190
  package: com.microsoft.azure.servicebus
  summary: "<p>Get the name of the topic </p>"
  syntax:
    content: public String getTopicName()
    return:
      type: "26831127"
      description: <p>the name of the topic </p>
  overridden: com.microsoft.azure.servicebus.ITopicClient.getTopicName()
- uid: com.microsoft.azure.servicebus.TopicClient.onClose()
  id: onClose()
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: onClose()
  nameWithType: TopicClient.onClose()
  fullName: com.microsoft.azure.servicebus.TopicClient.onClose()
  overload: com.microsoft.azure.servicebus.TopicClient.onClose*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 185
  package: com.microsoft.azure.servicebus
  syntax:
    content: protected CompletableFuture<Void> onClose()
    return:
      type: db03ee24
- uid: com.microsoft.azure.servicebus.TopicClient.peek()
  id: peek()
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peek()
  nameWithType: TopicClient.peek()
  fullName: com.microsoft.azure.servicebus.TopicClient.peek()
  overload: com.microsoft.azure.servicebus.TopicClient.peek*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 139
  package: com.microsoft.azure.servicebus
  summary: "<p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid=\"com.microsoft.azure.servicebus.IMessageBrowser.peek()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IMessageBrowser#peek()\"></xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>\r\n<p></p>"
  syntax:
    content: public IMessage peek()
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if peek failed </p>
- uid: com.microsoft.azure.servicebus.TopicClient.peek(long)
  id: peek(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peek(long fromSequenceNumber)
  nameWithType: TopicClient.peek(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.peek(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.peek*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 144
  package: com.microsoft.azure.servicebus
  summary: "<p>Reads next the active message without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if peek failed </p>
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync()
  id: peekAsync()
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekAsync()
  nameWithType: TopicClient.peekAsync()
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync()
  overload: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 159
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<IMessage> peekAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus.IMessagea08ddfce
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync(long)
  id: peekAsync(long)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekAsync(long fromSequenceNumber)
  nameWithType: TopicClient.peekAsync(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync(long fromSequenceNumber)
  overload: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 164
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(int)
  id: peekBatch(int)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekBatch(int messageCount)
  nameWithType: TopicClient.peekBatch(int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 149
  package: com.microsoft.azure.servicebus
  summary: "<p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if peek failed </p>
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)
  id: peekBatch(long,int)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 154
  package: com.microsoft.azure.servicebus
  summary: "<p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if peek failed </p>
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)
  id: peekBatchAsync(int)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekBatchAsync(int messageCount)
  nameWithType: TopicClient.peekBatchAsync(int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 169
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus.IMessagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)
  id: peekBatchAsync(long,int)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  overload: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 174
  package: com.microsoft.azure.servicebus
  summary: "<p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus.IMessagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant)
  id: scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 119
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant,TransactionContext)
  id: scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 124
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant)
  id: scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 104
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  id: scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 109
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
- uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage)
  id: send(IMessage)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: send(IMessage message)
  nameWithType: TopicClient.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message)
  overload: com.microsoft.azure.servicebus.TopicClient.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 64
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage,TransactionContext)
  id: send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.send*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 69
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if message couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage)
  id: sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendAsync(IMessage message)
  nameWithType: TopicClient.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message)
  overload: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 84
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage,TransactionContext)
  id: sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 89
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>)
  id: sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 74
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
  id: sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 79
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  exceptions:
  - type: 8256ba40
    description: <p>if the current thread was interrupted while waiting </p>
  - type: 73fec9fb
    description: <p>if the batch couldn't be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>)
  id: sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 94
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  id: sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overload: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  type: Method
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 99
  package: com.microsoft.azure.servicebus
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder)
  id: TopicClient(ConnectionStringBuilder)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 32
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
    parameters:
    - id: amqpConnectionStringBuilder
      type: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(String,String,ClientSettings)
  id: TopicClient(String,String,ClientSettings)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 41
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
    parameters:
    - id: namespace
      type: "26831127"
    - id: topicPath
      type: "26831127"
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(URI,String,ClientSettings)
  id: TopicClient(URI,String,ClientSettings)
  parent: com.microsoft.azure.servicebus.TopicClient
  href: com.microsoft.azure.servicebus.TopicClient.yml
  langs:
  - java
  name: TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  overload: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  type: Constructor
  source:
    remote: *o0
    path: azure-servicebus/src/main/java/com/microsoft/azure/servicebus/TopicClient.java
    startLine: 46
  package: com.microsoft.azure.servicebus
  syntax:
    content: public TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
    parameters:
    - id: namespaceEndpointURI
      type: "62304784"
    - id: topicPath
      type: "26831127"
    - id: clientSettings
      type: com.microsoft.azure.servicebus.ClientSettings
references:
- uid: com.microsoft.azure.servicebus.TopicClient.TopicClient*
  name: TopicClient
  nameWithType: TopicClient.TopicClient
  fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient
  package: com.microsoft.azure.servicebus
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: "62304784"
  spec.java:
  - name: URI
    fullName: URI
- uid: 8256ba40
  spec.java:
  - name: InterruptedException
    fullName: InterruptedException
- uid: 73fec9fb
  spec.java:
  - name: ServiceBusException
    fullName: ServiceBusException
- uid: com.microsoft.azure.servicebus.TopicClient.send*
  name: send
  nameWithType: TopicClient.send
  fullName: com.microsoft.azure.servicebus.TopicClient.send
  package: com.microsoft.azure.servicebus
- uid: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
  spec.java:
  - name: 'Collection<? extends '
    fullName: 'Collection<? extends '
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatch*
  name: sendBatch
  nameWithType: TopicClient.sendBatch
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch
  package: com.microsoft.azure.servicebus
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.servicebus.TopicClient.sendAsync*
  name: sendAsync
  nameWithType: TopicClient.sendAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync*
  name: sendBatchAsync
  nameWithType: TopicClient.sendBatchAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync
  package: com.microsoft.azure.servicebus
- uid: 328f8254
  spec.java:
  - name: Instant
    fullName: Instant
- uid: 30822cb1
  spec.java:
  - name: CompletableFuture<Long>
    fullName: CompletableFuture<Long>
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync*
  name: scheduleMessageAsync
  nameWithType: TopicClient.scheduleMessageAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync
  package: com.microsoft.azure.servicebus
- uid: 0364520f
  spec.java:
  - name: long
    fullName: long
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync*
  name: cancelScheduledMessageAsync
  nameWithType: TopicClient.cancelScheduledMessageAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage*
  name: scheduleMessage
  nameWithType: TopicClient.scheduleMessage
  fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: TopicClient.cancelScheduledMessage
  fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.getEntityPath*
  name: getEntityPath
  nameWithType: TopicClient.getEntityPath
  fullName: com.microsoft.azure.servicebus.TopicClient.getEntityPath
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.peek*
  name: peek
  nameWithType: TopicClient.peek
  fullName: com.microsoft.azure.servicebus.TopicClient.peek
  package: com.microsoft.azure.servicebus
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: 12ebb11acom.microsoft.azure.servicebus.IMessagea08ddfce
  spec.java:
  - name: Collection<
    fullName: Collection<
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatch*
  name: peekBatch
  nameWithType: TopicClient.peekBatch
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch
  package: com.microsoft.azure.servicebus
- uid: 9cdf14d0com.microsoft.azure.servicebus.IMessagea08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekAsync*
  name: peekAsync
  nameWithType: TopicClient.peekAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync
  package: com.microsoft.azure.servicebus
- uid: 9161dfdccom.microsoft.azure.servicebus.IMessagee7daa122
  spec.java:
  - name: CompletableFuture<Collection<
    fullName: CompletableFuture<Collection<
  - uid: com.microsoft.azure.servicebus.IMessage
    name: IMessage
    fullName: com.microsoft.azure.servicebus.IMessage
    href: com.microsoft.azure.servicebus.IMessage.yml
  - name: '>>'
    fullName: '>>'
- uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync*
  name: peekBatchAsync
  nameWithType: TopicClient.peekBatchAsync
  fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.getTopicName*
  name: getTopicName
  nameWithType: TopicClient.getTopicName
  fullName: com.microsoft.azure.servicebus.TopicClient.getTopicName
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.TopicClient.onClose*
  name: onClose
  nameWithType: TopicClient.onClose
  fullName: com.microsoft.azure.servicebus.TopicClient.onClose
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: ClientEntity(final String clientId)
  nameWithType: ClientEntity.ClientEntity(final String clientId)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String clientId)
  type: Constructor
  syntax:
    content: protected ClientEntity(final String clientId)
    parameters:
    - id: clientId
      type: 3d93591e
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: close()
  nameWithType: ClientEntity.close()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.close()
  type: Method
  syntax:
    content: public final void close()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.ICloseable.close()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: close()
  nameWithType: ICloseable.close()
  fullName: com.microsoft.azure.servicebus.ICloseable.close()
  type: Method
  summary: "<p>Synchronously closes and disposes any resources associated with this object. Calling this method is equivalent of calling . This method blocks until this object is closed. </p>"
  syntax:
    content: public void close()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: closeAsync()
  nameWithType: ClientEntity.closeAsync()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
  type: Method
  syntax:
    content: public final CompletableFuture<Void> closeAsync()
    return:
      type: fc984e6f
- uid: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  parent: com.microsoft.azure.servicebus.ICloseable
  href: com.microsoft.azure.servicebus.ICloseable.yml
  name: closeAsync()
  nameWithType: ICloseable.closeAsync()
  fullName: com.microsoft.azure.servicebus.ICloseable.closeAsync()
  type: Method
  summary: "<p>Closes and disposes any resources associated with this object. An object cannot be used after it is closed. This is an asynchronous method that returns a CompletableFuture immediately. This object is completely closed when the returned CompletableFuture is completed. </p>"
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the closing of this object. </p>
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: finalize()
  nameWithType: ClientEntity.finalize()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
  type: Method
  syntax:
    content: protected void finalize()
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getClientId()
  nameWithType: ClientEntity.getClientId()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
  type: Method
  syntax:
    content: public String getClientId()
    return:
      type: "26831127"
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getIsClosed()
  nameWithType: ClientEntity.getIsClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
  type: Method
  syntax:
    content: protected boolean getIsClosed()
    return:
      type: 4fc6e284
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: getIsClosingOrClosed()
  nameWithType: ClientEntity.getIsClosingOrClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
  type: Method
  syntax:
    content: protected boolean getIsClosingOrClosed()
    return:
      type: 4fc6e284
- uid: com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: setClosed()
  nameWithType: ClientEntity.setClosed()
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
  type: Method
  syntax:
    content: protected final void setClosed()
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
  parent: com.microsoft.azure.servicebus.primitives.ClientEntity
  href: com.microsoft.azure.servicebus.primitives.ClientEntity.yml
  name: throwIfClosed(Throwable cause)
  nameWithType: ClientEntity.throwIfClosed(Throwable cause)
  fullName: com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable cause)
  type: Method
  syntax:
    content: protected final void throwIfClosed(Throwable cause)
    parameters:
    - id: cause
      type: a04fafd7
    return:
      type: 3f6357ce
- uid: com.microsoft.azure.servicebus.ITopicClient
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ITopicClient.yml
  name: ITopicClient
  nameWithType: ITopicClient
  fullName: com.microsoft.azure.servicebus.ITopicClient
  type: Interface
  summary: "<p>TopicClient can be used for all basic interactions with a Service Bus topic. <code></code></p>"
  syntax:
    content: public interface ITopicClient extends IMessageSender,IMessageBrowser,IMessageEntityClient
- uid: com.microsoft.azure.servicebus.IMessageSender
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: IMessageSender
  nameWithType: IMessageSender
  fullName: com.microsoft.azure.servicebus.IMessageSender
  type: Interface
  summary: "<p>Represents a message sender that sends messages to Azure Service Bus.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessageSender extends IMessageEntityClient
- uid: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder.yml
  name: ConnectionStringBuilder
  nameWithType: ConnectionStringBuilder
  fullName: com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder
  type: Class
  summary: "<p>This class can be used to construct a connection string which can establish communication with ServiceBus entities. It can also be used to perform basic validation on an existing connection string. </p>\r\n<p>Sample Code: <pre><code>ConnectionStringBuilder connectionStringBuilder = new ConnectionStringBuilder(\r\n                                             \"ServiceBusNamespaceName\", \r\n                                             \"ServiceBusEntityName\", // QueueName or TopicName or SubscriptionPath\r\n                                             \"SharedAccessSignatureKeyName\", \r\n                                             \"SharedAccessSignatureKey\");\r\n     \r\n    String connectionString = connectionStringBuilder.toString();\r\n    </code></pre></p>\r\n<p>A connection string is basically a string consisted of key-value pair separated by \";\". Basic format is {{ &lt;}key{&gt;}={ &lt;}value{&gt;}[;{ &lt;}key{&gt;}={ &lt;}value{&gt;}]} where supported key name are as follow: <ul><li><p>Endpoint - URL that points to the servicebus namespace </p></li><li><p>EntityPath - Path to the service bus entity (queue/topic/subscription/). For queues and topics, it is just the entity name. For subscriptions, path is &lt;topicName&gt;/subscriptions/&lt;subscriptionName&gt; </p></li><li><p>SharedAccessKeyName - Key name to the corresponding shared access policy rule for the namespace, or entity. </p></li><li><p>SharedAccessKey - Key value for the corresponding shared access policy rule of the namespace or entity. </p></li><li><p>SharedAccessSignatureToken - Instead of a key name and key value, clients can provide an already generated SAS Token. </p></li><li><p>OperationTimeout - Default timeout to be used for all senders, receiver and clients created from this connection string. </p></li><li><p>RetryPolicy - Name of the retry policy. </p></li></ul></p>"
  syntax:
    content: public class ConnectionStringBuilder
- uid: com.microsoft.azure.servicebus.primitives.ServiceBusException
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.ServiceBusException.yml
  name: ServiceBusException
  nameWithType: ServiceBusException
  fullName: com.microsoft.azure.servicebus.primitives.ServiceBusException
  type: Class
  summary: "<p>This is the base exception that service bus will generate for all error cases. </p>"
  syntax:
    content: public class ServiceBusException
- uid: com.microsoft.azure.servicebus.ClientSettings
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.ClientSettings.yml
  name: ClientSettings
  nameWithType: ClientSettings
  fullName: com.microsoft.azure.servicebus.ClientSettings
  type: Class
  summary: "<p>Class encapsulating common client level settings like TokenProvider, RetryPolicy, OperationTimeout. </p>"
  syntax:
    content: public class ClientSettings
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message)
  nameWithType: IMessageSender.send(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessage
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.IMessage.yml
  name: IMessage
  nameWithType: IMessage
  fullName: com.microsoft.azure.servicebus.IMessage
  type: Interface
  summary: "<p>Represents the message that is exchanged between Azure Service Bus and its clients.</p>\r\n<p></p>"
  syntax:
    content: public interface IMessage
- uid: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.send(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.send(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void send(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.TransactionContext
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.TransactionContext.yml
  name: TransactionContext
  nameWithType: TransactionContext
  fullName: com.microsoft.azure.servicebus.TransactionContext
  type: Class
  summary: "<p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#startTransactionAsync()\"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with  To rollback, call <xref uid=\"com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessagingFactory#endTransactionAsync(TransactionContext, boolean)\"></xref> with </p>"
  syntax:
    content: public class TransactionContext
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message)
  nameWithType: IMessageSender.sendAsync(IMessage message)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage message, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
    parameters:
    - id: messages
      type: d56263b8com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>collection of messages to be sent to the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending send </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 30822cb1
      description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
    return:
      type: db03ee24
      description: <p>a CompletableFuture representing the pending cancellation </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  fullName: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  type: Method
  summary: "<p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
    parameters:
    - id: message
      type: com.microsoft.azure.servicebus.IMessage
      description: <p>message to be sent to the entity </p>
    - id: scheduledEnqueueTimeUtc
      type: 328f8254
      description: <p>instant at which the message should be enqueued in the entity </p>
    - id: transaction
      type: com.microsoft.azure.servicebus.TransactionContext
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    return:
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  parent: com.microsoft.azure.servicebus.IMessageSender
  href: com.microsoft.azure.servicebus.IMessageSender.yml
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: IMessageSender.cancelScheduledMessage(long sequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long sequenceNumber)
  type: Method
  summary: "<p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>\r\n<p></p>"
  syntax:
    content: public void cancelScheduledMessage(long sequenceNumber)
    parameters:
    - id: sequenceNumber
      type: 0364520f
      description: <p>sequence number of the scheduled message </p>
- uid: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  parent: com.microsoft.azure.servicebus.IMessageEntityClient
  href: com.microsoft.azure.servicebus.IMessageEntityClient.yml
  name: getEntityPath()
  nameWithType: IMessageEntityClient.getEntityPath()
  fullName: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  type: Method
  summary: "<p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>\r\n<p></p>"
  syntax:
    content: public String getEntityPath()
    return:
      type: "26831127"
      description: <p>path of the entity this client is connecting to </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peek()
  nameWithType: IMessageBrowser.peek()
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  type: Method
  summary: "<p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid=\"com.microsoft.azure.servicebus.IMessageBrowser.peek()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IMessageBrowser#peek()\"></xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>\r\n<p></p>"
  syntax:
    content: public IMessage peek()
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
- uid: com.microsoft.azure.servicebus.Message
  parent: com.microsoft.azure.servicebus
  href: com.microsoft.azure.servicebus.Message.yml
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.servicebus.Message
  type: Class
  syntax:
    content: public class Message implements IMessage
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peek(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
  type: Method
  summary: "<p>Reads next the active message without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public IMessage peek(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: com.microsoft.azure.servicebus.IMessage
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekBatch(int messageCount)
  nameWithType: IMessageBrowser.peekBatch(int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
  type: Method
  summary: "<p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public Collection<IMessage> peekBatch(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  type: Method
  summary: "<p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 12ebb11acom.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekAsync()
  nameWithType: IMessageBrowser.peekAsync()
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  type: Method
  summary: "<p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<IMessage> peekAsync()
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus.IMessagea08ddfce
      description: >-
        <p>

          <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekAsync(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
  type: Method
  summary: "<p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    return:
      type: 9cdf14d0com.microsoft.azure.servicebus.IMessagea08ddfce
      description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekBatchAsync(int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
  type: Method
  summary: "<p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
    parameters:
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus.IMessagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
- uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
  parent: com.microsoft.azure.servicebus.IMessageBrowser
  href: com.microsoft.azure.servicebus.IMessageBrowser.yml
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  type: Method
  summary: "<p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
    parameters:
    - id: fromSequenceNumber
      type: 0364520f
      description: <p>The sequence number from where to read the message. </p>
    - id: messageCount
      type: f75371fa
      description: <p>The number of messages. </p>
    return:
      type: 9161dfdccom.microsoft.azure.servicebus.IMessagee7daa122
      description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
- uid: com.microsoft.azure.servicebus.ITopicClient.getTopicName()
  parent: com.microsoft.azure.servicebus.ITopicClient
  href: com.microsoft.azure.servicebus.ITopicClient.yml
  name: getTopicName()
  nameWithType: ITopicClient.getTopicName()
  fullName: com.microsoft.azure.servicebus.ITopicClient.getTopicName()
  type: Method
  summary: "<p>Get the name of the topic </p>"
  syntax:
    content: public String getTopicName()
    return:
      type: "26831127"
      description: <p>the name of the topic </p>
- uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
  parent: com.microsoft.azure.servicebus.primitives
  href: com.microsoft.azure.servicebus.primitives.MessagingFactory.yml
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
  type: Class
  summary: "<p>Abstracts all AMQP related details and encapsulates an AMQP connection and manages its life cycle. Each instance of this class represent one AMQP connection to the namespace. If an application creates multiple senders, receivers or clients using the same MessagingFactory instance, all those senders, receivers or clients will share the same connection to the namespace. </p>"
  syntax:
    content: public class MessagingFactory extends ClientEntity
