### YamlMime:JavaType
uid: "com.microsoft.azure.servicebus.TopicClient"
fullName: "com.microsoft.azure.servicebus.TopicClient"
name: "TopicClient"
nameWithType: "TopicClient"
summary: "The topic client that interacts with service bus topic."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.primitives.ClientEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.servicebus.InitializableEntity?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.servicebus.primitives.ClientEntity.close()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.setClosing()"
- "com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(java.lang.Throwable)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class TopicClient extends InitializableEntity implements ITopicClient"
constructors:
- uid: "com.microsoft.azure.servicebus.TopicClient.TopicClient(com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)"
  name: "TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)"
  nameWithType: "TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)"
  parameters:
  - name: "amqpConnectionStringBuilder"
    type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.TopicClient(java.lang.String,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)"
  name: "TopicClient(String namespace, String topicPath, ClientSettings clientSettings)"
  nameWithType: "TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)"
  parameters:
  - name: "namespace"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "topicPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TopicClient(String namespace, String topicPath, ClientSettings clientSettings)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.TopicClient(java.net.URI,java.lang.String,com.microsoft.azure.servicebus.ClientSettings)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)"
  name: "TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)"
  nameWithType: "TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)"
  parameters:
  - name: "namespaceEndpointURI"
    type: "<xref href=\"java.net.URI?alt=java.net.URI&text=URI\" data-throw-if-not-resolved=\"False\" />"
  - name: "topicPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "clientSettings"
    type: "<xref href=\"com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
methods:
- uid: "com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long sequenceNumber)"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "TopicClient.cancelScheduledMessage(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  parameters:
  - name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void cancelScheduledMessage(long sequenceNumber)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `cancelScheduledMessageAsync(sequenceNumber).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long sequenceNumber)"
  name: "cancelScheduledMessageAsync(long sequenceNumber)"
  nameWithType: "TopicClient.cancelScheduledMessageAsync(long sequenceNumber)"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  parameters:
  - name: "sequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)"
  desc: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.getEntityPath()"
  fullName: "com.microsoft.azure.servicebus.TopicClient.getEntityPath()"
  name: "getEntityPath()"
  nameWithType: "TopicClient.getEntityPath()"
  summary: "Gets the path of the entity this client is sending messages to or receiving messages from."
  syntax: "public String getEntityPath()"
  desc: "Gets the path of the entity this client is sending messages to or receiving messages from."
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.getTopicName()"
  fullName: "com.microsoft.azure.servicebus.TopicClient.getTopicName()"
  name: "getTopicName()"
  nameWithType: "TopicClient.getTopicName()"
  summary: "Get the name of the topic"
  syntax: "public String getTopicName()"
  desc: "Get the name of the topic"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.onClose()"
  fullName: "com.microsoft.azure.servicebus.TopicClient.onClose()"
  name: "onClose()"
  nameWithType: "TopicClient.onClose()"
  modifiers:
  - "protected"
  overridden: "com.microsoft.azure.servicebus.primitives.ClientEntity.onClose()"
  syntax: "protected CompletableFuture<Void> onClose()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peek()"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peek()"
  name: "peek()"
  nameWithType: "TopicClient.peek()"
  summary: "reads next the active message without changing the state of the receiver or the message source."
  syntax: "public IMessage peek()"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid=\"com.microsoft.azure.servicebus.IMessageBrowser.peek()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IMessageBrowser#peek()\"></xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity."
  returns:
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.peek(long)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peek(long fromSequenceNumber)"
  name: "peek(long fromSequenceNumber)"
  nameWithType: "TopicClient.peek(long fromSequenceNumber)"
  summary: "Reads next the active message without changing the state of the receiver or the message source."
  parameters:
  - name: "fromSequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public IMessage peek(long fromSequenceNumber)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads next the active message without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekAsync()"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekAsync()"
  name: "peekAsync()"
  nameWithType: "TopicClient.peekAsync()"
  summary: "Asynchronously reads the active messages without changing the state of the receiver or the message source."
  syntax: "public CompletableFuture<IMessage> peekAsync()"
  desc: "Asynchronously reads the active messages without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekAsync(long)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekAsync(long fromSequenceNumber)"
  name: "peekAsync(long fromSequenceNumber)"
  nameWithType: "TopicClient.peekAsync(long fromSequenceNumber)"
  summary: "Asynchronously reads next the active message without changing the state of the receiver or the message source."
  parameters:
  - name: "fromSequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)"
  desc: "Asynchronously reads next the active message without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekBatch(int)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekBatch(int messageCount)"
  name: "peekBatch(int messageCount)"
  nameWithType: "TopicClient.peekBatch(int messageCount)"
  summary: "Reads next batch of the active messages without changing the state of the receiver or the message source."
  parameters:
  - name: "messageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Collection<IMessage> peekBatch(int messageCount)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads next batch of the active messages without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekBatch(long fromSequenceNumber, int messageCount)"
  name: "peekBatch(long fromSequenceNumber, int messageCount)"
  nameWithType: "TopicClient.peekBatch(long fromSequenceNumber, int messageCount)"
  summary: "Reads next batch of the active messages without changing the state of the receiver or the message source."
  parameters:
  - name: "fromSequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - name: "messageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads next batch of the active messages without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int messageCount)"
  name: "peekBatchAsync(int messageCount)"
  nameWithType: "TopicClient.peekBatchAsync(int messageCount)"
  summary: "Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source."
  parameters:
  - name: "messageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)"
  desc: "Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)"
  name: "peekBatchAsync(long fromSequenceNumber, int messageCount)"
  nameWithType: "TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)"
  summary: "Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source."
  parameters:
  - name: "fromSequenceNumber"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - name: "messageCount"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)"
  desc: "Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.scheduleMessage(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `scheduleMessageAsync(message, scheduledEnqueueTimeUtc).get()`. For better performance, use async methods."
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  nameWithType: "TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(com.microsoft.azure.servicebus.IMessage,java.time.Instant,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  name: "scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  nameWithType: "TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "scheduledEnqueueTimeUtc"
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)"
  desc: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.send(IMessage message)"
  name: "send(IMessage message)"
  nameWithType: "TopicClient.send(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(IMessage message)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.TopicClient.send(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.send(IMessage message, TransactionContext transaction)"
  name: "send(IMessage message, TransactionContext transaction)"
  nameWithType: "TopicClient.send(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(IMessage message, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling `sendAsync(message).get()`. For better performance, use async methods."
- uid: "com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message)"
  name: "sendAsync(IMessage message)"
  nameWithType: "TopicClient.sendAsync(IMessage message)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendAsync(IMessage message)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.sendAsync(com.microsoft.azure.servicebus.IMessage,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message, TransactionContext transaction)"
  name: "sendAsync(IMessage message, TransactionContext transaction)"
  nameWithType: "TopicClient.sendAsync(IMessage message, TransactionContext transaction)"
  summary: "Sends a message to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "message"
    type: "<xref href=\"com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)"
  desc: "Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages)"
  name: "sendBatch(Collection<? extends IMessage> messages)"
  nameWithType: "TopicClient.sendBatch(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void sendBatch(Collection<? extends IMessage> messages)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.TopicClient.sendBatch(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)"
  exceptions:
  - type: "<xref href=\"java.lang.InterruptedException?alt=java.lang.InterruptedException&text=InterruptedException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.microsoft.azure.servicebus.primitives.ServiceBusException?alt=com.microsoft.azure.servicebus.primitives.ServiceBusException&text=ServiceBusException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling `sendBatchAsync(messages).get()`. For better performance, use async methods. When called on partitioned entities, messages meant for different partitions cannot be batched together."
- uid: "com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages)"
  nameWithType: "TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(java.util.Collection<? extends com.microsoft.azure.servicebus.IMessage>,com.microsoft.azure.servicebus.TransactionContext)"
  fullName: "com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  name: "sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  nameWithType: "TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  summary: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to."
  parameters:
  - name: "messages"
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends com.microsoft.azure.servicebus.IMessage?alt=? extends com.microsoft.azure.servicebus.IMessage&text=IMessage\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transaction"
    type: "<xref href=\"com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)"
  desc: "Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity. When called on partitioned entities, messages meant for different partitions cannot be batched together."
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "The topic client that interacts with service bus topic."
implements:
- "<xref href=\"com.microsoft.azure.servicebus.ITopicClient?alt=com.microsoft.azure.servicebus.ITopicClient&text=ITopicClient\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.servicebus"
artifact: com.microsoft.azure:azure-servicebus:3.6.6
