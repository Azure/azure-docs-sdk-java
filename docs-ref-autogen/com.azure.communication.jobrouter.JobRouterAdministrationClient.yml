### YamlMime:JavaType
uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient"
fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient"
name: "JobRouterAdministrationClient"
nameWithType: "JobRouterAdministrationClient"
summary: "Initializes a new instance of the synchronous Job<wbr>Router<wbr>Administration<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **JobRouterAdministrationClient**"
methods:
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createClassificationPolicy(com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createClassificationPolicy(CreateClassificationPolicyOptions createClassificationPolicyOptions)"
  name: "createClassificationPolicy(CreateClassificationPolicyOptions createClassificationPolicyOptions)"
  nameWithType: "JobRouterAdministrationClient.createClassificationPolicy(CreateClassificationPolicyOptions createClassificationPolicyOptions)"
  summary: "Convenience method to create a classification policy."
  parameters:
  - description: "Container for inputs to create a classification policy."
    name: "createClassificationPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions&text=CreateClassificationPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ClassificationPolicy createClassificationPolicy(CreateClassificationPolicyOptions createClassificationPolicyOptions)"
  desc: "Convenience method to create a classification policy."
  returns:
    description: "a container for the rules that govern how jobs are classified."
    type: "<xref href=\"com.azure.communication.jobrouter.models.ClassificationPolicy?alt=com.azure.communication.jobrouter.models.ClassificationPolicy&text=ClassificationPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createClassificationPolicyWithResponse(com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createClassificationPolicyWithResponse(CreateClassificationPolicyOptions createClassificationPolicyOptions, RequestOptions requestOptions)"
  name: "createClassificationPolicyWithResponse(CreateClassificationPolicyOptions createClassificationPolicyOptions, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.createClassificationPolicyWithResponse(CreateClassificationPolicyOptions createClassificationPolicyOptions, RequestOptions requestOptions)"
  summary: "Create a classification policy."
  parameters:
  - description: "Container for inputs to create a classification policy."
    name: "createClassificationPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateClassificationPolicyOptions&text=CreateClassificationPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "RequestOptions."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ClassificationPolicy> createClassificationPolicyWithResponse(CreateClassificationPolicyOptions createClassificationPolicyOptions, RequestOptions requestOptions)"
  desc: "Create a classification policy."
  returns:
    description: "response The response instance."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.ClassificationPolicy?alt=com.azure.communication.jobrouter.models.ClassificationPolicy&text=ClassificationPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createDistributionPolicy(com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createDistributionPolicy(CreateDistributionPolicyOptions createDistributionPolicyOptions)"
  name: "createDistributionPolicy(CreateDistributionPolicyOptions createDistributionPolicyOptions)"
  nameWithType: "JobRouterAdministrationClient.createDistributionPolicy(CreateDistributionPolicyOptions createDistributionPolicyOptions)"
  summary: "Convenience method to create a distribution policy."
  parameters:
  - description: "Container for inputs to create a distribution policy."
    name: "createDistributionPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions&text=CreateDistributionPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DistributionPolicy createDistributionPolicy(CreateDistributionPolicyOptions createDistributionPolicyOptions)"
  desc: "Convenience method to create a distribution policy."
  returns:
    description: "resource The resource instance"
    type: "<xref href=\"com.azure.communication.jobrouter.models.DistributionPolicy?alt=com.azure.communication.jobrouter.models.DistributionPolicy&text=DistributionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createDistributionPolicyWithResponse(com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createDistributionPolicyWithResponse(CreateDistributionPolicyOptions createDistributionPolicyOptions, RequestOptions requestOptions)"
  name: "createDistributionPolicyWithResponse(CreateDistributionPolicyOptions createDistributionPolicyOptions, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.createDistributionPolicyWithResponse(CreateDistributionPolicyOptions createDistributionPolicyOptions, RequestOptions requestOptions)"
  summary: "Create a distribution policy."
  parameters:
  - description: "Container for inputs to create a distribution policy."
    name: "createDistributionPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateDistributionPolicyOptions&text=CreateDistributionPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "RequestOptions."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DistributionPolicy> createDistributionPolicyWithResponse(CreateDistributionPolicyOptions createDistributionPolicyOptions, RequestOptions requestOptions)"
  desc: "Create a distribution policy."
  returns:
    description: "resource The resource instance"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.DistributionPolicy?alt=com.azure.communication.jobrouter.models.DistributionPolicy&text=DistributionPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createExceptionPolicy(com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createExceptionPolicy(CreateExceptionPolicyOptions createExceptionPolicyOptions)"
  name: "createExceptionPolicy(CreateExceptionPolicyOptions createExceptionPolicyOptions)"
  nameWithType: "JobRouterAdministrationClient.createExceptionPolicy(CreateExceptionPolicyOptions createExceptionPolicyOptions)"
  summary: "Convenience method to create an exception policy."
  parameters:
  - description: "Create options for Exception Policy."
    name: "createExceptionPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions&text=CreateExceptionPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ExceptionPolicy createExceptionPolicy(CreateExceptionPolicyOptions createExceptionPolicyOptions)"
  desc: "Convenience method to create an exception policy."
  returns:
    description: "resource The resource instance"
    type: "<xref href=\"com.azure.communication.jobrouter.models.ExceptionPolicy?alt=com.azure.communication.jobrouter.models.ExceptionPolicy&text=ExceptionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createExceptionPolicyWithResponse(com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createExceptionPolicyWithResponse(CreateExceptionPolicyOptions createExceptionPolicyOptions, RequestOptions requestOptions)"
  name: "createExceptionPolicyWithResponse(CreateExceptionPolicyOptions createExceptionPolicyOptions, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.createExceptionPolicyWithResponse(CreateExceptionPolicyOptions createExceptionPolicyOptions, RequestOptions requestOptions)"
  summary: "Create an exception policy."
  parameters:
  - description: "Create options for Exception Policy."
    name: "createExceptionPolicyOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions?alt=com.azure.communication.jobrouter.models.CreateExceptionPolicyOptions&text=CreateExceptionPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "RequestOptions."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ExceptionPolicy> createExceptionPolicyWithResponse(CreateExceptionPolicyOptions createExceptionPolicyOptions, RequestOptions requestOptions)"
  desc: "Create an exception policy."
  returns:
    description: "resource The resource instance"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.ExceptionPolicy?alt=com.azure.communication.jobrouter.models.ExceptionPolicy&text=ExceptionPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createQueue(com.azure.communication.jobrouter.models.CreateQueueOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createQueue(CreateQueueOptions createQueueOptions)"
  name: "createQueue(CreateQueueOptions createQueueOptions)"
  nameWithType: "JobRouterAdministrationClient.createQueue(CreateQueueOptions createQueueOptions)"
  summary: "Convenience method to create a queue."
  parameters:
  - description: "Container for inputs to create a queue."
    name: "createQueueOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateQueueOptions?alt=com.azure.communication.jobrouter.models.CreateQueueOptions&text=CreateQueueOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public RouterQueue createQueue(CreateQueueOptions createQueueOptions)"
  desc: "Convenience method to create a queue."
  returns:
    description: "a queue that can contain jobs to be routed."
    type: "<xref href=\"com.azure.communication.jobrouter.models.RouterQueue?alt=com.azure.communication.jobrouter.models.RouterQueue&text=RouterQueue\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createQueueWithResponse(com.azure.communication.jobrouter.models.CreateQueueOptions,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.createQueueWithResponse(CreateQueueOptions createQueueOptions, RequestOptions requestOptions)"
  name: "createQueueWithResponse(CreateQueueOptions createQueueOptions, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.createQueueWithResponse(CreateQueueOptions createQueueOptions, RequestOptions requestOptions)"
  summary: "Create a queue."
  parameters:
  - description: "Container for inputs to create a queue."
    name: "createQueueOptions"
    type: "<xref href=\"com.azure.communication.jobrouter.models.CreateQueueOptions?alt=com.azure.communication.jobrouter.models.CreateQueueOptions&text=CreateQueueOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "RequestOptions."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<RouterQueue> createQueueWithResponse(CreateQueueOptions createQueueOptions, RequestOptions requestOptions)"
  desc: "Create a queue."
  returns:
    description: "a queue that can contain jobs to be routed."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.RouterQueue?alt=com.azure.communication.jobrouter.models.RouterQueue&text=RouterQueue\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteClassificationPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteClassificationPolicy(String classificationPolicyId)"
  name: "deleteClassificationPolicy(String classificationPolicyId)"
  nameWithType: "JobRouterAdministrationClient.deleteClassificationPolicy(String classificationPolicyId)"
  summary: "Delete a classification policy by Id."
  parameters:
  - description: "Id of a classification policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteClassificationPolicy(String classificationPolicyId)"
  desc: "Delete a classification policy by Id."
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteClassificationPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  name: "deleteClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.deleteClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  summary: "Delete a classification policy by Id."
  parameters:
  - description: "Id of a classification policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  desc: "Delete a classification policy by Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteDistributionPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteDistributionPolicy(String distributionPolicyId)"
  name: "deleteDistributionPolicy(String distributionPolicyId)"
  nameWithType: "JobRouterAdministrationClient.deleteDistributionPolicy(String distributionPolicyId)"
  summary: "Delete a distribution policy by Id."
  parameters:
  - description: "Id of a distribution policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteDistributionPolicy(String distributionPolicyId)"
  desc: "Delete a distribution policy by Id."
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteDistributionPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  name: "deleteDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.deleteDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  summary: "Delete a distribution policy by Id."
  parameters:
  - description: "Id of a distribution policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  desc: "Delete a distribution policy by Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteExceptionPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteExceptionPolicy(String exceptionPolicyId)"
  name: "deleteExceptionPolicy(String exceptionPolicyId)"
  nameWithType: "JobRouterAdministrationClient.deleteExceptionPolicy(String exceptionPolicyId)"
  summary: "Deletes a exception policy by Id."
  parameters:
  - description: "Id of an exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteExceptionPolicy(String exceptionPolicyId)"
  desc: "Deletes a exception policy by Id."
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteExceptionPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  name: "deleteExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.deleteExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  summary: "Deletes a exception policy by Id."
  parameters:
  - description: "Id of an exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  desc: "Deletes a exception policy by Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteQueue(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteQueue(String queueId)"
  name: "deleteQueue(String queueId)"
  nameWithType: "JobRouterAdministrationClient.deleteQueue(String queueId)"
  summary: "Deletes a queue by Id."
  parameters:
  - description: "Id of a queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public void deleteQueue(String queueId)"
  desc: "Deletes a queue by Id."
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteQueueWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.deleteQueueWithResponse(String queueId, RequestOptions requestOptions)"
  name: "deleteQueueWithResponse(String queueId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.deleteQueueWithResponse(String queueId, RequestOptions requestOptions)"
  summary: "Deletes a queue by Id."
  parameters:
  - description: "Id of a queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteQueueWithResponse(String queueId, RequestOptions requestOptions)"
  desc: "Deletes a queue by Id."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getClassificationPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getClassificationPolicy(String classificationPolicyId)"
  name: "getClassificationPolicy(String classificationPolicyId)"
  nameWithType: "JobRouterAdministrationClient.getClassificationPolicy(String classificationPolicyId)"
  summary: "Retrieves an existing classification policy by Id."
  parameters:
  - description: "Unique identifier of this policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ClassificationPolicy getClassificationPolicy(String classificationPolicyId)"
  desc: "Retrieves an existing classification policy by Id."
  returns:
    description: "a container for the rules that govern how jobs are classified."
    type: "<xref href=\"com.azure.communication.jobrouter.models.ClassificationPolicy?alt=com.azure.communication.jobrouter.models.ClassificationPolicy&text=ClassificationPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getClassificationPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  name: "getClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.getClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  summary: "Retrieves an existing classification policy by Id."
  parameters:
  - description: "Id of a classification policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getClassificationPolicyWithResponse(String classificationPolicyId, RequestOptions requestOptions)"
  desc: "Retrieves an existing classification policy by Id.\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectorAttachments (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectorAttachments (Optional): [\n          (Optional){\n         }\n     ]\n }\n```"
  returns:
    description: "a container for the rules that govern how jobs are classified along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getDistributionPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getDistributionPolicy(String distributionPolicyId)"
  name: "getDistributionPolicy(String distributionPolicyId)"
  nameWithType: "JobRouterAdministrationClient.getDistributionPolicy(String distributionPolicyId)"
  summary: "Retrieves an existing distribution policy by Id."
  parameters:
  - description: "The unique identifier of the policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DistributionPolicy getDistributionPolicy(String distributionPolicyId)"
  desc: "Retrieves an existing distribution policy by Id."
  returns:
    description: "policy governing how jobs are distributed to workers."
    type: "<xref href=\"com.azure.communication.jobrouter.models.DistributionPolicy?alt=com.azure.communication.jobrouter.models.DistributionPolicy&text=DistributionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getDistributionPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  name: "getDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.getDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  summary: "Retrieves an existing distribution policy by Id."
  parameters:
  - description: "Id of a distribution policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getDistributionPolicyWithResponse(String distributionPolicyId, RequestOptions requestOptions)"
  desc: "Retrieves an existing distribution policy by Id.\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```"
  returns:
    description: "policy governing how jobs are distributed to workers along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getExceptionPolicy(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getExceptionPolicy(String exceptionPolicyId)"
  name: "getExceptionPolicy(String exceptionPolicyId)"
  nameWithType: "JobRouterAdministrationClient.getExceptionPolicy(String exceptionPolicyId)"
  summary: "Retrieves an existing exception policy by Id."
  parameters:
  - description: "The Id of the exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public ExceptionPolicy getExceptionPolicy(String exceptionPolicyId)"
  desc: "Retrieves an existing exception policy by Id."
  returns:
    description: "a policy that defines actions to execute when exception are triggered."
    type: "<xref href=\"com.azure.communication.jobrouter.models.ExceptionPolicy?alt=com.azure.communication.jobrouter.models.ExceptionPolicy&text=ExceptionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getExceptionPolicyWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  name: "getExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.getExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  summary: "Retrieves an existing exception policy by Id."
  parameters:
  - description: "Id of an exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getExceptionPolicyWithResponse(String exceptionPolicyId, RequestOptions requestOptions)"
  desc: "Retrieves an existing exception policy by Id.\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): [\n          (Optional){\n             id: String (Required)\n             trigger (Required): {\n             }\n             actions (Required): [\n                  (Required){\n                     id: String (Optional)\n                 }\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "a policy that defines actions to execute when exception are triggered along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getQueue(java.lang.String)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getQueue(String queueId)"
  name: "getQueue(String queueId)"
  nameWithType: "JobRouterAdministrationClient.getQueue(String queueId)"
  summary: "Retrieves an existing queue by Id."
  parameters:
  - description: "The Id of this queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public RouterQueue getQueue(String queueId)"
  desc: "Retrieves an existing queue by Id."
  returns:
    description: "a queue that can contain jobs to be routed."
    type: "<xref href=\"com.azure.communication.jobrouter.models.RouterQueue?alt=com.azure.communication.jobrouter.models.RouterQueue&text=RouterQueue\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getQueueWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.getQueueWithResponse(String queueId, RequestOptions requestOptions)"
  name: "getQueueWithResponse(String queueId, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.getQueueWithResponse(String queueId, RequestOptions requestOptions)"
  summary: "Retrieves an existing queue by Id."
  parameters:
  - description: "Id of a queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> getQueueWithResponse(String queueId, RequestOptions requestOptions)"
  desc: "Retrieves an existing queue by Id.\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Required)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```"
  returns:
    description: "a queue that can contain jobs to be routed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listClassificationPolicies()"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listClassificationPolicies()"
  name: "listClassificationPolicies()"
  nameWithType: "JobRouterAdministrationClient.listClassificationPolicies()"
  summary: "Retrieves existing classification policies."
  syntax: "public PagedIterable<ClassificationPolicy> listClassificationPolicies()"
  desc: "Retrieves existing classification policies."
  returns:
    description: "a paged collection of classification policies as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.ClassificationPolicy?alt=com.azure.communication.jobrouter.models.ClassificationPolicy&text=ClassificationPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listClassificationPolicies(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listClassificationPolicies(RequestOptions requestOptions)"
  name: "listClassificationPolicies(RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.listClassificationPolicies(RequestOptions requestOptions)"
  summary: "Retrieves existing classification policies."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listClassificationPolicies(RequestOptions requestOptions)"
  desc: "Retrieves existing classification policies.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | ------------------------------------- |\n    | Name        | Type    | Required | Description                           |\n    | maxpagesize | Integer | No       | Number of objects to return per page. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectorAttachments (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectorAttachments (Optional): [\n          (Optional){\n         }\n     ]\n }\n```"
  returns:
    description: "paged collection of ClassificationPolicy items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listDistributionPolicies()"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listDistributionPolicies()"
  name: "listDistributionPolicies()"
  nameWithType: "JobRouterAdministrationClient.listDistributionPolicies()"
  summary: "Retrieves existing distribution policies."
  syntax: "public PagedIterable<DistributionPolicy> listDistributionPolicies()"
  desc: "Retrieves existing distribution policies."
  returns:
    description: "a paged collection of distribution policies as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.DistributionPolicy?alt=com.azure.communication.jobrouter.models.DistributionPolicy&text=DistributionPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listDistributionPolicies(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listDistributionPolicies(RequestOptions requestOptions)"
  name: "listDistributionPolicies(RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.listDistributionPolicies(RequestOptions requestOptions)"
  summary: "Retrieves existing distribution policies."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listDistributionPolicies(RequestOptions requestOptions)"
  desc: "Retrieves existing distribution policies.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | ------------------------------------- |\n    | Name        | Type    | Required | Description                           |\n    | maxpagesize | Integer | No       | Number of objects to return per page. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```"
  returns:
    description: "paged collection of DistributionPolicy items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listExceptionPolicies()"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listExceptionPolicies()"
  name: "listExceptionPolicies()"
  nameWithType: "JobRouterAdministrationClient.listExceptionPolicies()"
  summary: "Retrieves existing exception policies."
  syntax: "public PagedIterable<ExceptionPolicy> listExceptionPolicies()"
  desc: "Retrieves existing exception policies."
  returns:
    description: "paged collection of ExceptionPolicy items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.ExceptionPolicy?alt=com.azure.communication.jobrouter.models.ExceptionPolicy&text=ExceptionPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listExceptionPolicies(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listExceptionPolicies(RequestOptions requestOptions)"
  name: "listExceptionPolicies(RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.listExceptionPolicies(RequestOptions requestOptions)"
  summary: "Retrieves existing exception policies."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listExceptionPolicies(RequestOptions requestOptions)"
  desc: "Retrieves existing exception policies.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | ------------------------------------- |\n    | Name        | Type    | Required | Description                           |\n    | maxpagesize | Integer | No       | Number of objects to return per page. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): [\n          (Optional){\n             id: String (Required)\n             trigger (Required): {\n             }\n             actions (Required): [\n                  (Required){\n                     id: String (Optional)\n                 }\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "paged collection of ExceptionPolicy items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listQueues()"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listQueues()"
  name: "listQueues()"
  nameWithType: "JobRouterAdministrationClient.listQueues()"
  summary: "Retrieves existing queues."
  syntax: "public PagedIterable<RouterQueue> listQueues()"
  desc: "Retrieves existing queues."
  returns:
    description: "a paged collection of queues as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.jobrouter.models.RouterQueue?alt=com.azure.communication.jobrouter.models.RouterQueue&text=RouterQueue\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listQueues(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.listQueues(RequestOptions requestOptions)"
  name: "listQueues(RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.listQueues(RequestOptions requestOptions)"
  summary: "Retrieves existing queues."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<BinaryData> listQueues(RequestOptions requestOptions)"
  desc: "Retrieves existing queues.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | ------------------------------------- |\n    | Name        | Type    | Required | Description                           |\n    | maxpagesize | Integer | No       | Number of objects to return per page. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     etag: String (Required)\n     id: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Required)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```"
  returns:
    description: "paged collection of RouterQueue items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateClassificationPolicy(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateClassificationPolicy(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateClassificationPolicy(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateClassificationPolicy(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a classification policy."
  parameters:
  - description: "Unique identifier of this policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData updateClassificationPolicy(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a classification policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     classificationPolicyId: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectors (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectors (Optional): [\n          (Optional){\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     classificationPolicyId: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectors (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectors (Optional): [\n          (Optional){\n         }\n     ]\n }\n```"
  returns:
    description: "result object."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateClassificationPolicyWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateClassificationPolicyWithResponse(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateClassificationPolicyWithResponse(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateClassificationPolicyWithResponse(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a classification policy."
  parameters:
  - description: "Unique identifier of this policy."
    name: "classificationPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> updateClassificationPolicyWithResponse(String classificationPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a classification policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     classificationPolicyId: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectors (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectors (Optional): [\n          (Optional){\n         }\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     classificationPolicyId: String (Required)\n     name: String (Optional)\n     fallbackQueueId: String (Optional)\n     queueSelectors (Optional): [\n          (Optional){\n         }\n     ]\n     prioritizationRule (Optional): {\n     }\n     workerSelectors (Optional): [\n          (Optional){\n         }\n     ]\n }\n```"
  returns:
    description: "a container for the rules that govern how jobs are classified along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateDistributionPolicy(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateDistributionPolicy(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateDistributionPolicy(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateDistributionPolicy(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a distribution policy."
  parameters:
  - description: "The unique identifier of the policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData updateDistributionPolicy(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a distribution policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     distributionPolicyId: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     distributionPolicyId: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```"
  returns:
    description: "result object."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateDistributionPolicyWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateDistributionPolicyWithResponse(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateDistributionPolicyWithResponse(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateDistributionPolicyWithResponse(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a distribution policy."
  parameters:
  - description: "The unique identifier of the policy."
    name: "distributionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> updateDistributionPolicyWithResponse(String distributionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a distribution policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     distributionPolicyId: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     distributionPolicyId: String (Required)\n     name: String (Optional)\n     offerExpiresAfterSeconds: Double (Optional)\n     mode (Optional): {\n         minConcurrentOffers: Integer (Optional)\n         maxConcurrentOffers: Integer (Optional)\n         bypassSelectors: Boolean (Optional)\n     }\n }\n```"
  returns:
    description: "policy governing how jobs are distributed to workers along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateExceptionPolicy(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateExceptionPolicy(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateExceptionPolicy(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateExceptionPolicy(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a exception policy."
  parameters:
  - description: "The Id of the exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData updateExceptionPolicy(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a exception policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     exceptionPolicyId: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): {\n         String (Optional): {\n             trigger (Required): {\n             }\n             actions (Required): {\n                 String (Required): {\n                 }\n             }\n         }\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     exceptionPolicyId: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): {\n         String (Optional): {\n             trigger (Required): {\n             }\n             actions (Required): {\n                 String (Required): {\n                 }\n             }\n         }\n     }\n }\n```"
  returns:
    description: "result object."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateExceptionPolicyWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateExceptionPolicyWithResponse(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateExceptionPolicyWithResponse(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateExceptionPolicyWithResponse(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a exception policy."
  parameters:
  - description: "The Id of the exception policy."
    name: "exceptionPolicyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The resource instance."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> updateExceptionPolicyWithResponse(String exceptionPolicyId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a exception policy.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     exceptionPolicyId: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): {\n         String (Optional): {\n             trigger (Required): {\n             }\n             actions (Required): {\n                 String (Required): {\n                 }\n             }\n         }\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     exceptionPolicyId: String (Required)\n     name: String (Optional)\n     exceptionRules (Optional): {\n         String (Optional): {\n             trigger (Required): {\n             }\n             actions (Required): {\n                 String (Required): {\n                 }\n             }\n         }\n     }\n }\n```"
  returns:
    description: "a policy that defines actions to execute when exception are triggered along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateQueue(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateQueue(String queueId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateQueue(String queueId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateQueue(String queueId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a queue."
  parameters:
  - description: "The Id of this queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "RouterQueue resource."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BinaryData updateQueue(String queueId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a queue.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     queueId: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Optional)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     queueId: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Optional)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```"
  returns:
    description: "a queue that can contain jobs to be routed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateQueueWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.communication.jobrouter.JobRouterAdministrationClient.updateQueueWithResponse(String queueId, BinaryData resource, RequestOptions requestOptions)"
  name: "updateQueueWithResponse(String queueId, BinaryData resource, RequestOptions requestOptions)"
  nameWithType: "JobRouterAdministrationClient.updateQueueWithResponse(String queueId, BinaryData resource, RequestOptions requestOptions)"
  summary: "Updates a queue."
  parameters:
  - description: "The Id of this queue."
    name: "queueId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "RouterQueue resource."
    name: "resource"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<BinaryData> updateQueueWithResponse(String queueId, BinaryData resource, RequestOptions requestOptions)"
  desc: "Updates a queue.\n\n**Header Parameters**\n\n    | ------------------- | -------------- | -------- | ------------------------------------------------------------------------------- |\n    | Name                | Type           | Required | Description                                                                     |\n    | If-Match            | String         | No       | The request should only proceed if an entity matches this string.               |\n    | If-Unmodified-Since | OffsetDateTime | No       | The request should only proceed if the entity was not modified after this time. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     queueId: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Optional)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     queueId: String (Required)\n     name: String (Optional)\n     distributionPolicyId: String (Optional)\n     labels (Optional): {\n         String: Object (Optional)\n     }\n     exceptionPolicyId: String (Optional)\n }\n```"
  returns:
    description: "a queue that can contain jobs to be routed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous JobRouterAdministrationClient type."
metadata: {}
package: "com.azure.communication.jobrouter"
artifact: com.azure:azure-communication-jobrouter:1.1.10
