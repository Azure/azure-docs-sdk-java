### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates*"
fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates"
name: "listPropertiesOfCertificates"
nameWithType: "CertificateClient.listPropertiesOfCertificates"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates()"
  name: "listPropertiesOfCertificates()"
  nameWithType: "CertificateClient.listPropertiesOfCertificates()"
  summary: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient.listPropertiesOfCertificates()) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate with name %s and secret id %s\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getSecretId());\n }\n```"
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificates()"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)"
  name: "listPropertiesOfCertificates(boolean includePending, Context context)"
  nameWithType: "CertificateClient.listPropertiesOfCertificates(boolean includePending, Context context)"
  summary: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateVersion(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CertificateClient#getCertificateVersion(String, String)\"></xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificate\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> with all its properties excluding the policy.\n\n```java\nfor (CertificateProperties certificateProperties : certificateClient\n     .listPropertiesOfCertificates(true, new Context(key1, value1))) {\n     KeyVaultCertificate certificateWithAllProperties = certificateClient\n         .getCertificateVersion(certificateProperties.getName(), certificateProperties.getVersion());\n     System.out.printf(\"Received certificate with name %s and secret id %s\",\n         certificateWithAllProperties.getProperties().getName(),\n         certificateWithAllProperties.getSecretId());\n }\n```"
  parameters:
  - description: "indicate if pending certificates should be included in the results."
    name: "includePending"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<CertificateProperties> listPropertiesOfCertificates(boolean includePending, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"certificate\"></xref> for all the certificates in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.1.4
