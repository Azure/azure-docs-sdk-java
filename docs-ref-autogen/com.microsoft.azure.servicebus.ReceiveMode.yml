### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.servicebus.ReceiveMode
  id: ReceiveMode
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus
  children:
  - com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK
  - com.microsoft.azure.servicebus.ReceiveMode.RECEIVEANDDELETE
  - com.microsoft.azure.servicebus.ReceiveMode.valueOf(java.lang.String)
  - com.microsoft.azure.servicebus.ReceiveMode.values()
  langs:
  - java
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode
  type: Enum
  package: com.microsoft.azure.servicebus
  summary: Enumeration to represent the two receive modes Azure Service Bus supports.
  syntax:
    content: public enum ReceiveMode extends Enum<ReceiveMode>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK
  id: PEEKLOCK
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.ReceiveMode
  langs:
  - java
  name: PEEKLOCK
  nameWithType: ReceiveMode.PEEKLOCK
  fullName: com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK
  type: Field
  package: com.microsoft.azure.servicebus
  summary: >-
    In this mode, received message is not deleted from the queue or subscription, instead it is temporarily locked to the receiver, making it invisible to other receivers. Then the service waits for one of the three events

     *  If the receiver processes the message successfully, it calls `complete` and the message will be deleted.
     *  If the receiver decides that it can't process the message successfully, it calls `abandon` and the message will be unlocked and made available to other receivers.
     *  If the receiver wants to defer the processing of the message to a later point in time, it calls `defer` and the message will be deferred. A deferred can only be received by its sequence number.
     *  If the receiver wants to dead-letter the message, it calls `deadLetter` and the message will be moved to a special sub-queue called deadletter queue.
     *  If the receiver calls neither of these methods within a configurable period of time (by default, 60 seconds), the service assumes the receiver has failed. In this case, it behaves as if the receiver had called `abandon`, making the message available to other receivers
  syntax:
    content: public static final ReceiveMode PEEKLOCK
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.ReceiveMode.RECEIVEANDDELETE
  id: RECEIVEANDDELETE
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.ReceiveMode
  langs:
  - java
  name: RECEIVEANDDELETE
  nameWithType: ReceiveMode.RECEIVEANDDELETE
  fullName: com.microsoft.azure.servicebus.ReceiveMode.RECEIVEANDDELETE
  type: Field
  package: com.microsoft.azure.servicebus
  summary: In this mode, received message is removed from the queue or subscription and immediately deleted. This option is simple, but if the receiver crashes before it finishes processing the message, the message is lost. Because it's been removed from the queue, no other receiver can access it.
  syntax:
    content: public static final ReceiveMode RECEIVEANDDELETE
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.ReceiveMode.ReceiveMode()
  id: ReceiveMode()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.ReceiveMode
  langs:
  - java
  name: ReceiveMode()
  nameWithType: ReceiveMode.ReceiveMode()
  fullName: com.microsoft.azure.servicebus.ReceiveMode.ReceiveMode()
  overload: com.microsoft.azure.servicebus.ReceiveMode.ReceiveMode*
  type: Constructor
  package: com.microsoft.azure.servicebus
  syntax:
    content: private ReceiveMode()
- uid: com.microsoft.azure.servicebus.ReceiveMode.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.ReceiveMode
  langs:
  - java
  name: valueOf(String name)
  nameWithType: ReceiveMode.valueOf(String name)
  fullName: com.microsoft.azure.servicebus.ReceiveMode.valueOf(String name)
  overload: com.microsoft.azure.servicebus.ReceiveMode.valueOf*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: public static ReceiveMode valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode
- uid: com.microsoft.azure.servicebus.ReceiveMode.values()
  id: values()
  artifact: com.microsoft.azure:azure-servicebus:3.4.0
  parent: com.microsoft.azure.servicebus.ReceiveMode
  langs:
  - java
  name: values()
  nameWithType: ReceiveMode.values()
  fullName: com.microsoft.azure.servicebus.ReceiveMode.values()
  overload: com.microsoft.azure.servicebus.ReceiveMode.values*
  type: Method
  package: com.microsoft.azure.servicebus
  syntax:
    content: public static ReceiveMode[] values()
    return:
      type: com.microsoft.azure.servicebus.ReceiveMode[]
references:
- uid: com.microsoft.azure.servicebus.ReceiveMode.ReceiveMode*
  name: ReceiveMode
  nameWithType: ReceiveMode.ReceiveMode
  fullName: com.microsoft.azure.servicebus.ReceiveMode.ReceiveMode
  package: com.microsoft.azure.servicebus
- uid: com.microsoft.azure.servicebus.ReceiveMode[]
  spec.java:
  - uid: com.microsoft.azure.servicebus.ReceiveMode
    name: ReceiveMode
    fullName: com.microsoft.azure.servicebus.ReceiveMode
  - name: '[]'
    fullName: '[]'
- uid: com.microsoft.azure.servicebus.ReceiveMode.values*
  name: values
  nameWithType: ReceiveMode.values
  fullName: com.microsoft.azure.servicebus.ReceiveMode.values
  package: com.microsoft.azure.servicebus
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.servicebus.ReceiveMode.valueOf*
  name: valueOf
  nameWithType: ReceiveMode.valueOf
  fullName: com.microsoft.azure.servicebus.ReceiveMode.valueOf
  package: com.microsoft.azure.servicebus
- uid: java.lang.Enum<com.microsoft.azure.servicebus.ReceiveMode>
  name: Enum<ReceiveMode>
  nameWithType: Enum<ReceiveMode>
  fullName: java.lang.Enum<com.microsoft.azure.servicebus.ReceiveMode>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
